<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd0e6eb123f9b6aae2230f80156e89d3042cb7ee" /><Meta Name="ms.sourcegitcommit" Value="0b4deef443af9fe6334aa34b8a17190223bf0486" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/14/2019" /><Meta Name="ms.locfileid" Value="65609710" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fournit l’accès à la fonctionnalité d’un moteur de synthèse vocale installé.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous créez un nouveau <xref:System.Speech.Synthesis.SpeechSynthesizer> de l’objet, il utilise la voix de système par défaut. Pour configurer le <xref:System.Speech.Synthesis.SpeechSynthesizer> pour utiliser une des voix de synthèse vocale (conversion texte-voix) vocale installé, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> (méthode). Pour obtenir des informations sur les voix est installées, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode) et le <xref:System.Speech.Synthesis.VoiceInfo> classe.  
  
 Cette classe fournit également un contrôle sur les aspects suivants de la synthèse vocale :  
  
-   Pour configurer la sortie pour le <xref:System.Speech.Synthesis.SpeechSynthesizer> de l’objet, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> méthodes.  
  
-   Pour générer le discours, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> (méthode). Le <xref:System.Speech.Synthesis.SpeechSynthesizer> peuvent produire de reconnaissance vocale à partir du texte, un <xref:System.Speech.Synthesis.Prompt> ou <xref:System.Speech.Synthesis.PromptBuilder> objet, ou à partir de [Markup langage SSML (Speech Synthesis) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).  
  
-   Pour suspendre et reprendre la synthèse vocale, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> et <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> méthodes.  
  
-   Pour ajouter ou supprimer des lexiques, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> et <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> méthodes. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> pouvez utiliser un ou plusieurs des lexiques pour guider la prononciation des mots.  
  
-   Pour modifier la remise de la sortie vocale, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> et <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> propriétés.  
  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche des événements lorsqu’elle rencontre certaines fonctionnalités dans les invites : (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>). Elle déclenche également des événements qui signalent au démarrage (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) et de fin (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) de parler des opérations et sur la modification de la voix (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).  
  
> [!NOTE]
>  Appelez toujours <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> avant de libérer votre dernière référence à <xref:System.Speech.Synthesis.SpeechSynthesizer>. Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Speech.Synthesis.SpeechSynthesizer> de l'objet <xref:System.Object.Finalize%2A>.  
  
   
  
## Examples  
 L’exemple suivant fait partie d’une application console qui initialise un <xref:System.Speech.Synthesis.SpeechSynthesizer> de l’objet et il parle une chaîne.  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)">Synthèse vocale</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous initialisez un nouveau <xref:System.Speech.Synthesis.SpeechSynthesizer> instance, elle utilise la voix de système par défaut. Pour configurer le <xref:System.Speech.Synthesis.SpeechSynthesizer> pour utiliser une des voix de synthèse vocale (conversion texte-voix) vocale installé, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> (méthode). Pour obtenir des informations sur les voix est installées, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode) et le <xref:System.Speech.Synthesis.VoiceInfo> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">L’emplacement des informations de lexique.</param>
        <param name="mediaType">Le type de média du lexique. Les valeurs de type de média ne respectent pas la casse.</param>
        <summary>Ajoute un lexique à la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un lexique prononciation est une collection de mots ou expressions ainsi que des prononciations, se composent de lettres et de caractères à partir d’un alphabet phonétique pris en charge. Vous pouvez utiliser un lexique pour spécifier des prononciations personnalisées pour le vocabulaire spécialisé dans votre application.  
  
 Prononciations spécifiées dans un fichier de lexique externes sont prioritaires sur les prononciations du lexique interne le synthétiseur vocal ou un dictionnaire. Toutefois, prononciations spécifiées inline dans les invites créés avec un de le <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, ou <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> méthodes sont prioritaires sur prononciations spécifiées dans n’importe quel lexique. Inline prononciations s’appliquent uniquement à une seule occurrence d’un mot. Consultez [lexiques et Alphabets phonétiques](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) pour plus d’informations.  
  
 Vous pouvez ajouter plusieurs lexiques à un <xref:System.Speech.Synthesis.SpeechSynthesizer> objet. Deux valeurs sont actuellement pris en charge pour le `mediaType` paramètre :  
  
-   La valeur `application/pls+xml` indique que le lexique est conforme à la [prononciation lexique spécification (PLS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201766). Voici le format préféré à utiliser.  
  
-   La valeur `application/vdn.ms-sapi-lex` indique que le format de lexique est un lexique non compressé, ce qui est un format propriétaire de Microsoft. Il s’agit d’un format hérité et nous vous recommandons d’utiliser le format PLS décrit ci-dessus.  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de l’ajout et la suppression d’un lexique qui contient une prononciation personnalisée pour le mot « bleu ». Le lexique définit la prononciation de « bleu » à son comme « bleep ». Même si le lexique est chargé, le synthétiseur vocal utilise la prononciation définie dans le lexique.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 Voici le contenu du fichier de lexique Blue.pls :  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsque le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> rencontre un signet dans une invite de commandes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche cet événement lors du traitement de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthodes. Pour plus d’informations sur les données associées à l’événement, consultez <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.  
  
 Vous pouvez ajouter des signets à l’aide de la <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant crée une invite qui inclut les deux signets et envoie la sortie vers un fichier WAV pour la lecture. Le gestionnaire pour le <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> événement écrit le nom du signet et sa position dans le flux audio lorsque l’événement a été déclenché à la console.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime l’objet <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> et libère les ressources utilisées pendant la session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Agit comme un dispositif de protection pour nettoyer les ressources dans le cas où la <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> méthode n’est pas appelée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient l’invite que le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> parle.</summary>
        <returns>Retourne l’objet d’invite qui est actuellement énoncé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne la collection de la voix de synthèse () voix actuellement installées sur le système.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix (moteurs pour la synthèse vocale) qu’il trouve dans le Registre respecte certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne toutes les vocale installées voix de synthèse vocale (conversion texte-voix).</summary>
        <returns>Retourne une collection en lecture seule des voix actuellement installées sur le système.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une voix est un moteur de synthèse vocale (conversion texte-voix ou TTS) est installé sur le système.  
  
   
  
## Examples  
 L’exemple suivant fait partie d’une application console qui initialise un <xref:System.Speech.Synthesis.SpeechSynthesizer> de l’objet et génère à la console une liste des voix installées (moteurs de synthèse vocale) et montre les informations qui est disponibles pour chaque voix.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Les paramètres régionaux que la voix doit prendre en charge.</param>
        <summary>Retourne toutes les voix de synthèse vocale (conversion de texte par synthèse vocale) installées qui prennent en charge des paramètres régionaux spécifiques.</summary>
        <returns>Retourne une collection en lecture seule des voix actuellement installées sur le système qui prennent en charge les paramètres régionaux spécifiés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Absence de la prise en charge de voix installées les paramètres régionaux spécifiés, cette méthode retourne une collection vide.  
  
 Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides. Pour effectuer la synthèse vocale à l’aide de la langue spécifiée dans la propriété de la Culture, un moteur de synthèse vocale qui prend en charge de ce code de langue-pays doit être installé. Les moteurs de synthèse vocale fourni avec Microsoft Windows 7 fonctionnent avec les codes de langue-pays suivants :  
  
-   en-US. Anglais (États-Unis)  
  
-   zh-CN. Chinois (Chine)  
  
-   zh-TW. Chinois (Taïwan)  
  
 Codes de langue à deux lettres tels que « fr » sont également autorisées.  
  
   
  
## Examples  
 L’exemple suivant fait partie d’une application console qui initialise un <xref:System.Speech.Synthesis.SpeechSynthesizer> de l’objet et fournit en sortie à la console une liste des voix installées qui prennent en charge les paramètres régionaux en-US.  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Suspend le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsqu’un phonème est atteint.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un phonème est un composant de base du langage écrit, en général une lettre d’un caractère alphabétique (ou la combinaison de deux lettres) qui représente un ou plusieurs sons distinctes. Par exemple, la lettre « c » est un phonème peut sembler comme « s » dans « on », ou comme « k » dans « catch ». Un mot écrit est un assemblage de phonèmes. Modification d’un mot d’un phonème modifie son orthographe.  
  
 Un <xref:System.Speech.Synthesis.SpeechSynthesizer> instance génère un <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> événement pour chaque partie d’un mot qui constitue un phonème. Par exemple, pour le mot « thème » génère trois <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> événements ; l’autre pour le son de « th », un pour le son de « e » et un pour le son de « m » (me).  
  
 Pour un exemple et les données associées à l’événement d’informations, consultez <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la vitesse d’énonciation du <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <value>Retourne la vitesse d’énonciation du <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet, à partir de -10 à 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant explique une chaîne à la vitesse d’énonciation la valeur -2.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">L’emplacement du document lexique.</param>
        <summary>Supprime un lexique à partir de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir un exemple, consultez <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reprend le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> après qu’il a été suspendu de l’objet.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Le nom de la voix à sélectionner.</param>
        <summary>Sélectionne une voix spécifique par nom.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthode et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms d’installée voix de synthèse vocale (TTS) que vous pouvez sélectionner. Pour sélectionner une voix, passer tout le contenu de la <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> propriété comme argument pour le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (méthode). Le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet sélectionne la première voix installée contenant `name` dans la voix <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> propriété. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> effectue une comparaison respectant la casse, de la sous-chaîne pour déterminer si la voix correspond à la `name`.  
  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 Pour sélectionner une voix par sexe, d’âge ou de paramètres régionaux, utilisez une de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> méthodes.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sélectionne une voix avec des caractéristiques spécifiques.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthode et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms d’installée voix de synthèse vocale (TTS) que vous pouvez sélectionner. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet sélectionne la première voix installée qui correspond à des caractéristiques indiquées.  
  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 Pour sélectionner une voix par nom, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (méthode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">Genre de la voix à sélectionner.</param>
        <summary>Sélectionne une voix avec un type spécifique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthode et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms d’installée voix de synthèse vocale (TTS) que vous pouvez sélectionner. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet sélectionne la première voix installée dont <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> propriété correspondances le `gender` paramètre.  
  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 Pour sélectionner une voix selon d’autres caractéristiques, consultez l’autre <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> méthodes.  
  
 Pour sélectionner une voix par nom, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">Genre de la voix à sélectionner.</param>
        <param name="age">Âge de la voix à sélectionner.</param>
        <summary>Sélectionne une voix avec un type spécifique et d’un âge.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthode et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms d’installée voix de synthèse vocale (TTS) que vous pouvez sélectionner. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet sélectionne la première voix installée dont <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> et <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> propriétés correspondent le `gender` et `age` paramètres.  
  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 Pour sélectionner une voix selon d’autres caractéristiques, consultez l’autre <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> méthodes.  
  
 Pour sélectionner une voix par nom, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">Genre de la voix à sélectionner.</param>
        <param name="age">Âge de la voix à sélectionner.</param>
        <param name="voiceAlternate">La position de la voix à sélectionner.</param>
        <summary>Sélectionne une voix avec un type spécifique et d’un âge, selon la position dans laquelle les voix sont classées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> méthode et <xref:System.Speech.Synthesis.VoiceInfo> classe pour obtenir les noms d’installée voix de synthèse vocale (TTS) que vous pouvez sélectionner. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> recherche installé voix dont la propriété de l’objet <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> et <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> propriétés correspondent le `gender` et `age` paramètres. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> compte les correspondances de recherche, elle retourne la voix lorsque le nombre est égal à la `voiceAlternate` paramètre.  
  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 Pour sélectionner une voix selon d’autres caractéristiques, consultez l’autre <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> surcharges.  
  
 Pour sélectionner une voix par nom, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender">Genre de la voix à sélectionner.</param>
        <param name="age">Âge de la voix à sélectionner.</param>
        <param name="voiceAlternate">La position de la voix à sélectionner.</param>
        <param name="culture">Les paramètres régionaux de la voix à sélectionner.</param>
        <summary>Sélectionne une voix avec un type spécifique, l’âge et paramètres régionaux, selon la position dans laquelle les voix sont classées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> recherche voix dont la propriété de l’objet <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, et <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> propriétés correspondent le `gender`, `age`, et `culture` paramètres. Le <xref:System.Speech.Synthesis.SpeechSynthesizer> compte les correspondances de recherche, elle retourne la voix lorsque le nombre est égal à la `voiceAlternate` paramètre.  
  
 Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides. Pour effectuer la synthèse vocale à l’aide de la langue spécifiée dans le `culture` paramètre, un moteur de synthèse vocale qui prend en charge que le code de langue-pays doit être installé. Les moteurs de synthèse vocale fourni avec Microsoft Windows 7 fonctionnent avec les codes de langue-pays suivants :  
  
-   en-US. Anglais (États-Unis)  
  
-   zh-CN. Chinois (Chine)  
  
-   zh-TW. Chinois (Taïwan)  
  
 Codes de langue à deux lettres tels que « fr » sont également autorisées.  
  
 Lorsqu’une application appelle <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, la méthode vérifie que chacun des voix qu’il trouve dans le Registre répond à certains critères minimum. Pour n’importe quel voice qui échoue la vérification, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> définit son <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété `False`. Une application ne peut pas sélectionner une voix dont <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété est `False`. En règle générale, les applications ne définissent pas d’une voix <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propriété.  
  
 Pour sélectionner une voix selon d’autres caractéristiques, consultez l’autre <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> surcharges.  
  
 Pour sélectionner une voix par nom, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination">Le flux de données à laquelle ajouter la sortie de synthèse.</param>
        <param name="formatInfo">Le format à utiliser pour la sortie de synthèse.</param>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet pour ajouter la sortie vers un flux audio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> pour libérer le <xref:System.Speech.Synthesis.SpeechSynthesizer>de référence dans le flux.  
  
 Pour les autres options de configuration de sortie, consultez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet pour envoyer la sortie vers le périphérique audio par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la **son** fenêtre dans le Windows **le panneau de configuration** pour configurer le périphérique audio par défaut pour l’ordinateur.  
  
 Pour les autres options de configuration de sortie, consultez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> méthodes.  
  
   
  
## Examples  
 L’exemple suivant utilise le synthétiseur de parler dans une expression à la sortie audio par défaut.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet ne pas sortie opérations de synthèse vers un appareil, un fichier ou un flux.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour libérer le <xref:System.Speech.Synthesis.SpeechSynthesizer>de référence à un fichier ou un flux. Pour obtenir un exemple, consultez <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>.  
  
 Pour les autres options de configuration de sortie, consultez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet pour ajouter la sortie à un fichier de format audio Waveform.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour libérer le <xref:System.Speech.Synthesis.SpeechSynthesizer>référence de le dans le fichier, vous devez reconfigurer le <xref:System.Speech.Synthesis.SpeechSynthesizer>de sortie, par exemple, en appelant <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Pour les autres options de configuration de sortie, consultez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès au fichier.</param>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet pour ajouter la sortie vers un fichier qui contient les données audio au format Waveform.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour configurer la sortie et spécifiez le format audio, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise une instance de <xref:System.Media.SoundPlayer> pour lire une invite de commandes a été sortie vers un fichier .wav. Étant donné que le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> appel est asynchrone, le <xref:System.Media.SoundPlayer> instance est créée (et le <xref:System.Media.SoundPlayer.Play%2A> méthode appelée) dans le Gestionnaire de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path">Chemin d'accès au fichier.</param>
        <param name="formatInfo">Les informations de format audio.</param>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet pour ajouter la sortie à un fichier de format audio Waveform dans un format spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant spécifie le format de la sortie de la synthèse vocale et les envoie à un fichier WAV.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination">Le flux de données à laquelle ajouter la sortie de synthèse.</param>
        <summary>Configure le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet pour ajouter la sortie dans un flux qui contient des données audio au format Waveform.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour libérer le <xref:System.Speech.Synthesis.SpeechSynthesizer>référence de le dans le flux, reconfigure le synthétiseur de sortie, par exemple, en appelant <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Pour les autres options de configuration de sortie, consultez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, et <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> méthodes.  
  
   
  
## Examples  
 L’exemple suivant génère une expression dans un flux WAV.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Génère la sortie vocale de façon synchrone à partir d’une chaîne, un <see cref="T:System.Speech.Synthesis.Prompt" /> objet, ou un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> méthodes synthèse vocale de façon synchrone. Les méthodes ne retournent pas jusqu'à ce que le contenu de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> instance a été complètement parlée. Il s’agit de la façon la plus simple pour la synthèse vocale. Toutefois, si votre application doit effectuer des tâches pendant l’énonciation, par exemple texte en surbrillance, l’animation de peinture, les contrôles de moniteur ou autres tâches, utilisent le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> méthodes ou les <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthode pour la synthèse vocale de façon asynchrone.  
  
 Pendant un appel à cette méthode, le <xref:System.Speech.Synthesis.SpeechSynthesizer> peut déclencher des événements suivants :  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Déclenché lorsque l’état d’énonciation du synthétiseur change.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Déclenché lorsque le synthétiseur commence à générer la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Déclenché chaque fois que le synthétiseur atteint une lettre ou une combinaison de lettres qui constituent un son discrète de la voix dans un langage.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Déclenché chaque fois que le synthétiseur termine en parlant d’un mot.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Déclenché chaque fois que la restitution vocale nécessite une modification dans la position de la bouche ou les visages muscles utilisés pour produire la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Déclenché lorsque le synthétiseur rencontre un signet dans une invite de commandes.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Déclenché lorsque la voix pour le synthétiseur change.  
  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> ne déclenche pas le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement lors du traitement de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Le contenu à lire.</param>
        <summary>Énonce de façon synchrone le contenu d’un <see cref="T:System.Speech.Synthesis.Prompt" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour parler de façon asynchrone le contenu d’un <xref:System.Speech.Synthesis.Prompt> de l’objet, utilisez <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Synthesis.Prompt> objet à partir d’une chaîne et transmet l’objet en tant qu’argument à la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> (méthode).  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Le contenu à lire.</param>
        <summary>Énonce de façon synchrone le contenu d’un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour parler de façon asynchrone le contenu d’un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet, utilisez <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> objet à partir d’une chaîne et transmet l’objet en tant qu’argument à la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> (méthode).  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Texte à lire.</param>
        <summary>Énonce de façon synchrone le contenu d’une chaîne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De façon synchrone prononciation une chaîne qui contient un balisage SSML, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> (méthode). Pour façon asynchrone énoncer le contenu d’une chaîne, utilisez la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> (méthode).  
  
   
  
## Examples  
 Comme indiqué dans l’exemple suivant, la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> méthode permet de générer le discours de sortie de façon synchrone la plus simple.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Génère la sortie vocale de façon asynchrone à partir d’une chaîne, un <see cref="T:System.Speech.Synthesis.Prompt" /> objet, ou un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> méthodes synthèse vocale de façon asynchrone. Les méthodes retournent immédiatement sans attendre que le contenu de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> objet à la fin de parler. Utilisez <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> si votre application a besoin effectuer des tâches en parlant, par exemple mettre en surbrillance de texte, peindre l’animation, les contrôles de moniteur ou d’autres tâches.  
  
 Pendant un appel à cette méthode, le <xref:System.Speech.Synthesis.SpeechSynthesizer> peut déclencher des événements suivants :  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Déclenché lorsque l’état d’énonciation du synthétiseur change.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Déclenché lorsque le synthétiseur commence à générer la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Déclenché chaque fois que le synthétiseur atteint une lettre ou une combinaison de lettres qui constituent un son discrète de la voix dans un langage.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Déclenché chaque fois que le synthétiseur termine en parlant d’un mot.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Déclenché chaque fois que la restitution vocale nécessite une modification dans la position de la bouche ou les visages muscles utilisés pour produire la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Déclenché lorsque le synthétiseur rencontre un signet dans une invite de commandes.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Déclenché lorsque la voix pour le synthétiseur change.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Déclenché lorsque le synthétiseur termine un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> opération.  
  
 Si votre application n’a pas besoin effectuer des tâches en parlant, vous pouvez utiliser la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> méthodes ou les <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> méthode pour la synthèse vocale de façon synchrone.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Le contenu à lire.</param>
        <summary>Énonce de façon asynchrone le contenu d’un <see cref="T:System.Speech.Synthesis.Prompt" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez annuler la lecture asynchrone d’une invite de commandes avec la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> (méthode).  
  
 Pour parler de façon synchrone le contenu d’un <xref:System.Speech.Synthesis.Prompt> de l’objet, utilisez <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Synthesis.Prompt> objet à partir d’une chaîne et transmet l’objet en tant qu’argument à la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> (méthode).  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Le contenu à lire.</param>
        <summary>Énonce de façon asynchrone le contenu d’un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objet.</summary>
        <returns>Retourne l’objet qui contient le contenu à lire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour parler de façon synchrone le contenu d’un <xref:System.Speech.Synthesis.PromptBuilder> de l’objet, utilisez <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Synthesis.PromptBuilder> objet à partir d’une chaîne et transmet l’objet en tant qu’argument à la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> (méthode).  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Texte à lire.</param>
        <summary>Énonce de façon asynchrone le contenu d’une chaîne.</summary>
        <returns>Retourne l’objet qui contient le contenu à lire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour parler façon asynchrone une chaîne qui contient un balisage SSML, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> (méthode). Pour façon synchrone énoncer le contenu d’une chaîne, utilisez la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> (méthode). Vous pouvez annuler la lecture asynchrone d’une invite de commandes avec la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> (méthode).  
  
   
  
## Examples  
 Comme indiqué dans l’exemple suivant, la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> méthode permet de générer le discours de sortie de façon asynchrone la plus simple.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Le contenu pour lequel annuler une opération de lecture.</param>
        <summary>Annule l’opération asynchrone de synthèse d’une invite en file d’attente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également utiliser cette méthode d’annulation asynchrone parler d’opération pour les éléments suivants :  
  
-   Le contenu d’un <xref:System.String> spécifié par un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> (méthode).  
  
-   Le contenu d’un <xref:System.Speech.Synthesis.PromptBuilder> spécifié par un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> (méthode).  
  
-   Le contenu d’un <xref:System.String> contenant SSML spécifié par un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> (méthode).  
  
 Lorsque vous appelez <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech crée un <xref:System.Speech.Synthesis.Prompt> de l’objet et les remplit avec le contenu du paramètre de la méthode et retourne le <xref:System.Speech.Synthesis.Prompt> objet. Si vous conservez une copie de retourné <xref:System.Speech.Synthesis.Prompt>, vous pouvez passer dans <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> pour annuler l’énonciation du contenu spécifié dans un <xref:System.String> ou un <xref:System.Speech.Synthesis.PromptBuilder> objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annule les opérations de synthèse vocale tout en file d’attente, asynchrone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre une utilisation de <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> pour annuler la lecture asynchrone d’une invite de commandes, afin qu’une nouvelle invite peut être prononcée. Notez que le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement déclenche lorsqu’un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> opération est annulée.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsque le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> termine la lecture d’une invite de commandes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement à la fin d’une de le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthodes.  
  
 Le <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> classe ne possède aucune propriété et ne retourne pas de données à partir de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement. Il est fourni pour permettre aux auteurs d’applications écrire des gestionnaires d’événements pour le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché après que le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> parle de chaque mot d’une invite de commandes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche cet événement pour chaque nouveau mot qui il participe dans une invite de commandes à l’aide de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthodes. Pour un exemple et plus d’informations sur les données associées à l’événement, consultez <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">La chaîne SSML à lire.</param>
        <summary>Énonce de façon synchrone un <see cref="T:System.String" /> qui contient un balisage SSML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contenu de la `textToSpeak` paramètre doit inclure un `speak` élément et doit être conforme à la [Markup langage SSML (Speech Synthesis) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763). Pour plus d’informations, consultez [référence du langage Speech Synthesis Markup](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Pour parler façon asynchrone une chaîne qui contient un balisage SSML, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> (méthode). Vous pouvez utiliser <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> pour lancer la lecture synchrone d’une chaîne qui ne contient-elle pas de balisage SSML.  
  
 Pendant un appel à cette méthode, le <xref:System.Speech.Synthesis.SpeechSynthesizer> peut déclencher des événements suivants :  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Déclenché lorsque l’état d’énonciation du synthétiseur change.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Déclenché lorsque le synthétiseur commence à générer la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Déclenché chaque fois que le synthétiseur atteint une lettre ou une combinaison de lettres qui constituent un son discrète de la voix dans un langage.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Déclenché chaque fois que le synthétiseur termine en parlant d’un mot.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Déclenché chaque fois que la restitution vocale nécessite une modification dans la position de la bouche ou les visages muscles utilisés pour produire la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Déclenché lorsque le synthétiseur rencontre un signet dans une invite de commandes.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Déclenché lorsque la voix pour le synthétiseur change.  
  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> ne déclenche pas le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> événement lors du traitement de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant affiche la date 1/29/2009 en tant que date, mois, jour, ordre de l’année.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">Le balisage SMML à utiliser.</param>
        <summary>Énonce de façon asynchrone un <see cref="T:System.String" /> qui contient un balisage SSML.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le contenu de la `textToSpeak` paramètre doit inclure un `speak` élément et doit être conforme à la [Markup langage SSML (Speech Synthesis) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201763). Pour plus d’informations, consultez [référence du langage Speech Synthesis Markup](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 De façon synchrone prononciation une chaîne qui contient un balisage SSML, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> (méthode). Vous pouvez utiliser <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> pour lancer la lecture asynchrone d’une chaîne qui ne contient-elle pas de balisage SSML.  
  
 Pendant un appel à cette méthode, le <xref:System.Speech.Synthesis.SpeechSynthesizer> peut déclencher des événements suivants :  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Déclenché lorsque l’état d’énonciation du synthétiseur change.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Déclenché lorsque le synthétiseur commence à générer la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Déclenché chaque fois que le synthétiseur atteint une lettre ou une combinaison de lettres qui constituent un son discrète de la voix dans un langage.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Déclenché chaque fois que le synthétiseur termine en parlant d’un mot.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Déclenché chaque fois que la restitution vocale nécessite une modification dans la position de la bouche ou les visages muscles utilisés pour produire la reconnaissance vocale.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Déclenché lorsque le synthétiseur rencontre un signet dans une invite de commandes.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Déclenché lorsque la voix pour le synthétiseur change.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Déclenché lorsque le synthétiseur termine le traitement une <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> opération.  
  
 Si vous devez pas effectuer des tâches pendant l’énonciation dos de votre application, vous pouvez utiliser la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> méthode pour la synthèse vocale de façon synchrone.  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsque le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> commence la lecture d’une invite de commandes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche cet événement lorsqu’il commence le traitement d’une invite de commandes à l’aide de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> méthodes.  
  
 Le <xref:System.Speech.Synthesis.SpeakStartedEventArgs> classe ne possède aucune propriété et ne retourne pas de données à partir de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> événement. Il est fourni pour permettre aux auteurs d’applications écrire des gestionnaires d’événements pour le <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’état de d’énonciation actuel le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <value>Retourne l’état d’énonciation actuel de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir le nouvel état de la <xref:System.Speech.Synthesis.SpeechSynthesizer> après ces modifications, utilisez la <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> propriété de la <xref:System.Speech.Synthesis.StateChangedEventArgs> classe.  
  
   
  
## Examples  
 L’exemple suivant illustre l’état de la <xref:System.Speech.Synthesis.SpeechSynthesizer> avant, pendant et après la lecture d’une invite de commandes.  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsque l’état de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Synthesis.SpeechSynthesizer> déclenche cet événement lorsque sa parlant <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> modifications. Pour un exemple et plus d’informations sur les données associées à l’événement, consultez <xref:System.Speech.Synthesis.StateChangedEventArgs>.  
  
 Pour suspendre et reprendre la synthèse vocale, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> et <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsqu’un viseme est atteint.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un viseme est la position de base de la bouche et face prononciation d’un phonème. Visemes sont des représentations visuelles des phonèmes.  
  
 System.Speech prend en charge 21 visemes anglais (États-Unis), chacun d’eux correspondant à un ou plusieurs des phonèmes.  <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> événements sont déclenchés lorsqu’un phonème nouveau atteinte a un visème différents correspondant à phonème précédent atteint. Dans la mesure où certains visemes représentent plusieurs phonème, un <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> événement n’est pas généré si le phonème suivant atteint correspond au même visème comme phonème précédent. Par exemple, pour les mots « cette zone », un <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> événement est déclenché pour le « s » dans « this » et « z » dans « zone ». Toutefois, un <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> événement n’est pas déclenché pour le « z » dans « zone », car il correspond à la même visème comme le « s » dans « this ».  
  
 Voici une liste des groupes de phonème qui correspondent à un visème dans anglais (États-Unis) et 21 phonèmes SAPI.  
  
|Visème|Phoneme(s)|  
|------------|------------------|  
|0|silence|  
|1|AE, ax, ah|  
|2|aa|  
|3|ao|  
|4|EY, GE, euh|  
|5|er|  
|6|y, k, ih, ix|  
|7|w, uw|  
|8|Comment puis-je|  
|9|aw|  
|10|Oy|  
|11|AA|  
|12|h|  
|13|r|  
|14|l|  
|15|s, z|  
|16|sh, ch, jh, zh|  
|17|th, dh|  
|18|f, v|  
|19|d, t, n|  
|20|k, g, ng|  
|21|p, b, m|  
  
 Pour plus d’informations sur les données associées à la `VisemeReached` événement, consultez <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient des informations sur la voix actuelle de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <value>Retourne des informations sur la voix actuelle de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous initialisez un nouveau <xref:System.Speech.Synthesis.SpeechSynthesizer>, il utilise la voix de système par défaut. Pour configurer le <xref:System.Speech.Synthesis.SpeechSynthesizer> objet pour utiliser une des voix de synthèse vocale installé, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> (méthode). Pour obtenir des informations sur les voix est installées, utilisez le <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> (méthode) et le <xref:System.Speech.Synthesis.VoiceInfo> classe.  
  
   
  
## Examples  
 L’exemple suivant initialise une instance de <xref:System.Speech.Synthesis.SpeechSynthesizer> et obtient des informations sur la voix actuelle.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Déclenché lorsque la voix de le <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour un exemple et les données associées à l’événement d’informations, consultez <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.  
  
 Vous pouvez modifier la voix qui le <xref:System.Speech.Synthesis.SpeechSynthesizer> utilise avec un de la <xref:System.Speech.Synthesis.PromptBuilder>de <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> méthodes ou les <xref:System.Speech.Synthesis.SpeechSynthesizer>de <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> ou <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le volume de sortie de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objet.</summary>
        <value>Retourne le volume de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, comprise entre 0 et 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant définit le volume de la <xref:System.Speech.Synthesis.SpeechSynthesizer>de sortie de l’audio pour la voix synthétisée et le fichier WAV.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>