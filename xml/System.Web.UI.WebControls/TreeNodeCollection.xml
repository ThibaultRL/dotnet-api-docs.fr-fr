<Type Name="TreeNodeCollection" FullName="System.Web.UI.WebControls.TreeNodeCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cce4966301477a078a6b2fa8a110793caadbfd5" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51303847" /></Metadata><TypeSignature Language="C#" Value="public sealed class TreeNodeCollection : System.Collections.ICollection, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TreeNodeCollection&#xA;Implements ICollection, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection sealed : System::Collections::ICollection, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable&#xA;    interface IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente une collection d’objets <see cref="T:System.Web.UI.WebControls.TreeNode" /> dans le contrôle <see cref="T:System.Web.UI.WebControls.TreeView" />. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.TreeNodeCollection> classe est utilisée pour stocker et gérer une collection de <xref:System.Web.UI.WebControls.TreeNode> des objets dans le <xref:System.Web.UI.WebControls.TreeView> contrôle. Le <xref:System.Web.UI.WebControls.TreeView> de contrôles utilise la <xref:System.Web.UI.WebControls.TreeNodeCollection> classe dans deux de ses propriétés. Il stocke ses nœuds racine dans le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propriété et ses nœuds sélectionnés dans le <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> propriété. Le <xref:System.Web.UI.WebControls.TreeNodeCollection> regroupement est également utilisé pour le <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propriété pour stocker des nœuds enfants (le cas échéant).  
  
 Le <xref:System.Web.UI.WebControls.TreeNodeCollection> classe prend en charge plusieurs façons d’accéder aux éléments dans la collection :  
  
-   Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Item%2A> indexeur pour récupérer un <xref:System.Web.UI.WebControls.TreeNode> objet directement à un index de base zéro spécifique.  
  
-   Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> méthode pour créer un énumérateur qui peut être utilisé pour itérer la collection.  
  
-   Utilisez `foreach` (C#) ou `For Each` (Visual Basic) pour effectuer une itération dans la collection.  
  
-   Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> méthode pour copier le contenu de la collection dans un <xref:System.Array> objet.  
  
 Vous pouvez gérer par programme le <xref:System.Web.UI.WebControls.TreeNodeCollection> en ajoutant et supprimant <xref:System.Web.UI.WebControls.TreeNode> objets. Pour ajouter des nœuds à la collection, utilisez la <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> ou <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> (méthode). Pour supprimer des nœuds de la collection, utilisez la <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A>, <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A>, ou <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> (méthode).  
  
> [!NOTE]
>  Lorsque le <xref:System.Web.UI.WebControls.TreeView> contrôle est lié à une source de données, le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> sont remplis automatiquement chaque fois que la liaison se produit. Les modifications apportées aux collections entre deux liaisons seront perdues. Pour conserver ces modifications, mettez à jour la source de données ou régénérer manuellement la collection chaque fois que vous liez.  
  
 Le <xref:System.Web.UI.WebControls.TreeNodeCollection> contient les propriétés et méthodes qui vous permettent de récupérer des informations sur la collection elle-même. Pour rechercher le nombre d’éléments contenus dans la collection, utilisez la <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propriété. Si vous souhaitez déterminer si la collection contient un certain <xref:System.Web.UI.WebControls.TreeNode> de l’objet, utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> (méthode). Pour obtenir l’index d’un <xref:System.Web.UI.WebControls.TreeNode> objet dans la collection, utilisez la <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment ajouter des nœuds à par programmation et de les supprimer à partir d’un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> à l'aide des valeurs par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ce constructeur pour initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.TreeNodeCollection> classe en utilisant les valeurs par défaut. Ce constructeur est couramment utilisé lors de la création d’une collection de nœuds racine où un nœud parent (ou propriétaire) n’est pas requis.  
  
> [!NOTE]
>  Lorsque vous créez une collection de nœuds non racine, vous devez utiliser le constructeur surchargé qui prend le `owner` paramètre, au lieu de ce constructeur, pour spécifier le nœud parent.  
  
 Ce constructeur est utilisé principalement par les développeurs de contrôles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection (System.Web.UI.WebControls.TreeNode owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeNode owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection(System::Web::UI::WebControls::TreeNode ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNodeCollection : System.Web.UI.WebControls.TreeNode -&gt; System.Web.UI.WebControls.TreeNodeCollection" Usage="new System.Web.UI.WebControls.TreeNodeCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="owner">Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> qui représente le nœud parent de la collection.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> à l'aide du nœud parent (ou propriétaire) spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez ce constructeur pour initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.TreeNodeCollection> classe à l’aide du nœud parent spécifié (ou propriétaire). Ce constructeur est couramment utilisé lors de la création d’une collection de nœuds non racine où vous devez spécifier le nœud parent.  
  
> [!NOTE]
>  Lorsque vous créez une collection de nœuds racines, envisagez d’utiliser le constructeur par défaut, car les nœuds racines n’ont pas d’un nœud parent.  
  
 Ce constructeur est utilisé principalement par les développeurs de contrôles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.Add child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="child">Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à ajouter.</param>
        <summary>Ajoute l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> spécifié à la fin de l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> méthode à ajouter spécifié <xref:System.Web.UI.WebControls.TreeNode> objet à la fin de la <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.TreeNodeCollection> vous permet d’ajouter des références null (Nothing en Visual Basic), ainsi que de doublon <xref:System.Web.UI.WebControls.TreeNode> objets.  
  
 Comme alternative, vous pouvez insérer un <xref:System.Web.UI.WebControls.TreeNode> de l’objet dans le <xref:System.Web.UI.WebControls.TreeNodeCollection> à un index spécifique à l’aide de la <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> méthode pour ajouter par programmation un nœud à la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> chacune des propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAt (index As Integer, child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAt(int index, System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddAt : int * System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.AddAt (index, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement de l'index de base zéro auquel insérer l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" />.</param>
        <param name="child">Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à ajouter.</param>
        <summary>Insère l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> spécifié dans un objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> à l'emplacement d'index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> méthode pour insérer le texte spécifié <xref:System.Web.UI.WebControls.TreeNode> de l’objet dans le <xref:System.Web.UI.WebControls.TreeNodeCollection> à l’index de base zéro spécifié.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.TreeNodeCollection> vous permet d’insérer des références null (Nothing en Visual Basic), ainsi que de doublon <xref:System.Web.UI.WebControls.TreeNode> objets.  
  
 Comme alternative, vous pouvez ajouter un <xref:System.Web.UI.WebControls.TreeNode> objet à la fin de la <xref:System.Web.UI.WebControls.TreeNodeCollection> à l’aide de la <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> méthode pour ajouter par programmation un nœud à la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> chacune des propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="child" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vide l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> méthode pour supprimer chaque <xref:System.Web.UI.WebControls.TreeNode> de l’objet à partir de la <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
> [!NOTE]
>  Pour supprimer un nœud individuel de la collection, utilisez la <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> ou <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> méthode vide par programmation un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.TreeNode c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.TreeNode c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (c As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::TreeNode ^ c);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Web.UI.WebControls.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="c">Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à rechercher.</param>
        <summary>Détermine si l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> spécifié se trouve dans la collection.</summary>
        <returns><see langword="true" /> si la collection contient l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> méthode pour déterminer si un <xref:System.Web.UI.WebControls.TreeNode> objet est contenu dans le <xref:System.Web.UI.WebControls.TreeNodeCollection>. Cette méthode est couramment utilisée pour tester l’existence d’un <xref:System.Web.UI.WebControls.TreeNode> objet avant d’effectuer une tâche, comme l’ajout ou la suppression du nœud de la collection.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> méthode pour déterminer si le nœud sélectionné est dans le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> collection. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propriété retourne un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.TreeNode[] nodeArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.TreeNode[] nodeArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (nodeArray As TreeNode(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::TreeNode ^&gt; ^ nodeArray, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Web.UI.WebControls.TreeNode[] * int -&gt; unit" Usage="treeNodeCollection.CopyTo (nodeArray, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArray" Type="System.Web.UI.WebControls.TreeNode[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nodeArray">Tableau de base zéro d'objets <see cref="T:System.Web.UI.WebControls.TreeNode" /> qui reçoit les éléments copiés à partir de <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</param>
        <param name="index">Position dans le tableau cible à laquelle commencer la réception du contenu copié.</param>
        <summary>Copie tous les éléments de l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> dans un tableau d'objets <see cref="T:System.Web.UI.WebControls.TreeNode" /> compatible unidimensionnel, en commençant à l'index spécifié dans le tableau cible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> méthode pour copier le contenu de la <xref:System.Web.UI.WebControls.TreeNodeCollection> dans spécifié base zéro <xref:System.Array?displayProperty=nameWithType> objet. Les éléments sont copiés en commençant à l’index spécifié du tableau cible. Avec le <xref:System.Array?displayProperty=nameWithType> de l’objet, vous pouvez ensuite utiliser la syntaxe de tableau pour accéder aux éléments dans le <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
 Comme alternative, vous pouvez également utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> méthode pour créer un énumérateur qui peut être utilisé pour accéder aux éléments dans la collection.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> méthode pour copier les valeurs d’un <xref:System.Web.UI.WebControls.TreeNodeCollection> dans un tableau. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propriété retourne un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d'éléments dans l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <value>Nombre d'éléments dans <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propriété afin de déterminer le nombre d’éléments dans un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Cette propriété est couramment utilisée lors de l’itération dans une collection pour déterminer la limite supérieure de la collection. Le <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propriété est généralement utilisée pour déterminer si une collection est vide.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propriété afin de déterminer le nombre d’éléments dans le <xref:System.Web.UI.WebControls.TreeNodeCollection>. Il effectue ensuite un parcours de la <xref:System.Web.UI.WebControls.TreeView> contrôle pour afficher le texte de chaque nœud.  
  
 [!code-aspx-csharp[TreeNodeCollectionCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un énumérateur qui peut être utilisé pour itérer au sein d'un objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <returns>Énumérateur qui peut être utilisé pour itérer au sein de <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> méthode pour créer un énumérateur qui peut être facilement itéré pour obtenir chaque élément le <xref:System.Web.UI.WebControls.TreeNodeCollection>. Pour obtenir l’élément actuellement pointé dans l’énumérateur, utilisez le <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> propriété. Utilisez le <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> méthode pour passer à l’élément suivant. Si vous avez besoin de ramener l’énumérateur vers le début de la collection, utilisez la <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> (méthode).  
  
> [!NOTE]
>  Après avoir créé un énumérateur ou que vous utilisez le <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> (méthode), vous devez appeler la <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> (méthode). Sinon, l’élément représenté par le <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> propriété n’est pas définie.  
  
 Comme alternative, vous pouvez également utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> méthode pour créer un <xref:System.Array?displayProperty=nameWithType> objet qui peut être utilisé pour accéder aux éléments dans la collection. Une autre solution consiste à utiliser un `foreach` ou `For Each` structure pour itérer la collection.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> méthode pour créer un énumérateur qui contient les nœuds racine de la <xref:System.Web.UI.WebControls.TreeView> contrôle.  
  
 [!code-aspx-csharp[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/CS/treenodecollectiongetenumeratorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/VB/treenodecollectiongetenumeratorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Web.UI.WebControls.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à rechercher.</param>
        <summary>Détermine l'index de l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> spécifié.</summary>
        <returns>Index de base zéro de la première occurrence de <paramref name="value" /> dans <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />, s'il existe ; sinon, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> méthode pour déterminer l’index de base zéro de l’objet <xref:System.Web.UI.WebControls.TreeNode> de l’objet dans le <xref:System.Web.UI.WebControls.TreeNodeCollection> objet. Si le nœud n’est pas dans la collection, la méthode retourne -1.  
  
> [!NOTE]
>  Si le nœud spécifié apparaît plusieurs fois dans la collection, l’index de la première occurrence est retourné.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> méthode pour déterminer l’index d’un nœud racine. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propriété retourne un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> est synchronisé (thread-safe).</summary>
        <value><see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> propriété est utilisée pour indiquer si l’accès à la <xref:System.Web.UI.WebControls.TreeNodeCollection> est synchronisé (thread-safe). Cette propriété est dérivée de la <xref:System.Collections.ICollection?displayProperty=nameWithType> classe et est substituée pour toujours retourner `false`.  
  
 Pour plus d’informations sur la <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> propriété, consultez le <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=nameWithType> propriété de la <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNode ^ default[int] { System::Web::UI::WebControls::TreeNode ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.WebControls.TreeNode" Usage="System.Web.UI.WebControls.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à récupérer.</param>
        <summary>Obtient l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à l'index spécifié dans l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <value>Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> situé à l'index spécifié dans la collection <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cet indexeur pour accéder à un <xref:System.Web.UI.WebControls.TreeNode> de l’objet à partir de la <xref:System.Web.UI.WebControls.TreeNodeCollection> à l’index spécifié à l’aide de la notation de tableau. L’indexeur vous permet de modifier ou de remplacer un <xref:System.Web.UI.WebControls.TreeNode> objet dans la collection directement. La collection est de base zéro.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser l’indexeur pour accéder à un élément dans le <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Web.UI.WebControls.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">Objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à supprimer.</param>
        <summary>Supprime l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> spécifié de l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> méthode pour supprimer le nœud spécifié de la collection. Tous les éléments qui suivent ce nœud sont ensuite déplacée vers le haut pour remplir la position vide. Les index des éléments déplacés sont également mis à jour.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.TreeNodeCollection> peut contenir des références null (Nothing en Visual Basic), mais aussi en double <xref:System.Web.UI.WebControls.TreeNode> objets.  
  
 Comme alternative, vous pouvez supprimer un nœud à un index spécifique à l’aide de la <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> (méthode). Vous pouvez également supprimer tous les nœuds dans la collection à l’aide de la <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> méthode pour supprimer par programme un nœud à partir de la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> chacune des propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Position de l'index de base zéro du nœud à supprimer.</param>
        <summary>Supprime l'objet <see cref="T:System.Web.UI.WebControls.TreeNode" /> à l'emplacement d'index spécifié de l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> méthode pour supprimer le <xref:System.Web.UI.WebControls.TreeNode> objet à l’emplacement d’index de base zéro spécifié à partir d’un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tous les éléments qui suivent ce nœud sont ensuite déplacée vers le haut pour remplir la position vide. Les index des éléments déplacés sont également mis à jour.  
  
> [!NOTE]
>  Le <xref:System.Web.UI.WebControls.TreeNodeCollection> peut contenir des références null (Nothing en Visual Basic), mais aussi en double <xref:System.Web.UI.WebControls.TreeNode> objets.  
  
 Comme alternative, vous pouvez supprimer un spécifique <xref:System.Web.UI.WebControls.TreeNode> objet à l’aide de la <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> (méthode). Vous pouvez également supprimer tous les nœuds dans la collection à l’aide de la <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> méthode pour supprimer par programme un nœud à partir de la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> et <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> chacune des propriétés retournent un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à l’objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <value><see cref="T:System.Object" /> qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> propriété fournit une version synchronisée de la <xref:System.Web.UI.WebControls.TreeNodeCollection> qui peut être utilisé avec le code de synchronisation (thread).  
  
> [!CAUTION]
>  Le <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> propriété de cette classe toujours retourne `false`, ce qui indique que le <xref:System.Web.UI.WebControls.TreeNodeCollection> classe n’est pas synchronisée (pas thread-safe).  
  
 Le code de synchronisation doit effectuer les opérations sur le <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> objet de la <xref:System.Web.UI.WebControls.TreeNodeCollection>, et non directement sur le <xref:System.Web.UI.WebControls.TreeNodeCollection> lui-même. Cela garantit un bon fonctionnement des collections dérivées d’autres objets. Plus précisément, il maintient une synchronisation correcte avec les autres threads qui pourraient modifier simultanément les <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
> [!NOTE]
>  L’objet retourné dans cette implémentation est la <xref:System.Collections.ArrayList?displayProperty=nameWithType> objet utilisé pour stocker le <xref:System.Web.UI.WebControls.TreeNode> objets dans la collection.  
  
 L’énumération d’une collection n’est intrinsèquement pas une procédure thread-safe. Même lorsqu’une collection est synchronisée, les autres threads peuvent toujours la modifier, ce qui amène l’énumérateur à lever une exception. Pour garantir la sécurité des threads au cours de l’énumération, vous pouvez verrouiller la collection pendant l’ensemble de l’énumération ou bien intercepter les exceptions résultant des modifications apportées par les autres threads.  
  
 Pour plus d’informations sur la <xref:System.Web.UI.WebControls.DataGridColumnCollection.SyncRoot%2A> propriété, consultez le <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=nameWithType> propriété de la <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Objet <see cref="T:System.Array" /> de base zéro qui reçoit les éléments copiés de <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</param>
        <param name="index">Position dans le tableau cible à laquelle commencer la réception du contenu copié.</param>
        <summary>Copie tous les éléments de l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> dans un tableau <see cref="T:System.Array" /> compatible unidimensionnel, en commençant à l'index spécifié dans le tableau cible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> méthode pour copier le contenu de la <xref:System.Web.UI.WebControls.TreeNodeCollection> dans spécifié base zéro <xref:System.Array?displayProperty=nameWithType> objet. Les éléments sont copiés en commençant à l’index spécifié du tableau cible. Avec le <xref:System.Array?displayProperty=nameWithType> de l’objet, vous pouvez ensuite utiliser la syntaxe de tableau pour accéder aux éléments dans le <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
 Comme alternative, vous pouvez également utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> méthode pour créer un énumérateur qui peut être utilisé pour accéder aux éléments dans la collection.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> méthode pour copier les valeurs d’un <xref:System.Web.UI.WebControls.TreeNodeCollection> dans un tableau. Notez que le <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propriété retourne un <xref:System.Web.UI.WebControls.TreeNodeCollection> objet.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="array" /> n'est pas un tableau d'objets <see cref="T:System.Web.UI.WebControls.TreeNode" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Web::UI::IStateManager::IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> enregistre les modifications apportées à son état d'affichage.</summary>
        <value><see langword="true" /> si le contrôle serveur est marqué pour enregistrer son état ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Vue d’ensemble de gestion de l’état de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (state As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ state) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state"><see cref="T:System.Object" /> qui contient les valeurs de l'état d'affichage enregistrées.</param>
        <summary>Charge l'état d'affichage précédemment enregistré de l'objet <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Vue d’ensemble de gestion de l’état de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre les modifications apportées à l'état d'affichage dans <see cref="T:System.Object" />.</summary>
        <returns><see cref="T:System.Object" /> qui contient les changements de l'état d'affichage.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Vue d’ensemble de gestion de l’état de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prescrit à <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> d'assurer le suivi des modifications apportées à son état d'affichage.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une fois que cette méthode a été appelée sur un contrôle serveur, le <xref:System.Web.UI.Control.IsTrackingViewState%2A> propriété retournera `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
        <related type="Article" href="https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100)">Vue d’ensemble de gestion de l’état de ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>