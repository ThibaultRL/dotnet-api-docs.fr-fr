<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b34526078954ce8a27eb4f014ca28ff482e69f99" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66005958" /></Metadata><TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Affiche un contrôle de zone de texte et un bouton Parcourir qui permettent aux utilisateurs de sélectionner un fichier à télécharger sur le serveur.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans cette rubrique :  
  
-   [Introduction](#introduction)  
  
-   [Enregistrement de fichiers téléchargés](#saving_uploaded_files)  
  
-   [Considérations relatives à la sécurité](#security_considerations)  
  
-   [Limitations de mémoire](#memory_limitations)  
  
-   [À l’aide du contrôle FileUpload avec le contrôle UpdatePanel](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [Syntaxe déclarative](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Le <xref:System.Web.UI.WebControls.FileUpload> classe affiche un contrôle de zone de texte et un bouton Parcourir qui permettent aux utilisateurs de sélectionner un fichier sur le client et le télécharger vers le serveur Web. L’utilisateur spécifie le fichier à télécharger en entrant le chemin d’accès complet du fichier sur l’ordinateur local (par exemple, **C:\MyFiles\TestFile.txt**) dans la zone de texte du contrôle. Ou bien, l’utilisateur peut sélectionner le fichier en cliquant sur le **Parcourir** bouton, puis en recherchant dans le **choisir un fichier** boîte de dialogue.  
  
 Utilisez le <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriété pour obtenir le nom d’un fichier sur un client à télécharger à l’aide de la <xref:System.Web.UI.WebControls.FileUpload> contrôle. Le nom de fichier retourné par cette propriété n’inclut pas le chemin d’accès du fichier sur le client.  
  
 Le <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété obtient un <xref:System.IO.Stream> objet qui pointe vers un fichier à charger. Cette propriété permet d’accéder au contenu du fichier sous forme d’octets. Par exemple, vous pouvez utiliser la <xref:System.IO.Stream> objet qui est retourné par la <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété pour lire le contenu du fichier sous forme d’octets et les stocker dans un tableau d’octets. Vous pouvez également utiliser le <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriété à récupérer tous les octets dans le fichier.  
  
 Le <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété obtient sous-jacent <xref:System.Web.HttpPostedFile> objet pour le fichier à charger. Vous pouvez utiliser cette propriété pour accéder aux propriétés supplémentaires sur le fichier. Le <xref:System.Web.HttpPostedFile.ContentLength%2A> propriété obtient la longueur du fichier. Le <xref:System.Web.HttpPostedFile.ContentType%2A> propriété obtient le type de contenu MIME du fichier. En outre, vous pouvez utiliser la <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété pour accéder à la <xref:System.Web.HttpPostedFile.FileName%2A> propriété, le <xref:System.Web.HttpPostedFile.InputStream%2A> propriété et le <xref:System.Web.HttpPostedFile.SaveAs%2A> (méthode). Toutefois, la même fonctionnalité est fournie par le <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriété, le <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété et le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode).  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>Enregistrement de fichiers téléchargés  
 Le <xref:System.Web.UI.WebControls.FileUpload> contrôle n’enregistre pas automatiquement un fichier au serveur une fois que l’utilisateur sélectionne le fichier à charger. Vous devez explicitement fournir un contrôle ou un mécanisme pour autoriser l’utilisateur à envoyer le fichier spécifié. Par exemple, vous pouvez fournir un bouton sur lequel l’utilisateur clique pour télécharger le fichier. Le code que vous écrivez pour enregistrer le fichier spécifié doit appeler la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode), qui enregistre le contenu d’un fichier à un chemin d’accès spécifié sur le serveur. En règle générale, le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée dans une méthode de gestion d’événements pour un événement qui déclenche une publication sur le serveur. Par exemple, si vous fournissez un bouton pour envoyer un fichier, vous pouvez inclure le code pour enregistrer le fichier à l’intérieur de la méthode de gestion d’événements pour l’événement click.  
  
 Avant d’appeler le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode pour enregistrer le fichier sur le serveur, utilisez le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriété pour vérifier que le <xref:System.Web.UI.WebControls.FileUpload> contrôle contient un fichier. Si le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retourne `true`, appelez le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode). Si elle retourne `false`, afficher un message à l’utilisateur lui indiquant que le contrôle ne contient pas un fichier. Ne pas vérifier le <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété pour déterminer si un fichier à télécharger existe car, par défaut, cette propriété contient 0 octet. Par conséquent, même lorsque le <xref:System.Web.UI.WebControls.FileUpload> contrôle est vide, le <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété retourne une valeur non null.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Lorsque vous appelez le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode), vous devez spécifier le chemin d’accès complet du répertoire dans lequel enregistrer le fichier téléchargé. Si vous ne spécifiez pas explicitement un chemin d’accès dans votre code d’application, une exception est levée lorsqu’un utilisateur tente de télécharger un fichier. Ce comportement permet de protéger les fichiers sur le serveur en empêchant les utilisateurs de pouvoir écrire aux emplacements arbitraires dans la structure de répertoires de votre application, ainsi que pour empêcher l’accès aux répertoires racine sensibles.  
  
 Le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode écrit le fichier téléchargé dans le répertoire spécifié. Par conséquent, l’application ASP.NET doit avoir accès en écriture au répertoire sur le serveur. Il existe deux façons que l’application peut obtenir un accès en écriture. Vous pouvez accorder explicitement l’accès en écriture au compte sous lequel l’application est en cours d’exécution, dans le répertoire dans lequel les fichiers téléchargés seront enregistrés. Vous pouvez également augmenter le niveau de confiance accordé à l’application ASP.NET. Pour obtenir l’accès en écriture au répertoire en cours d’exécution pour l’application, l’application doit disposer le <xref:System.Web.AspNetHostingPermission> objet avec le niveau de confiance la <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valeur. Augmenter le niveau de confiance augmente l’accès aux ressources sur le serveur de l’application. Notez qu’il ne s’agit pas d’une approche sécurisée, car un utilisateur malveillant qui prend le contrôle de votre application pourra également s’exécuter sous ce niveau de confiance supérieur. Il est recommandé d’exécuter une application ASP.NET dans le contexte d’un utilisateur avec les privilèges minimaux requis pour exécuter l’application. Pour plus d’informations sur la sécurité dans les applications ASP.NET, consultez [pratiques de sécurité de base pour les Applications Web](https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) et [ASP.NET Trust Levels and Policy Files](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>Limitations de mémoire  
 Pour vous prémunir contre le déni de service attaques consiste à limiter la taille des fichiers qui peuvent être téléchargés à l’aide de la <xref:System.Web.UI.WebControls.FileUpload> contrôle. Vous devez définir une limite de taille appropriée pour les types de fichiers que vous prévoyez d’être chargé. La limite de taille par défaut est 4 096 kilo-octets (Ko) ou 4 mégaoctets (Mo). Vous pouvez autoriser les fichiers plus volumineux pour être chargé en définissant le `maxRequestLength` attribut de la [httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) élément. Pour augmenter la taille de fichier maximale autorisée pour l’application entière, définissez le `maxRequestLength` attribut dans le fichier Web.config. Pour augmenter la taille de fichier maximale autorisée pour une page spécifiée, définissez le `maxRequestLength` d’attribut à l’intérieur du `location` élément dans le fichier Web.config. Pour obtenir un exemple, consultez [location, élément (schéma des paramètres ASP.NET)](https://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  
  
 Lors du chargement de fichiers volumineux, un utilisateur peut également recevoir le message d’erreur suivant :  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 Si les utilisateurs rencontrent ce message d’erreur, augmentez la valeur de la `memoryLimit` d’attribut dans le [processModel](https://msdn.microsoft.com/library/4b8fe20e-74c8-4566-b72c-ce5f83c8e32d) d’élément, le fichier Web.config de fichiers pour l’application. Le `memoryLimit` attribut spécifie la quantité maximale de mémoire qu’un processus de travail peut utiliser. Si le processus de travail dépasse le `memoryLimit` montant, un nouveau processus est créé pour le remplacer, et toutes les demandes actuelles sont réassignées au nouveau processus.  
  
 Pour contrôler si le fichier à charger est temporairement stockées en mémoire ou sur le serveur pendant le traitement de la demande, définissez le `requestLengthDiskThreshold` attribut de la [httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) élément. Cet attribut vous permet de gérer la taille de la mémoire tampon de flux d’entrée. La valeur par défaut est de 256 octets. La valeur que vous spécifiez ne doit pas dépasser la valeur que vous spécifiez pour le `maxRequestLength` attribut.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>À l’aide du contrôle FileUpload avec le contrôle UpdatePanel  
 Le <xref:System.Web.UI.WebControls.FileUpload> contrôle est conçu pour être utilisé uniquement dans les scénarios de publication (postback) et non dans les scénarios de publication (postback) asynchrone pendant le rendu de page partiel. Lorsque vous utilisez un <xref:System.Web.UI.WebControls.FileUpload> contrôler à l’intérieur d’un <xref:System.Web.UI.UpdatePanel> contrôle, le fichier doit être téléchargé à l’aide d’un contrôle qui est un <xref:System.Web.UI.PostBackTrigger> objet pour le panneau. <xref:System.Web.UI.UpdatePanel> contrôles sont utilisés pour mettre à jour des régions sélectionnées d’une page au lieu de la mise à jour de la page entière avec une publication (postback). Pour plus d’informations, consultez [vue d’ensemble du contrôle UpdatePanel](https://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) et [vue d’ensemble du rendu de Page partielle](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Syntaxe déclarative  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Un projet de site Web Visual Studio avec code source est disponible pour accompagner cette rubrique : [Télécharger](https://go.microsoft.com/fwlink/?LinkId=191897).  
  
 Cette section contient les quatre exemples ci-dessous :  
  
-   Le premier exemple montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès spécifié dans le code.  
  
-   Le deuxième exemple montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre les fichiers dans un répertoire spécifié dans le système de fichiers pour l’application.  
  
-   Le troisième exemple montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès spécifié et limite la taille du fichier qui peut être téléchargé.  
  
-   Le quatrième exemple montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès spécifié et autorise uniquement les fichiers qui ont les extensions de nom de fichier .doc ou .xls à charger.  
  
> [!CAUTION]
>  Ces exemples illustrent la syntaxe de base pour le <xref:System.Web.UI.WebControls.FileUpload> contrôle, mais ils ne démontrent pas tout le nécessaire la vérification des erreurs qui doivent être effectuées avant l’enregistrement du fichier. Pour un exemple plus complet, consultez <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès spécifié dans le code. Le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée pour enregistrer le fichier vers le chemin spécifié sur le serveur.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre les fichiers dans un répertoire spécifié dans le système de fichiers pour l’application. Le <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType> propriété est utilisée pour obtenir le chemin d’accès de système de fichier physique du répertoire racine de l’application serveur en cours d’exécution. Le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée pour enregistrer le fichier vers le chemin spécifié sur le serveur.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès qui est spécifié dans le code. Le contrôle limite la taille du fichier qui peut être téléchargé sur 5 Mo. Le <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété permettant d’accéder aux sous-jacent <xref:System.Web.HttpPostedFile.ContentLength%2A> propriété et retourner la taille du fichier. Si la taille du fichier à télécharger est inférieure à 2 Mo, le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée pour enregistrer le fichier vers le chemin spécifié sur le serveur. Outre la vérification pour le paramètre de taille de fichier maximale dans le code de votre application, vous pouvez définir le `maxRequestLength` attribut de la [httpRuntime](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) élément à une taille maximale autorisée dans le fichier de configuration pour votre application.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès qui est spécifié dans le code. Cet exemple autorise uniquement les fichiers qui ont les extensions de nom de fichier .doc ou .xls à charger. Le <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType> méthode est appelée pour retourner l’extension de fichier à charger. Si le fichier porte l’extension .doc ou .xls, le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée pour enregistrer le fichier vers le chemin spécifié sur le serveur.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> constructeur pour initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.FileUpload> classe. Le <xref:System.Web.UI.WebControls.FileUpload> contrôle n’enregistre pas automatiquement un fichier au serveur une fois que l’utilisateur sélectionne le fichier à charger. Vous devez explicitement fournir un contrôle ou un mécanisme pour autoriser l’utilisateur à envoyer le fichier spécifié. Par exemple, vous pouvez fournir un bouton sur lequel l’utilisateur clique pour télécharger le fichier.  
  
   
  
## Examples  
 L’exemple suivant montre comment initialiser une nouvelle instance de la <xref:System.Web.UI.WebControls.FileUpload> classe. Notez que cet exemple illustre la syntaxe de constructeur mais n’ajoute pas de fonctionnalités au contrôle après sa création.  
  
 Cet exemple fait partie d’un exemple plus complet fourni pour la <xref:System.Web.UI.WebControls.FileUpload> classe.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" /> qui représente le flux de sortie pour le rendu du contenu HTML sur le client.</param>
        <summary>Ajoute les attributs et les styles HTML d'un contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" /> à rendre à l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> méthode est principalement utilisée par les développeurs de contrôles pour insérer les attributs appropriés et styles pour le <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> flux de sortie pour un <xref:System.Web.UI.WebControls.FileUpload> contrôle. Le <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> substitutions de méthode le <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui spécifie si plusieurs fichiers peuvent être sélectionnés pour le téléchargement.</summary>
        <value><see langword="true" /> si plusieurs fichiers peuvent être sélectionnés ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un tableau des octets d'un fichier spécifié en utilisant un contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Tableau de <see cref="T:System.Byte" /> qui contient le contenu du fichier spécifié.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload> contrôle ne lit pas automatiquement le fichier à partir du client. Vous devez explicitement fournir un contrôle ou un mécanisme pour autoriser l’utilisateur à envoyer le fichier spécifié. Par exemple, vous pouvez fournir un bouton sur lequel l’utilisateur peut cliquer pour télécharger le fichier. Le code que vous écrivez pour enregistrer le fichier spécifié pourrait appeler le <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriété, qui retourne le contenu du fichier.  
  
 Avant d’appeler le <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriété, vous devez utiliser le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriété pour vérifier que le <xref:System.Web.UI.WebControls.FileUpload> contrôle contient un fichier à charger. Si le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retourne `true`, appelez le <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriété. Si elle retourne `false`, afficher un message à l’utilisateur lui indiquant que le contrôle ne contient pas un fichier. Si vous ne fournissez pas de code de gestion des erreurs pour vérifier qu’un fichier existe, une tentative d’enregistrement d’un fichier qui n’existe pas lève une <xref:System.Web.HttpException> exception.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle. Lorsque l’utilisateur clique sur le **chargement du fichier** bouton, le contenu du fichier sont affichés sous forme d’octets dans une zone de texte sur la page. Cet exemple utilise le <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propriété pour télécharger l’intégralité du fichier.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Impossible de lire le fichier entier.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.IO.Stream" /> qui pointe vers un fichier à télécharger en utilisant le contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Élément <see cref="T:System.IO.Stream" /> qui pointe vers un fichier à télécharger en utilisant l'élément <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété obtient un <xref:System.IO.Stream> objet qui pointe vers un fichier à télécharger à l’aide de la <xref:System.Web.UI.WebControls.FileUpload> contrôle. Utilisez le <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété pour accéder au contenu du fichier. Par exemple, vous pouvez utiliser le <xref:System.IO.Stream> objet qui est retourné par cette propriété pour lire le contenu du fichier sous forme d’octets et les stocker dans un tableau d’octets.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle. Le <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété est utilisée pour lire le contenu du fichier dans un tableau d’octets. Lorsque l’utilisateur clique sur le **chargement du fichier** bouton, le contenu du fichier sont affichés sous forme d’octets dans une zone de texte sur la page.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom d'un fichier sur un client à télécharger en utilisant le contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Chaîne qui spécifie le nom d'un fichier sur un client à télécharger en utilisant l'élément <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtient le nom d'un fichier sur un client à télécharger en utilisant le contrôle <xref:System.Web.UI.WebControls.FileUpload>. Les noms de fichiers qui le <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriété retourne n’inclut pas le chemin d’accès du fichier sur le client.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui enregistre des fichiers vers un chemin d’accès spécifié dans le code. Le <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriété est utilisée pour obtenir le nom du fichier à charger. Le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> est appelée pour enregistrer le fichier vers le chemin spécifié sur le serveur, en utilisant le même nom que le fichier a sur le client. Notez que cet exemple illustre la syntaxe de base pour ce contrôle, mais ne montre pas toutes la vérification des erreurs nécessaires qui doit être effectuée avant l’enregistrement du fichier. Pour un exemple plus complet, consultez <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" /> contient un fichier.</summary>
        <value><see langword="true" /> si l'élément <see cref="T:System.Web.UI.WebControls.FileUpload" /> contient un fichier ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriété obtient une valeur indiquant si le <xref:System.Web.UI.WebControls.FileUpload> contrôle contient un fichier à charger. Cette propriété permet de vérifier l’existence d’un fichier à télécharger avant d’effectuer des opérations sur le fichier. Par exemple, avant d’appeler le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode pour enregistrer le fichier sur disque, utilisez le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriété pour vérifier que le fichier existe. Si <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retourne `true`, appelez le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode). Si elle retourne `false`, afficher un message à l’utilisateur lui indiquant que le contrôle ne contient pas un fichier.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui effectue la vérification des erreurs. Avant d’enregistrer le fichier, le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> méthode est appelée pour vérifier que le contrôle contient un fichier à charger. En outre, le <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> méthode est appelée pour vérifier si un fichier portant le même nom existe déjà dans le chemin d’accès. Le cas échéant, le nom du fichier à charger est préfixé avec un caractère de soulignement avant la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée. Cela empêche le fichier existant qui doit être remplacé.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si des fichiers ont été téléchargés.</summary>
        <value><see langword="true" /> si les fichiers ont été téléchargés ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne également `false` si un fichier vide (zéro octet) est téléchargé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objet <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Web.UI.Control.PreRender" /> pour le contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A> méthode avertit le <xref:System.Web.UI.WebControls.FileUpload> contrôle à effectuer les étapes de pré-rendu nécessaires avant d’enregistrer l’état d’affichage et le contenu du rendu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.Web.HttpPostedFile" /> sous-jacent pour un fichier téléchargé en utilisant le contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Élément <see cref="T:System.Web.HttpPostedFile" /> pour un fichier téléchargé en utilisant l'élément <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété obtient sous-jacent <xref:System.Web.HttpPostedFile> objet pour un fichier qui est téléchargé à l’aide de la <xref:System.Web.UI.WebControls.FileUpload> contrôle. Cette propriété permet d’accéder aux propriétés supplémentaires sur le fichier téléchargé.  
  
 Vous pouvez utiliser le <xref:System.Web.HttpPostedFile.ContentLength%2A> propriété à obtenir la longueur du fichier. Vous pouvez utiliser la <xref:System.Web.HttpPostedFile.ContentType%2A> type du fichier de contenu de propriété à obtenir le MIME. En outre, vous pouvez utiliser la <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété pour accéder à la <xref:System.Web.HttpPostedFile.FileName%2A> propriété, le <xref:System.Web.HttpPostedFile.InputStream%2A> propriété et le <xref:System.Web.HttpPostedFile.SaveAs%2A> (méthode). Toutefois, la même fonctionnalité est fournie par le <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propriété, le <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propriété et le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle. Lorsque l’utilisateur clique sur le **chargement du fichier** bouton, le contenu du fichier sont affichés sous forme d’octets dans une zone de texte sur la page. Cet exemple utilise le <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propriété pour accéder à la <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> propriété. Le <xref:System.Web.HttpPostedFile.ContentLength%2A> propriété est utilisée pour déterminer la longueur du fichier avant de copier le contenu du fichier dans un tableau d’octets.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de fichiers téléchargés.</summary>
        <value>Collection de fichiers téléchargés.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objet <see cref="T:System.Web.UI.HtmlTextWriter" /> qui reçoit le contenu du contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" />.</param>
        <summary>Envoie le contenu du contrôle <see cref="T:System.Web.UI.WebControls.FileUpload" /> à l'objet <see cref="T:System.Web.UI.HtmlTextWriter" /> spécifié, qui écrit le contenu à rendre sur le client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.Render%2A> méthode envoie le <xref:System.Web.UI.WebControls.FileUpload> contenu spécifié du contrôle <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> objet, qui écrit le contenu à rendre sur le client.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Chaîne qui spécifie le chemin d’accès complet de l’emplacement du serveur où enregistrer le fichier téléchargé.</param>
        <summary>Enregistre le contenu d’un fichier téléchargé vers un chemin d’accès spécifié sur le serveur web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode enregistre le contenu d’un fichier chargé dans un chemin d’accès spécifié sur le serveur Web.  
  
 Le <xref:System.Web.UI.WebControls.FileUpload> contrôle n’enregistre pas automatiquement un fichier au serveur une fois que l’utilisateur sélectionne le fichier à charger. Vous devez explicitement fournir un contrôle ou un mécanisme pour autoriser l’utilisateur à envoyer le fichier spécifié. Par exemple, vous pouvez fournir un bouton sur lequel l’utilisateur clique pour télécharger le fichier. Le code que vous écrivez pour enregistrer le fichier spécifié doit appeler la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode), qui enregistre le contenu d’un fichier à un chemin d’accès spécifié sur le serveur. En règle générale, le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée dans une méthode de gestion d’événements pour un événement qui déclenche une publication sur le serveur. Par exemple, si vous fournissez un bouton pour envoyer un fichier, le code pour enregistrer le fichier sur le serveur peut être inclus dans la méthode de gestion d’événements pour l’événement click.  
  
 Lorsque vous appelez le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode), vous devez spécifier le chemin d’accès complet du répertoire sur le serveur dans lequel enregistrer le fichier téléchargé. Si vous ne spécifiez pas explicitement un chemin d’accès dans votre code d’application, un <xref:System.Web.HttpException> exception est levée lorsqu’un utilisateur tente de télécharger un fichier. Ce comportement permet de sécuriser les fichiers sur le serveur, en ne permettant ne pas aux utilisateurs de spécifier un chemin d’accès dans lequel enregistrer les fichiers qu’ils téléchargent.  
  
 Avant d’appeler le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode), vous devez utiliser le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propriété pour vérifier que le <xref:System.Web.UI.WebControls.FileUpload> contrôle contient un fichier à charger. Si le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> retourne `true`, appelez le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> (méthode). Si elle retourne `false`, afficher un message à l’utilisateur lui indiquant que le contrôle ne contient pas un fichier. Si vous ne fournissez pas de code de gestion des erreurs pour vérifier qu’un fichier existe, une tentative d’enregistrement d’un fichier qui n’existe pas lève une <xref:System.Web.HttpException> exception.  
  
 Pour un appel à la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> pour travailler, l’application ASP.NET doit avoir accès en écriture au répertoire sur le serveur. Il existe deux façons que l’application peut obtenir un accès en écriture. Vous pouvez accorder explicitement l’accès en écriture au compte sous lequel l’application est en cours d’exécution, dans le répertoire dans lequel les fichiers téléchargés seront enregistrés. Vous pouvez également augmenter le niveau de confiance accordé à l’application ASP.NET. Pour obtenir l’accès en écriture au répertoire en cours d’exécution pour l’application, l’application doit disposer le <xref:System.Web.AspNetHostingPermission> objet avec le niveau de confiance la <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valeur. Augmenter le niveau de confiance augmente l’accès aux ressources sur le serveur de l’application. Notez qu’il ne s’agit pas d’une approche sécurisée, car un utilisateur malveillant qui prend le contrôle de votre application pourra également s’exécuter sous ce niveau de confiance supérieur. Il est recommandé d’exécuter une application ASP.NET dans le contexte d’un utilisateur qui possède les privilèges minimaux requis pour exécuter l’application. Pour plus d’informations sur la sécurité dans les applications ASP.NET, consultez [pratiques de sécurité de base pour les Applications Web](https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) et [ASP.NET Trust Levels and Policy Files](https://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Web.UI.WebControls.FileUpload> contrôle qui effectue la vérification des erreurs. Avant que le fichier est enregistré, le <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> méthode est appelée pour vérifier l’existence d’un fichier à charger. En outre, le <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> méthode est appelée pour vérifier l’existence d’un fichier ayant le même nom est déjà dans le chemin d’accès. Le cas échéant, le nom du fichier à charger est préfixé avec un numéro avant le <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> méthode est appelée. Cela empêche le fichier existant qui doit être remplacé.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><paramref name="filename" /> n'est pas un chemin complet.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
        <related type="Article" href="https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad">Pratiques de sécurité de base pour les Applications Web</related>
      </Docs>
    </Member>
  </Members>
</Type>