<Type Name="InheritedExportAttribute" FullName="System.ComponentModel.Composition.InheritedExportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="955abd0a4e0510a96d0cf918f892cdc743ef2665" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66301755" /></Metadata><TypeSignature Language="C#" Value="public class InheritedExportAttribute : System.ComponentModel.Composition.ExportAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InheritedExportAttribute extends System.ComponentModel.Composition.ExportAttribute" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.InheritedExportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class InheritedExportAttribute&#xA;Inherits ExportAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InheritedExportAttribute : System::ComponentModel::Composition::ExportAttribute" />
  <TypeSignature Language="F#" Value="type InheritedExportAttribute = class&#xA;    inherit ExportAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Composition.ExportAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=true, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Spécifie qu'un type fournit une exportation particulière et que les sous-classes de ce type fourniront également cette exportation.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InheritedExportAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InheritedExportAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

Le nom de contrat par défaut est le résultat de l’appel <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)?displayProperty=nameWithType> sur le type lui-même et qui est marqué avec cet attribut. 
                    
Le nom de contrat est comparé à l’aide d’une comparaison respectant la casse, non linguistique à l’aide <xref:System.StringComparer.Ordinal?displayProperty=nameWithType>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InheritedExportAttribute (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InheritedExportAttribute(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.InheritedExportAttribute : string -&gt; System.ComponentModel.Composition.InheritedExportAttribute" Usage="new System.ComponentModel.Composition.InheritedExportAttribute contractName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractName">Nom du contrat.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> avec le nom de contrat spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
          
Le nom de contrat par défaut est le résultat de l’appel <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)?displayProperty=nameWithType> sur le type lui-même que cette fonctionnalité est marquée avec cet attribut.

Le nom de contrat est comparé à l’aide d’une comparaison respectant la casse, non linguistique à l’aide <xref:System.StringComparer.Ordinal?displayProperty=nameWithType>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InheritedExportAttribute (Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InheritedExportAttribute(Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.InheritedExportAttribute : Type -&gt; System.ComponentModel.Composition.InheritedExportAttribute" Usage="new System.ComponentModel.Composition.InheritedExportAttribute contractType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractType">Type du contrat.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> avec le type de contrat spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

Le nom de contrat est le résultat de l’appel <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)?displayProperty=nameWithType> sur `contractType`.
                
Le nom de contrat par défaut est le résultat de l’appel <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)?displayProperty=nameWithType> sur le type lui-même et qui est marqué avec cet attribut. 
                
Le nom de contrat est comparé à l’aide d’une comparaison respectant la casse, non linguistique à l’aide <xref:System.StringComparer.Ordinal?displayProperty=nameWithType>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InheritedExportAttribute (string contractName, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string contractName, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.InheritedExportAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractName As String, contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InheritedExportAttribute(System::String ^ contractName, Type ^ contractType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.InheritedExportAttribute : string * Type -&gt; System.ComponentModel.Composition.InheritedExportAttribute" Usage="new System.ComponentModel.Composition.InheritedExportAttribute (contractName, contractType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractName">Nom du contrat.</param>
        <param name="contractType">Type du contrat.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.InheritedExportAttribute" /> avec le type et le nom de contrat spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

Le nom de contrat par défaut est le résultat de l’appel <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName(System.Type)?displayProperty=nameWithType> sur le type lui-même que cette fonctionnalité est marquée avec cet attribut. 
                
Le nom de contrat est comparé à l’aide d’une comparaison respectant la casse, non linguistique à l’aide <xref:System.StringComparer.Ordinal?displayProperty=nameWithType>.

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
