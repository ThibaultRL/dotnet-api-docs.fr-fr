<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="446598705e8ab9ef4cbd69e50be68bc6cd6f4d97" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006323" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Définit les méthodes d’extension pour le <see cref="T:System.Data.DataTable" /> classe. <see cref="T:System.Data.DataTableExtensions" /> est une classe statique.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="table">La source de <see cref="T:System.Data.DataTable" /> à partir de laquelle le prenant en charge LINQ <see cref="T:System.Data.DataView" /> est créé.</param>
        <summary>Crée et retourne un prenant en charge LINQ <see cref="T:System.Data.DataView" /> objet.</summary>
        <returns>Un prenant en charge LINQ <see cref="T:System.Data.DataView" /> objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> permet des scénarios de liaison de données pour [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] et peuvent être créés à partir d’un typé ou <xref:System.Data.DataTable>, fournissant ainsi une vue par défaut de la table. Le filtrage et le tri peuvent être définis sur le <xref:System.Data.DataView> après qu'il a été créé à partir d'un <xref:System.Data.DataTable>. Le <xref:System.Data.DataView> est ensuite lié à un contrôle d’interface utilisateur, comme un <xref:System.Windows.Forms.DataGrid> ou un <xref:System.Windows.Forms.DataGridView>, en fournissant un modèle de liaison de données simple.  
  
 Pour plus d’informations et des exemples, consultez [création d’un objet DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Data.DataView> à partir de la SalesOrderDetail de table et la définit comme la source de données d’un <xref:System.Windows.Forms.BindingSource> objet, qui agit comme un proxy pour un <xref:System.Windows.Forms.DataGridView> contrôle :  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type d’objets dans la séquence source, en général <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">La source de [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] requête à partir de laquelle le prenant en charge LINQ <see cref="T:System.Data.DataView" /> est créé.</param>
        <summary>Crée et retourne un prenant en charge LINQ <see cref="T:System.Data.DataView" /> objet représentant le [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] requête.</summary>
        <returns>Un prenant en charge LINQ <see cref="T:System.Data.DataView" /> objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> permet des scénarios de liaison de données pour [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] et peuvent être créés à partir d’un [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] requête. La <xref:System.Data.DataView> représente la requête elle-même et n’est pas une vue au-dessus de la requête. Nouvellement créé <xref:System.Data.DataView> déduit le filtrage et tri des informations à partir de la requête, il est créé à partir de. Le <xref:System.Data.DataView> est ensuite lié à un contrôle d’interface utilisateur, comme un <xref:System.Windows.Forms.DataGrid> ou un <xref:System.Windows.Forms.DataGridView>, en fournissant un modèle de liaison de données simple.  
  
 Le paramètre `T` du paramètre d’entrée `source` peut uniquement être de type <xref:System.Data.DataRow> ou un type dérivé <xref:System.Data.DataRow>.  
  
 Les opérateurs de requête suivants, uniquement, sont pris en charge dans une requête utilisée pour créer <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 Pour plus d’informations et des exemples, consultez [création d’un objet DataView](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Data.DataView> de commandes en ligne classées par montant total dû :  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">La source <see cref="T:System.Data.DataTable" /> à rendre énumérable.</param>
        <summary>Retourne un <see cref="T:System.Collections.Generic.IEnumerable`1" /> objet, où le paramètre générique <paramref name="T" /> est <see cref="T:System.Data.DataRow" />. Cet objet peut être utilisé dans une expression [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] ou une requête de méthode.</summary>
        <returns>Un <see cref="T:System.Collections.Generic.IEnumerable`1" /> objet, où le paramètre générique <paramref name="T" /> est <see cref="T:System.Data.DataRow" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] les requêtes fonctionnent sur des sources de données qui implémentent le <xref:System.Collections.Generic.IEnumerable%601> interface ou le <xref:System.Linq.IQueryable> interface.  Le <xref:System.Data.DataTable> classe n’implémente pas ces deux interfaces, vous devez appeler la <xref:System.Data.DataTableExtensions.AsEnumerable%2A> méthode à utiliser le <xref:System.Data.DataTable> en tant que source dans le `From` clause d’une [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] requête. Vous pouvez également obtenir des opérateurs personnalisés spécifiques à un domaine, tel que <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>, en retournant un <xref:System.Collections.Generic.IEnumerable%601> objet.  
  
 L’objet énumérable retourné par la <xref:System.Data.DataTableExtensions.AsEnumerable%2A> méthode est définitivement liée à la <xref:System.Data.DataTable> qui l’a produite. Appels multiples à la <xref:System.Data.DataTableExtensions.AsEnumerable%2A> va méthode retourneront plusieurs requêtable objets indépendants qui sont liés à la source de <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 Dans l’exemple suivant, le `DisplayProducts` méthode reçoit un DataTable qui contient un DataColumn nommé `ProductName`, extrait le `ProductName` valeurs, puis imprime les valeurs.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La source de <see cref="T:System.Data.DataTable" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne un <see cref="T:System.Data.DataTable" /> qui contient des copies de la <see cref="T:System.Data.DataRow" /> objets, étant données une entrée <see cref="T:System.Collections.Generic.IEnumerable`1" /> objet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type d’objets dans la séquence source, en général <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">La source <see cref="T:System.Collections.Generic.IEnumerable`1" /> séquence.</param>
        <summary>Retourne un <see cref="T:System.Data.DataTable" /> qui contient des copies de la <see cref="T:System.Data.DataRow" /> objets, étant données une entrée <see cref="T:System.Collections.Generic.IEnumerable`1" /> objet où le paramètre générique <paramref name="T" /> est <see cref="T:System.Data.DataRow" />.</summary>
        <returns>Un <see cref="T:System.Data.DataTable" /> qui contient la séquence d’entrée comme type de <see cref="T:System.Data.DataRow" /> objets.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `T` du paramètre d’entrée `source` peut uniquement être de type <xref:System.Data.DataRow> ou un type dérivé <xref:System.Data.DataRow>.  
  
 La séquence d’entrée peut être un <xref:System.Collections.Generic.IEnumerable%601> source, non seulement une requête ou une requête sur un <xref:System.Data.DataTable>. Notez que si la séquence source est une requête, l’appel de cet opérateur forcera l’exécution immédiate. L’énumération de la séquence source peut également provoquer la levée d’exceptions.  
  
 Le schéma de la table de destination est basé sur le schéma de la première <xref:System.Data.DataRow> ligne dans la séquence source. Les métadonnées de table sont extraites les <xref:System.Data.DataRow> métadonnées et la table de valeurs à partir des valeurs de colonne de la <xref:System.Data.DataRow>. Pour un typé <xref:System.Data.DataTable>, les types ne sont pas conservés. Les données et le schéma sont transférées, mais les lignes résultant de la table de sortie ne sera pas de typée <xref:System.Data.DataRow> type. Le <xref:System.Data.DataRow.RowState%2A> et <xref:System.Data.DataRow.RowError%2A> propriétés ne sont pas conservées lors de la copie à partir de la source <xref:System.Data.DataRow> à retourné <xref:System.Data.DataTable>.  
  
 Quand un **null** type référence ou nullable avec une valeur de **null** se trouve dans une source de <xref:System.Data.DataRow>, cette méthode remplace la valeur dans la destination <xref:System.Data.DataTable> avec la valeur <xref:System.DBNull.Value>.  
  
 La table générée retournée par la méthode a le nom de table par défaut. Si vous souhaitez nommer le <xref:System.Data.DataTable>, joignez-le à un <xref:System.Data.DataSet>, ou effectuer toute autre <xref:System.Data.DataTable> opération spécifique, vous devez le faire une fois que la table est créée et retournée.  
  
 Pour plus d’informations, consultez [création d’un DataTable à partir d’une requête](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
   
  
## Examples  
 L’exemple suivant interroge la table SalesOrderHeader pour les commandes après le 8 août 2001 et utilise le <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> méthode pour créer un <xref:System.Data.DataTable> à partir de cette requête. Le <xref:System.Data.DataTable> est ensuite lié à une <xref:System.Windows.Forms.BindingSource> qui agit en tant que proxy pour une <xref:System.Windows.Forms.DataGridView>.  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La source de <see cref="T:System.Collections.Generic.IEnumerable`1" /> séquence est <see langword="null" /> et une nouvelle table ne peut pas être créée.</exception>
        <exception cref="T:System.InvalidOperationException">Un <see cref="T:System.Data.DataRow" /> dans la source de séquence a un état <see cref="F:System.Data.DataRowState.Deleted" />.  
  
La séquence source ne contient aucun <see cref="T:System.Data.DataRow" /> objets.  
  
Un <see cref="T:System.Data.DataRow" /> dans la source de la séquence est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type d’objets dans la séquence source, en général <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">La source <see cref="T:System.Collections.Generic.IEnumerable`1" /> séquence.</param>
        <param name="table"><see cref="T:System.Data.DataTable" /> de destination.</param>
        <param name="options">Un <see cref="T:System.Data.LoadOption" /> énumération qui spécifie le <see cref="T:System.Data.DataTable" /> options de chargement.</param>
        <summary>Copies <see cref="T:System.Data.DataRow" /> objets spécifié <see cref="T:System.Data.DataTable" />, étant donné une entrée <see cref="T:System.Collections.Generic.IEnumerable`1" /> objet où le paramètre générique <paramref name="T" /> est <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `T` du paramètre d’entrée `source` peut uniquement être de type <xref:System.Data.DataRow>, ou un type dérivé <xref:System.Data.DataRow>.  
  
 La séquence d’entrée peut être un <xref:System.Collections.Generic.IEnumerable%601> source, pas uniquement une requête sur un <xref:System.Data.DataTable>. Notez que si la séquence source est une requête, l’appel de cet opérateur forcera l’exécution immédiate. L’énumération de la séquence source peut également provoquer la levée d’exceptions.  
  
 Le schéma de la table de destination est basé sur le schéma de la première <xref:System.Data.DataRow> ligne dans la séquence source. Les métadonnées de table sont extraites les <xref:System.Data.DataRow> métadonnées et la table de valeurs à partir des valeurs de colonne de la <xref:System.Data.DataRow>. Pour un typé <xref:System.Data.DataTable>, les types ne sont pas conservés. Les données et le schéma sont transférées, mais les lignes résultant de la table de sortie ne sera pas de typée <xref:System.Data.DataRow> type. Le <xref:System.Data.DataRow.RowState%2A> et <xref:System.Data.DataRow.RowError%2A> propriétés ne sont pas conservées lors de la copie à partir de la source <xref:System.Data.DataRow> à retourné <xref:System.Data.DataTable>.  
  
 Quand un **null** type référence ou nullable avec une valeur de **null** se trouve dans une source de <xref:System.Data.DataRow>, cette méthode remplace la valeur dans la destination <xref:System.Data.DataTable> avec la valeur <xref:System.DBNull.Value>.  
  
 La table générée retournée par la méthode a le nom de table par défaut. Si vous souhaitez nommer le <xref:System.Data.DataTable>, joignez-le à un <xref:System.Data.DataSet>, ou effectuer toute autre <xref:System.Data.DataTable> opération spécifique, vous devez le faire une fois que la table est créée et retournée.  
  
 Pour plus d’informations, consultez [création d’un DataTable à partir d’une requête](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Copié <see cref="T:System.Data.DataRow" /> objets ne tiennent pas le schéma de destination <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">La source de <see cref="T:System.Collections.Generic.IEnumerable`1" /> séquence est <see langword="null" /> ou la destination <see cref="T:System.Data.DataTable" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un <see cref="T:System.Data.DataRow" /> dans la source de séquence a un état <see cref="F:System.Data.DataRowState.Deleted" />.  
  
La séquence source ne contient aucun <see cref="T:System.Data.DataRow" /> objets.  
  
Un <see cref="T:System.Data.DataRow" /> dans la source de la séquence est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type d’objets dans la séquence source, en général <see cref="T:System.Data.DataRow" />.</typeparam>
        <param name="source">La source <see cref="T:System.Collections.Generic.IEnumerable`1" /> séquence.</param>
        <param name="table"><see cref="T:System.Data.DataTable" /> de destination.</param>
        <param name="options">Un <see cref="T:System.Data.LoadOption" /> énumération qui spécifie le <see cref="T:System.Data.DataTable" /> options de chargement.</param>
        <param name="errorHandler">Un <see cref="T:System.Data.FillErrorEventHandler" /> délégué qui représente la méthode qui gérera une erreur.</param>
        <summary>Copies <see cref="T:System.Data.DataRow" /> objets spécifié <see cref="T:System.Data.DataTable" />, étant donné une entrée <see cref="T:System.Collections.Generic.IEnumerable`1" /> objet où le paramètre générique <paramref name="T" /> est <see cref="T:System.Data.DataRow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le paramètre `T` du paramètre d’entrée `source` peut uniquement être de type <xref:System.Data.DataRow>, ou un type dérivé <xref:System.Data.DataRow>.  
  
 La séquence d’entrée peut être un <xref:System.Collections.Generic.IEnumerable%601> source, pas uniquement une requête sur un <xref:System.Data.DataTable>. Notez que si la séquence source est une requête, l’appel de cet opérateur forcera l’exécution immédiate. L’énumération de la séquence source peut également provoquer la levée d’exceptions.  
  
 Le schéma de la table de destination est basé sur le schéma de la première <xref:System.Data.DataRow> ligne dans la séquence source. Les métadonnées de table sont extraites les <xref:System.Data.DataRow> métadonnées et la table de valeurs à partir des valeurs de colonne de la <xref:System.Data.DataRow>. Pour un typé <xref:System.Data.DataTable>, les types ne sont pas conservés. Les données et le schéma sont transférées, mais les lignes résultant de la table de sortie ne sera pas de typée <xref:System.Data.DataRow> type. Le <xref:System.Data.DataRow.RowState%2A> et <xref:System.Data.DataRow.RowError%2A> propriétés ne sont pas conservées lors de la copie à partir de la source <xref:System.Data.DataRow> à retourné <xref:System.Data.DataTable>.  
  
 Quand un **null** type référence ou nullable avec une valeur de **null** se trouve dans une source de <xref:System.Data.DataRow>, cette méthode remplace la valeur dans la destination <xref:System.Data.DataTable> avec la valeur <xref:System.DBNull.Value>.  
  
 La table générée retournée par la méthode a le nom de table par défaut. Si vous souhaitez nommer le <xref:System.Data.DataTable>, joignez-le à un <xref:System.Data.DataSet>, ou effectuer toute autre <xref:System.Data.DataTable> opération spécifique, vous devez le faire une fois que la table est créée et retournée.  
  
 Si une exception est levée pendant la copie d’une ligne de données dans la table cible, par exemple une exception de contrainte, le `errorHandler` délégué est appelé. Un <xref:System.Data.FillErrorEventArgs> est passé à la `errorHandler` déléguer avec les valeurs suivantes :  
  
-   Le <xref:System.Data.FillErrorEventArgs.Values%2A> propriété est définie sur une copie de la source de données.  
  
-   Le <xref:System.Data.FillErrorEventArgs.DataTable%2A> propriété est définie sur la cible <xref:System.Data.DataTable>.  
  
-   Le <xref:System.Data.FillErrorEventArgs.Errors%2A> propriété est définie sur l’exception interceptée.  
  
 Le <xref:System.Data.FillErrorEventArgs.Continue%2A> propriété est lue après le retour de l’appel de délégué. Si le <xref:System.Data.FillErrorEventArgs.Continue%2A> propriété est `true`, la séquence source continue d’être énumérée et chargée dans la table de données. Si le <xref:System.Data.FillErrorEventArgs.Continue%2A> propriété est `false`, l’exception d’origine est levée à partir de la <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> (méthode).  
  
 Pour plus d’informations, consultez [création d’un DataTable à partir d’une requête](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Copié <see cref="T:System.Data.DataRow" /> objets ne tiennent pas le schéma de destination <see cref="T:System.Data.DataTable" />.</exception>
        <exception cref="T:System.ArgumentNullException">La source de <see cref="T:System.Collections.Generic.IEnumerable`1" /> séquence est <see langword="null" /> ou la destination <see cref="T:System.Data.DataTable" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Un <see cref="T:System.Data.DataRow" /> dans la source de séquence a un état <see cref="F:System.Data.DataRowState.Deleted" />.  
  
ou 
La séquence source ne contient aucun <see cref="T:System.Data.DataRow" /> objets.  
  
ou 
Un <see cref="T:System.Data.DataRow" /> dans la source de la séquence est <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>