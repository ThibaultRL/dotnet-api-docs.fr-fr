<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e65121e206c763fb02644d6048fb6d2250fa3ed4" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65004931" /></Metadata><TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une collection d'objets <see cref="T:System.Windows.Forms.TreeNode" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, et <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> méthodes permettent d’ajouter et supprimer des nœuds d’arbre individuels à partir de la collection.  
  
> [!NOTE]
>  Énumérer la collection et la suppression de nœuds ne sont pas pris en charge.  
  
 Vous pouvez également utiliser le <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes pour ajouter ou supprimer tous les nœuds d’arbre de la collection.  
  
 Impossible d’hériter de classes à partir de la <xref:System.Windows.Forms.TreeNodeCollection> classe.  
  
   
  
## Examples  
 L’exemple de code suivant affiche les informations client dans un <xref:System.Windows.Forms.TreeView> contrôle. Les nœuds d’arbre racine affichent les noms des clients et les nœuds d’arbre enfants affichent les numéros de commande affectés à chaque client. Dans cet exemple, 1 000 clients sont affichés avec 15 commandes. Le redessin du <xref:System.Windows.Forms.TreeView> est supprimée à l’aide de la <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> et <xref:System.Windows.Forms.TreeView.EndUpdate%2A> méthodes et une attente <xref:System.Windows.Forms.Cursor> s’affiche alors que le <xref:System.Windows.Forms.TreeView> crée et peint le <xref:System.Windows.Forms.TreeNode> objets. Cet exemple nécessite que vous avez un `Customer` objet qui peut contenir une collection de `Order` objets. Il requiert également que vous avez créé une instance d’un <xref:System.Windows.Forms.TreeView> control sur un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute un nouveau nœud d'arbre à la collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte d'étiquette affiché par <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Ajoute un nouveau nœud d'arbre à la fin de la collection de nœuds d'arbre en cours avec le texte d'étiquette spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> représentant le nœud d'arbre ajouté à la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 Pour supprimer un <xref:System.Windows.Forms.TreeNode> que vous avez ajouté précédemment, utilisez le <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant affiche les informations client dans un <xref:System.Windows.Forms.TreeView> contrôle. Les nœuds d’arbre racine affichent les noms des clients et les nœuds d’arbre enfants affichent les numéros de commande affectés à chaque client. Dans cet exemple, 1 000 clients sont affichés avec 15 commandes. Le redessin du <xref:System.Windows.Forms.TreeView> est supprimée à l’aide de la <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> et <xref:System.Windows.Forms.TreeView.EndUpdate%2A> méthodes et une attente <xref:System.Windows.Forms.Cursor> s’affiche alors que le <xref:System.Windows.Forms.TreeView> crée et peint le <xref:System.Windows.Forms.TreeNode> objets. Cet exemple nécessite que vous avez un `Customer` objet qui peut contenir une collection de `Order` objets. Il requiert également que vous avez créé une instance d’un <xref:System.Windows.Forms.TreeView> control sur un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.TreeNode -&gt; int&#xA;override this.Add : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.Add node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">Objet <see cref="T:System.Windows.Forms.TreeNode" /> à ajouter à la collection.</param>
        <summary>Ajoute un nœud d'arbre précédemment créé à la fin de la collection de nœuds d'arbre.</summary>
        <returns>Valeur d'index de base zéro du <see cref="T:System.Windows.Forms.TreeNode" /> ajouté à la collection de nœuds d'arbre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette version de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> méthode vous permet d’ajouter précédemment créé <xref:System.Windows.Forms.TreeNode> objets à la fin de la collection de nœuds d’arborescence.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 Pour supprimer un <xref:System.Windows.Forms.TreeNode> que vous avez ajouté précédemment, utilisez le <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes.  
  
> [!NOTE]
>  Un <xref:System.Windows.Forms.TreeNode> peuvent être affectés à un seul <xref:System.Windows.Forms.TreeView> contrôle à la fois. Pour ajouter le nœud d’arbre à un nouveau contrôle arborescence, vous devez le supprimer à partir de l’autre arborescence tout d’abord ou le cloner.  
  
   
  
## Examples  
 L’exemple de code suivant affiche les informations client dans un <xref:System.Windows.Forms.TreeView> contrôle. Les nœuds d’arbre racine affichent les noms des clients et les nœuds d’arbre enfants affichent les numéros de commande affectés à chaque client. Dans cet exemple, 1 000 clients sont affichés avec 15 commandes. Le redessin du <xref:System.Windows.Forms.TreeView> est supprimée à l’aide de la <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> et <xref:System.Windows.Forms.TreeView.EndUpdate%2A> méthodes et une attente <xref:System.Windows.Forms.Cursor> s’affiche alors que le <xref:System.Windows.Forms.TreeView> crée et peint le <xref:System.Windows.Forms.TreeNode> objets. Cet exemple nécessite que vous avez un `Customer` objet qui peut contenir une collection de `Order` objets. Il requiert également que vous avez créé une instance d’un <xref:System.Windows.Forms.TreeView> control sur un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="node" /> est actuellement assigné à un autre <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nouveau nœud d'arbre avec la clé et le texte spécifiés, et l'ajoute à la collection.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> ajouté à la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageIndex">Index de l'image à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et l'image spécifiés et l'ajoute à la collection.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> ajouté à la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le `imageIndex` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 Le nœud d’arbre est ajouté à la fin de la collection. Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageKey">Image à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et l'image spécifiés et l'ajoute à la collection.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> ajouté à la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le nœud d’arbre est ajouté à la fin de la collection. Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 Le `imageKey` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageIndex">Index de l'image à afficher dans le nœud d'arbre.</param>
        <param name="selectedImageIndex">Index de l'image à afficher dans le nœud d'arbre lorsqu'il est dans un état sélectionné.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et les images spécifiés et l'ajoute à la collection.</summary>
        <returns>Nœud d'arbre ajouté à la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le nœud d’arbre est ajouté à la fin de la collection. Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 Le `imageIndex` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 Le `selectedImageIndex` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.StateImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageKey">Clé de l'image à afficher dans le nœud d'arbre.</param>
        <param name="selectedImageKey">Clé de l'image à afficher lorsque le nœud est dans un état sélectionné.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et les images spécifiés et l'ajoute à la collection.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> ajouté à la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le nœud d’arbre est ajouté à la fin de la collection. Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
 Le `imageKey` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 Le `selectedImageKey` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.StateImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.TreeNode[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.TreeNode[] -&gt; unit" Usage="treeNodeCollection.AddRange nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">Tableau d'objets <see cref="T:System.Windows.Forms.TreeNode" /> représentant les nœuds d'arbre à ajouter à la collection.</param>
        <summary>Ajoute un tableau de nœuds d'arbre précédemment créés à la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode> objets contenus dans le `nodes` tableau sont ajoutées à la fin de la collection.  
  
 Vous pouvez utiliser la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthode pour ajouter rapidement un groupe de précédemment créé <xref:System.Windows.Forms.TreeNode> objets à la collection au lieu d’ajouter manuellement chaque <xref:System.Windows.Forms.TreeNode> à la collection en utilisant la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> (méthode).  
  
 Pour supprimer un <xref:System.Windows.Forms.TreeNode> que vous avez ajouté précédemment, utilisez le <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes.  
  
   
  
## Examples  
 Le code suivant exemple copies le <xref:System.Windows.Forms.TreeNodeCollection> à partir d’un <xref:System.Windows.Forms.TreeView> à une table temporaire <xref:System.Array>, puis ajoute le contenu du tableau à un autre <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> (méthode). Le <xref:System.Windows.Forms.TreeNodeCollection> à partir de la source <xref:System.Windows.Forms.TreeView> est désactivée à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> (méthode). Cet exemple nécessite que vous avez deux <xref:System.Windows.Forms.TreeView> des contrôles, un avec une collection de <xref:System.Windows.Forms.TreeNode> objets.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nodes" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="nodes" /> est l'enfant d'un autre <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les nœuds d'arbre de la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette méthode pour effacer la collection de nœuds d’arbre à partir d’une arborescence entière.  
  
 Pour supprimer un seul nœud d’arbre de la collection, utilisez la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> méthodes.  
  
 Pour ajouter de nouveaux <xref:System.Windows.Forms.TreeNode> objets à la collection, utilisez la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
   
  
## Examples  
 Le code suivant exemple copies le <xref:System.Windows.Forms.TreeNodeCollection> à partir d’un <xref:System.Windows.Forms.TreeView> à une table temporaire <xref:System.Array>, puis ajoute le contenu du tableau à un autre <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> (méthode). Le <xref:System.Windows.Forms.TreeNodeCollection> à partir de la source <xref:System.Windows.Forms.TreeView> est désactivée à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> (méthode). Cet exemple nécessite que vous avez deux <xref:System.Windows.Forms.TreeView> des contrôles, un avec une collection de <xref:System.Windows.Forms.TreeNode> objets.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à rechercher dans la collection.</param>
        <summary>Détermine si le nœud d'arbre spécifié est un membre de la collection.</summary>
        <returns><see langword="true" /> si <see cref="T:System.Windows.Forms.TreeNode" /> est membre de la collection ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vous permet de déterminer si un <xref:System.Windows.Forms.TreeNode> est un membre de la collection avant de tenter d’effectuer des opérations sur le <xref:System.Windows.Forms.TreeNode>. Vous pouvez utiliser cette méthode pour vérifier qu’un <xref:System.Windows.Forms.TreeNode> a été ajouté à ou est toujours un membre de la collection.  
  
 La quantité de temps de cette méthode est proportionnelle à la taille de la collection de nœuds, vous pouvez donc éviter de l’utiliser avec les grandes collections.  
  
 Cette méthode vérifie l’égalité des références uniquement. Vous ne pouvez pas l’utiliser pour déterminer si un nœud équivalent, mais différent est dans la collection.  
  
> [!NOTE]
>  Une conséquence de l’exigence d’égalité de référence est que vous ne pouvez pas personnaliser le comportement de cette méthode pour dérivés <xref:System.Windows.Forms.TreeNode> types en substituant le <xref:System.Object.Equals%2A> méthode de la <xref:System.Windows.Forms.TreeNode> classe.  
  
   
  
## Examples  
 L’exemple de code suivant détermine si une certaine <xref:System.Windows.Forms.TreeNode> se trouve dans un <xref:System.Windows.Forms.TreeNodeCollection>, puis énumère la collection. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> avec un <xref:System.Windows.Forms.TreeView> qui a un <xref:System.Windows.Forms.TreeNodeCollection> qui contient un <xref:System.Windows.Forms.TreeNode> nommé `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="treeNodeCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du <see cref="T:System.Windows.Forms.TreeNode" /> à rechercher.</param>
        <summary>Détermine si la collection contient un nœud d'arbre avec la clé spécifiée.</summary>
        <returns><see langword="true" /> pour indiquer si la collection contient <see cref="T:System.Windows.Forms.TreeNode" /> avec la clé spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparaison de clé ne respecte pas la casse. Si le `key` paramètre est `null` ou une chaîne vide, le <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> retourne de la propriété `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="treeNodeCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Tableau de destination.</param>
        <param name="index">Index auquel le stockage commence dans le tableau de destination.</param>
        <summary>Copie l'ensemble de la collection dans un tableau existant, à un emplacement spécifié dans le tableau.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant affiche le nombre de <xref:System.Windows.Forms.TreeNode> des objets dans un <xref:System.Windows.Forms.TreeNodeCollection>, copie le contenu de la collection à un <xref:System.Object> de tableau et affiche une liste de nœuds d’arbre dans un <xref:System.Windows.Forms.Label> contrôle. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.TreeView> avec au moins un <xref:System.Windows.Forms.TreeNode> dans son <xref:System.Windows.Forms.TreeNodeCollection>et un <xref:System.Windows.Forms.Label> control sur un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre total d'objets <see cref="T:System.Windows.Forms.TreeNode" /> dans la collection.</summary>
        <value>Nombre total d'objets <see cref="T:System.Windows.Forms.TreeNode" /> dans la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> propriété contient le nombre de <xref:System.Windows.Forms.TreeNode> objets assignés à la collection. Vous pouvez utiliser la <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> valeur de propriété comme limite supérieure d’une boucle pour itérer une collection.  
  
> [!NOTE]
>  Étant donné que la valeur d’index d’une collection est un index de base zéro, vous devez soustraire un à partir de la variable de boucle. Si vous ne tiennent pas compte de cela, vous dépassez la limite supérieure de la collection et lève un <xref:System.IndexOutOfRangeException> exception.  
  
   
  
## Examples  
 L’exemple de code suivant affiche le nombre de <xref:System.Windows.Forms.TreeNode> des objets dans un <xref:System.Windows.Forms.TreeNodeCollection>, copie le contenu de la collection à un <xref:System.Object> de tableau et affiche une liste de nœuds d’arbre dans un <xref:System.Windows.Forms.Label> contrôle. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.TreeView> avec au moins un <xref:System.Windows.Forms.TreeNode> dans son <xref:System.Windows.Forms.TreeNodeCollection>et un <xref:System.Windows.Forms.Label> control sur un <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.TreeNode[]" Usage="treeNodeCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre à rechercher.</param>
        <param name="searchAllChildren"><see langword="true" /> pour rechercher des nœuds enfants de nœuds d'arbre ; sinon, <see langword="false" />.</param>
        <summary>Recherche les nœuds d'arbre avec la clé spécifiée, et les éventuels sous-nœuds.</summary>
        <returns>Tableau d'objets <see cref="T:System.Windows.Forms.TreeNode" /> dont la propriété correspond à la clé <see cref="P:System.Windows.Forms.TreeNode.Name" /> spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparaison de clé ne respecte pas la casse. Si le `key` paramètre est `null` ou une chaîne vide, ou il n’existe aucune correspondance, le <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> propriété retourne un tableau vide`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un énumérateur qui peut être utilisé pour itérer au sein de la collection de nœuds d'arbre.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> qui représente la collection de nœuds d'arbre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant détermine si une certaine <xref:System.Windows.Forms.TreeNode> se trouve dans un <xref:System.Windows.Forms.TreeNodeCollection>, puis énumère la collection. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> avec un <xref:System.Windows.Forms.TreeView> qui a un <xref:System.Windows.Forms.TreeNodeCollection> qui contient un <xref:System.Windows.Forms.TreeNode> nommé `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à rechercher dans la collection.</param>
        <summary>Retourne l'index du nœud d'arbre spécifié dans la collection.</summary>
        <returns>Index de base zéro de l'élément trouvé dans la collection de nœuds d'arbre ; sinon, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La quantité de temps de cette méthode est proportionnelle à la taille de la collection de nœuds, vous pouvez donc éviter de l’utiliser avec les grandes collections.  
  
 Cette méthode vérifie l’égalité des références uniquement. Vous ne pouvez pas l’utiliser pour récupérer l’index d’un nœud équivalent, mais différent dans la collection.  
  
> [!NOTE]
>  Une conséquence de l’exigence d’égalité de référence est que vous ne pouvez pas personnaliser le comportement de cette méthode pour dérivés <xref:System.Windows.Forms.TreeNode> types en substituant le <xref:System.Object.Equals%2A> méthode de la <xref:System.Windows.Forms.TreeNode> classe.  
  
   
  
## Examples  
 L’exemple de code suivant détermine si une certaine <xref:System.Windows.Forms.TreeNode> se trouve dans un <xref:System.Windows.Forms.TreeNodeCollection>, puis énumère la collection. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> avec un <xref:System.Windows.Forms.TreeView> qui a un <xref:System.Windows.Forms.TreeNodeCollection> qui contient un <xref:System.Windows.Forms.TreeNode> nommé `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="treeNodeCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre à rechercher.</param>
        <summary>Retourne l'index de la première occurrence d'un nœud d'arbre avec la clé spécifiée.</summary>
        <returns>Index de base zéro de la première occurrence du nœud d'arbre avec la clé spécifiée, s'il existe ; sinon, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A> est appelé plusieurs fois, la dernière retournée index est une correspondance de clés d’abord vérifiée, et si aucune correspondance n’est, la recherche commence au début de la collection.  
  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparaison de clé ne respecte pas la casse. Si `key` est `null` ou une chaîne vide, le <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> propriété retourne -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Insère un élément dans la collection au niveau de l'emplacement spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement dans la collection où insérer le nœud.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nœud d'arbre avec le texte spécifié et l'insère à l'index spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> inséré dans la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> est trié de nouveau.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.Forms.TreeNode -&gt; unit&#xA;override this.Insert : int * System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Insert (index, node)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement indexé dans la collection d'insertion du nœud d'arbre.</param>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à insérer dans la collection.</param>
        <summary>Insère un nœud d'arbre existant dans la collection de nœuds d'arbre à l'emplacement spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> retrier.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 Pour supprimer un <xref:System.Windows.Forms.TreeNode> que vous avez ajouté précédemment, utilisez le <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes.  
  
> [!NOTE]
>  Un <xref:System.Windows.Forms.TreeNode> peuvent être affectés à un seul <xref:System.Windows.Forms.TreeView> contrôle à la fois. Pour ajouter le nœud d’arbre à un nouveau contrôle arborescence, vous devez le supprimer à partir de l’autre arborescence tout d’abord ou le cloner.  
  
   
  
## Examples  
 L’exemple de code suivant supprime le nœud d’arbre sélectionné à partir d’un <xref:System.Windows.Forms.TreeView> et l’ajoute à un autre si les deux collections de nœuds d’arborescence ne sont pas en lecture seule. Lorsqu’un <xref:System.Windows.Forms.Button> est activé, le <xref:System.Windows.Forms.TreeNode> représenté par le <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> propriété est supprimée d’un <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (méthode) et ajouté à l’autre <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (méthode). Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> qui contient deux <xref:System.Windows.Forms.TreeView> contrôles et un <xref:System.Windows.Forms.Button>. Le <xref:System.Windows.Forms.TreeView> contrôles doivent être nommés `treeView1` et `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="node" /> est actuellement assigné à un autre <see cref="T:System.Windows.Forms.TreeView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement dans la collection où insérer le nœud.</param>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nœud d'arbre avec le texte et la clé spécifiés et indexe celui-ci dans la collection.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> inséré dans la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> est trié de nouveau.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement dans la collection où insérer le nœud.</param>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageIndex">Index de l'image à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et l'image spécifiés, et l'insère dans la collection à l'index spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> inséré dans la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> est trié de nouveau.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le `imageIndex` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement dans la collection où insérer le nœud.</param>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageKey">Clé de l'image à afficher dans le nœud d'arbre.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et l'image spécifiés, et l'insère dans la collection à l'index spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> inséré dans la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> est trié de nouveau.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le `imageKey` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" Index="4" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement dans la collection où insérer le nœud.</param>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageIndex">Index de l'image à afficher dans le nœud d'arbre.</param>
        <param name="selectedImageIndex">Index de l'image à afficher dans le nœud d'arbre lorsqu'il est dans un état sélectionné.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et les image spécifiés, et l'insère dans la collection à l'index spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> inséré dans la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> est trié de nouveau.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le `imageIndex` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 Le `selectedimageIndex` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.StateImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageKey" Type="System.String" Index="4" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement dans la collection où insérer le nœud.</param>
        <param name="key">Nom du nœud d'arbre.</param>
        <param name="text">Texte à afficher dans le nœud d'arbre.</param>
        <param name="imageKey">Clé de l'image à afficher dans le nœud d'arbre.</param>
        <param name="selectedImageKey">Clé de l'image à afficher dans le nœud d'arbre lorsqu'il est dans un état sélectionné.</param>
        <summary>Crée un nœud d'arbre avec la clé, le texte et les image spécifiés, et l'insère dans la collection à l'index spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> inséré dans la collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` valeur du paramètre est ignorée. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Windows.Forms.TreeView> est trié de nouveau.  
  
 Vous pouvez également ajouter de nouvelles <xref:System.Windows.Forms.TreeNode> objets à la collection à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> méthodes.  
  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Le `imageKey` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.ImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 Le `selectedimageKey` paramètre fait référence à une image dans le <xref:System.Windows.Forms.TreeView.StateImageList%2A> propriété du parent <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la collection est en lecture seule.</summary>
        <value><see langword="true" /> si la collection est en lecture seule ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant supprime le nœud d’arbre sélectionné à partir d’un <xref:System.Windows.Forms.TreeView> et l’ajoute à un autre si les deux collections de nœuds d’arborescence ne sont pas en lecture seule. Lorsqu’un <xref:System.Windows.Forms.Button> est activé, le <xref:System.Windows.Forms.TreeNode> représenté par le <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> propriété est supprimée d’un <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (méthode) et ajouté à l’autre <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (méthode). Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> qui contient deux <xref:System.Windows.Forms.TreeView> contrôles et un <xref:System.Windows.Forms.Button>. Le <xref:System.Windows.Forms.TreeView> contrôles doivent être nommés `treeView1` et `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient ou définit un nœud d'arbre dans la collection.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.TreeNode with get, set" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement indexé du <see cref="T:System.Windows.Forms.TreeNode" /> dans la collection.</param>
        <summary>Obtient ou définit <see cref="T:System.Windows.Forms.TreeNode" /> à l'emplacement d'index spécifié dans la collection.</summary>
        <value><see cref="T:System.Windows.Forms.TreeNode" /> à la position d'index spécifiée dans la collection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour affecter des <xref:System.Windows.Forms.TreeNode> objets vers un emplacement spécifique, ou pour les récupérer à partir de la <xref:System.Windows.Forms.TreeNodeCollection>, vous pouvez référencer l’objet de collection avec une valeur d’index spécifique. La valeur d’index de la <xref:System.Windows.Forms.TreeNodeCollection> est un index de base zéro.  
  
   
  
## Examples  
 L’exemple de code suivant supprime le premier <xref:System.Windows.Forms.TreeNode> à partir d’un <xref:System.Windows.Forms.TreeView> si son <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> propriété est définie sur « Node0 ». Quand un <xref:System.Windows.Forms.Button> est activé, la première <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeView> est supprimé à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> (méthode). Cet exemple nécessite que vous avez créé un <xref:System.Windows.Forms.TreeView> et un <xref:System.Windows.Forms.Button> sur un <xref:System.Windows.Forms.Form>. La première <xref:System.Windows.Forms.TreeNode> dans votre <xref:System.Windows.Forms.TreeView> doit avoir une propriété « Node0. »  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="index" /> est inférieure à 0 ou supérieure au nombre de nœuds d'arbre dans la collection.</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom de <see cref="T:System.Windows.Forms.TreeNode" /> à récupérer de la collection.</param>
        <summary>Obtient le nœud d'arbre avec la clé spécifiée de la collection.</summary>
        <value><see cref="T:System.Windows.Forms.TreeNode" /> avec la clé spécifiée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 La comparaison de clé ne respecte pas la casse. Si le `key` paramètre est `null` ou une chaîne vide, le <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> retourne de la propriété `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à supprimer.</param>
        <summary>Supprime le nœud d'arbre spécifié de la collection de nœuds d'arbre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quand un <xref:System.Windows.Forms.TreeNode> est supprimé de la collection de nœuds d’arborescence, arborescence de suivantes tous les nœuds sont déplacés vers le haut d’une position dans la collection.  
  
 Vous pouvez également supprimer un <xref:System.Windows.Forms.TreeNode> que vous avez ajouté précédemment à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes.  
  
> [!NOTE]
>  Énumérer la collection et la suppression de nœuds ne sont pas pris en charge.  
  
 Pour ajouter de nouveaux <xref:System.Windows.Forms.TreeNode> objets à la collection, utilisez la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant supprime le nœud d’arbre sélectionné à partir d’un <xref:System.Windows.Forms.TreeView> et l’ajoute à un autre si les deux collections de nœuds d’arborescence ne sont pas en lecture seule. Lorsqu’un <xref:System.Windows.Forms.Button> est activé, le <xref:System.Windows.Forms.TreeNode> représenté par le <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> propriété est supprimée d’un <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> (méthode) et ajouté à l’autre <xref:System.Windows.Forms.TreeView> à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> (méthode). Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> qui contient deux <xref:System.Windows.Forms.TreeView> contrôles et un <xref:System.Windows.Forms.Button>. Le <xref:System.Windows.Forms.TreeView> contrôles doivent être nommés `treeView1` et `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index du <see cref="T:System.Windows.Forms.TreeNode" /> à supprimer.</param>
        <summary>Supprime un nœud d'arbre de la collection de nœuds d'arbre à un index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quand un <xref:System.Windows.Forms.TreeNode> est supprimé de la collection de nœuds d’arborescence, arborescence de suivantes tous les nœuds sont déplacés vers le haut d’une position dans la collection.  
  
 Vous pouvez également supprimer un <xref:System.Windows.Forms.TreeNode> que vous avez ajouté précédemment à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> ou <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> méthodes.  
  
> [!NOTE]
>  Énumérer la collection et la suppression de nœuds ne sont pas pris en charge.  
  
 Pour ajouter de nouveaux <xref:System.Windows.Forms.TreeNode> objets à la collection, utilisez la <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, ou <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> méthodes.  
  
   
  
## Examples  
 L’exemple de code suivant supprime le premier <xref:System.Windows.Forms.TreeNode> à partir d’un <xref:System.Windows.Forms.TreeView> si son <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> propriété est définie sur « Node0 ». Quand un <xref:System.Windows.Forms.Button> est activé, la première <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeView> est supprimé à l’aide de la <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> (méthode). Cet exemple nécessite que vous avez créé un <xref:System.Windows.Forms.TreeView> et un <xref:System.Windows.Forms.Button> sur un <xref:System.Windows.Forms.Form>. La première <xref:System.Windows.Forms.TreeNode> dans votre <xref:System.Windows.Forms.TreeView> doit avoir une propriété « Node0. »  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="treeNodeCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nom du nœud d'arbre à supprimer de la collection.</param>
        <summary>Supprime le nœud d'arbre avec la clé spécifiée de la collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TreeNode.Name%2A> propriété correspond à la clé pour un <xref:System.Windows.Forms.TreeNode> dans le <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l’accès à la collection est synchronisé (thread-safe).</summary>
        <value><see langword="false" /> dans tous les cas.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
        <value>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Objet à ajouter à la collection de nœuds d'arbre.</param>
        <summary>Ajoute un objet à la fin de la collection de nœuds d'arbre.</summary>
        <returns>Valeur d'index de base zéro de <see cref="T:System.Windows.Forms.TreeNode" /> ajouté à la collection de nœuds d'arbre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `node` n’est pas un <xref:System.Windows.Forms.TreeNodeCollection>, le <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A> méthode utilisera la chaîne retournée par la <xref:System.Windows.Forms.TreeNode.ToString%2A> méthode de la <xref:System.Windows.Forms.TreeNode> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="node" /> est actuellement assigné à un autre contrôle <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="node" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Objet à rechercher dans la collection.</param>
        <summary>Détermine si le nœud d'arbre spécifié est un membre de la collection.</summary>
        <returns><see langword="true" /> si <paramref name="node" /> est un membre de la collection ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `node` n’est pas un <xref:System.Windows.Forms.TreeNode>, le <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A> retourne de la méthode `false`. Par conséquent, vous ne pouvez pas passer dans une chaîne pour déterminer si la collection contient un nœud qui a la valeur de la chaîne en tant que son <xref:System.Windows.Forms.TreeNode.Text%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à rechercher dans la collection.</param>
        <summary>Retourne l'index du nœud d'arbre spécifié dans la collection.</summary>
        <returns>Index de base zéro de l'élément trouvé dans la collection de nœuds d'arbre ; sinon, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `node` n’est pas un <xref:System.Windows.Forms.TreeNode>, le <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A> méthode retourne -1. Par conséquent, vous ne pouvez pas passer dans une chaîne pour rechercher le nœud qui a la valeur de la chaîne en tant que son <xref:System.Windows.Forms.TreeNode.Text%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Emplacement indexé dans la collection d'insertion du nœud d'arbre.</param>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à insérer dans la collection.</param>
        <summary>Insère un nœud d'arbre existant dans la collection de nœuds d'arbre à l'emplacement spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.TreeView.Sorted%2A> propriété est définie sur `true`, le `index` paramètre est ignoré. Le <xref:System.Windows.Forms.TreeNode> est inséré dans l’arborescence et le <xref:System.Web.UI.WebControls.TreeView> est trié de nouveau.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="node" /> est actuellement assigné à un autre <see cref="T:System.Windows.Forms.TreeView" />.  
  
ou 
 <paramref name="node" /> n’est pas un <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la collection de nœuds d'arbre est de taille fixe.</summary>
        <value><see langword="false" /> dans tous les cas.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro auquel obtenir ou définir l'élément.</param>
        <summary>Obtient ou définit le nœud d'arbre situé à l'index spécifié dans la collection.</summary>
        <value><see cref="T:System.Windows.Forms.TreeNode" /> à l'index spécifié dans <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">La valeur définie n'est pas <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> à supprimer de la collection.</param>
        <summary>Supprime le nœud d'arbre spécifié de la collection de nœuds d'arbre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous ne pouvez pas passer dans une chaîne pour supprimer le nœud qui a la valeur de la chaîne en tant que son <xref:System.Windows.Forms.TreeNode.Text%2A> propriété.  
  
 Quand un <xref:System.Windows.Forms.TreeNode> est supprimé de la collection de nœuds d’arborescence, arborescence de suivantes tous les nœuds sont déplacés vers le haut d’une position dans la collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>