<Type Name="MouseEventArgs" FullName="System.Windows.Forms.MouseEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9129e6322a669ecbc6a5571e469d2212a517a865" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015388" /></Metadata><TypeSignature Language="C#" Value="public class MouseEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MouseEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class MouseEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class MouseEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type MouseEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit les données des événements <see cref="E:System.Windows.Forms.Control.MouseUp" />, <see cref="E:System.Windows.Forms.Control.MouseDown" /> et <see cref="E:System.Windows.Forms.Control.MouseMove" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Control.MouseDown> événement se produit lorsque l’utilisateur appuie sur le bouton de la souris alors que le pointeur est sur un contrôle. Le <xref:System.Windows.Forms.Control.MouseUp> événement se produit lorsque l’utilisateur relâche le bouton de la souris lorsque le pointeur reste sur le contrôle. Le <xref:System.Windows.Forms.Control.MouseMove> événement se produit lorsque l’utilisateur déplace le pointeur de la souris sur un contrôle. Un <xref:System.Windows.Forms.MouseEventArgs> spécifie quel bouton de la souris est enfoncé, combien de fois le bouton de la souris a été enfoncé et relâché, les coordonnées de la souris et la quantité de la roulette de la souris.  
  
 Il est possible de recevoir un <xref:System.Windows.Forms.Control.MouseDown> événement sans correspondante <xref:System.Windows.Forms.Control.MouseUp>, si l’utilisateur bascule le focus vers une autre application avant de relâcher le bouton de la souris.  
  
 Ces trois événements existent pour le <xref:System.Windows.Forms.Control>, <xref:System.Windows.Forms.AxHost>, et <xref:System.Windows.Forms.NotifyIcon> classes.  
  
 Pour plus d’informations sur le modèle d’événement, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Le code suivant gère des exemples le <xref:System.Windows.Forms.Control.MouseDown> événement sur un <xref:System.Windows.Forms.TextBox> contrôler afin que le bouton droit de la souris sélectionne tout le texte dans le contrôle. Cet exemple nécessite que vous disposez d’un formulaire qui contient un <xref:System.Windows.Forms.TextBox> contrôle nommé `textBox1`.  
  
 [!code-csharp[MouseEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#1)]
 [!code-vb[MouseEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#1)]  
  
 Le code suivant exemple utilise le `Location` clique de propriété pour effectuer le suivi du bouton gauche de la souris et dessiner une série de segments de ligne droite en réponse à une entrée utilisateur. L’exemple ne redessine pas les lignes si vous masquez le formulaire et réaffichez ensuite ; Ce code a été omis par souci de simplicité.  
  
 [!code-csharp[MouseEventArgs#2](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#2)]
 [!code-vb[MouseEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#2)]  
  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MouseEventArgs.X%2A> et <xref:System.Windows.Forms.MouseEventArgs.Y%2A> propriétés pour afficher la position actuelle du pointeur de la souris dans un <xref:System.Windows.Forms.ToolTip> fenêtre.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
    <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseDown" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseUp" />
    <altmember cref="E:System.Windows.Forms.NotifyIcon.MouseMove" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseEventArgs (System.Windows.Forms.MouseButtons button, int clicks, int x, int y, int delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MouseButtons button, int32 clicks, int32 x, int32 y, int32 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (button As MouseButtons, clicks As Integer, x As Integer, y As Integer, delta As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MouseEventArgs(System::Windows::Forms::MouseButtons button, int clicks, int x, int y, int delta);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MouseEventArgs : System.Windows.Forms.MouseButtons * int * int * int * int -&gt; System.Windows.Forms.MouseEventArgs" Usage="new System.Windows.Forms.MouseEventArgs (button, clicks, x, y, delta)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.MouseButtons" />
        <Parameter Name="clicks" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="delta" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="button">Parmi les <see cref="T:System.Windows.Forms.MouseButtons" /> valeurs qui indiquent quel bouton de la souris a été enfoncé.</param>
        <param name="clicks">Le nombre de fois où qu'un bouton de la souris a été enfoncé.</param>
        <param name="x">Coordonnée x d’un clic de souris, en pixels.</param>
        <param name="y">Coordonnée y d’un clic de souris, en pixels.</param>
        <param name="delta">Décompte signé du nombre de détentes de la roulette.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.MouseEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
      </Docs>
    </Member>
    <Member MemberName="Button">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MouseButtons Button { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MouseButtons Button" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Button" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Button As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MouseButtons Button { System::Windows::Forms::MouseButtons get(); };" />
      <MemberSignature Language="F#" Value="member this.Button : System.Windows.Forms.MouseButtons" Usage="System.Windows.Forms.MouseEventArgs.Button" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le bouton de la souris sur lequel l'utilisateur a appuyé.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.MouseButtons" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant exemple gère le <xref:System.Windows.Forms.Control.MouseDown> événement sur un <xref:System.Windows.Forms.TextBox> contrôler afin que le bouton droit de la souris sélectionne tout le texte dans le contrôle. Cet exemple nécessite que vous disposez d’un formulaire qui contient un <xref:System.Windows.Forms.TextBox> contrôle nommé `textBox1`.  
  
 [!code-csharp[MouseEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#1)]
 [!code-vb[MouseEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Clicks" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
    <Member MemberName="Clicks">
      <MemberSignature Language="C#" Value="public int Clicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Clicks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Clicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clicks As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Clicks { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Clicks : int" Usage="System.Windows.Forms.MouseEventArgs.Clicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de fois où l’utilisateur a cliqué sur le bouton de la souris et l’a relâché.</summary>
        <value>Un <see cref="T:System.Int32" /> qui contient le nombre de fois où le bouton de la souris a été enfoncé et relâché.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que l’interface Windows définit standard événements de souris comme un clic simple ou double-clics, les applications peuvent interpréter un plus grand nombre de clics comme un événement unique.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> événement. Ce rapport vous permet de vous apprendre lorsque l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance d’un type qui hérite de <xref:System.Windows.Forms.Control>, comme un <xref:System.Windows.Forms.Button> ou <xref:System.Windows.Forms.ComboBox>. Ensuite, nommez l’instance `Control1` et vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Delta" />
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public int Delta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delta" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Delta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Delta As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delta { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Delta : int" Usage="System.Windows.Forms.MouseEventArgs.Delta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un décompte signé du nombre de détentes de rotation de la roulette de la souris, multiplié par la constante WHEEL_DELTA. Une détente représente un cran de la roulette de la souris.</summary>
        <value>Décompte signé du nombre de détentes de rotation de la roulette de la souris, multiplié par la constante WHEEL_DELTA.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La roulette de souris combine les fonctionnalités d’une roulette et un bouton de la souris. La roulette a crans discrets, espacés de façon uniforme. Lorsque vous faites tourner la roulette, un message de roulette est envoyé comme chaque cran rencontré. Un cran de roulette, une détente, est défini par la constante windows WHEEL_DELTA, 120. Une valeur positive indique que la roulette a été tournée vers l’avant (en s’éloignant de l’utilisateur) ; une valeur négative indique que la roulette a été tournée vers l’arrière (vers l’utilisateur).  
  
 Actuellement, une valeur de 120 est la norme pour une détente. Si la souris de résolution supérieure sont introduites, la définition de WHEEL_DELTA peut être plus petite. La plupart des applications doivent vérifier une valeur positive ou négative plutôt qu’un total agrégat.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> événement. Ce rapport vous permet de vous apprendre lorsque l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance d’un type qui hérite de <xref:System.Windows.Forms.Control>, comme un <xref:System.Windows.Forms.Button> ou <xref:System.Windows.Forms.ComboBox>. Ensuite, nommez l’instance `Control1` et vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.Control.MouseClick?displayProperty=nameWithType> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Clicks" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Location" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point" Usage="System.Windows.Forms.MouseEventArgs.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'emplacement de la souris pendant la génération d'événement de souris.</summary>
        <value>Un <see cref="T:System.Drawing.Point" /> qui contient les coordonnées x - et y de la souris, en pixels, par rapport à l’angle supérieur gauche du formulaire.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MouseEventArgs.Location%2A> propriété pour effectuer le suivi des clics de souris gauche et dessiner une série de segments de ligne droite en réponse à une entrée utilisateur. L’exemple ne conserve pas les lignes dessinées si vous masquez le formulaire et réaffichez ensuite ; Ce code a été omis par souci de simplicité.  
  
 [!code-csharp[MouseEventArgs#2](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#2)]
 [!code-vb[MouseEventArgs#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Y" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.X" />
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Coordonnées Windows Forms</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8cf0070d-793b-4876-b09e-d20d28280fab">Événements liés à la souris dans les Windows Forms</related>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.MouseEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la coordonnée x de la souris pendant la génération de l'événement de souris.</summary>
        <value>Coordonnée x de la souris, en pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les coordonnées de la souris varient en fonction de l’événement déclenché. Par exemple, lorsque le <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> est géré, les valeurs des coordonnées de la souris sont relatives aux coordonnées du contrôle qui a déclenché l’événement. Certains événements liés aux opérations de glisser-déplacer sont associés à des valeurs de coordonnées de la souris par rapport à l’origine du formulaire ou de l’origine de l’écran.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MouseEventArgs.X%2A> et <xref:System.Windows.Forms.MouseEventArgs.Y%2A> propriétés pour afficher la position actuelle du pointeur de la souris dans un <xref:System.Windows.Forms.ToolTip> fenêtre.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Y" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MouseEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.MouseEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la coordonnée y de la souris pendant la génération de l'événement de souris.</summary>
        <value>Coordonnée y de la souris, en pixels.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les coordonnées de la souris varient en fonction de l’événement déclenché. Par exemple, lorsque le <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> est géré, les valeurs des coordonnées de la souris sont relatives aux coordonnées du contrôle qui a déclenché l’événement. Certains événements liés aux opérations de glisser-déplacer sont associés à des valeurs de coordonnées de souris qui sont relatives à l’origine du formulaire ou de l’origine de l’écran.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MouseEventArgs.X%2A> et <xref:System.Windows.Forms.MouseEventArgs.Y%2A> propriétés pour afficher la position actuelle du pointeur de la souris dans un <xref:System.Windows.Forms.ToolTip> fenêtre. Pour utiliser ce code, appelez `TrackCoordinates` à partir du constructeur du formulaire.  
  
 [!code-csharp[MouseEventArgs#3](~/samples/snippets/csharp/VS_Snippets_Winforms/MouseEventArgs/CS/Form1.cs#3)]
 [!code-vb[MouseEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MouseEventArgs/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Button" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.X" />
        <altmember cref="P:System.Windows.Forms.MouseEventArgs.Location" />
      </Docs>
    </Member>
  </Members>
</Type>