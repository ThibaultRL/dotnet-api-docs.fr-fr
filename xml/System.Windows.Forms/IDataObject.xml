<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="107b075d1988af8904fd028834582734403a58f8" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015631" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un mécanisme indépendant du format pour transférer des données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `IDataObject` interface est utilisée par la <xref:System.Windows.Forms.Clipboard> classe et dans les opérations de glisser-déplacer.  
  
 En cas d’implémentation dans une classe, le <xref:System.Windows.Forms.IDataObject> méthodes autorisent l’utilisateur à stocker des données dans plusieurs formats dans une instance de la classe. Stockage des données dans plusieurs formats augmente le risque qu’une application cible, dont vous le savez ne peut-être pas, les exigences de format peut récupérer les données stockées. Pour stocker les données dans une instance de <xref:System.Windows.Forms.IDataObject>, appelez le <xref:System.Windows.Forms.IDataObject.SetData%2A> (méthode) et spécifiez le format de données dans le `format` paramètre. Définir le `autoConvert` paramètre `false` si vous ne souhaitez pas les données stockées à convertir en un autre format lors de leur extraction. Appeler <xref:System.Windows.Forms.IDataObject.SetData%2A> plusieurs fois sur une instance de <xref:System.Windows.Forms.IDataObject> pour stocker les données dans plusieurs formats.  
  
 Récupérer les données stockées à partir d’un <xref:System.Windows.Forms.IDataObject> en appelant le <xref:System.Windows.Forms.IDataObject.GetData%2A> méthode et en spécifiant les données de format dans le `format` paramètre. Définir le `autoConvert` paramètre `false` pour récupérer uniquement les données qui ont été stockées dans le format spécifié. Pour convertir les données stockées dans le format spécifié, affectez `autoConvert` à `true`, ou n’utilisez pas `autoConvert`.  
  
 Pour déterminer les formats des données stockées dans un <xref:System.Windows.Forms.IDataObject>, utilisez la commande suivante <xref:System.Windows.Forms.IDataObject> méthodes.  
  
-   Appelez le <xref:System.Windows.Forms.IDataObject.GetFormats%2A> méthode pour récupérer un tableau de tous les formats dans lesquels les données sont disponibles. Définir le `autoConvert` paramètre `false` pour obtenir uniquement les formats dans lesquels les données sont stockées. Pour obtenir tous les formats dans lesquels les données sont disponibles, définissez `autoConvert` à `true`, ou n’utilisez pas ce paramètre.  
  
-   Appelez le <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> méthode pour déterminer si les données stockées sont disponibles dans un certain format. Si vous ne souhaitez pas que les données stockées à convertir au format spécifié, définissez le `autoConvert` paramètre `false`.  
  
 Consultez la <xref:System.Windows.Forms.DataObject> classe pour une implémentation de cette interface. Consultez le <xref:System.Windows.Forms.DataFormats> classe pour prédéfinis <xref:System.Windows.Forms.Clipboard> formats de données.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Récupère les données associées au format de données spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format des données à récupérer. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <summary>Récupère les données associées au format de données spécifié.</summary>
        <returns>Les données associées au format spécifié, ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette méthode ne peut pas rechercher des données dans le format spécifié, il tente de convertir les données au format. Si les données ne peut pas être converties au format spécifié, cette méthode retourne `null`.  
  
 Pour déterminer si les données sont associées, ou peuvent être converties en un format, appelez <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour obtenir la liste de formats valides pour les données stockées dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject,` pour illustrer l’utilisation de la `GetData` (méthode). La méthode est utilisée pour récupérer les données stockées dans `myDataObject`, qui est associé le `Text` format. L’exemple suppose que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Un <see cref="T:System.Type" /> représentant le format des données à récupérer. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <summary>Récupère les données associées au format de type de classe spécifiée.</summary>
        <returns>Les données associées au format spécifié, ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette méthode ne peut pas rechercher des données dans le format spécifié, il tente de convertir les données au format. Si les données ne peut pas être converties au format spécifié, cette méthode retourne `null`.  
  
 Pour déterminer si les données sont associées, ou peuvent être converties en un format, appelez <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour obtenir la liste de formats valides pour les données stockées dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetData` (méthode). La méthode est utilisée pour récupérer les données stockées dans `myObject`, qui est associé à un type spécifique, `myType`. Le type des données récupérées est affiché dans une boîte de message. L’exemple suppose que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format des données à récupérer. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <param name="autoConvert"><see langword="true" /> Pour convertir les données dans le format spécifié ; Sinon, <see langword="false" />.</param>
        <summary>Récupère les données associées au format de données spécifié, à l’aide d’une valeur booléenne pour déterminer s’il faut convertir les données au format.</summary>
        <returns>Les données associées au format spécifié, ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `autoConvert` paramètre est `true` et cette méthode ne peut pas rechercher des données dans le format spécifié, il essaie de convertir les données au format. Si les données ne peut pas être converties au format spécifié, ou si les données a été stockées avec le `autoConvert` paramètre défini sur `false`, cette méthode retourne `null`.  
  
 Si le `autoConvert` paramètre est `false`, cette méthode retourne les données au format spécifié, ou `null` si aucune donnée dans ce format ne peut être trouvée.  
  
 Pour déterminer si les données sont associées, ou peuvent être converties en un format, appelez <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour obtenir la liste de formats valides pour les données stockées dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetData` (méthode). L’exemple récupère les données stockées dans un `DataObject`, en utilisant le `autoConvert` paramètre pour spécifier s’il faut convertir le format de données. Tout d’abord, `myDataObject` est créé avec les données de texte. L’exemple tente ensuite à deux reprises récupérer les données. Dans la première version d’évaluation, il spécifie son format comme une chaîne et attribue le `autoConvert` paramètre `false`. Cet essai échoue et le résultat est affiché dans une boîte de message intitulée « Message #1 ». Dans la deuxième version d’évaluation, l’exemple récupère les mêmes données avec le `autoConvert` paramètre défini sur `true`. Cette version d’évaluation réussit et le résultat est affiché dans une boîte de message intitulée « Message #2 ». L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si les données stockées dans cette instance sont associées au format spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Le format à vérifier. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <summary>Détermine si les données stockées dans cette instance sont associées, ou peuvent être converties au format spécifié.</summary>
        <returns><see langword="true" /> Si les données stockées dans cette instance est associée, ou peut être convertie au format spécifié ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour déterminer l’existence d’un format dans ce <xref:System.Windows.Forms.DataObject> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour les formats qui sont disponibles dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetDataPresent` (méthode). Tout d’abord, il crée un objet de données à l’aide d’une chaîne et le `Text` format. Puis il vérifie que les données sont présentes dans le `Text` mettre en forme et affiche les résultats dans une boîte de message. L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Un <see cref="T:System.Type" /> représentant le format à vérifier. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <summary>Détermine si les données stockées dans cette instance sont associées, ou peuvent être converties au format spécifié.</summary>
        <returns><see langword="true" /> Si les données stockées dans cette instance est associée, ou peut être convertie au format spécifié ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour déterminer l’existence d’un format dans ce <xref:System.Windows.Forms.DataObject> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour les formats qui sont disponibles dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetDataPresent` (méthode). Tout d’abord, il crée un composant (`myComponent`) et le stocke dans un objet de données (`myDataObject`). Puis il vérifie si les données spécifiées sont stockées dans `myDataObject`. Si le test a la valeur `true`, elle affiche le résultat dans une boîte de message et affiche le type de données dans une zone de texte. Cet exemple suppose que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Le format à vérifier. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <param name="autoConvert"><see langword="true" /> pour déterminer si les données stockées dans cette instance peut être converti au format spécifié ; <see langword="false" /> pour vérifier si les données sont au format spécifié.</param>
        <summary>Détermine si les données stockées dans cette instance sont associées au format spécifié, à l’aide d’une valeur booléenne pour déterminer s’il faut convertir les données au format.</summary>
        <returns><see langword="true" /> Si les données se trouve dans, ou peuvent être converties au format spécifié ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour déterminer l’existence d’un format dans ce <xref:System.Windows.Forms.DataObject> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour les formats qui sont disponibles dans cette instance.  
  
 Cette méthode retourne `true` lorsque :  
  
-   Le `autoConvert` paramètre est `true` et les données sont dans un format qui peut être converti au format approprié.  
  
-   Le `autoConvert` paramètre est `false` et les données sont au format approprié.  
  
 Cette méthode retourne `false` lorsque :  
  
-   Le `autoConvert` paramètre est `true` et cette méthode ne peut pas rechercher des données dans le format spécifié et il ne peut pas convertir des données au format spécifié, ou les données stockées avec `autoConvert` défini sur `false`.  
  
-   Le `autoConvert` paramètre est `false`, et les données n’existent pas dans cette instance au format spécifié.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetDataPresent` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) à l’aide d’une chaîne et le `Text` format. Puis il interroge l’objet pour les données associées à la `Text` format, avec la `autoConvert` paramètre défini sur `false`. Cet essai échoue et le résultat est affiché dans une boîte de message intitulée « Message #1 ». Dans la deuxième version d’évaluation, il définit le `autoConvert` paramètre `true`. Cette version d’évaluation réussit et le résultat est affiché dans une boîte de message intitulée « Message #2 ». L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une liste de tous les formats de données stockées dans cette instance sont associées ou peuvent être converties.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une liste de tous les formats de données stockées dans cette instance sont associées ou peuvent être converties.</summary>
        <returns>Tableau des noms qui représente une liste de tous les formats sont pris en charge par les données stockées dans cet objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour obtenir les formats de données pris en charge avant d’appeler le <xref:System.Windows.Forms.IDataObject.GetData%2A> (méthode). Consultez la <xref:System.Windows.Forms.DataFormats> classe pour les formats prédéfinis.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetFormats` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) à l’aide d’une chaîne et le `Text` format. Puis il récupère tous les formats de données et les formats de conversion de données dans l’objet de données et affiche la liste résultante dans une boîte de message. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" /> pour récupérer tous les formats auxquels les données stockées dans cette instance sont associées ou peuvent être converties ; <see langword="false" /> pour récupérer uniquement les formats de données natifs.</param>
        <summary>Obtient une liste de tous les formats de données stockées dans cette instance sont associées ou peuvent être converties à l’aide d’une valeur booléenne pour déterminer si pour récupérer tous les formats de données peuvent être converties à ou uniquement les données natives met en forme.</summary>
        <returns>Tableau des noms qui représente une liste de tous les formats sont pris en charge par les données stockées dans cet objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour obtenir les formats de données pris en charge avant d’appeler le <xref:System.Windows.Forms.IDataObject.GetData%2A> (méthode). Consultez la <xref:System.Windows.Forms.DataFormats> classe pour les formats prédéfinis.  
  
> [!NOTE]
>  Données peuvent être converties dans un autre format, s’il a été stocké en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetFormats` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) à l’aide d’une chaîne et le `UnicodeText` format. Ensuite, elle effectue deux requêtes pour obtenir les formats associés aux données. Dans la première requête, il définit le `autoConvert` paramètre `false` : dans ce cas, seul le format natif des données est retourné. Dans la deuxième requête, il définit le `autoConvert` paramètre `true`, afin qu’il obtient la liste des formats, notamment les formats de données peuvent être converties à. Dans chaque cas, la liste résultante s’affiche dans une boîte de message. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stocke les données spécifiées et leur format associé dans cette instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Les données à stocker.</param>
        <summary>Stocke les données spécifiées dans cette instance, à l’aide de la classe des données pour le format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le format est dérivé de la classe de données.  
  
 Les données stockées à l’aide de cette méthode peuvent être converties dans un format compatible lorsqu’il est extrait.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un composant (`myComponent`) et le stocke dans un objet de données (`myDataObject`). Il vérifie ensuite si les données spécifiées sont stockées dans l’objet de données et affiche le résultat dans une boîte de message. L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format associé aux données. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <param name="data">Les données à stocker.</param>
        <summary>Stocke les données spécifiées et leur format associé dans cette instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne connaissez pas le format de l’application cible, vous pouvez stocker des données dans plusieurs formats à l’aide de cette méthode.  
  
 Les données stockées à l’aide de cette méthode peuvent être converties dans un format compatible lorsqu’il est extrait.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) et stocke une chaîne dans l’objet en spécifiant le `UnicodeText` format. Puis il récupère que les données stockées dans l’objet en spécifiant le `Text` mettre en forme, afin que les données sont converties à le `Text` format. Le résultat est affiché dans une boîte de message. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Un <see cref="T:System.Type" /> représentant le format associé aux données. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <param name="data">Les données à stocker.</param>
        <summary>Stocke les données spécifiées et le type classe associé dans cette instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne connaissez pas le format de l’application cible, vous pouvez stocker des données dans plusieurs formats à l’aide de cette méthode.  
  
 Les données stockées à l’aide de cette méthode peuvent être converties dans un format compatible lorsqu’il est extrait.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un composant (`myComponent`) et le stocke dans un objet de données (`myDataObject`), à l’aide `myType` pour spécifier le format de données. Il vérifie ensuite si les données du type spécifié sont stockées dans l’objet et affiche le résultat dans une boîte de message. L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format associé aux données. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour les formats prédéfinis.</param>
        <param name="autoConvert"><see langword="true" /> Pour autoriser les données à convertir en un autre format ; Sinon, <see langword="false" />.</param>
        <param name="data">Les données à stocker.</param>
        <summary>Stocke les données spécifiées et leur format associé dans cette instance, à l’aide d’une valeur booléenne pour indiquer si les données peuvent être converties dans un autre format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne connaissez pas le format de l’application cible, vous pouvez stocker des données dans plusieurs formats à l’aide de cette méthode.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) et stocke un `UnicodeText` chaîne qu’il contient, avec le `autoConvert` paramètre défini sur `false`. Il récupère les formats associés aux données stockées dans l’objet, puis affiche le résultat dans une boîte de message. Le seul format associé aux données est le `UnicodeText` format. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>