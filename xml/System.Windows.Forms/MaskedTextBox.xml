<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4fa1a5b8dfd6830403ad1f318c5ea51e6693aac4" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015394" /></Metadata><TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type MaskedTextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Utilise un masque pour distinguer entre une entrée d'utilisateur correcte et incorrecte.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox> classe est une version améliorée <xref:System.Windows.Forms.TextBox> contrôle prenant en charge une syntaxe déclarative pour accepter ou rejeter l’entrée d’utilisateur. À l’aide de la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété, vous pouvez spécifier l’entrée suivante sans écrire une logique de validation personnalisée dans votre application :  
  
-   Caractères d’entrée requis.  
  
-   Caractères d’entrée facultatifs.  
  
-   Le type d’entrée attendu à une position donnée dans le masque ; par exemple, un chiffre ou un caractère alphabétique ou alphanumérique.  
  
-   Masquer des littéraux ou des caractères qui doivent apparaître directement dans le <xref:System.Windows.Forms.MaskedTextBox>; par exemple, les traits d’union (-) dans un numéro de téléphone ou le symbole monétaire dans un prix.  
  
-   Traitement spécial pour les caractères d’entrée ; par exemple, pour convertir des caractères alphabétiques en majuscules.  
  
 Quand un <xref:System.Windows.Forms.MaskedTextBox> contrôle est affiché au moment de l’exécution, il représente le masque sous la forme d’une série de caractères d’invite et de caractères littéraux facultatifs. Chaque position de masque modifiable, représentant une entrée obligatoire ou facultative, s’affiche avec un seul caractère d’invite. Par exemple, le signe dièse (#) est souvent utilisé comme espace réservé pour une entrée de caractère numérique. Vous pouvez utiliser le <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> propriété pour spécifier un caractère d’invite personnalisé. Le <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> propriété détermine si l’utilisateur voit les caractères d’invite lorsque le contrôle perd le focus d’entrée.  
  
 Comme entrée de l’utilisateur tape dans la zone de texte masquée, les caractères d’entrée valides remplacent leurs caractères d’invite respectifs de façon séquentielle. Si l’utilisateur tape un caractère d’entrée non valide, aucun remplacement se produit, mais au lieu de cela un signal sonore est émis si le <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> propriété est définie sur `true`et le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement est déclenché. Vous pouvez fournir votre propre logique d’erreur personnalisée en gérant cet événement.  
  
 Lorsque le point d’insertion actuel est à un caractère littéral, l’utilisateur a un nombre d’options :  
  
-   Si un caractère autre que le caractère d’invite est typé, le littéral sera automatiquement ignoré et le caractère d’entrée est appliqué à la position modifiable suivante, représentée par le caractère d’invite suivant.  
  
-   Si le caractère d’invite est tapé et le <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> propriété a la valeur true, l’entrée refrappe le caractère d’invite et de l’insertion point sera déplacé vers la position suivante dans le masque.  
  
-   Comme c’est toujours le cas, les touches de direction peuvent être utilisés pour accéder à une position précédente ou suivante.  
  
 Vous pouvez utiliser le <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> propriété pour vérifier si l’utilisateur a entré toute l’entrée requise. Le <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété récupère toujours l’entrée d’utilisateur mise en forme selon le masque et le <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propriété.  
  
 Le <xref:System.Windows.Forms.MaskedTextBox> contrôle diffère en fait tout traitement de masque pour le <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> classe spécifiée par le <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propriété. Ce fournisseur standard prend en charge tous les caractères Unicode à l’exception des substituts et caractères combinés verticalement ; Toutefois, le <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propriété peut être utilisée pour restreindre l’entrée aux jeux de caractères a-z, A-Z et 0-9.  
  
 Masques ne garantissent pas nécessairement qu’une entrée utilisateur représente une valeur valide pour un type donné. par exemple, -9 peut être saisi pour un âge en années. Vous pouvez vérifier qu’une entrée utilisateur représente une valeur valide en assignant une instance du type de cette valeur à la <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propriété. Vous pouvez détecter si l’utilisateur supprime le focus à partir de <xref:System.Windows.Forms.MaskedTextBox> lorsqu’il ne contient une valeur non valide en analysant le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> événement. Si la validation de type réussit, l’objet représentant la valeur sera disponible via le <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A> propriété de le <xref:System.Windows.Forms.TypeValidationEventArgs> paramètre.  
  
 Comme avec la <xref:System.Windows.Forms.TextBox> contrôle, plusieurs raccourcis clavier courants ne fonctionnent pas avec <xref:System.Windows.Forms.MaskedTextBox>. En particulier, CTRL + R (justifier à droite texte), CTRL-L (Aligner à gauche texte), et CTRL-L (Centrer le texte) n’ont aucun effet.  
  
## <a name="compatibility-with-visual-basic-60"></a>Compatibilité avec Visual Basic 6.0  
 <xref:System.Windows.Forms.MaskedTextBox> a été conçu pour conserver la plupart des fonctionnalités du contrôle Masked Edit dans Visual Basic 6.0. Le tableau suivant répertorie les propriétés communes sur le contrôle Masked Edit et donne leurs équivalents sur <xref:System.Windows.Forms.MaskedTextBox>.  
  
|Propriété du contrôle (Visual Basic 6.0) modification masquée|MaskedTextBox équivalente ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]) propriété|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|Propriété `AllowPrompt`|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|Propriété `AutoTab`|None|  
|Propriété `ClipMode`|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|Propriété `ClipText`|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (lorsque <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> a la valeur <xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|Propriété `Format`|None|  
|Propriété `FormattedText`|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (lorsque <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> a la valeur <xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|Propriété `Mask`|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|Propriété `PromptChar`|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|Propriété `PromptInclude`|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|Événement`ValidationError` |<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  Le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge les fonctionnalités de configuration ou d’annulation multiligne. Toutefois, alors que les membres associés à ces fonctionnalités ont été conservés pour la compatibilité avec la <xref:System.Windows.Forms.TextBoxBase> classe de base, leurs implémentations n’exécutent aucune action.  
  
   
  
## Examples  
 Le code suivant exemple initialise le <xref:System.Windows.Forms.MaskedTextBox> pour accepter une date et utilise les deux le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> et <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> événements pour avertir l’utilisateur à une entrée non valide.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/235d6121-027d-481d-8d59-4f6794d15d0c">MaskedTextBox, contrôle (Windows Forms)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la <see cref="T:System.Windows.Forms.MaskedTextBox" /> classe à l’aide des valeurs par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut <xref:System.Windows.Forms.MaskedTextBox.%23ctor> constructeur affecte la <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propriété un masque null, représenté par la chaîne « <> ». Un masque null accepte n’importe quelle combinaison de caractères en tant qu’entrée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : System.ComponentModel.MaskedTextProvider -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox maskedTextProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">Un fournisseur de langage masque personnalisé, dérivé du <see cref="T:System.ComponentModel.MaskedTextProvider" /> classe.</param>
        <summary>Initialise une nouvelle instance de la <see cref="T:System.Windows.Forms.MaskedTextBox" /> classe à l’aide du fournisseur de langages du masque personnalisé spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `maskedTextProvider` paramètre définit le langage de masquage utilisé par <xref:System.Windows.Forms.MaskedTextBox>. Il est chargé d’analyser le masque et de déterminer si l’entrée d’utilisateur est conforme à la position actuelle de masque. Vous pouvez dériver une nouvelle classe à partir de <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> pour définir votre propre langage de masquage personnalisé et utiliser le <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> constructeur pour remplacer la norme <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>.  
  
 Si vous souhaitez utiliser la valeur par défaut, le langage de masquage et fournir votre propre masque de saisie, il est inutile d’utiliser ce constructeur. Au lieu de cela, vous pouvez utiliser la <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> constructeur, ou utilisez le constructeur par défaut puis définissez le <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="maskedTextProvider" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : string -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox mask" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">Un <see cref="T:System.String" /> représentant le masque de saisie. La valeur initiale de la <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> propriété.</param>
        <summary>Initialise une nouvelle instance de la <see cref="T:System.Windows.Forms.MaskedTextBox" /> classe en utilisant le masque d’entrée spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> constructeur utilise la norme <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> avec l’entrée `mask` pour analyser l’entrée utilisateur dans le <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Si vous assignez un nouveau masque à la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété, il remplace la valeur définie par ce constructeur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="mask" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsTab : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur déterminant comment les touches Tab sont gérées pour les configurations multilignes. Cette propriété n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value><see langword="false" /> dans tous les cas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> propriété est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette propriété n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberSignature Language="F#" Value="member this.AcceptsTabChanged : EventHandler " Usage="member this.AcceptsTabChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la valeur de la propriété <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" /> a changé. Cet événement n’est pas déclenché par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged> événement est hérité à partir de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cet événement n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPromptAsInput : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> peut être entré comme donnée valide par l’utilisateur.</summary>
        <value><see langword="true" /> Si l’utilisateur peut entrer le caractère d’invite dans le contrôle ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Même lorsque <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> est `true`, le caractère d’invite doit être valide pour l’emplacement actuel dans le masque afin d’être acceptés. Par exemple, si <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> est « * », et l’emplacement actuel dans le masque exige que l’utilisateur entre un chiffre, entrez un astérisque (\*) échoue et déclenche le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement se produise.  
  
 Le <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> propriété est prioritaire sur <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsciiOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le <see cref="T:System.Windows.Forms.MaskedTextBox" /> contrôle accepte des caractères en dehors du jeu de caractères ASCII.</summary>
        <value><see langword="true" /> Si seuls les caractères ASCII sont acceptés ; <see langword="false" /> si le <see cref="T:System.Windows.Forms.MaskedTextBox" /> contrôle peut accepter tout caractère Unicode arbitraire. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `true`, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> restreint l’entrée d’utilisateur et les caractères a-z A-Z. Les caractères de contrôle ASCII ne sont pas autorisés.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BeepOnError : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le contrôle de zone de texte masquée déclenche le signal sonore système pour chaque séquence de touches refusée.</summary>
        <value><see langword="true" /> Si le <see cref="T:System.Windows.Forms.MaskedTextBox" /> contrôle doit émettre un signal sonore non valide d’entrée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement encore se produire que si le <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> propriété est définie sur `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUndo : bool" Usage="System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l'utilisateur peut annuler l'opération précédente. Cette propriété n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value><see langword="false" /> dans tous les cas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A> propriété est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que <xref:System.Windows.Forms.MaskedTextBox> ne pas prise en charge des fonctionnalités d’annulation toujours cette propriété a la valeur `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberSignature Language="F#" Value="override this.ClearUndo : unit -&gt; unit" Usage="maskedTextBox.ClearUndo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Efface les informations sur la dernière opération effectuée à partir de la mémoire tampon d'annulation de la zone de texte. Cette méthode n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, <xref:System.Windows.Forms.MaskedTextBox> ne prend pas en charge la fonctionnalité d’annulation.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="maskedTextBox.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un handle pour le contrôle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le paramètre de création requis lors de la création du handle du contrôle.</summary>
        <value><see cref="T:System.Windows.Forms.CreateParams" /> représentant les informations nécessaires à la création d’un contrôle.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les informations de culture associées à la zone de texte masquée.</summary>
        <value>Un <see cref="T:System.Globalization.CultureInfo" /> représentant la culture prise en charge par le <see cref="T:System.Windows.Forms.MaskedTextBox" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Forms.MaskedTextBox.Culture" /> a été défini sur <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.CutCopyMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine si les littéraux et les caractères d'invite sont copiés vers le Presse-papiers.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.MaskFormat" />. La valeur par défaut est <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> propriété détermine comment le texte, sélectionné dans le <xref:System.Windows.Forms.MaskedTextBox> contrôler, est interprétée lorsqu’il est copié dans le Presse-papiers ou récupéré via la <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> propriété. Plus précisément, il détermine si les caractères littéraux, les caractères d’invite ou les deux sont incluses lors de l’accès au texte sélectionné. Lorsque les caractères d’invite sont exclus, ils sont transformés en espaces dans la chaîne copiée.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propriété possède un objectif similaire en ce qui concerne la <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété est interprétée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La propriété a une <see cref="T:System.Windows.Forms.MaskFormat" /> valeur qui n’est pas valide.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatProvider : IFormatProvider with get, set" Usage="System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.IFormatProvider" /> à utiliser lors de la validation de type.</summary>
        <value>Objet qui implémente l'interface <see cref="T:System.IFormatProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> Détermine quels symboles sont utilisés pour la devise, de date et d’autres espaces réservés de masque spécifiques à la culture lors de la validation de type et le contrôle a une valeur non null <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharFromPosition : System.Drawing.Point -&gt; char" Usage="maskedTextBox.GetCharFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Emplacement à partir duquel rechercher le caractère le plus proche.</param>
        <summary>Récupère le caractère le plus proche de l'emplacement spécifié dans le contrôle.</summary>
        <returns>Caractère situé à l'emplacement spécifié.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="maskedTextBox.GetCharIndexFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Emplacement où rechercher.</param>
        <summary>Récupère l'index du caractère le plus proche de l'emplacement spécifié.</summary>
        <returns>Index de base zéro du caractère situé à l'emplacement spécifié.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexFromLine : int -&gt; int" Usage="maskedTextBox.GetFirstCharIndexFromLine lineNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Ce paramètre n'est pas utilisé.</param>
        <summary>Récupère l'index du premier caractère d'une ligne donnée. Cette méthode n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <returns>Cette méthode retourne toujours 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette méthode n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexOfCurrentLine : unit -&gt; int" Usage="maskedTextBox.GetFirstCharIndexOfCurrentLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère l'index du premier caractère de la ligne active. Cette méthode n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <returns>Cette méthode retourne toujours 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette méthode n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetLineFromCharIndex : int -&gt; int" Usage="maskedTextBox.GetLineFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ce paramètre n'est pas utilisé.</param>
        <summary>Récupère le numéro de ligne à partir de la position de caractère spécifiée dans le texte du contrôle. Cette méthode n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <returns>Cette méthode retourne toujours 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette méthode n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="maskedTextBox.GetPositionFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index du caractère dont l'emplacement doit être récupéré.</param>
        <summary>Récupère l'emplacement de l'index de caractère spécifié dans le contrôle.</summary>
        <returns>Emplacement du caractère spécifié dans le rectangle client du contrôle.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HidePromptOnLeave : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les caractères d'invite dans le masque de saisie sont masqués lorsque la zone de texte masquée perd le focus.</summary>
        <value><see langword="true" /> Si <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> est masqué lorsque <see cref="T:System.Windows.Forms.MaskedTextBox" /> n’a pas le focus ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberSignature Language="F#" Value="member this.InsertKeyMode : System.Windows.Forms.InsertKeyMode with get, set" Usage="System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode d'insertion de texte du contrôle de zone de texte masquée.</summary>
        <value>Un <see cref="T:System.Windows.Forms.InsertKeyMode" /> valeur qui indique le mode d’insertion actuel. La valeur par défaut est <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> propriété détermine le comportement d’insertion de caractères de la <xref:System.Windows.Forms.MaskedTextBox> contrôle. L’état de cette propriété est définie par le <xref:System.Windows.Forms.InsertKeyMode> énumération, qui peut être toujours active, toujours inactive ou définie à respecter les paramètres du clavier de l’utilisateur. Cette propriété remplace le mode d’insertion du clavier. Par exemple, si le clavier est configuré pour remplacer, mais <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> a la valeur `Insert`, le <xref:System.Windows.Forms.MaskedTextBox> fonctionne en mode insertion. Le <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propriété accède au mode insertion réel de la <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Si vous modifiez les <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> modifie la valeur de <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>, <xref:System.Windows.Forms.MaskedTextBox> déclenchera le <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> événement.  
  
 Cette propriété n’a aucun effet si aucun masque n’a pas été définie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Non valide <see cref="T:System.Windows.Forms.InsertKeyMode" /> valeur a été fournie lors de la définition de cette propriété.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Une des valeurs de <see cref="T:System.Windows.Forms.Keys" />.</param>
        <summary>Détermine si la touche spécifiée est une touche de saisie ou une touche spéciale qui nécessite un prétraitement.</summary>
        <returns><see langword="true" /> Si la clé spécifiée est une touche de saisie ; Sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteMode : bool" Usage="System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui spécifie si la nouvelle entrée d'utilisateur remplace l'entrée existante.</summary>
        <value><see langword="true" /> Si <see cref="T:System.Windows.Forms.MaskedTextBox" /> remplace caractères existants à mesure que l’utilisateur entre nouveaux ; <see langword="false" /> si <see cref="T:System.Windows.Forms.MaskedTextBox" /> déplace des caractères existants vers l’avant. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> prend en compte les deux la valeur de la <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> propriété et l’état du clavier de l’utilisateur. Si <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> a la valeur <xref:System.Windows.Forms.InsertKeyMode.Insert> ou <xref:System.Windows.Forms.InsertKeyMode.Overwrite>, <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> retournera `false` ou `true`, respectivement. Si <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> a la valeur <xref:System.Windows.Forms.InsertKeyMode.Default>, elle retournera l’état de la touche Insertion.  
  
 Lorsque <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> est `false`, <xref:System.Windows.Forms.MaskedTextBox> rejette toute entrée de caractère qui entraînerait une violation de n’importe où dans le masque comme non valide. Plus précisément, si insérant un caractère peut provoquer un caractère de déplacement vers une position de masque où il ne serait pas valide, l’insertion de caractères est rejetée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteModeChanged : EventHandler " Usage="member this.IsOverwriteModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit après que le mode insertion a été modifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> événement est déclenché après la valeur de la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propriété est modifiée.  
  
 Cet événement est requis pour lier correctement des données à un <xref:System.Windows.Forms.MaskedTextBox> contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.MaskedTextBox> nommé `MaskedTextBox1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Lines : string[] with get, set" Usage="System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les lignes de texte dans les configurations multilignes. Cette propriété n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Tableau de type <see cref="T:System.String" /> qui contient une seule ligne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.Lines%2A> propriété est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette propriété n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Mask : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le masque de saisie à utiliser au moment de l’exécution.</summary>
        <value>Un <see cref="T:System.String" /> représentant le masque actuel. La valeur par défaut est la chaîne vide qui autorise toute entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> est la propriété par défaut pour le <xref:System.Windows.Forms.MaskedTextBox> classe.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> doit être une chaîne composée d’une ou plusieurs des éléments de masquage, comme indiqué dans le tableau suivant. Le langage de masquage utilisé par <xref:System.Windows.Forms.MaskedTextBox> est défini par son associé <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>. Le fournisseur standard spécifie un langage de masquage basé sur celui utilisé par le contrôle Masked Edit dans Visual Basic 6.0 et doit être très familier aux utilisateurs de migration à partir de cette plateforme.  
  
|Élément de masquage|Description|  
|---------------------|-----------------|  
|0|Chiffre, obligatoire. Cet élément accepte n’importe quel chiffre unique compris entre 0 et 9.|  
|9|Chiffre ou espace, facultatif.|  
|#|Chiffre ou espace, facultatif. Si cette position est vide dans le masque, elle est restituée comme un espace dans le <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété. Signe plus (+) et moins (-), signes sont autorisés.|  
|L|Lettre, obligatoire. Restreint l’entrée aux lettres ASCII a-z et A-Z. Cet élément de masque est équivalent à [a-zA-Z] dans les expressions régulières.|  
|?|Lettre, facultatif. Restreint l’entrée aux lettres ASCII a-z et A-Z. Cet élément de masque est équivalent à [a-zA-Z] ? dans les expressions régulières.|  
|&|Caractère, obligatoire. Si le <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propriété est définie sur true, cet élément se comporte comme l’élément « L ».|  
|C|Caractère facultatif. N’importe quel caractère non-control. Si le <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propriété est définie sur `true`, cet élément se comporte comme le « ? » élément.|  
|A|Alphanumérique, obligatoire. Si le <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propriété est définie sur `true`, les seuls caractères acceptés sont les lettres ASCII a-z et A-Z. Cet élément de masque se comporte comme l’élément « a ».|  
|a|Alphanumérique, facultatif. Si le <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> propriété est définie sur `true`, les seuls caractères acceptés sont les lettres ASCII a-z et A-Z. Cet élément de masque se comporte comme l’élément « A ».|  
|.|Espace réservé de décimale. Le caractère d’affichage réel utilisé est le symbole décimal approprié pour le fournisseur de format, tel que déterminé par le contrôle <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propriété.|  
|,|Des milliers espace réservé. Le caractère d’affichage réel utilisé sera milliers espace réservé approprié pour le fournisseur de format, tel que déterminé par le contrôle <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propriété.|  
|:|Séparateur d’heure. Le caractère d’affichage réel utilisé est le symbole de l’heure approprié pour le fournisseur de format, tel que déterminé par le contrôle <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propriété.|  
|/|Séparateur de date. Le caractère d’affichage réel utilisé est le symbole de date approprié pour le fournisseur de format, tel que déterminé par le contrôle <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propriété.|  
|$|Symbole de devise. Le caractère réel affiché est le symbole de devise approprié pour le fournisseur de format, tel que déterminé par le contrôle <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propriété.|  
|\<|Déplacer vers le bas. Convertit tous les caractères qui suivent en minuscules.|  
|>|Montaient. Convertit tous les caractères qui suivent en majuscules.|  
|&#124;|Désactiver un décalage vers la précédente haut ou vers le bas.|  
|&#92;|Séquence d’échappement. Remplace un caractère de masque, transformant en un littéral. «\\\\» correspond à la séquence d’échappement pour une barre oblique inverse.|  
|Tous les autres caractères|Littéraux. Tous les éléments non masque apparaîtra comme eux-mêmes dans <xref:System.Windows.Forms.MaskedTextBox>. Littéraux toujours occupent une position statique dans le masque en cours d’exécution et ne peut pas être déplacés ou supprimés par l’utilisateur.|  
  
 Si vous modifiez un masque lorsque <xref:System.Windows.Forms.MaskedTextBox> contient déjà une entrée d’utilisateur filtrée par un masque précédent, <xref:System.Windows.Forms.MaskedTextBox> va tenter de faire migrer cette entrée dans la nouvelle définition de masque. En cas d’échec, elle efface l’entrée existante. Affectation d’une chaîne de longueur nulle en tant que le masque conserve toutes les données existantes dans le contrôle. Lorsqu’il est utilisé avec un masque de longueur nulle, <xref:System.Windows.Forms.MaskedTextBox> se comporte comme une seule ligne <xref:System.Windows.Forms.TextBox> contrôle.  
  
 Le séparateur décimal (.) millièmes (,), ( :), date (/) et heure par défaut de symboles de devise ($) à l’affichage de ces symboles tel que défini par la culture de l’application. Vous pouvez les forcer à afficher les symboles d’une autre culture à l’aide de la <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> propriété.  
  
 Insertion de caractères dans le masque en cours d’exécution est contrôlée par le <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> propriété. Les utilisateurs peuvent naviguer dans le masque en utilisant la touches gauche et flèche droite ou le curseur de souris et ignorer des positions facultatives dans le masque en entrant un espace.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> prend en charge tous les caractères Unicode à l’exception des substituts et des caractères combinés verticalement.  
  
 Le tableau suivant présente des exemples de masques.  
  
|Masque|Comportement|  
|----------|--------------|  
|`00/00/0000`|Date (jour, mois, année) au format de date internationale. Le caractère « / » est un séparateur de date logique et s’affiche à l’utilisateur en tant que séparateur de date approprié à la culture actuelle de l’application.|  
|`00->L<LL-0000`|Date (jour, abréviation du mois et année) au format américain dans lequel l’abréviation à trois lettres du mois est affichée avec une lettre majuscule initiale suivie de deux lettres minuscules.|  
|`(999)-000-0000`|Numéro de téléphone des États-Unis, indicatif facultatif. Si les utilisateurs ne souhaitent pas entrer les caractères facultatifs, ils peuvent entrer des espaces ou placer le pointeur de souris directement à la position représentée par le premier 0 dans le masque.|  
|`$999,999.00`|Valeur monétaire dans la plage de 0 à 999999. La devise, millième et caractères décimaux sont remplacés au moment de l’exécution par leurs équivalents spécifiques à la culture.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La chaîne fournie à la <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> propriété n’est pas un masque valide. Les masques non valides incluent des masques contenant des caractères non imprimables.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberSignature Language="F#" Value="member this.MaskChanged : EventHandler " Usage="member this.MaskChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit après que le masque de saisie est modifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> événement est déclenché après la valeur de la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété est modifiée. Cet événement est également déclenché si le <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> est altéré indirectement par un membre comme <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, et <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.MaskedTextBox> nommé `MaskedTextBox1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskCompleted : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si toutes les entrées requises ont été entrées dans le masque de saisie.</summary>
        <value><see langword="true" /> Si toutes les entrées requises ont été entrées dans le masque ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> vérifie uniquement les éléments d’entrée requis. Pour déterminer si tous les éléments d’entrée obligatoires et facultatives ont été remplis, utilisez le <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> propriété à la place.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskedTextProvider : System.ComponentModel.MaskedTextProvider" Usage="System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un clone du fournisseur du masque associé à cette instance du contrôle de zone de texte masquée.</summary>
        <value>Un masquage de fournisseur de langages de type <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propriété définit le moteur d’analyse de masque et le langage de masquage utilisé par le <xref:System.Windows.Forms.MaskedTextBox> contrôle. Le fournisseur par défaut est le <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> classe ; Toutefois, un fournisseur personnalisé peut être spécifié à l’aide de la <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> constructeur.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> Impossible de définir directement. Toutefois, la définition de certaines des propriétés de <xref:System.Windows.Forms.MaskedTextBox> , par exemple <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, et <xref:System.Windows.Forms.MaskedTextBox.Culture%2A> -peut entraîner en interne la création d’un nouveau <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskFull : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si toutes les entrées obligatoires et facultatives ont été entrées dans le masque de saisie.</summary>
        <value><see langword="true" /> Si toutes les entrées obligatoires et facultatives ont été entrées ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> propriété dans le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Gestionnaire d’événements pour déterminer si l’entrée de l’utilisateur a été rejetée, car il en existe pas d’entrées restantes dans le masque. Pour déterminer si seuls les éléments d’entrée requis ont été entrées, utilisez le <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> propriété.  
  
   
  
## Examples  
 Le code suivant exemple gère le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement et utilise un <xref:System.Windows.Forms.ToolTip> pour avertir l’utilisateur si une tentative est faite pour entrer les données une fois toutes les positions dans le masque ont été utilisées.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberSignature Language="F#" Value="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " Usage="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l'entrée de l'utilisateur ou le caractère assigné ne correspond pas à l'élément de format correspondant du masque de saisie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> est l’événement par défaut pour le <xref:System.Windows.Forms.MaskedTextBox> classe.  
  
 Le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement se produit lorsqu’un caractère est refusé par le masque de saisie. Le masque de saisie, représenté par le <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété, est interprétée par le fournisseur de texte masqué associé au contrôle via le <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> propriété. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> se produit dans les situations suivantes :  
  
-   Un caractère d’entrée ne correspond pas à l’élément de format correspondant. Par exemple, l’utilisateur entre un caractère alphabétique lorsqu’un chiffre est requis. Il s’agit probablement de la raison la plus courante, raison pour laquelle cet événement est déclenché.  
  
-   L’utilisateur essaie d’entrer des caractères étrangers au-delà de la fin du masque soit parce que le masque a déjà été passée ou la position actuelle du signe insertion a été déplacée vers la fin de la chaîne de masque de saisie affiché.  
  
-   Une opération de collage insère un caractère qui ne correspond pas à son élément de format associé, ou si le <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propriété est `false`, déplace des caractères existants vers de nouvelles positions où ils ne correspondent pas leurs éléments de format.  
  
-   Une opération de coupe déplace des caractères existants vers la gauche, et un ou plusieurs caractères ne correspondent pas à leurs éléments de format qui vient d’être associé.  
  
-   Une assignation a été faite à la <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété et la chaîne assignée a provoqué une ou plusieurs violations de masque.  
  
 Si une chaîne a été assignée au contrôle qui provoque <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> doit avoir lieu, aucune partie de la chaîne ne s’affiche dans <xref:System.Windows.Forms.MaskedTextBox>.  
  
 La gestion par défaut pour <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> jouera un signal sonore si le <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> propriété est définie sur `true`. Cet événement est souvent géré pour implémenter la gestion des erreurs personnalisée, par exemple, pour vous déplacer sur le contrôle d’entrée utilisateur suivant si le masque est complet ou pour afficher une boîte de dialogue d’erreur personnalisés ou d’info-bulle si le caractère d’entrée n’est pas valide.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.MaskedTextBox> nommé `MaskedTextBox1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre maximal de caractères que l'utilisateur peut taper ou coller dans le contrôle TextBox. Cette propriété n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Cette propriété retourne toujours 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consultez le <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété et la <xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A> propriété dans le <xref:System.Windows.Forms.MaskInputRejectedEventArgs> classe pour plus d’informations sur la façon de déterminer la longueur maximale d’une chaîne dans un <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si ce contrôle est un contrôle zone de texte multiligne. Cette propriété n’est pas entièrement pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Cette propriété retourne toujours <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> propriété est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette propriété n’est pas entièrement pris en charge ; elle ne peut pas être définie et elle correspond toujours à `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberSignature Language="F#" Value="member this.MultilineChanged : EventHandler " Usage="member this.MultilineChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit généralement lorsque la valeur de la <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" /> propriété a changé ; Toutefois, cet événement n’est pas déclenché par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged> événement est hérité à partir de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cet événement n’est pas implémenté dans <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit quand la valeur de la propriété <see cref="P:System.Windows.Forms.Control.BackColor" /> change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="maskedTextBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsOverwriteModeChanged : EventArgs -&gt; unit&#xA;override this.OnIsOverwriteModeChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnIsOverwriteModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.KeyDown" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyPressEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.KeyPress" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.KeyUp" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMaskChanged : EventArgs -&gt; unit&#xA;override this.OnMaskChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMaskChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMultilineChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMultilineChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche en général le <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" /> événement, mais est désactivé pour <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette méthode est substituée pour n’exécuter aucune action.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextAlignChanged : EventArgs -&gt; unit&#xA;override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.TextChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="maskedTextBox.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.ComponentModel.CancelEventArgs" /> qui contient des données d’événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.Validating" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> méthode provoque la chaîne d’entrée à valider par rapport à la <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propriété, si un <xref:System.Type> a été spécifiée pour cette propriété. Elle puis déclenche également le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> événement.  
  
> [!NOTE]
>  Pour garantir la cohérence avec les contrôles de texte, la validation aura lieu même si le <xref:System.Windows.Forms.MaskedTextBox> est en lecture seule (son <xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A> propriété est définie sur `true`).  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Une exception critique s’est produite lors de l’analyse de la chaîne d’entrée.</exception>
        <block subset="none" type="overrides"><para>Lors de la substitution de <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PasswordChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le caractère à afficher dans la substitution pour l'entrée d'utilisateur.</summary>
        <value>Le <see cref="T:System.Char" /> valeur utilisée comme caractère de mot de passe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour l’entrée d’utilisateur sensible, il est courant de masquer les informations réelles entrées par l’utilisateur. Si le <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> propriété est définie à un caractère non null, <xref:System.Windows.Forms.MaskedTextBox> affiche ce caractère pour toute entrée dans le contrôle. Si cette propriété `null` désactive cette fonctionnalité.  
  
 Si vous souhaitez utiliser le caractère de mot de passe de système d’exploitation fourni, qui est défini dans COMCTL32.dll, utilisez le <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propriété à la place. Si les deux le <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> et <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propriétés sont activées, ce dernier est prioritaire.  
  
> [!IMPORTANT]
>  En termes de sécurité, la <xref:System.Windows.Forms.MaskedTextBox> contrôle désactive les opérations copier et coller sur les chaînes protégées par mot de passe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le caractère spécifié lors de la définition de cette propriété n’est pas un caractère de mot de passe valide, tel que déterminé par le <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> méthode de la <see cref="T:System.ComponentModel.MaskedTextProvider" /> classe.</exception>
        <exception cref="T:System.InvalidOperationException">Le caractère de mot de passe spécifié est le même que le caractère d’invite actuel, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Les deux doivent être différents.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg"><see cref="T:System.Windows.Forms.Message" />, passé par référence, qui représente le message de fenêtre à traiter.</param>
        <param name="keyData">Une des valeurs <see cref="T:System.Windows.Forms.Keys" /> qui représente le raccourci clavier à traiter.</param>
        <summary>Traite une touche de commande.</summary>
        <returns><see langword="true" /> si la touche de commande a été traitée par le contrôle ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.ProcessKeyMessage :  -&gt; bool" Usage="maskedTextBox.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><see cref="T:System.Windows.Forms.Message" />, passé par référence, qui représente le message de fenêtre à traiter.</param>
        <summary>Substitue l'implémentation de base de cette méthode pour gérer des modifications de langue d'entrée.</summary>
        <returns><see langword="true" /> si le message a été traité par le contrôle ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> substitue l’implémentation de son contrôle de base de <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> pour gérer correctement les événements de caractère lorsque l’utilisateur entre des caractères à l’aide d’un éditeur de méthode d’entrée (IME), telles qu’est utilisé pour l’entrée de japonais, chinois et autres scripts non latins complexes. <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> détecte tous les messages WM_CHAR qui se produisent après avoir reçu un message WM_IME_CHAR et les supprime pour empêcher ces caractères d’apparaître dans le contrôle. Si vous dérivez de ce contrôle et que vous substituez ce message, vous devez dupliquer ce comportement si vous souhaitez que votre nouveau contrôle fonctionne avec IME.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PromptChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le caractère utilisé pour représenter l’absence d’entrée d’utilisateur dans <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Caractère utilisé pour inviter l'utilisateur à entrer des données. La valeur par défaut est un trait de soulignement (_).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> s’affichera dans <xref:System.Windows.Forms.MaskedTextBox> pour n’importe quelle position masque que l’utilisateur n’a pas encore remplie.  
  
 Utilisez le <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> propriété pour spécifier si l’invite s’affiche lorsque <xref:System.Windows.Forms.MaskedTextBox> n’a pas le focus.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le caractère spécifié lors de la définition de cette propriété n’est pas un caractère d’invite valid, tel que déterminé par le <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> méthode de la <see cref="T:System.ComponentModel.MaskedTextProvider" /> classe.</exception>
        <exception cref="T:System.InvalidOperationException">Le caractère d’invite spécifié est le même que le caractère de mot de passe actuel, <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />. Les deux doivent être différents.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte dans la zone de texte est en lecture seule.</summary>
        <value><see langword="true" /> pour indiquer le texte est en lecture seule ; Sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RejectInputOnFirstFailure : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'analyse de l'entrée d'utilisateur doit s'arrêter après que le premier caractère non valide est atteint.</summary>
        <value><see langword="true" /> Si le traitement de la chaîne d’entrée doit être terminée à la première erreur d’analyse ; Sinon, <see langword="false" /> si le traitement doit ignorer toutes les erreurs. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parfois, l’utilisateur d’entrer plusieurs caractères dans un <xref:System.Windows.Forms.MaskedTextBox> en une seule opération d’entrée, généralement par copier-coller une chaîne. Si la chaîne entière contient uniquement des caractères valides, en fonction de leur position de collage dans le masque de saisie, l’intégralité de l’opération réussira. Toutefois, lorsqu’une analyse erreur se produit, le comportement de <xref:System.Windows.Forms.MaskedTextBox> dépend de la valeur de <xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>, comme suit :  
  
-   Si cette propriété est `true`, puis le traitement de la chaîne d’entrée s’arrête au niveau du caractère non valide. Tous les caractères suivants sont ignorés. Un seul <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement est déclenché.  
  
-   Si cette propriété est `false`, le caractère non valide est refusé, mais l’analyse continue avec le caractère suivant dans la chaîne d’entrée. Un <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement est déclenché pour chaque caractère non valide dans la chaîne d’entrée.  
  
 Le <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> et <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> propriétés peuvent également affecter l’interprétation de l’entrée utilisateur.  
  
 Si le <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> propriété est `false`, puis tous les caractères déjà dans le masque de saisie à droite du point d’insertion seront être déplacés par le nombre de caractères accepté. Ce décalage peut entraîner des erreurs d’analyse supplémentaires.  
  
 Une opération de collage peut être reproduite par programme en définissant le <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnPrompt : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine comment un caractère d'entrée qui correspond au caractère d'invite doit être géré.</summary>
        <value><see langword="true" /> Si le caractère d’invite est entré comme entrée entraîne la position modifiable actuelle dans le masque d’être réinitialisée ; Sinon, <see langword="false" /> pour indiquer que le caractère d’invite doit être traité comme un caractère d’entrée normal. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox> peut traiter deux catégories de caractères - espaces et caractères d’invite - spécialement. En règle générale, chaque caractère d’entrée sera testée par rapport au masque et est accepté ou rejeté. En supposant que le <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> la valeur de propriété non`null`, puis en définissant le <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> propriété `true` entraîne un traitement spécial pour le caractère d’invite. Lorsque l’utilisateur entre le caractère d’invite dans le masque, elle entraîne la position de caractère de masque actuelle à effacer et de la position actuelle vers le caractère modifiable suivant.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> est prioritaire sur la <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> propriété, comme indiqué dans le tableau suivant.  
  
|Valeur ResetOnPrompt|AllowPromptAsInput value|Comportement obtenu|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|Le caractère d’invite peut être entré et entraîne la position actuelle de masque doivent être réinitialisées. Il s'agit de la valeur par défaut.|  
|`true`|`false`|Le caractère d’invite peut être entré et entraîne la position actuelle de masque doivent être réinitialisées.|  
|`false`|`true`|Le caractère d’invite est traité comme un caractère d’entrée standard.|  
|`false`|`false`|Le caractère d’invite n’est pas valide et déclenche un <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnSpace : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine comment un caractère d'entrée d'espace doit être géré.</summary>
        <value><see langword="true" /> Si le caractère d’entrée d’espace entraîne la position modifiable actuelle dans le masque d’être réinitialisée ; Sinon, <see langword="false" /> pour indiquer qu’il doit être traité comme un caractère d’entrée normal. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox> peut traiter deux catégories de caractères - espaces et caractères d’invite - spécialement. En règle générale, chaque caractère d’entrée sera testée par rapport au masque et est accepté ou rejeté. Définition de la <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> propriété `true` entraîne la position de caractère de masque actuelle à effacer et de la position actuelle vers le caractère modifiable suivant.  
  
 Le type de caractère d’entrée détermine si le moteur de masquage avance jusqu’au caractère suivant dans le masque, ou reste à la position actuelle et attend un caractère correspondant. Si le caractère d’entrée est un espace et ne correspond pas au caractère non modifiable actuel dans le masque, le moteur de masquage sera passer directement jusqu’au caractère suivant dans le masque. Si le caractère d’entrée n’est pas un espace et ne correspond pas au caractère non modifiable actuel dans le masque, le moteur de masquage reste à la position actuelle de masque et tentent de faire correspondre le caractère d’entrée suivant contre lui.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberSignature Language="F#" Value="override this.ScrollToCaret : unit -&gt; unit" Usage="maskedTextBox.ScrollToCaret " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fait défiler le contenu du contrôle vers la position indiquée par le signe insertion. Cette méthode n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, étant donné que le <xref:System.Windows.Forms.MaskedTextBox> contrôle ne prend pas en charge la configuration multiligne, cette méthode est substituée pour n’exécuter aucune action.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedText : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la sélection actuelle le <see cref="T:System.Windows.Forms.MaskedTextBox" /> contrôle.</summary>
        <value>Le texte actuellement sélectionné en tant qu’un <see cref="T:System.String" />. Si aucun texte n'est actuellement sélectionné, cette propriété correspond à une chaîne vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les sélections récupérées à l’aide de cette propriété sont mises en forme en fonction des propriétés de mise en forme du contrôle, tel que <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>, <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> et <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>. Les sélections définies à l’aide de cette propriété se comportent comme une opération de collage : chaque caractère est comparé au masque et le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement est déclenché pour les caractères non valides. Si <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> est `true`, littéraux et les caractères d’invite sont autorisés lors de la définition <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>et sera supprimé en mode silencieux à moins qu’ils ne violent le masque.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipLiterals : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'utilisateur est autorisé à entrer à nouveau des valeurs littérales.</summary>
        <value><see langword="true" /> Pour autoriser que des littéraux soient à nouveau entrés ; Sinon, <see langword="false" /> pour empêcher l’utilisateur de remplacer des caractères littéraux. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Masques d’entrée contiennent généralement des littéraux. Lorsque l’utilisateur entre des caractères dans le <xref:System.Windows.Forms.MaskedTextBox> lors de l’exécution, la position de caractère actuelle correspond parfois à un littéral. Le <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> propriété décrit comment entrée d’utilisateur pour le caractère suivant doit être gérée, comme suit :  
  
-   Si cette propriété est `true`, l’utilisateur peut entrer de façon répétitive le même caractère que le littéral à la position actuelle ou entrer le caractère modifiable suivant, afin de faire passer la position actuelle à cette position.  
  
-   Si cette propriété est `false`, l’utilisateur peut entrer uniquement le caractère modifiable suivant. Si la position suivante dans le masque n’accepte pas le caractère littéral (par exemple, l’utilisateur tape « / » et la position suivante accepte uniquement des chiffres), le contrôle déclenche le <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> événement.  
  
 Par exemple, dans le masque d’entrée de date de « 90/90/0000 », les caractères de barre oblique sont des littéraux. Supposons que l’utilisateur a entré deux chiffres initiaux, « 11 », donc la position actuelle dans le masque est sur le premier littéral de barre oblique (/). Si <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> est `true`, puis l’utilisateur a les choix valides suivants :  
  
-   L’utilisateur peut entrer un caractère « / ». Cela entraîne la position est déplacée vers le caractère suivant, qui, dans cet exemple est la quatrième position, un élément de masquage 9.  
  
-   L’utilisateur peut entrer le caractère modifiable suivant, qui dans cet exemple est un chiffre. Le chiffre est validé et la position actuelle est automatiquement déplacée à la cinquième position qui est un élément de masquage 0.  
  
 Si <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> est `false`, puis uniquement une entrée de données valide est autorisée, qui dans cet exemple, est un chiffre.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte tel qu’il est actuellement affiché à l’utilisateur.</summary>
        <value>Un <see cref="T:System.String" /> contenant le texte actuellement affiché par le contrôle. La valeur par défaut est une chaîne vide.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> est la propriété de liaison par défaut pour le <xref:System.Windows.Forms.MaskedTextBox> classe.  
  
 Chaînes récupérées à l’aide de cette propriété sont mises en forme en fonction des propriétés de mise en forme du contrôle, tel que <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> et <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>.  
  
 Vous pouvez affecter une chaîne avec ou sans les caractères littéraux à <xref:System.Windows.Forms.MaskedTextBox.Text%2A> selon les valeurs des <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>, et <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> est la propriété de liaison par défaut <xref:System.Windows.Forms.MaskedTextBox>.  
  
 <xref:System.Windows.Forms.MaskedTextBox> déclenche le <xref:System.Windows.Forms.Control.TextChanged> événement chaque fois que la valeur de texte mis en forme est modifiée. Des propriétés différentes peuvent ou ne peuvent pas provoquer cette valeur à modifier. Par exemple, la modification la <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> propriété ne génère pas le <xref:System.Windows.Forms.Control.TextChanged> événement, mais la modification la <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> propriété dont la valeur.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété.  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlign : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'alignement du texte dans un contrôle de zone de texte masquée.</summary>
        <value>Parmi les <see cref="T:System.Windows.Forms.HorizontalAlignment" /> des valeurs d’énumération qui spécifie l’alignement du texte par rapport au contrôle. La valeur par défaut est <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> propriété pour aligner le texte affiché dans un <xref:System.Windows.Forms.MaskedTextBox> pour correspondre à la disposition des éléments visuels sur votre formulaire. Par exemple, si vos contrôles se trouvent sur le côté droit du formulaire, vous pouvez définir le <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> propriété <xref:System.Windows.Forms.HorizontalAlignment.Right>, et le texte s’alignera avec le côté droit du contrôle au lieu de l’alignement à gauche par défaut.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur assignée à cette propriété n’est pas de type <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberSignature Language="F#" Value="member this.TextAlignChanged : EventHandler " Usage="member this.TextAlignChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l’alignement du texte est modifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> événement est déclenché après le <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> propriété est modifiée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.MaskedTextBox> nommé `MaskedTextBox1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int" Usage="System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la longueur du texte affiché.</summary>
        <value>Valeur Int32 représentant le nombre de caractères dans le <see cref="P:System.Windows.Forms.MaskedTextBox.Text" /> propriété. <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" /> respecte des propriétés telles que <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />, ce qui signifie que les résultats de retournés peuvent être différents selon que le contrôle a le focus.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.TextMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine si les littéraux et les caractères d'invite sont inclus dans la chaîne mise en forme.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.MaskFormat" />. La valeur par défaut est <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propriété détermine la façon dont les caractères littéraux et invite dans le masque sont traités lors de la génération de la chaîne mise en forme. Plus spécifiquement, il détermine si les caractères littéraux, les caractères d’invite ou les deux sont inclus dans le <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété. Lorsque les caractères d’invite sont exclus, ils sont transformés en espaces dans la chaîne mise en forme.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> propriété possède un objectif similaire en ce qui concerne la <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété est interprétée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La propriété a une <see cref="T:System.Windows.Forms.MaskFormat" /> valeur qui n’est pas valide.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="maskedTextBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente la zone de texte masquée actuelle. Cette méthode se substitue à <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />.</summary>
        <returns>Un <see cref="T:System.String" /> qui contient des informations sur les cours <see cref="T:System.Windows.Forms.MaskedTextBox" />. La chaîne inclut le type, un affichage simplifié de la chaîne d'entrée et la chaîne d'entrée mise en forme.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette version de la <xref:System.Windows.Forms.MaskedTextBox.ToString%2A> méthode appelle l’implémentation de classe de base de cette méthode, <xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>, puis ajoute la chaîne d’entrée après le traitement par le masque. Cette méthode respecte des propriétés qui modifient l’apparence de la chaîne mise en forme, avec les exceptions suivantes :  
  
-   La chaîne retournée inclut toujours des caractères littéraux et d’invite, indépendamment des valeurs de la <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propriété.  
  
-   Les caractères de mot de passe sont ignorés, afin que les caractères typées utilisateur réels sont retournés. En d’autres termes, les valeurs de la <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> et <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propriétés sont ignorées.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberSignature Language="F#" Value="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " Usage="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.Windows.Forms.MaskedTextBox" /> a fini d’analyser la valeur actuelle en utilisant le <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> propriété.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox> contrôle valide éventuellement l’entrée d’utilisateur par rapport au type défini par sa <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> propriété. Lorsque cette propriété n’est pas `null`, la série d’événements suivante se produit :  
  
1.  La séquence de validation commence lorsqu’une des actions suivantes se produit :  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> contrôle perd le focus.  
  
    -   Le <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété est récupérée.  
  
    -   La méthode <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> est appelée.  
  
2.  Un de ces événements entraîne un appel à la `Parse` méthode du type spécifié avec le <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> propriété. `Parse` est responsable de la conversion de la chaîne d’entrée mise en forme pour le type cible. Une conversion réussie équivaut à une validation réussie.  
  
3.  Après avoir `Parse` retourne, le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> événement est déclenché. Le Gestionnaire d’événements pour cet événement est généralement implémenté pour effectuer le traitement de validation de type ou le masque de. Il reçoit un <xref:System.Windows.Forms.TypeValidationEventArgs> paramètre contenant des informations sur la conversion ; par exemple, le <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> membre indique si la conversion a réussi.  
  
4.  Après le Gestionnaire d’événements pour le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> retourne des événements, l’événement de validation standard, <xref:System.Windows.Forms.Control.Validating>, est déclenché. Un gestionnaire peut être implémenté pour effectuer une validation standard, en incluant éventuellement l’annulation de l’événement.  
  
5.  Si l’événement n’est pas annulé à l’étape 3, la norme contrôler l’événement de validation <xref:System.Windows.Forms.Control.Validated> est déclenché.  
  
 Si le <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A> propriété est définie sur `true` dans le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Gestionnaire d’événements, l’événement sera annulée et le <xref:System.Windows.Forms.MaskedTextBox> contrôle conserve le focus, sauf si le <xref:System.Windows.Forms.Control.Validating> événement définit sa version de la <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> propriété à `false`.  
  
   
  
## Examples  
 L’exemple de code suivant tente d’analyser l’entrée utilisateur comme valide <xref:System.DateTime> objet. En cas d’échec, le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Gestionnaire d’événements affiche un message d’erreur à l’utilisateur. Si la valeur est valide <xref:System.DateTime>, le code vérifie que la date fournie n’est pas avant la date d’aujourd'hui. Cet exemple de code requiert que votre projet Windows Forms contient un <xref:System.Windows.Forms.MaskedTextBox> contrôle nommé `MaskedTextBox1` et un <xref:System.Windows.Forms.ToolTip> contrôle nommé `ToolTip1`.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberSignature Language="F#" Value="override this.Undo : unit -&gt; unit" Usage="maskedTextBox.Undo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annule la dernière modification apportée dans la zone de texte. Cette méthode n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.Undo%2A> méthode est héritée de la base de <xref:System.Windows.Forms.TextBoxBase> classe. Toutefois, <xref:System.Windows.Forms.MaskedTextBox> ne prend pas en charge la fonctionnalité d’annulation.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSystemPasswordChar : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le caractère de mot de passe fourni par le système d'exploitation doit être utilisé.</summary>
        <value><see langword="true" /> Si le mot de passe système doit être utilisé comme caractère d’invite ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> propriété détermine si l’entrée fournie par l’utilisateur doit être affichée dans le <xref:System.Windows.Forms.MaskedTextBox> comme plusieurs occurrences d’un caractère de mot de passe défini par le système d’exploitation. <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> fonctions de manière similaire à la <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> propriété, mais au lieu d’utiliser un caractère fournies par le programmeur pour l’invite, <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> utilise une invite définie par le système d’exploitation. Cette propriété a priorité sur <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>.  
  
> [!IMPORTANT]
>  En termes de sécurité, la <xref:System.Windows.Forms.MaskedTextBox> contrôle désactive les opérations copier et coller sur les chaînes protégées par mot de passe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le caractère de mot de passe spécifié est le même que le caractère d’invite actuel, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Les deux doivent être différents.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberSignature Language="F#" Value="member this.ValidateText : unit -&gt; obj" Usage="maskedTextBox.ValidateText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la chaîne d'entrée d'utilisateur en une instance du type de validation.</summary>
        <returns>En cas de réussite, une <see cref="T:System.Object" /> du type spécifié par le <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> propriété ; sinon, <see langword="null" /> pour indiquer l’échec de conversion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> méthode essaie de convertir la chaîne mise en forme contenue dans le <xref:System.Windows.Forms.MaskedTextBox.Text%2A> propriété à une instance du type spécifié par le <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> propriété. Caractères d’invite sont ignorés dans la chaîne mise en forme, mais les littéraux sont gérées conformément à la valeur actuelle de la <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> propriété.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> déclenche le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> événement après la tentative de conversion, quel que soit son succès.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Une exception critique s’est produite lors de l’analyse de la chaîne d’entrée.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatingType : Type with get, set" Usage="System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type de données utilisé pour vérifier les données entrées par l’utilisateur.</summary>
        <value>Un <see cref="T:System.Type" /> représentant le type de données utilisé dans la validation. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Masques ne garantissent pas en eux-mêmes qu’une entrée utilisateur représente une valeur valide pour un type donné. Le code c# suivant montre un masque :  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 Le code Visual Basic suivant affiche un masque :  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 Ce masque peut demander que l’utilisateur entre huit chiffres, mais ne peut pas vérifier que l’utilisateur entre les valeurs de l’année, de date et de mois dans la plage correcte ; « 20/12/2003 » et « 70/90/0000 » sont également valables aussi le masque est concerné.  
  
 Vous pouvez utiliser <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> pour vérifier si les données entrées par l’utilisateur entrent dans la plage correcte - dans le cas mentionné précédemment, en lui assignant une instance de la <xref:System.DateTime> type. Le texte actuel dans le contrôle est validé lorsque l’utilisateur quitte le contrôle. Vous pouvez déterminer si les données échouent à la validation en analysant le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> événement. <xref:System.Windows.Forms.MaskedTextBox> effectue uniquement la vérification sur <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> si <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> est `true`.  
  
 Si vous souhaitez utiliser vos propres types de données personnalisées avec <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>, vous devez implémenter statique `Parse` méthode qui prend une chaîne en tant que paramètre. Cette méthode doit être implémentée avec un ou deux signatures suivantes :  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 L’exemple de code suivant tente d’analyser l’entrée utilisateur comme valide <xref:System.DateTime>. En cas d’échec, le <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Gestionnaire d’événements affiche un message d’erreur à l’utilisateur. Si la valeur est valide <xref:System.DateTime>, le code effectue une vérification supplémentaire pour vous assurer que la date fournie n’est pas avant la date d’aujourd'hui. Cet exemple de code requiert que votre projet Windows Forms contient un <xref:System.Windows.Forms.MaskedTextBox> contrôle nommé `MaskedTextBox1` et un <xref:System.Windows.Forms.ToolTip> contrôle nommé `ToolTip1`.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="maskedTextBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><see cref="T:System.Windows.Forms.Message" /> Windows à traiter.</param>
        <summary>Traite les messages Windows.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WordWrap : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si un contrôle zone de texte multiligne fait passer les mots au début de la ligne suivante lorsque cela est nécessaire. Cette propriété n’est pas pris en charge par <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Le <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" /> propriété retourne toujours <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que <xref:System.Windows.Forms.MaskedTextBox> ne prend pas en charge plusieurs lignes d’entrée, le <xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A> propriété est ignorée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>