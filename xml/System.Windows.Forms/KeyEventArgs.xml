<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99c726a26a3a3ac82563e7cf9921fd0fd947b78f" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015545" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des données pour le <see cref="E:System.Windows.Forms.Control.KeyDown" /> ou <see cref="E:System.Windows.Forms.Control.KeyUp" /> événement.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.KeyEventArgs>, qui spécifie la clé de l’utilisateur enfoncé et si les touches de modification (CTRL, ALT et MAJ) ont été enfoncées en même temps, est passé avec chaque <xref:System.Windows.Forms.Control.KeyDown> ou <xref:System.Windows.Forms.Control.KeyUp> événement.  
  
 Le <xref:System.Windows.Forms.Control.KeyDown> événement se produit lorsque l’utilisateur appuie sur une touche quelconque. Le <xref:System.Windows.Forms.Control.KeyUp> événement se produit lorsque l’utilisateur relâche la touche. Dupliquer <xref:System.Windows.Forms.Control.KeyDown> se produisent chaque fois que la clé de manière répétée, si la touche est maintenue enfoncée, mais un seul <xref:System.Windows.Forms.Control.KeyUp> événement est généré lorsque l’utilisateur relâche la touche.  
  
 Le <xref:System.Windows.Forms.Control.KeyPress> événement se produit également lorsqu’une touche est enfoncée. Un <xref:System.Windows.Forms.KeyPressEventArgs> est passée avec chaque <xref:System.Windows.Forms.Control.KeyPress> événement et spécifie le caractère qui a été composé à la suite de chaque appui sur une touche.  
  
 Pour plus d’informations sur le modèle d’événement, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Les exemples de code suivants montrent comment détecter l’état d’une touche.  
  
 **Exemple 1**  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.Control.KeyDown> événement avec le <xref:System.Windows.Forms.Help> classe pour afficher le style contextuel aide à l’utilisateur de l’application. L’exemple utilise le <xref:System.Windows.Forms.KeyEventArgs> propriétés transmises à la méthode de gestionnaire d’événements pour filtrer toutes les variantes d’appuyer sur la touche F1 avec une touche de modification. Lorsque l’utilisateur appuie sur toute variation de la touche F1 incluant une touche de modification, le <xref:System.Windows.Forms.Help> classe affiche une fenêtre contextuelle, semblable à un <xref:System.Windows.Forms.ToolTip>, près du contrôle. Si l’utilisateur appuie sur ALT + F2, une autre fenêtre contextuelle d’aide s’affiche avec des informations supplémentaires.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Exemple 2**  
  
 L’exemple suivant détermine si l’utilisateur a appuyé sur ALT + E, et si le pointeur de la souris est sur un <xref:System.Windows.Forms.TreeNode>, permet à l’utilisateur à modifier qui <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Exemple 3**  
  
 L’exemple suivant détermine si l’utilisateur a appuyé sur une touche non numérique et si tel est le cas, annule la <xref:System.Windows.Forms.Control.KeyPress> événement à l’aide de la <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> propriété.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyData As Keys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyEventArgs : System.Windows.Forms.Keys -&gt; System.Windows.Forms.KeyEventArgs" Usage="new System.Windows.Forms.KeyEventArgs keyData" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Un <see cref="T:System.Windows.Forms.Keys" /> représentant la touche activée, associée à des indicateurs de modificateur qui indiquent les touches CTRL, MAJ et ALT ont été enfoncées en même temps. Les valeurs possibles sont obtenues en appliquant l’opérateur OR au niveau du bit opérateur (|) à des constantes à partir de la <see cref="T:System.Windows.Forms.Keys" /> énumération.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.KeyEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Alt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Alt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Alt : bool" Usage="System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la touche Alt a été activée.</summary>
        <value><see langword="true" /> Si la touche ALT était activée ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 **Exemple 1**  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.Control.KeyDown> événement avec le <xref:System.Windows.Forms.Help> classe pour afficher le style contextuel aide à l’utilisateur de l’application. L’exemple utilise le <xref:System.Windows.Forms.KeyEventArgs> propriétés transmises à la méthode de gestionnaire d’événements pour filtrer toutes les variantes d’appuyer sur la touche F1 avec une touche de modification. Lorsque l’utilisateur appuie sur toute variation de la touche F1 incluant une touche de modification, le <xref:System.Windows.Forms.Help> classe affiche une fenêtre contextuelle, semblable à un <xref:System.Windows.Forms.ToolTip>, près du contrôle. Si l’utilisateur appuie sur ALT + F2, une autre fenêtre contextuelle d’aide s’affiche avec des informations supplémentaires.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Exemple 2**  
  
 L’exemple suivant détermine si l’utilisateur a appuyé sur ALT + E, et si le pointeur de la souris est sur <xref:System.Windows.Forms.TreeNode>, permet à l’utilisateur à modifier qui <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Control { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : bool" Usage="System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la touche Ctrl a été activée.</summary>
        <value><see langword="true" /> Si la touche CTRL était activée ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.Control.KeyDown> événement avec le <xref:System.Windows.Forms.Help> classe pour afficher le style contextuel aide à l’utilisateur de l’application. L’exemple utilise le <xref:System.Windows.Forms.KeyEventArgs> propriétés transmises à la méthode de gestionnaire d’événements pour filtrer toutes les variantes d’appuyer sur la touche F1 avec une touche de modification. Lorsque l’utilisateur appuie sur toute variation de la touche F1 incluant une touche de modification, le <xref:System.Windows.Forms.Help> classe affiche une fenêtre contextuelle, semblable à un <xref:System.Windows.Forms.ToolTip>, près du contrôle. Si l’utilisateur appuie sur ALT + F2, une autre fenêtre contextuelle d’aide s’affiche avec des informations supplémentaires.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'événement a été géré.</summary>
        <value><see langword="true" /> Pour contourner le contrôle de la gestion par défaut ; Sinon, <see langword="false" /> pour également passer l’événement au Gestionnaire de contrôle par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> est implémenté différemment par différents contrôles dans les Windows Forms. Pour les contrôles tels que <xref:System.Windows.Forms.TextBox> qui sont une sous-classe contrôles Win32 natifs, il est interprété comme signifiant que le message de touche ne doit pas être transmis au contrôle natif sous-jacent. Si vous définissez `Handled` sur true sur un <xref:System.Windows.Forms.TextBox>, qui contrôle passe pas la touche `events` pour le contrôle de zone de texte Win32 sous-jacent, mais il continuera à afficher les caractères entrés par l’utilisateur.  
  
 Si vous souhaitez empêcher le contrôle actuel de recevoir une touche, utilisez le <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> propriété.  
  
   
  
## Examples  
 L’exemple suivant détermine si l’utilisateur a appuyé sur une touche non numérique et si tel est le cas, annule la <xref:System.Windows.Forms.Control.KeyPress> événement à l’aide de la <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> propriété.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyCode As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyCode { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyCode : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le code de clavier d’un <see cref="E:System.Windows.Forms.Control.KeyDown" /> ou <see cref="E:System.Windows.Forms.Control.KeyUp" /> événement.</summary>
        <value>Un <see cref="T:System.Windows.Forms.Keys" /> valeur qui est le code de touche pour l’événement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Les exemples de code suivants montrent comment utiliser le <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> propriété afin de déterminer quelle clé a été enfoncée.  
  
 **Exemple 1**  
  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.Control.KeyDown> événement avec le <xref:System.Windows.Forms.Help> classe pour afficher le style contextuel aide à l’utilisateur de l’application. L’exemple utilise le <xref:System.Windows.Forms.KeyEventArgs> propriétés transmises à la méthode de gestionnaire d’événements pour filtrer toutes les variantes d’appuyer sur la touche F1 avec une touche de modification. Lorsque l’utilisateur appuie sur toute variation de la touche F1 incluant une touche de modification, le <xref:System.Windows.Forms.Help> classe affiche une fenêtre contextuelle, semblable à un <xref:System.Windows.Forms.ToolTip>, près du contrôle. Si l’utilisateur appuie sur ALT + F2, une autre fenêtre contextuelle d’aide s’affiche avec des informations supplémentaires.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Exemple 2**  
  
 L’exemple suivant détermine si l’utilisateur a appuyé sur ALT + E, et si le pointeur de la souris est sur un <xref:System.Windows.Forms.TreeNode>, permet à l’utilisateur à modifier qui <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Exemple 3**  
  
 L’exemple suivant détermine si l’utilisateur a appuyé sur une touche non numérique et si tel est le cas, annule la <xref:System.Windows.Forms.Control.KeyPress> événement à l’aide de la <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> propriété.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyData As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyData { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les données de clé pour un <see cref="E:System.Windows.Forms.Control.KeyDown" /> ou <see cref="E:System.Windows.Forms.Control.KeyUp" /> événement.</summary>
        <value>Un <see cref="T:System.Windows.Forms.Keys" /> représentant le code de touche pour la touche activée, associée à des indicateurs de modificateur qui indiquent quelle combinaison de touches CTRL, MAJ et ALT a été enfoncé en même temps.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser des constantes de <xref:System.Windows.Forms.Keys> pour extraire des informations à partir de la <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> propriété. Permet de comparer les données retournées par l’opérateur AND au niveau du bit <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> avec des constantes dans <xref:System.Windows.Forms.Keys> pour obtenir des informations sur les clés de l’utilisateur a appuyé. Pour déterminer si une touche de modification spécifique a été activée, utilisez le <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, et <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> propriétés.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance d’un type qui hérite de <xref:System.Windows.Forms.Control>, comme un <xref:System.Windows.Forms.Button> ou <xref:System.Windows.Forms.ComboBox>. Ensuite, nommez l’instance `Control1` et vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyValue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyValue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyValue : int" Usage="System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur de clavier d’un <see cref="E:System.Windows.Forms.Control.KeyDown" /> ou <see cref="E:System.Windows.Forms.Control.KeyUp" /> événement.</summary>
        <value>La représentation sous forme d’entier de la <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" /> propriété.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance d’un type qui hérite de <xref:System.Windows.Forms.Control>, comme un <xref:System.Windows.Forms.Button> ou <xref:System.Windows.Forms.ComboBox>. Ensuite, nommez l’instance `Control1` et vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys Modifiers { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les indicateurs de modificateur d’un <see cref="E:System.Windows.Forms.Control.KeyDown" /> ou <see cref="E:System.Windows.Forms.Control.KeyUp" /> événement. Les indicateurs indiquent la combinaison de touches Ctrl, Maj et Alt activée.</summary>
        <value>Un <see cref="T:System.Windows.Forms.Keys" /> valeur représentant un ou plusieurs indicateurs de modificateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour déterminer si une touche de modification spécifique a été activée, utilisez le <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, et <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> propriétés. Indicateurs de modificateur peuvent être combinées avec OR au niveau du bit.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> propriété afin de déterminer les touches de modification ont été enfoncées en même temps que la clé primaire.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Shift As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Shift { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Shift : bool" Usage="System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la touche Maj a été activée.</summary>
        <value><see langword="true" /> Si la touche MAJ était activée ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant détermine si l’utilisateur a appuyé sur la touche MAJ enfoncée avec la touche F1, et si, par conséquent, affiche l’aide.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressKeyPress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressKeyPress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressKeyPress : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'événement de touche doit être transmis au contrôle sous-jacent.</summary>
        <value><see langword="true" /> Si l’événement de touche ne doit pas être transmis au contrôle ; Sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez affecter `true` à cette propriété dans un gestionnaire d’événements comme <xref:System.Windows.Forms.Control.KeyDown> afin d’éviter l’entrée d’utilisateur.  
  
 Paramètre <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> à `true` définit également <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> à `true`.  
  
   
  
## Examples  
 L’exemple de code suivant empêche des séquences de touches numériques d’atteindre le <xref:System.Windows.Forms.TextBox> contrôle nommé `textBox1`.  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>