<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3bd6853edcd153b523c50a5a724fe6928c71f027" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006587" /></Metadata><TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Spécifie le client de classe dérivés les proxies lors de l’utilisation de SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous générez un client de service Web XML, puis une classe proxy qui dérive directement ou indirectement <xref:System.Web.Services.Protocols.WebClientProtocol> doit être créé pour le service Web XML. Lorsque le client du service Web XML appelle à l’aide de SOAP, la classe proxy doit dériver de <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, qui dérive à son <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, à son tour, dérive de <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 Pour communiquer avec un service Web XML, créez une classe proxy qui dérive directement ou indirectement de <xref:System.Web.Services.Protocols.WebClientProtocol> pour le service Web XML que vous souhaitez appeler. Au lieu de créer la classe proxy manuellement, utilisez l’outil Web Services Description Language (Wsdl.exe) pour créer une classe proxy pour la description du service d’un service Web XML donné. Lorsqu’une classe proxy est générée pour le protocole SOAP, les appels synchrones aux méthodes de service Web XML sont effectuées via le <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> (méthode), tandis que les appels asynchrones sont effectués à l’aide de la <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> (méthode) et le <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant est une classe proxy générée par Wsdl.exe pour la `Math` service Web XML. La classe proxy dérivée de <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, qui dérive de la classe abstraite <xref:System.Web.Services.Protocols.WebClientProtocol> classe.  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 L’exemple de code suivant est le `Math` service Web XML, à partir de laquelle la classe proxy précédente a été générée.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est thread-safe.</threadsafe>
    <block subset="none" type="overrides"><para>Lorsque vous substituez cette classe, vous pouvez introduire dans la classe dérivée, les méthodes qui sont spécifiques à un type particulier de service Web XML. Les méthodes de capturent les paramètres et appellent la classe de base pour faire le travail de la communication avec le service Web XML. Si les méthodes introduites sont asynchrones, appelez le <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> (méthode) et le <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> (méthode). Si les méthodes introduites sont synchrones, appelez le <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> (méthode). Le constructeur substitué affecte généralement les <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> URL à la propriété de la méthode de service Web XML.</para></block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Le nom de la méthode de service Web XML dans la classe dérivée qui appelle le <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> (méthode).</param>
        <param name="parameters">Un tableau d’objets contenant les paramètres à passer au service Web XML. L’ordre des valeurs dans le tableau correspond à l’ordre des paramètres dans la méthode d’appel de la classe dérivée.</param>
        <param name="callback">Délégué à appeler lorsque l’appel asynchrone est terminée. Si <paramref name="callback" /> est <see langword="null" />, le délégué n’est pas appelé.</param>
        <param name="asyncState">Informations supplémentaires fournies par l’appelant.</param>
        <summary>Démarre un appel asynchrone d’une méthode de service Web XML à l’aide de SOAP.</summary>
        <returns>Un <see cref="T:System.IAsyncResult" /> qui est passé à la <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> méthode pour obtenir les valeurs de retour de l’appel de méthode distant.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’appelez pas la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> méthode directement, à moins que vous conceviez votre propre classe de proxy pour un service Web XML.  
  
 Une classe proxy générée par l’outil Web Services Description Language (Wsdl.exe) à partir d’une Description de Service expose les méthodes de service Web XML en tant que noms dérivés de la classe proxy pour appeler les méthodes de service Web XML de façon synchrone. Pour appeler les méthodes de service Web XML de façon asynchrone, deux méthodes supplémentaires sont ajoutées à la classe proxy pour chaque méthode de service Web XML, l’autre avec la `Begin` préfixe ajouté au nom de la méthode de service Web XML et l’autre avec la `End` préfixe ajouté.  
  
 La classe proxy appelle le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> méthode pour démarrer un appel asynchrone à la méthode de service Web XML. Par exemple, si un service Web XML expose une méthode de service Web XML nommée `Add`, la classe proxy contient une méthode nommée `BeginAdd`, méthode de service permettant de lancer un appel sur le Web XML. Dans le code pour le `BeginAdd`, un appel est effectué pour le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> (méthode) et les résultats sont placés dans le type de retour attendu pour `Add`.  
  
 Le `methodName` est utilisé pour rechercher les attributs personnalisés qui peuvent d’ont été ajoutées à la méthode, tel que <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> Fournit des informations supplémentaires sur la méthode dérivée qui est requise pour le protocole SOAP.  
  
 `asyncState` est passé dans `callback` et est inclus dans le <xref:System.IAsyncResult> qui est retourné à partir de la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> (méthode). Le `asyncState` paramètre peut être utilisé pour passer des informations sur le contexte de l’appel asynchrone, spécifié dans le `callback` paramètre, au délégué qui gère le résultat.  
  
   
  
## Examples  
 L’exemple de code suivant est une classe proxy générée par l’outil Web Services Description Language (Wsdl.exe) pour le `Math` service Web XML. Dans le `BeginAdd` méthode de la classe proxy, le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> méthode lance un appel asynchrone à la `Add` méthode de service Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 L’exemple de code suivant est le `Math` service Web XML, à partir de laquelle la classe proxy précédente a été créée.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La demande a atteint le serveur, mais n’a pas été traitée avec succès.</exception>
        <exception cref="T:System.InvalidOperationException">La demande n’était pas valide pour l’état actuel de l’objet.</exception>
        <exception cref="T:System.Net.WebException">Une erreur s’est produite lors de l’accès au réseau.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lie dynamiquement à un service Web XML décrit dans le document de découverte à <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un client de service Web XML peut effectuer une liaison dynamique à un service Web XML autre que celui référencé dans la classe proxy à l’aide du <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> (méthode). En règle générale, le <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propriété fait référence à l’adresse de base du service Web XML. Toutefois, avant d’appeler le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> (méthode), définissez le <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propriété sur l’URL d’un document de découverte. Le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> méthode tente de trouver une correspondance dans le document de découverte pour la liaison définie dans la classe proxy et ensuite de s’y lier de manière dynamique. En cas de réussite, les appels de méthode suivants sont dirigées vers le service Web XML décrit dans le document de découverte.  
  
 Si la classe proxy est générée à l’aide de l’outil Web Services Description Language (Wsdl.exe), la classe proxy définit la liaison implémentée par les méthodes de service Web XML qu’il appelle à l’aide de la <xref:System.Web.Services.WebServiceBindingAttribute>. Lorsqu’un service Web XML implémente plusieurs liaisons, Wsdl.exe crée une classe proxy pour chaque liaison. Appliqué à chaque classe de proxy est un <xref:System.Web.Services.WebServiceBindingAttribute> qui définit le nom de la liaison et son espace de noms. Le document de découverte que vous définissez le <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> propriété doit contenir une référence à un service Web XML qui implémente le même nom de liaison et le même espace de noms, ou une exception est levée.  
  
   
  
## Examples  
 L’exemple de code suivant est une classe proxy générée à l’aide de l’utilitaire Wsdl.exe pour la `Math` service Web XML. Un <xref:System.Web.Services.WebServiceBindingAttribute> est appliqué à la `Math` classe proxy en affectant le nom de liaison `MathSoap` et son espace de noms à `http://tempuri.org/`.  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 L’exemple de code suivant est un client de Service Web à l’aide de la classe proxy précédente. Dans le `EnterBtn_Click` événement du formulaire Web, le client de service Web XML appelle le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> méthode tente d’effectuer une liaison dynamique à l’URL fournie par l’utilisateur.  
  
> [!IMPORTANT]
>  Cet exemple comprend une zone de texte qui accepte une entrée d'utilisateur, ce qui constitue une menace potentielle pour la sécurité. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">La liaison définie dans la classe proxy est introuvable dans le document de découverte à <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.

ou 
La classe proxy n’a pas d’une liaison définie.</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/fxx6cfx2(v=vs.100)">Découverte de service Web XML</related>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Le <see cref="T:System.IAsyncResult" /> retourné par la méthode <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Termine un appel asynchrone d’une méthode de service Web XML à l’aide de SOAP.</summary>
        <returns>Un tableau d’objets qui contient la valeur de retour et toute référence ou <see langword="out" /> paramètres de la méthode de classe dérivée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’appelez pas la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> méthode directement, à moins que vous conceviez votre propre classe de proxy pour un service Web XML.  
  
 Une classe proxy générée par l’outil Web Services Description Language (Wsdl.exe) pour un service Web XML expose les méthodes de service Web XML en tant que noms provenant de la classe proxy pour appeler les méthodes de service Web XML de façon synchrone. Pour appeler les méthodes de service Web XML de façon asynchrone, deux méthodes supplémentaires sont ajoutées à la classe proxy pour chaque méthode de service Web XML, l’autre avec la `Begin` préfixe ajouté au nom de la méthode de service Web XML et l’autre avec la `End` préfixe ajouté.  
  
 La classe proxy appelle le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> méthode se termine un appel asynchrone à la méthode de service Web XML. Par exemple, si un service Web XML expose une méthode de service Web XML nommée `Add`, la classe proxy contient une méthode nommée `EndAdd`, méthode de service permettant d’effectuer un appel asynchrone d’un serveur Web XML. Dans le code pour le `EndAdd` un appel est effectué pour le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> (méthode), puis les résultats sont placés dans le type de retour attendu pour `Add`.  
  
   
  
## Examples  
 L’exemple de code suivant est une classe proxy générée par Wsdl.exe pour la `Math` service Web XML. Dans le `EndAdd` méthode de la classe proxy, le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> méthode termine l’appel asynchrone à la `Add` méthode de service Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 L’exemple de code suivant est le `Math` service Web XML, à partir de laquelle la classe proxy précédente a été créée.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> n’est pas la valeur de retour à partir de la <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> (méthode).</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La demande a atteint le serveur, mais n’a pas été traitée avec succès.</exception>
        <exception cref="T:System.InvalidOperationException">La demande n’était pas valide pour l’état actuel de l’objet.</exception>
        <exception cref="T:System.Net.WebException">Une erreur s’est produite lors de l’accès au réseau.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bufferSize" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message">Un <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> qui fournit le <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> pour initialiser le <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="bufferSize">La taille de mémoire tampon initiale de la <see cref="T:System.IO.StreamReader" /> utilisé par le <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Retourne un <see cref="T:System.Xml.XmlReader" /> initialisée avec le <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> propriété de le <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> paramètre.</summary>
        <returns>Un <see cref="T:System.Xml.XmlReader" /> initialisée avec le <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> propriété de le <paramref name="message" /> paramètre.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Le <see cref="T:System.Uri" /> à utiliser lors de la création du <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Crée un <see cref="T:System.Net.WebRequest" /> pour le <paramref name="uri" /> spécifié.</summary>
        <returns>Le <see cref="T:System.Net.WebRequest" /> pour l’URI spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode peut être substituée pour personnaliser le <xref:System.Net.WebRequest> avant le XML Web service est demandé. Par exemple, vous pouvez ajouter un en-tête personnalisé à la demande.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Le paramètre <paramref name="uri" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bufferSize" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="message">Un <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> qui fournit le <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> pour initialiser le <see cref="T:System.Xml.XmlWriter" />.</param>
        <param name="bufferSize">La taille de mémoire tampon initiale de la <see cref="T:System.IO.StreamWriter" /> utilisé par le <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Retourne un <see cref="T:System.Xml.XmlWriter" /> initialisée avec le <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> propriété de le <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> paramètre.</summary>
        <returns>Un <see cref="T:System.Xml.XmlWriter" /> initialisée avec le <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> propriété de le <paramref name="message" /> paramètre.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">Le nom de la méthode de service Web XML.</param>
        <param name="method_name">Le nom de la méthode de service Web XML.</param>
        <param name="parameters">Tableau d’objets qui contient les paramètres à passer au service Web XML. L’ordre des valeurs dans le tableau correspond à l’ordre des paramètres dans la méthode d’appel de la classe dérivée.</param>
        <summary>Appelle une méthode de service Web XML synchrone à l’aide de SOAP.</summary>
        <returns>Un tableau d’objets qui contient la valeur de retournée et les <see langword="reference" /> ou <see langword="out" /> paramètres de la méthode de classe dérivée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous n’appelez pas la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> méthode directement, sauf si vous générez votre propre classe de proxy pour un service Web XML.  
  
 Une classe proxy générée par l’outil Web Services Description Language (Wsdl.exe) pour un service Web XML expose les méthodes de service Web XML en tant que noms provenant de la classe proxy. La classe proxy appelle le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> méthode à appeler une méthode de service Web XML. Par exemple, si un service Web XML expose une méthode de service Web XML nommée `Add`, la classe proxy contient également une méthode nommée `Add`. Dans le code pour le `Add` méthode dans la classe proxy, un appel synchrone est effectué à la méthode de service Web XML via le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> (méthode), puis les résultats sont placés dans le type de retour attendu pour `Add`.  
  
 Le `methodName` paramètre est utilisé pour rechercher les attributs personnalisés qui peuvent d’ont été ajoutés à la méthode, tel que <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> Fournit des informations supplémentaires sur la méthode dérivée qui est requise pour le protocole SOAP.  
  
   
  
## Examples  
 L’exemple de code suivant est une classe proxy générée par Wsdl.exe pour la `Math` service Web XML. Dans le `Add` méthode de la classe proxy, le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> l’appel de méthode le `Add` méthode de service Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 L’exemple de code suivant est le `Math` service Web XML, à partir de laquelle la classe proxy précédente a été créée.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La demande a atteint le serveur, mais n’a pas été traitée avec succès.</exception>
        <exception cref="T:System.InvalidOperationException">La demande n’était pas valide pour l’état actuel de l’objet.</exception>
        <exception cref="T:System.Net.WebException">Une erreur s’est produite lors de l’accès au réseau.</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Appelle la méthode spécifiée de manière asynchrone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="methodName">Nom de la méthode à appeler.</param>
        <param name="parameters">Paramètres à passer à la méthode.</param>
        <param name="callback">Le délégué appelé lorsque l’appel de méthode est terminée.</param>
        <summary>Appelle la méthode spécifiée de manière asynchrone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userState" Type="System.Object" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="methodName">Nom de la méthode à appeler.</param>
        <param name="parameters">Paramètres à passer à la méthode.</param>
        <param name="callback">Le délégué appelé lorsque l’appel de méthode est terminée.</param>
        <param name="userState">Un objet utilisé pour passer des informations d’état dans le <paramref name="callback" /> déléguer.</param>
        <summary>Appelle la méthode spécifiée de manière asynchrone.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la version du protocole SOAP utilisée pour faire la demande SOAP au service Web XML.</summary>
        <value>Une des valeurs de <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />. La valeur par défaut est <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propriété est définie dans la classe proxy générée par l’outil Web Services Description Language (Wsdl.exe) à <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> par défaut lorsqu’un document WSDL pour un service Web XML prend en charge la version SOAP 1.1. Toutefois, lorsqu’un service Web XML prend uniquement en charge SOAP 1.2, Wsdl.exe attribue le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propriété <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>. Pour choisir la version du protocole SOAP lors de la génération de la classe de proxy avec Wsdl.exe, utilisez le `/protocol` commutateur avec la `SOAP` ou `SOAP12` paramètres pour définir le <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> propriété <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> et <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>, respectivement .  
  
   
  
## Examples  
 L’exemple de code suivant définit la version du protocole utilisé pour communiquer avec un service Web XML à SOAP 1.2.  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>