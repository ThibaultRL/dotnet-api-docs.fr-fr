<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73821694b44de6d89969923dba3f331aa67d31f0" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51903110" /></Metadata><TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit la prise en charge pour les ressources fortement typées. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, ressources séparent le code à partir du contenu au sein d’une application. Création et utilisation de ces ressources facilite le développement d’applications localisables. Dans le .NET Framework, les ressources sont consommées généralement à l’aide de la <xref:System.Resources.ResourceManager> (classe), qui contient des méthodes qui fournissent l’accès à des ressources spécifiques à la culture en cours d’exécution. Pour plus d’informations sur la création et la consommation des ressources, consultez [Resources in Desktop Apps](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Prise en charge de la ressource fortement typée est une fonctionnalité de compilation qui encapsule l’accès aux ressources en créant des classes qui contiennent un ensemble de statique, en lecture seule (`get`) Propriétés. Cela vous permet également d’utiliser les ressources au lieu d’appeler le <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> et <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> méthodes.  
  
 Les fonctionnalités de base pour la prise en charge de la ressource fortement typée sont fournie par le <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe (ainsi que le `/str` une option de ligne de commande dans le [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). La sortie de la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> méthode est une classe qui contient des propriétés fortement typées qui correspondent aux ressources qui sont référencées dans le paramètre d’entrée. Cette classe fournit un accès en lecture seule aux ressources qui sont disponibles dans le fichier traité.  
  
   
  
## Examples  
 L’exemple suivant génère une classe nommée `DemoResources` qui est écrit en C# ou Visual Basic (en fonction de code source de l’exemple). Cette classe se trouve dans le `DemoApp` espace de noms et possède des propriétés qui retournent la bitmap d’un logo et le nom d’une application. L’exemple appelle un `CreateResourceFile` méthode pour créer le fichier .resw nécessaire et nécessite un fichier bitmap nommé Logo.bmp se trouvant dans le répertoire actuel de l’exemple. L’exemple de code utilise le fichier de ressources suivant, nommé demo.resx :  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Votre code d’application peut ensuite utiliser la classe comme suit :  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Génère un fichier de classe qui contient les propriétés fortement typées correspondant aux ressources spécifiées dans le paramètre d'entrée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Collection <see cref="T:System.Collections.IDictionary" /> dans laquelle chaque paire clé/valeur d’entrée de dictionnaire est le nom et la valeur d’une ressource.</param>
        <param name="baseName">Nom de la classe à générer.</param>
        <param name="generatedCodeNamespace">Espace de noms de la classe à générer.</param>
        <param name="codeProvider">Classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> qui fournit le langage dans lequel la classe doit être générée.</param>
        <param name="internalClass"><see langword="true" /> pour générer une classe interne, <see langword="false" /> pour générer une classe publique.</param>
        <param name="unmatchable">Tableau qui contient chaque nom de ressource pour lequel une propriété ne peut pas être générée. En règle générale, une propriété ne peut pas être générée car le nom de la ressource n’est pas un identificateur valide.</param>
        <summary>Génère un fichier de classe contenant des propriétés fortement typées qui correspondent aux ressources référencées dans la collection spécifiée.</summary>
        <returns>Conteneur <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> méthode permettant de générer une classe qui fournit un wrapper fortement typé, en lecture seule pour accéder aux ressources qui sont contenus dans le `resourceList` paramètre.  
  
 Le <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignore tout nom de ressource qui commence par les caractères « $» ou « >> ». Les noms de ressources « Culture » et « ResourceManager » sont des identificateurs non valides.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" /> ou <paramref name="codeProvider" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un nom de nœud de ressource ne correspond pas à sa clé dans <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nom d'un fichier .resx utilisé comme entrée.</param>
        <param name="baseName">Nom de la classe à générer.</param>
        <param name="generatedCodeNamespace">Espace de noms de la classe à générer.</param>
        <param name="codeProvider">Classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> qui fournit le langage dans lequel la classe doit être générée.</param>
        <param name="internalClass"><see langword="true" /> pour générer une classe interne, <see langword="false" /> pour générer une classe publique.</param>
        <param name="unmatchable">Tableau de <see cref="T:System.String" /> qui contient chaque nom de ressource pour lequel une propriété ne peut pas être générée. En règle générale, une propriété ne peut pas être générée car le nom de la ressource n’est pas un identificateur valide.</param>
        <summary>Génère un fichier de classe qui contient les propriétés fortement typées correspondant aux ressources contenues dans le fichier .resx spécifié.</summary>
        <returns>Conteneur <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> méthode permettant de générer une classe qui fournit l’accès en lecture seule fortement typé aux ressources qui sont contenus dans le `resxFile` paramètre.  
  
 Le <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignore tout nom de ressource qui commence par les caractères « $» ou « >> ». Les noms de ressources « Culture » et « ResourceManager » sont des identificateurs non valides.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> ou <paramref name="codeProvider" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Collection <see cref="T:System.Collections.IDictionary" /> dans laquelle chaque paire clé/valeur d’entrée de dictionnaire est le nom et la valeur d’une ressource.</param>
        <param name="baseName">Nom de la classe à générer.</param>
        <param name="generatedCodeNamespace">Espace de noms de la classe à générer.</param>
        <param name="resourcesNamespace">Espace de noms de la ressource à générer.</param>
        <param name="codeProvider">Objet <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> qui fournit le langage dans lequel la classe doit être générée.</param>
        <param name="internalClass"><see langword="true" /> pour générer une classe interne, <see langword="false" /> pour générer une classe publique.</param>
        <param name="unmatchable">Tableau de <see cref="T:System.String" /> qui contient chaque nom de ressource pour lequel une propriété ne peut pas être générée. En règle générale, une propriété ne peut pas être générée car le nom de la ressource n’est pas un identificateur valide.</param>
        <summary>Génère un fichier de classe contenant des propriétés fortement typées qui correspondent aux ressources référencées dans la collection spécifiée.</summary>
        <returns>Conteneur <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge vous permet d’utiliser le `resourcesNamespace` paramètre pour spécifier l’espace de noms des ressources générées. Dans ce cas, le code généré s’affiche comme suit :  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 Dans la plupart des cas, il est inutile d’appeler cette méthode à partir de votre code d’application.  
  
 Le <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignore tout nom de ressource qui commence par les caractères « $» ou « >> ». Les noms de ressources « Culture » et « ResourceManager » sont des identificateurs non valides.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" /> ou <paramref name="codeProvider" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un nom de nœud de ressource ne correspond pas à sa clé dans <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nom d'un fichier .resx utilisé comme entrée.</param>
        <param name="baseName">Nom de la classe à générer.</param>
        <param name="generatedCodeNamespace">Espace de noms de la classe à générer.</param>
        <param name="resourcesNamespace">Espace de noms de la ressource à générer.</param>
        <param name="codeProvider">Classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> qui fournit le langage dans lequel la classe doit être générée.</param>
        <param name="internalClass"><see langword="true" /> pour générer une classe interne, <see langword="false" /> pour générer une classe publique.</param>
        <param name="unmatchable">Tableau de <see cref="T:System.String" /> qui contient chaque nom de ressource pour lequel une propriété ne peut pas être générée. En règle générale, une propriété ne peut pas être générée car le nom de la ressource n’est pas un identificateur valide.</param>
        <summary>Génère un fichier de classe qui contient les propriétés fortement typées correspondant aux ressources contenues dans le fichier .resx spécifié.</summary>
        <returns>Conteneur <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> méthode permettant de générer une classe qui fournit l’accès en lecture seule fortement typé aux ressources qui sont contenus dans le `resxFile` paramètre.  
  
 Le <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignore tout nom de ressource qui commence par les caractères « $» ou « >> ». Les noms de ressources « Culture » et « ResourceManager » sont des identificateurs non valides.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="basename" /> ou <paramref name="codeProvider" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Chaîne à vérifier et, le cas échéant, à convertir en nom de ressource valide.</param>
        <param name="provider">Objet <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> qui spécifie le langage cible à utiliser.</param>
        <summary>Génère une chaîne de ressource valide selon la chaîne d'entrée et le fournisseur de code spécifiés.</summary>
        <returns>Nom de ressource valide dérivé du paramètre <paramref name="key" />. Tout jeton non valide est remplacé par le caractère de soulignement (_), ou <see langword="null" /> si la chaîne dérivée contient encore des caractères non valides en fonction du langage spécifié par le paramètre <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `key` paramètre est une chaîne de caractères valide, cette chaîne est retournée. Si le `key` paramètre est une chaîne non valide ou une chaîne qui contient des caractères non valides, le <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> méthode tente de générer une chaîne valide selon la `key` et `provider` paramètres. Si une chaîne valide peut être générée, cette chaîne est retournée ; Sinon, `null` est retournée.  
  
 Si le `key` paramètre est une chaîne vide (" »), une chaîne qui se compose d’un caractère unique de trait de soulignement (_) est retournée. Si le `key` paramètre n’est pas une chaîne vide, le <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> méthode compare chaque caractère de la chaîne à un ensemble de jetons non valides en fonction de la langue spécifiée par la `provider` paramètre. N’importe quel caractère non valide dans la chaîne est remplacé par un caractère de soulignement. Les caractères qui seront remplacés par un trait de soulignement sont les suivantes :  
  
 ' ' (espace), U + 00 a 0 (espace insécable), '.' (période), «, » (virgule), ';' (point-virgule), '&#124;', ' ~', ' @', '#', '%', ' ^', '&', ' *', '+', '-', '/', '\\','\<', ' > ',' ?', ' [', ']', '(',')', ' {', '}', ' » ' (guillemet), '' '(apostrophe),' :', et ' !'.  
  
> [!NOTE]
>  Les ressources fortement typées n’autorisent pas l’utilisation de mots clés de langage (tels que `if`, `for`, et ainsi de suite) en tant que noms de clé de ressource. Toutefois, le <xref:System.CodeDom> modèle de conception permet d’utiliser des mots clés de langage en faisant précéder le mot clé avec le caractère de soulignement. Le <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> les appels de méthode le <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> méthode pour appliquer cette conception. Par exemple, si vous utilisez un nom de ressource qui est identique à un mot clé du langage, tel que `for`, le nom apparaît sous la forme `_for` dans la classe de ressource fortement typée générée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> ou <paramref name="provider" /> a la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>