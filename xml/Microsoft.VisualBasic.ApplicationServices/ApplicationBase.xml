<Type Name="ApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.ApplicationBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="44cc5d4edb46d14e1bdae5b0599c1571a7911ba2" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156063" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ApplicationBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationBase" />
  <TypeSignature Language="F#" Value="type ApplicationBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des propriétés, méthodes et événements liés à l’application actuelle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les propriétés exposées par le `My.Application` les données de retour qui sont associées uniquement à l’application actuelle ou de la DLL de l’objet. Aucune information de niveau système ne peut être modifiée avec `My.Application`.  
  
 L’objet `My.Application` est constitué des classes suivantes :  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> fournit des membres qui sont disponibles dans tous les projets.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Fournit des membres qui sont disponibles dans les applications Windows Forms.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> Fournit des membres qui sont disponibles dans les applications console.  
  
   
  
## Examples  
 Cet exemple utilise le `My.Application.GetEnvironmentVariable` méthode pour obtenir et afficher la valeur de la variable d’environnement PATH, si cette valeur n’est disponible. Sinon, il affiche un message qui indique que la variable d’environnement PATH n’existe pas.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeCulture">
      <MemberSignature Language="C#" Value="public void ChangeCulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeCulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeCulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeCulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeCulture : string -&gt; unit" Usage="applicationBase.ChangeCulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. Nom de la culture sous forme de chaîne. Pour obtenir la liste des noms possibles, consultez <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Change la culture utilisée par le thread actuel pour la manipulation de chaînes et de mise en forme de chaîne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Application.ChangeCulture` méthode modifie le thread actuel <xref:System.Threading.Thread.CurrentCulture%2A> propriété. <xref:System.Threading.Thread.CurrentCulture%2A> détermine les formats par défaut pour les dates, heures, devises, nombres, ordre de tri du texte, les comparaisons de chaînes et la casse pour tous les calculs sur ce thread.  
  
 Pour récupérer la culture actuelle, vous pouvez utiliser la <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture%2A> propriété ou le <xref:System.Threading.Thread.CurrentCulture%2A> propriété.  
  
 Le <xref:System.Threading.Thread.CurrentCulture%2A> paramètre est différent d’un paramètre de langue. Il contient uniquement les données relatives aux paramètres standards pour une région géographique. Par conséquent, le <xref:System.Threading.Thread.CurrentCulture%2A> propriété peut uniquement être définie à une culture spécifique ou à la <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
 Utilisez le `My.Application.ChangeUICulture` méthode pour modifier la culture que le thread actuel utilise pour récupérer des ressources spécifiques à la culture.  
  
> [!IMPORTANT]
>  Le `My.Application.ChangeCulture` méthode requiert un <xref:System.Security.Permissions.SecurityPermission> avec le <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> défini. La manipulation des threads est dangereuse en raison de l’état de sécurité associé aux threads. Par conséquent, cette autorisation doit être accordée uniquement si nécessaire à du code fiable. Vous ne pouvez pas modifier la culture du thread dans le code de confiance partiel.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows Forms|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows Forms|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple montre comment la modification de la culture change la représentation sous forme de chaîne des dates.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> a la valeur <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> n’est pas un nom de culture valide.</exception>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ChangeUICulture">
      <MemberSignature Language="C#" Value="public void ChangeUICulture (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void ChangeUICulture(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChangeUICulture (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ChangeUICulture(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="member this.ChangeUICulture : string -&gt; unit" Usage="applicationBase.ChangeUICulture cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName"><see langword="String" />. Nom de la culture sous forme de chaîne. Pour obtenir la liste des noms possibles, consultez <see cref="T:System.Globalization.CultureInfo" />.</param>
        <summary>Change la culture que le thread actuel utilise pour récupérer des ressources spécifiques à la culture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Application.ChangeUICulture` méthode modifie le thread actuel <xref:System.Threading.Thread.CurrentUICulture%2A> propriété. Le <xref:System.Threading.Thread.CurrentUICulture%2A> propriété détermine la culture utilisée par le Gestionnaire de ressources et le `My.Resources` de l’objet ; il utilise ces informations pour rechercher des ressources spécifiques à la culture en cours d’exécution.  
  
 Pour récupérer la culture d’interface utilisateur actuelle, vous pouvez utiliser la <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture%2A> propriété ou le <xref:System.Threading.Thread.CurrentUICulture%2A> propriété.  
  
 Utilisez le `My.Application.ChangeCulture` méthode pour modifier la culture que le thread actuel utilise pour la manipulation et la mise en forme de chaîne.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows Forms|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows Forms|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Application.ChangeUICulture` méthode pour définir la culture que le `My.Resources` objet utilise pour récupérer des ressources.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Pour cet exemple fonctionne, votre application doit avoir une chaîne nommée `Message` dans les ressources de l’application, de fichiers et l’application doivent avoir la version de la culture Français de ce fichier de ressources, `Resources.fr-FR.resx`. Pour plus d'informations, voir [Procédure : Ajouter ou supprimer des ressources](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Si l’application n’a pas la version de la culture Français de ce fichier de ressources, le `My.Resources` objet récupère la ressource à partir du fichier de ressources de culture par défaut.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> a la valeur <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> n’est pas un nom de culture valide.</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la culture que le thread actuel utilise pour la manipulation et la mise en forme de chaîne.</summary>
        <value>Un <see cref="T:System.Globalization.CultureInfo" /> objet qui représente la culture du thread actuel utilise pour la manipulation et la mise en forme de chaîne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Application.CurrentCulture` property get le <xref:System.Globalization.CultureInfo> objet que le thread actuel utilise pour la manipulation et la mise en forme de chaîne. Cet objet est identique à celui retourné par la <xref:System.Threading.Thread.CurrentCulture%2A> propriété qui contrôle plusieurs calculs liés aux chaînes sur ce thread. Le <xref:System.Threading.Thread.CurrentCulture%2A> propriété détermine les formats par défaut pour les dates, heures, devises et nombres. Il détermine également comment trier, comparer et capitaliser des chaînes.  
  
 Pour modifier la culture, vous pouvez utiliser la <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeCulture%2A> méthode ou affecter une autre <xref:System.Globalization.CultureInfo> de l’objet à le <xref:System.Threading.Thread.CurrentCulture%2A> propriété.  
  
 Le <xref:System.Threading.Thread.CurrentCulture%2A> paramètre est différent d’un paramètre de langue. Il contient uniquement les données relatives aux paramètres standards pour une région géographique.  
  
 Utilisez le `My.Application.CurrentUICulture` propriété à obtenir la culture que le thread actuel utilise pour récupérer des ressources spécifiques à la culture.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows Forms|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows Forms|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple montre comment la culture affecte la représentation sous forme de chaîne des dates.  
  
 [!code-vb[VbVbalrMyApplication#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public string GetEnvironmentVariable (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetEnvironmentVariable(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvironmentVariable (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEnvironmentVariable(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetEnvironmentVariable : string -&gt; string" Usage="applicationBase.GetEnvironmentVariable name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Un <see langword="String" /> contenant le nom de la variable d’environnement.</param>
        <summary>Retourne la valeur de la variable d’environnement spécifiée.</summary>
        <returns>Un <see langword="String" /> contenant la valeur de la variable d’environnement portant le nom <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Application.GetEnvironmentVariable` méthode retourne la variable d’environnement portant le nom `name`. Cette méthode est similaire à <xref:System.Environment.GetEnvironmentVariable%28System.String%29?displayProperty=nameWithType>, sauf que cette méthode lève une exception si la variable d’environnement spécifiée par `name` n’existe pas.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows Forms|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows Forms|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Application.GetEnvironmentVariable` méthode pour obtenir et afficher la valeur de la variable d’environnement PATH, si elle est disponible. Sinon, il affiche un message indiquant que la variable d’environnement PATH n’existe pas.  
  
 [!code-vb[VbVbalrMyApplication#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur <see langword="Nothing" />.</exception>
        <exception cref="T:System.ArgumentException">La variable d’environnement spécifiée par <paramref name="name" /> n’existe pas.</exception>
        <exception cref="T:System.Security.SecurityException">Le code appelant n’a pas <see cref="T:System.Security.Permissions.EnvironmentPermission" /> avec <see langword="Read" /> accès.</exception>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Info As AssemblyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ Info { Microsoft::VisualBasic::ApplicationServices::AssemblyInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.AssemblyInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui fournit des propriétés pour obtenir des informations sur l’assembly de l’application, telles que le numéro de version, description et ainsi de suite.</summary>
        <value>Le <see cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" /> objet pour l’application actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cet exemple utilise le `My.Application.Info.Version` propriété pour afficher la version de l’application.  
  
 [!code-vb[VbVbalrMyApplication#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.Log Log { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.Log Log" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Log As Log" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::Log ^ Log { Microsoft::VisualBasic::Logging::Log ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Log : Microsoft.VisualBasic.Logging.Log" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.Log</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui fournit des propriétés et méthodes pour écrire des informations d’événements et les exceptions dans les écouteurs de journalisation de l’application.</summary>
        <value>Le <see cref="T:Microsoft.VisualBasic.Logging.Log" /> objet pour l’application actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Cet exemple montre comment utiliser la méthode `My.Application.Log.WriteEntry` pour enregistrer des informations de traçage. Pour plus d'informations, voir [Procédure : Écrire des Messages de journal](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo UICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo UICulture" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ UICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : System.Globalization.CultureInfo" Usage="Microsoft.VisualBasic.ApplicationServices.ApplicationBase.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la culture que le thread actuel utilise pour récupérer des ressources spécifiques à la culture.</summary>
        <value>Un <see cref="T:System.Globalization.CultureInfo" /> objet qui représente la culture que le thread actuel utilise pour récupérer des ressources spécifiques à la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `My.Application.CurrentUICulture` property get le <xref:System.Globalization.CultureInfo> que le thread actuel utilise pour récupérer des ressources spécifiques à la culture de l’objet. Cet objet est identique à celui retourné par la <xref:System.Threading.Thread.CurrentUICulture%2A> propriété. Le <xref:System.Threading.Thread.CurrentUICulture%2A> propriété détermine la culture utilisée par le Gestionnaire de ressources et le `My.Resources` objet, les informations nécessaires pour rechercher des ressources spécifiques à la culture en cours d’exécution.  
  
 Pour modifier la culture, vous pouvez utiliser la <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A> méthode ou affecter une autre <xref:System.Globalization.CultureInfo> de l’objet à le <xref:System.Threading.Thread.CurrentUICulture%2A> propriété.  
  
 Le <xref:System.Threading.Thread.CurrentCulture%2A> paramètre est différent d’un paramètre de langue. Il contient uniquement les données relatives aux paramètres standards pour une région géographique.  
  
 Utilisez le `My.Application.CurrentCulture` propriété à obtenir la culture que le thread actuel utilise pour la manipulation et la mise en forme de chaîne.  
  
## <a name="availability-by-project-type"></a>Disponibilité par Type de projet  
  
|Type de projet|Disponible|  
|-|-|  
|Application Windows Forms|**Oui**|  
|Bibliothèque de classes|**Oui**|  
|Application console|**Oui**|  
|Bibliothèque de contrôles Windows Forms|**Oui**|  
|Bibliothèque de contrôles Web|Non|  
|Service Windows|**Oui**|  
|Site web|Non|  
  
   
  
## Examples  
 Cet exemple utilise le `My.Application.CurrentCulture` propriété à mettre en cache la culture actuelle avant de le modifier à l’aide de <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase.ChangeUICulture%2A>. Le `My.Application.ChangeUICulture` méthode définit la culture que le `My.Resources` objet utilise pour récupérer des ressources.  
  
 [!code-vb[VbVbalrMyResources#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyResources/VB/Form1.vb#10)]  
  
 Pour cet exemple fonctionne, votre application doit avoir une chaîne nommée `Message` dans les ressources de l’application, de fichiers et l’application doivent avoir la version de la culture Français de ce fichier de ressources, `Resources.fr-FR.resx`. Pour plus d'informations, voir [Procédure : Ajouter ou supprimer des ressources](https://msdn.microsoft.com/library/7b77bc06-3952-4799-b029-def3f8f7f88d).  
  
 Si l’application n’a pas la version de la culture Français de ce fichier de ressources, le `My.Resources` objet récupère la ressource à partir du fichier de ressources de culture par défaut.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objets (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/my-resources-object.md">My.Resources (objet) (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>