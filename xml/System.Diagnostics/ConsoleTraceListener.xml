<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="653b0096816140df8e14c31875fab5b4d202d7ef" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56362357" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dirige la sortie de traçage ou de débogage vers la sortie standard ou le flux d'erreurs standard.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Diagnostics.ConsoleTraceListener> classe permettant d’écrire la trace et débogage des messages sur la console. Vous pouvez initialiser un <xref:System.Diagnostics.ConsoleTraceListener> objet à écrire des messages de trace dans le <xref:System.Console.Out%2A?displayProperty=nameWithType> flux ou vers le <xref:System.Console.Error%2A?displayProperty=nameWithType> flux.  
  
> [!IMPORTANT]
>  l’interface <xref:System.IDisposable>. Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement. Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un`try` / `catch` bloc. Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en C#) ou `Using` (en Visual Basic). Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.  
  
 Lorsque le suivi et la sortie de débogage est activé, le <xref:System.Diagnostics.ConsoleTraceListener> les messages sont écrits spécifié <xref:System.Console?displayProperty=nameWithType> flux, qui est similaire à la façon dont les messages sont écrits avec la <xref:System.Console.Write%2A?displayProperty=nameWithType> ou <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> méthodes. Dans une application console, le <xref:System.Console?displayProperty=nameWithType> les flux de sortie et erreur écrivent des messages dans la fenêtre de console existante, ou vous pouvez rediriger les flux pour écrire dans un <xref:System.IO.TextWriter?displayProperty=nameWithType> instance.  
  
> [!NOTE]
>  Si la console n’existe pas, comme dans une application Windows, les messages écrits dans la console ne sont pas affichés.  
  
 Ajouter un <xref:System.Diagnostics.ConsoleTraceListener> objet appropriés <xref:System.Diagnostics.Trace.Listeners%2A> collection si vous souhaitez que les messages écrits via <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, ou <xref:System.Diagnostics.Debug> à écrire dans la console. En outre, vous pouvez écrire des messages directement dans la console en utilisant le <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> ou <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> méthodes.  
  
> [!NOTE]
>  Le <xref:System.Diagnostics.Debug> et <xref:System.Diagnostics.Trace> classes partagent le même <xref:System.Diagnostics.TraceListenerCollection> collection, accédée via leurs respectifs `Listeners` propriétés. Si vous ajoutez un <xref:System.Diagnostics.ConsoleTraceListener> de l’objet à la collection à l’aide d’une de ces classes, l’autre classe utilise automatiquement le même écouteur.  
  
 La plupart des compilateurs activer la trace et debug sortie via des indicateurs de compilation conditionnelle. Si vous n’activez pas le traçage ou de débogage, les messages écrits via les <xref:System.Diagnostics.Debug?displayProperty=nameWithType> et <xref:System.Diagnostics.Trace?displayProperty=nameWithType> classes sont en réalité ignorés. La syntaxe pour activer le suivi et la sortie de débogage est spécifique au compilateur ; Si vous utilisez des compilateurs autres que C# ou Visual Basic, consultez la documentation de votre compilateur.  
  
-   Pour activer le débogage en C#, ajoutez le **/d : Debug**indicateur pour la ligne de commande du compilateur lorsque vous compilez votre code, ou vous pouvez ajouter **#define DEBUG** vers le haut de votre fichier. Dans Visual Basic, ajoutez le **/d : DEBUG = True** indicateur pour la ligne de commande du compilateur.  
  
-   Pour activer le traçage en C#, ajoutez le **/d : trace** indicateur pour la ligne de commande du compilateur lorsque vous compilez votre code, ou ajoutez **#define TRACE** vers le haut de votre fichier. Dans Visual Basic, ajoutez le **/d : trace = True** indicateur pour la ligne de commande du compilateur.  
  
 Vous pouvez ajouter un <xref:System.Diagnostics.ConsoleTraceListener> de l’objet à la <xref:System.Diagnostics.Trace.Listeners%2A> collection dans votre code, ou vous pouvez ajouter un <xref:System.Diagnostics.ConsoleTraceListener> de l’objet à le <xref:System.Diagnostics.Trace.Listeners%2A> collection via le fichier de configuration d’application. Ajouter le <xref:System.Diagnostics.ConsoleTraceListener> objet dans votre code pour écrire des messages pour un chemin de section ou de l’exécution de code spécifique. Ajouter le <xref:System.Diagnostics.ConsoleTraceListener> objet dans votre fichier de configuration d’application pour diriger tous les trace et debug des messages à la console pendant que l’application s’exécute.  
  
 Pour écrire la trace et déboguer des messages sur la console pour une section de code spécifique, vous devez initialiser un <xref:System.Diagnostics.ConsoleTraceListener> de l’objet et l’ajouter à la <xref:System.Diagnostics.Trace.Listeners%2A> collection. Instrumentez la section de code qui contient des messages à l’aide de la <xref:System.Diagnostics.Trace> ou <xref:System.Diagnostics.Debug> classes. À la fin de la section de code, supprimez le <xref:System.Diagnostics.ConsoleTraceListener> de l’objet à partir de la <xref:System.Diagnostics.Trace.Listeners%2A> collection et appeler le <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> méthode sur le <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 Pour diriger la trace de tous les messages et de débogage dans la console pendant que l’application s’exécute, ajoutez un <xref:System.Diagnostics.ConsoleTraceListener> objet au fichier de configuration de l’application. Modifiez le fichier de configuration qui correspond au nom de votre application, ou le fichier app.config dans un [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] projet. Dans ce fichier, insérez un élément pour un <xref:System.Diagnostics.ConsoleTraceListener>.  
  
 L’exemple suivant ajoute un <xref:System.Diagnostics.ConsoleTraceListener> objet nommé `configConsoleListener` à la <xref:System.Diagnostics.Trace.Listeners%2A> collection.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 Pour plus d’informations sur l’ajout d’écouteurs de trace dans le fichier de configuration d’application, consultez [ &lt;écouteurs&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).  
  
   
  
## Examples  
 L’exemple de code suivant implémente une application console qui se compose d’une classe avec deux méthodes publiques.  
  
 Le `Main` méthode examine les arguments de ligne de commande et détermine si la sortie de trace doit être dirigé vers le flux d’erreurs standard ou le flux de sortie standard. `Main` Crée et initialise un <xref:System.Diagnostics.ConsoleTraceListener> objet spécifié <xref:System.Console> flux de sortie et ajoute cet objet à la collection d’écouteurs de trace. Il appelle ensuite la `WriteEnvironmentInfoToTrace` (méthode), qui écrit les informations sur l’environnement d’exécution et la configuration d’écouteur de trace à la sortie de trace.  
  
 Lorsque l’exemple d’application s’exécute, les détails de configuration d’environnement et de trace sont écrits dans le flux de sortie de console spécifié via le <xref:System.Diagnostics.ConsoleTraceListener> objet.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.ConsoleTraceListener" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.ConsoleTraceListener" /> avec une sortie de trace écrite dans le flux de sortie standard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise un <xref:System.Diagnostics.ConsoleTraceListener> objet à écrire des messages dans la <xref:System.Console.Out%2A?displayProperty=nameWithType> flux. Son <xref:System.Diagnostics.TraceListener.Name%2A> propriété est initialisée avec une chaîne vide ( » »).  
  
   
  
## Examples  
 Le code suivant exemple initialise un <xref:System.Diagnostics.ConsoleTraceListener> objet spécifié <xref:System.Console> flux de sortie et l’ajoute à la collection d’écouteurs de trace. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.ConsoleTraceListener> classe.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream"><see langword="true" /> pour écrire la sortie de trace ou de débogage dans le flux d'erreurs standard ; <see langword="false" /> pour écrire la sortie de trace ou de débogage dans le flux de sortie standard.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Diagnostics.ConsoleTraceListener" /> avec une option pour écrire la sortie de trace dans le flux de sortie standard ou le flux d'erreurs standard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur initialise un <xref:System.Diagnostics.ConsoleTraceListener> objet à écrire des messages dans la <xref:System.Console.Out%2A?displayProperty=nameWithType> ou <xref:System.Console.Error%2A?displayProperty=nameWithType> flux. Son <xref:System.Diagnostics.TraceListener.Name%2A> propriété est initialisée avec une chaîne vide ( » »).  
  
   
  
## Examples  
 Le code suivant exemple initialise un <xref:System.Diagnostics.ConsoleTraceListener> objet spécifié <xref:System.Console> flux de sortie et l’ajoute à la collection d’écouteurs de trace. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Diagnostics.ConsoleTraceListener> classe.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme la sortie au flux spécifié pour cet écouteur de suivi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le flux spécifié pour ce <xref:System.Diagnostics.ConsoleTraceListener> instance (soit la <xref:System.Console.Out%2A?displayProperty=nameWithType> flux ou le <xref:System.Console.Error%2A?displayProperty=nameWithType> stream) est fermé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>