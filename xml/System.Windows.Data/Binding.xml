<Type Name="Binding" FullName="System.Windows.Data.Binding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="801b9b6758c7503f88433233450bd01c6f7f068d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56372835" /></Metadata><TypeSignature Language="C#" Value="public class Binding : System.Windows.Data.BindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Windows.Data.BindingBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding&#xA;Inherits BindingBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding : System::Windows::Data::BindingBase" />
  <TypeSignature Language="F#" Value="type Binding = class&#xA;    inherit BindingBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un accès de haut niveau à la définition d’une liaison, qui connecte les propriétés d’objets cible de liaison (en général, des éléments WPF) et d’une source de données quelconque (par exemple, une base de données, un fichier XML ou tout objet contenant des données).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La liaison de données [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] offre un moyen simple et cohérent pour les applications de présenter les données et d’interagir avec elles. Liaison de données vous permet de synchroniser les valeurs des propriétés de deux objets différents.  
  
 Pour établir une liaison, utilisez la <xref:System.Windows.Data.Binding> classe ou l’une des autres classes qui héritent <xref:System.Windows.Data.BindingBase>. Quel que soit l’objet que vous liez et la nature de votre source de données, chaque liaison suit le modèle illustré par la figure suivante.  
  
 ![Diagramme de liaison de données de base](~/add/media/databindingmostbasic.png "diagramme de liaison de données de base")  
  
 La figure illustre les principales suivantes [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] concepts de liaison de données.  
  
-   En général, chaque liaison possède ces quatre composants : un objet de cible de liaison, une propriété cible, une source de liaison et un <xref:System.Windows.Data.Binding.Path%2A> à la valeur de la source de liaison à utiliser. Par exemple, si vous souhaitez lier le contenu d’un <xref:System.Windows.Controls.TextBox> à la propriété Name d’un objet employé, votre objet cible est la <xref:System.Windows.Controls.TextBox>, la propriété cible est le <xref:System.Windows.Controls.TextBox.Text%2A> propriété, la valeur à utiliser est le nom et l’objet source est l’employé objet.  
  
-   La propriété cible doit être une propriété de dépendance. Cela signifie également que vous ne pouvez pas lier un champ. La plupart des propriétés de <xref:System.Windows.UIElement> objets sont des propriétés de dépendance et la plupart des propriétés de dépendance, sauf celles qui sont en lecture seule, prennent en charge la liaison de données par défaut. (Uniquement <xref:System.Windows.DependencyObject> les types peuvent définir des propriétés de dépendance et tous les <xref:System.Windows.UIElement> objets dérivent <xref:System.Windows.DependencyObject>.)  
  
-   Bien que cela n’est pas spécifié sur l’illustration, il convient de noter que l’objet de source de liaison n’est pas limité à un objet [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] personnalisé. La liaison de données [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] prend en charge les données sous forme d’objets [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] et [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. Pour fournir des exemples, votre source de liaison peut être un <xref:System.Windows.UIElement>, n’importe quel objet de liste, un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] objet auquel est associé [!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)] données ou Services Web ou un XmlNode qui contient votre [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] données.  
  
 Utilisez le <xref:System.Windows.Data.Binding.Mode%2A> propriété pour spécifier la direction du flux de données. Pour détecter les modifications de source dans les liaisons unidirectionnelles ou bidirectionnelles, la source doit implémenter un mécanisme de notification de modification de propriété approprié tel que <xref:System.ComponentModel.INotifyPropertyChanged>. Pour voir un exemple, consultez [Comment : Implémenter la Notification de modification de propriété](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md). Le <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> propriété spécifie le minutage des mises à jour de la source. Pour plus d’informations, consultez « Données de liaison Concepts de base » dans [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *déclaration*  
 Zéro ou plusieurs clauses assignation d’attribut séparées par des virgules (,). Pour plus d’informations, consultez [Extension de balisage Binding](~/docs/framework/wpf/advanced/binding-markup-extension.md) ou [vue d’ensemble des déclarations de liaison](~/docs/framework/wpf/data/binding-declarations-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.MultiBinding" />
    <altmember cref="T:System.Windows.Data.PriorityBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Data.Binding" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Data.Binding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Windows.Data.Binding : string -&gt; System.Windows.Data.Binding" Usage="new System.Windows.Data.Binding path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="P:System.Windows.Data.Binding.Path" /> initial de la liaison.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Data.Binding" /> avec un chemin initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" /> qui écoute l’événement.</param>
        <param name="handler">Gestionnaire à ajouter.</param>
        <summary>Ajoute un gestionnaire pour l'événement attaché <see cref="E:System.Windows.Data.Binding.SourceUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge l’utilisation des événements attachés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.AddTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" /> qui écoute l’événement.</param>
        <param name="handler">Gestionnaire à ajouter.</param>
        <summary>Ajoute un gestionnaire pour l'événement attaché <see cref="E:System.Windows.Data.Binding.TargetUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge l’utilisation des événements attachés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj with get, set" Usage="System.Windows.Data.Binding.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les données opaques passées au répartiteur de données asynchrone.</summary>
        <value>Données passées au répartiteur de données asynchrone.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Data.Binding.IsAsync" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
      </Docs>
    </Member>
    <Member MemberName="BindsDirectlyToSource">
      <MemberSignature Language="C#" Value="public bool BindsDirectlyToSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsDirectlyToSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsDirectlyToSource As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsDirectlyToSource { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsDirectlyToSource : bool with get, set" Usage="System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s’il faut évaluer <see cref="P:System.Windows.Data.Binding.Path" /> par rapport à l’élément de données ou à l’objet <see cref="T:System.Windows.Data.DataSourceProvider" />.</summary>
        <value><see langword="false" /> pour évaluer le chemin relativement à l’élément de données lui-même ; sinon, <see langword="true" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le comportement normal (lorsque cette propriété a `false`) inclut un traitement spécial pour <xref:System.Windows.Data.DataSourceProvider> objets. Dans ce cas, le moteur de liaison évalue le <xref:System.Windows.Data.Binding.Path%2A> par rapport à l’objet obtenu à partir de la <xref:System.Windows.Data.DataSourceProvider.Data%2A> propriété. En outre, la liaison écoute pour le <xref:System.Windows.Data.DataSourceProvider.DataChanged> événement et réagit en conséquence. Si cette propriété `true` substitue ce comportement et donne l’accès de liaison aux propriétés de la <xref:System.Windows.Data.DataSourceProvider> objet lui-même.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.ObjectDataProvider" />
        <altmember cref="T:System.Windows.Data.XmlDataProvider" />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.IValueConverter Converter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.IValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Converter" />
      <MemberSignature Language="VB.NET" Value="Public Property Converter As IValueConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::IValueConverter ^ Converter { System::Windows::Data::IValueConverter ^ get(); void set(System::Windows::Data::IValueConverter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Converter : System.Windows.Data.IValueConverter with get, set" Usage="System.Windows.Data.Binding.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le convertisseur à utiliser.</summary>
        <value>Valeur de type <see cref="T:System.Windows.Data.IValueConverter" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une liaison utilise implicitement un convertisseur de valeur par défaut qui tente d’effectuer une conversion de type entre la source et de la valeur cible. Si une conversion ne peut pas être effectuée, le convertisseur par défaut retourne `null`.  
  
 Si vous souhaitez associer un convertisseur de valeur personnalisée à une liaison, vous devez créer une classe qui implémente le <xref:System.Windows.Data.IValueConverter> interface et fournir des implémentations pour les <xref:System.Windows.Data.IValueConverter.Convert%2A> et <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> méthodes. Convertisseurs de valeur peuvent modifier les données d’un type vers un autre, traduire entre des détails tels que des jeux de caractères de la culture ou modifier d’autres aspects de leur présentation. Pour obtenir des exemples de scénarios de conversion standard, consultez « Conversion de données » dans le [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
<a name="xamlAttributeUsage_Converter"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Converter="myConverter"/>  
```  
  
<a name="xamlValues_Converter"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *myConverter*  
 Une référence de ressource à une classe qui implémente le <xref:System.Windows.Data.IValueConverter> interface, ce qui inclut les implémentations de la <xref:System.Windows.Data.IValueConverter.Convert%2A> et <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> méthodes. Pour faire référence à un convertisseur de valeur, utilisez le [Extension de balisage StaticResource](~/docs/framework/wpf/advanced/staticresource-markup-extension.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConverterCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConverterCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConverterCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Data.Binding.ConverterCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la culture dans laquelle évaluer le convertisseur.</summary>
        <value>La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne définissez pas cette propriété, le moteur de liaison utilise le `Language` propriété de l’objet cible de liaison. Dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] cette valeur par défaut est « en-US » ou hérite de la valeur de l’élément racine (ou tout élément) de la page, s’il a été défini explicitement.  
  
 Pour plus d’informations sur la conversion de données, consultez la section de la Conversion de données dans le [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterParameter">
      <MemberSignature Language="C#" Value="public object ConverterParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConverterParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property ConverterParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ConverterParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConverterParameter : obj with get, set" Usage="System.Windows.Data.Binding.ConverterParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le paramètre à passer à <see cref="P:System.Windows.Data.Binding.Converter" />.</summary>
        <value>Paramètre à passer à <see cref="P:System.Windows.Data.Binding.Converter" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le <xref:System.Windows.Data.Binding.ConverterParameter%2A> propriété pour spécifier la façon dont un objet est converti.  Cette propriété transmet des informations supplémentaires à un convertisseur que vous utilisez sur une liaison.  Lorsque vous spécifiez un <xref:System.Windows.Data.Binding.ConverterParameter%2A>, la valeur est passée à la <xref:System.Windows.Data.IValueConverter.Convert%2A> et <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> méthodes en tant que le `parameter` paramètre.  
  
 Pour voir un exemple, consultez [Comment : Produire une valeur basée sur une liste d’éléments liés](~/docs/framework/wpf/data/how-to-produce-a-value-based-on-a-list-of-bound-items.md). Cet exemple illustre une implémentation d’un <xref:System.Windows.Data.IMultiValueConverter> , mais l’utilisation s’applique toujours.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNothing">
      <MemberSignature Language="C#" Value="public static readonly object DoNothing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DoNothing" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.DoNothing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DoNothing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DoNothing;" />
      <MemberSignature Language="F#" Value=" staticval mutable DoNothing : obj" Usage="System.Windows.Data.Binding.DoNothing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Utilisé comme une valeur retournée pour indiquer au moteur de liaison de n’effectuer aucune action.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une propriété de source de liaison ou un convertisseur peut retourner <xref:System.Windows.Data.Binding.DoNothing?displayProperty=nameWithType> pour indiquer au moteur de liaison ne pas pour exécuter toute action. Par exemple, pour indiquer au moteur de liaison de ne pas transférer de valeur à la cible de liaison, ne pas à passer au suivant <xref:System.Windows.Data.Binding> dans un <xref:System.Windows.Data.PriorityBinding>, ou de ne pas utiliser le `FallBackValue` ou valeur par défaut.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Windows.Data.Binding.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l’élément à utiliser comme objet source de liaison.</summary>
        <value>La valeur de la <see langword="Name" /> propriété ou [Directive x : Name](~/docs/framework/xaml-services/x-name-directive.md) de l’élément concerné. Vous ne pouvez faire référence à des éléments du code que s’ils sont inscrits dans le <see cref="T:System.Windows.NameScope" /> approprié via <see langword="RegisterName" />. Pour plus d’informations, consultez [portées de nom XAML WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utile lorsque vous souhaitez lier à la propriété d’un autre élément dans votre application. Par exemple, si vous souhaitez utiliser un <xref:System.Windows.Controls.Slider> pour contrôler la hauteur d’un autre contrôle dans votre application, ou si vous souhaitez lier le <xref:System.Windows.Controls.ContentControl.Content%2A> de votre contrôle à la <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> propriété de votre <xref:System.Windows.Controls.ListBox> contrôle.  
  
 Par défaut, les liaisons héritent du contexte de données spécifié par le `DataContext` propriété, s’il a été défini. Toutefois, le <xref:System.Windows.Data.Binding.ElementName%2A> propriété est une des manières que vous pouvez définir explicitement la source d’un <xref:System.Windows.Data.Binding> et substituer le contexte de données hérité. Pour plus d'informations, voir [Procédure : Spécifiez la Source de liaison](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 Le <xref:System.Windows.Data.Binding.Source%2A> et <xref:System.Windows.Data.Binding.RelativeSource%2A> propriétés de la <xref:System.Windows.Data.Binding> classe vous permettent également de définir la source de la liaison explicitement. Toutefois, une seule des trois propriétés, <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, et <xref:System.Windows.Data.Binding.RelativeSource%2A>, doit être ensemble pour chaque liaison, ou un conflit peut survenir. Cette propriété lève une exception s’il existe un conflit de source de liaison.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlNamespaceManager GetXmlNamespaceManager(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXmlNamespaceManager (target As DependencyObject) As XmlNamespaceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::XmlNamespaceManager ^ GetXmlNamespaceManager(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member GetXmlNamespaceManager : System.Windows.DependencyObject -&gt; System.Xml.XmlNamespaceManager" Usage="System.Windows.Data.Binding.GetXmlNamespaceManager target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">Objet à partir duquel obtenir les informations d’espace de noms.</param>
        <summary>Retourne un objet gestionnaire d’espaces de noms [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] utilisé par la liaison attachée à l’objet spécifié.</summary>
        <returns>Objet retourné utilisé pour consulter des espaces de noms [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] qui sont liés à la liaison sur l’élément objet passé. Cet objet doit être converti en <see cref="T:System.Xml.XmlNamespaceManager" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge l’utilisation de la propriété jointe pour le <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> propriété jointe.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] gestionnaires de l’espace de noms sont pertinentes que si les données dans la liaison proviennent d’un [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] source de liaison (<xref:System.Windows.Data.XmlDataProvider> objet).  
  
 Si un gestionnaire d’espace de noms n’a pas été spécifiquement appliqué lors de la création de source de données d’origine ou en appelant par la suite <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A> sur la liaison, cette méthode retournera `null`.  
  
 Cette méthode retournera toujours `null` si les données sous-jacentes de la liaison ne sont pas [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="target" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexerName">
      <MemberSignature Language="C#" Value="public const string IndexerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IndexerName" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.IndexerName" />
      <MemberSignature Language="VB.NET" Value="Public Const IndexerName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ IndexerName;" />
      <MemberSignature Language="F#" Value="val mutable IndexerName : string" Usage="System.Windows.Data.Binding.IndexerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Utilisé comme <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" /> de <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> pour indiquer qu'une propriété d'indexeur a changé.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAsync { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool with get, set" Usage="System.Windows.Data.Binding.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Windows.Data.Binding" /> doit obtenir et définir des valeurs de façon asynchrone.</summary>
        <value>La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.Data.Binding.IsAsync%2A> propriété lorsque le `get` l’accesseur de propriété de votre source de liaison peut prendre un certain temps. Par exemple, une propriété d’image avec un `get` accesseur qui télécharge à partir du Web. Paramètre <xref:System.Windows.Data.Binding.IsAsync%2A> à `true` évite le blocage du [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] pendant le téléchargement.  
  
 En attendant que la valeur arrive, la liaison signale le <xref:System.Windows.Data.BindingBase.FallbackValue%2A>si celle-ci est disponible, ou la valeur par défaut de la liaison de propriété cible.  
  
 Toutefois, il ne doit pas être nombreux scénarios où vous devez utiliser le <xref:System.Windows.Data.Binding.IsAsync%2A> propriété. Le [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] est recommandé de définir de propriétés qui sont beaucoup plus lent qu’un ensemble de champs serait. Lorsque vous créez votre classe, envisagez de gérer les opérations extrêmement lentes en dehors de la `get` accesseur et la mise en cache le résultat.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.AsyncState" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As BindingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingMode Mode { System::Windows::Data::BindingMode get(); void set(System::Windows::Data::BindingMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Data.BindingMode with get, set" Usage="System.Windows.Data.Binding.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique le sens du flux de données dans la liaison.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Data.BindingMode" />. La valeur par défaut est <see cref="F:System.Windows.Data.BindingMode.Default" />, qui retourne la valeur du mode de liaison par défaut de la propriété de dépendance cible. Toutefois, la valeur par défaut varie pour chaque propriété de dépendance. En général, les propriétés des contrôles modifiables par l’utilisateur, telles que celles des zones de texte et des cases à cocher, utilisent par défaut des liaisons bidirectionnelles, alors que la plupart des autres propriétés utilisent par défaut des liaisons unidirectionnelles.  
  
Un moyen de déterminer par programmation si une propriété de dépendance établit par défaut une liaison unidirectionnelle ou bidirectionnelle consiste à obtenir les métadonnées de la propriété à l’aide de <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />, puis à vérifier la valeur booléenne de la propriété <see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour prendre en charge <xref:System.Windows.Data.BindingMode.OneWay> et <xref:System.Windows.Data.BindingMode.TwoWay> liaisons, les données sous-jacentes doivent implémenter <xref:System.ComponentModel.INotifyPropertyChanged>. Pour plus d’informations, consultez [Guide pratique pour Implémenter la Notification de modification de propriété](~/docs/framework/wpf/data/how-to-implement-property-change-notification.md).  
  
 Pour <xref:System.Windows.Data.BindingMode.TwoWay> ou <xref:System.Windows.Data.BindingMode.OneWayToSource> liaisons, vous pouvez contrôler les mises à jour de la cible vers source en définissant le <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> propriété. Pour plus d'informations, consultez <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.  
  
 Pour plus d’informations sur les différents modes de liaison, consultez [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnSourceUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnSourceUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnSourceUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnSourceUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnSourceUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnSourceUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s’il faut déclencher l’événement <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> quand une valeur est transférée de la cible de liaison vers la source de liaison.</summary>
        <value><see langword="true" /> si l’événement <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> doit être déclenché quand la valeur de source de liaison est mise à jour ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnTargetUpdated : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s’il faut déclencher l’événement <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> quand une valeur est transférée de la source de liaison vers la cible de liaison.</summary>
        <value><see langword="true" /> si l’événement <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> doit être déclenché quand la valeur de cible de liaison est mise à jour ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyOnValidationError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotifyOnValidationError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyOnValidationError : bool with get, set" Usage="System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s’il faut déclencher l’événement attaché <see cref="E:System.Windows.Controls.Validation.Error" /> sur l’objet lié.</summary>
        <value><see langword="true" /> Si le <see cref="E:System.Windows.Controls.Validation.Error" /> événement attaché doit être déclenché sur l’objet lié lorsqu’il existe une erreur de validation pendant les mises à jour de la source ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la liaison a <xref:System.Windows.Data.Binding.ValidationRules%2A> associé, le moteur de liaison vérifie chaque règle chaque fois qu’il transfère la valeur de propriété cible à la propriété source. Si une règle annule une valeur, le moteur de liaison crée un <xref:System.Windows.Controls.ValidationError> de l’objet et l’ajoute à la <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> collection de l’objet lié. Lorsque le <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> propriété n’est pas vide, le <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType> a la valeur de propriété jointe de l’objet `true`. Si le <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> propriété de la <xref:System.Windows.Data.Binding> a la valeur `true`, le moteur de liaison déclenche le <xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType> événement sur l’objet attaché.  
  
 Pour obtenir une présentation détaillée du processus de validation, consultez la section de Validation des données dans le [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyPath Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyPath Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyPath ^ Path { System::Windows::PropertyPath ^ get(); void set(System::Windows::PropertyPath ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : System.Windows.PropertyPath with get, set" Usage="System.Windows.Data.Binding.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin de la propriété de source de liaison.</summary>
        <value>Chemin de la source de liaison. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, chaque liaison possède ces quatre composants : un objet de cible de liaison, une propriété cible, une source de liaison et un chemin d’accès à la valeur de la source de liaison à utiliser. Pour plus d’informations sur ces concepts de liaison de données, consultez [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
 Utilisez le <xref:System.Windows.Data.Binding.Path%2A> propriété pour spécifier la valeur source que vous souhaitez lier à :  
  
-   Dans le cas le plus simple, le <xref:System.Windows.Data.Binding.Path%2A> valeur de propriété est le nom de la propriété de l’objet source à utiliser pour la liaison, tel que `Path=PropertyName`.  
  
-   Les sous-propriétés d’une propriété peuvent être spécifiées par une syntaxe similaire à celle utilisée dans C#. Par exemple, la clause `Path=ShoppingCart.Order` définit la liaison à la sous-propriété `Order` de l’objet ou la propriété `ShoppingCart`.  
  
-   Pour lier à une propriété jointe, placez des parenthèses autour de la propriété. Par exemple, pour lier à la propriété jointe <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType>, la syntaxe est `Path=(DockPanel.Dock)`.  
  
-   Des indexeurs de propriété peuvent être spécifiés entre crochets après le nom de la propriété où l’indexeur est appliqué. Par exemple, la clause `Path=ShoppingCart[0]` définit la liaison à l’index qui correspond à la façon dont l’indexation interne de votre propriété gère la chaîne littérale « 0 ». Plusieurs indexeurs sont également pris en charge.  
  
-   Les indexeurs et les sous-propriétés peuvent être combinés en une clause `Path` ; par exemple, `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`  
  
-   À l’intérieur des indexeurs, vous pouvez avoir plusieurs paramètres d’indexeur séparés par des virgules (,). Le type de chaque paramètre peut être spécifié avec des parenthèses. Par exemple, vous pouvez avoir `Path="[(sys:Int32)42,(sys:Int32)24]"`, où `sys` est mappé à l’espace de noms `System`.  
  
-   Lorsque la source est une vue de collection, l’élément actuel peut être spécifié avec une barre oblique (/). Par exemple, la clause `Path=/` définit la liaison à l’élément actuel dans la vue. Lorsque la source est une collection, cette syntaxe spécifie l’élément actuel de la vue de collection par défaut.  
  
-   Les barres obliques et les noms de propriété peuvent être combinés pour parcourir les propriétés qui sont des collections. Par exemple, `Path=/Offices/ManagerName` spécifie l’élément actuel de la collection source, qui contient une propriété `Offices` qui est également une collection. Son élément actuel est un objet qui contient une propriété `ManagerName`.  
  
-   Éventuellement, un chemin d’accès ayant la valeur point (.) peut servir à lier à la source actuelle. Par exemple, `Text="{Binding}"` équivaut à `Text="{Binding Path=.}"`.  
  
 Pour plus d’informations sur la syntaxe de chemin d’accès, consultez [vue d’ensemble des déclarations de liaison](~/docs/framework/wpf/data/binding-declarations-overview.md) ou [syntaxe XAML de PropertyPath](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md).  
  
 Pour [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] liaisons, consultez le <xref:System.Windows.Data.Binding.XPath%2A> propriété.  
  
 Pour lier à un objet entier, vous n’avez pas besoin de spécifier le <xref:System.Windows.Data.Binding.Path%2A> propriété. Pour plus d’informations, consultez « Spécification du chemin d’accès à la valeur » dans [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
   
  
## Examples  
 L’exemple suivant montre un déclencheur de style qui crée un <xref:System.Windows.Controls.ToolTip> qui signale un message d’erreur de validation. La valeur de la méthode setter lie au contenu d’erreur du courant <xref:System.Windows.Controls.TextBox> (le <xref:System.Windows.Controls.TextBox> l’aide du style) à l’aide de la <xref:System.Windows.Data.Binding.RelativeSource%2A> propriété. Pour plus d’informations sur cet exemple, consultez [Comment : Mettre en œuvre de la Validation de la liaison](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSource RelativeSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.RelativeSource RelativeSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.RelativeSource" />
      <MemberSignature Language="VB.NET" Value="Public Property RelativeSource As RelativeSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::RelativeSource ^ RelativeSource { System::Windows::Data::RelativeSource ^ get(); void set(System::Windows::Data::RelativeSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSource : System.Windows.Data.RelativeSource with get, set" Usage="System.Windows.Data.Binding.RelativeSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la source de liaison en spécifiant son emplacement par rapport à la position de la cible de liaison.</summary>
        <value>Objet <see cref="T:System.Windows.Data.RelativeSource" /> spécifiant l’emplacement relatif de la source de liaison à utiliser. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est couramment utilisée pour lier une propriété d’un objet à une autre propriété du même objet, ou pour définir une liaison dans un style ou un modèle.  
  
 Par défaut, les liaisons héritent du contexte de données spécifié par le `DataContext` propriété, s’il a été défini. Toutefois, le <xref:System.Windows.Data.Binding.RelativeSource%2A> propriété est une des manières que vous pouvez définir explicitement la source d’un <xref:System.Windows.Data.Binding> et substituer le contexte de données hérité. Pour plus d'informations, voir [Procédure : Spécifiez la Source de liaison](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md).  
  
 Le <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> et <xref:System.Windows.Data.Binding.Source%2A?displayProperty=nameWithType> propriétés vous permettent également de définir la source de la liaison explicitement. Toutefois, une seule des trois propriétés, <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, et <xref:System.Windows.Data.Binding.RelativeSource%2A>, doit être ensemble pour chaque liaison, ou un conflit peut se produire. Cette propriété lève une exception s’il existe un conflit de source de liaison.  
  
 Pour [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] plus d’informations, consultez [RelativeSource MarkupExtension](~/docs/framework/wpf/advanced/relativesource-markupextension.md).  
    
## Examples  
 L’exemple suivant montre un déclencheur de style qui crée un <xref:System.Windows.Controls.ToolTip> qui signale un message d’erreur de validation. La valeur de la méthode setter lie au contenu d’erreur du courant <xref:System.Windows.Controls.TextBox> (le <xref:System.Windows.Controls.TextBox> l’aide du style) à l’aide de la <xref:System.Windows.Data.Binding.RelativeSource%2A> propriété. Pour plus d’informations sur cet exemple, consultez [Comment : Mettre en œuvre de la Validation de la liaison](~/docs/framework/wpf/data/how-to-implement-binding-validation.md).  
  
 [!code-xaml[BindValidation#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 Pour voir l’exemple complet, consultez [Validation de liaison, exemple](https://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Source" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveSourceUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveSourceUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveSourceUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveSourceUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" /> qui écoute l’événement.</param>
        <param name="handler">Gestionnaire à supprimer.</param>
        <summary>Supprime un gestionnaire pour l'événement attaché <see cref="E:System.Windows.Data.Binding.SourceUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge l’utilisation des événements attachés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveTargetUpdatedHandler (element As DependencyObject, handler As EventHandler(Of DataTransferEventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveTargetUpdatedHandler(System::Windows::DependencyObject ^ element, EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveTargetUpdatedHandler : System.Windows.DependencyObject * EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; -&gt; unit" Usage="System.Windows.Data.Binding.RemoveTargetUpdatedHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.UIElement" /> ou <see cref="T:System.Windows.ContentElement" /> qui écoute l’événement.</param>
        <param name="handler">Gestionnaire à supprimer.</param>
        <summary>Supprime un gestionnaire pour l'événement attaché <see cref="E:System.Windows.Data.Binding.TargetUpdated" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge l’utilisation des événements attachés dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetXmlNamespaceManager(class System.Windows.DependencyObject target, class System.Xml.XmlNamespaceManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetXmlNamespaceManager (target As DependencyObject, value As XmlNamespaceManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetXmlNamespaceManager(System::Windows::DependencyObject ^ target, System::Xml::XmlNamespaceManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetXmlNamespaceManager : System.Windows.DependencyObject * System.Xml.XmlNamespaceManager -&gt; unit" Usage="System.Windows.Data.Binding.SetXmlNamespaceManager (target, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="target">Objet à partir duquel obtenir les informations d’espace de noms.</param>
        <param name="value"><see cref="T:System.Xml.XmlNamespaceManager" /> à utiliser pour l’évaluation de l’espace de noms dans l’élément passé.</param>
        <summary>Définit un objet gestionnaire d’espace de noms utilisé par la liaison jointe à l’élément fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode prend en charge l’utilisation de la propriété jointe pour le <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> propriété jointe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePath">
      <MemberSignature Language="C#" Value="public bool ShouldSerializePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializePath" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializePath () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializePath();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializePath : unit -&gt; bool" Usage="binding.ShouldSerializePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si la propriété <see cref="P:System.Windows.Data.Binding.Path" /> doit être rendue persistante.</summary>
        <returns><see langword="true" /> si la propriété n'utilise plus sa valeur par défaut ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cela `ShouldSerialize` méthode est fournie car la <xref:System.Windows.Data.Binding.Path%2A> propriété n’a pas de valeur par défaut simple. Cette méthode indique si la propriété a changé sa valeur par défaut. En règle générale, vous appelez cette méthode si vous développez un concepteur pour le <xref:System.Windows.Data.Binding> ou votre propre contrôle incorporant la <xref:System.Windows.Data.Binding>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSource">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeSource" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeSource () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeSource();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeSource : unit -&gt; bool" Usage="binding.ShouldSerializeSource " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si la propriété <see cref="P:System.Windows.Data.Binding.Source" /> doit être rendue persistante.</summary>
        <returns><see langword="true" /> si la propriété n'utilise plus sa valeur par défaut ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cela `ShouldSerialize` méthode est fournie car la <xref:System.Windows.Data.Binding.Source%2A> propriété n’a pas de valeur par défaut simple. Cette méthode indique si la propriété a changé sa valeur par défaut. En règle générale, vous appelez cette méthode si vous développez un concepteur pour le <xref:System.Windows.Data.Binding> ou votre propre contrôle incorporant la <xref:System.Windows.Data.Binding>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValidationRules">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeValidationRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeValidationRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeValidationRules () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeValidationRules();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeValidationRules : unit -&gt; bool" Usage="binding.ShouldSerializeValidationRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si la propriété <see cref="P:System.Windows.Data.Binding.ValidationRules" /> doit être rendue persistante.</summary>
        <returns><see langword="true" /> si la propriété n'utilise plus sa valeur par défaut ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cela `ShouldSerialize` méthode est fournie car la <xref:System.Windows.Data.Binding.ValidationRules%2A> propriété n’a pas de valeur par défaut simple. Cette méthode indique si la propriété a changé sa valeur par défaut. En règle générale, vous appelez cette méthode si vous développez un concepteur pour le <xref:System.Windows.Data.Binding> ou votre propre contrôle incorporant la <xref:System.Windows.Data.Binding>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.Data.Binding.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’objet à utiliser comme source de liaison.</summary>
        <value>Objet à utiliser comme source de liaison.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, les liaisons héritent du contexte de données spécifié par le `DataContext` propriété, s’il a été défini. Toutefois, le <xref:System.Windows.Data.Binding.Source%2A> propriété est une des manières que vous pouvez définir explicitement la source d’un <xref:System.Windows.Data.Binding> et substituer le contexte de données hérité. Si vous ne devez pas les fonctionnalités de l’établissement d’une portée dans laquelle plusieurs propriétés héritent du même contexte de données, vous pouvez utiliser la <xref:System.Windows.Data.Binding.Source%2A> propriété au lieu du `DataContext` propriété.  
  
 Le <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=nameWithType> et <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=nameWithType> propriétés vous permettent également de définir la source de la liaison explicitement. Toutefois, une seule des trois propriétés, <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, et <xref:System.Windows.Data.Binding.RelativeSource%2A>, doit être ensemble pour chaque liaison, ou un conflit peut se produire. Cette propriété lève une exception s’il existe un conflit de source de liaison.  
  
 Pour effacer cette propriété, affectez-lui la valeur <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>.  
  
<a name="xamlAttributeUsage_Source"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object Source="object"/>  
```  
  
<a name="xamlValues_Source"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *object*  
 Un objet existant. Pour faire référence à un objet existant, utilisez le [Extension de balisage StaticResource](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)  
  
   
  
## Examples  
 L’exemple suivant utilise un `Person` objet avec une propriété de chaîne nommée `PersonName` qui est définie dans le `SDKSample` espace de noms, comme le montre la première ligne en surbrillance. Dans la ligne en surbrillance qui contient le `<src>` élément, il instancie le `Person` de l’objet avec un `PersonName` valeur de propriété `Joe`. Cette opération est effectuée le `Resources` section et affecté un `x:Key`.  
  
 [!code-xaml[BindingInstantiation](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml?highlight=4,9,37)]  
  
 La ligne en surbrillance qui contient le `<TextBlock>` éléments montre comment lier à la `PersonName` propriété. Par conséquent, le <xref:System.Windows.Controls.TextBlock> contrôle apparaît avec la valeur « Joe ».  
  
 Dans l’exemple suivant, le <xref:System.Windows.Data.Binding.Source%2A> les valeurs de la <xref:System.Windows.Data.Binding> objets sont définis sur le `static` propriété <xref:System.Windows.Application.Current%2A?displayProperty=nameWithType>:  
  
 [!code-xaml[DataBindingLab#ComboBoxMultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/AddProductWindow.xaml#comboboxmultibinding)]  
  
 Pour l’exemple complet, consultez [démonstration de liaison de données](https://go.microsoft.com/fwlink/?LinkID=163703).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" Usage="see AddSourceUpdatedHandler, and RemoveSourceUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Se produit quand une valeur est transférée de la cible de liaison vers la source de liaison, mais uniquement pour les liaisons dont la propriété <see cref="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" /> a la valeur <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_SourceUpdatedEvent"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Data.Binding.SourceUpdatedEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601>, limité à <xref:System.Windows.Data.DataTransferEventArgs>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="SourceUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SourceUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SourceUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SourceUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SourceUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l’événement attaché <see cref="E:System.Windows.Data.Binding.SourceUpdated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="ILAsm" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.Binding.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberSignature Language="F#" Value="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" Usage="see AddTargetUpdatedHandler, and RemoveTargetUpdatedHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Se produit quand une valeur est transférée de la source de liaison vers la cible de liaison, mais uniquement pour les liaisons dont la propriété <see cref="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" /> a la valeur <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TargetUpdatedEvent"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Data.Binding.TargetUpdatedEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601>, limité à <xref:System.Windows.Data.DataTransferEventArgs>.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TargetUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TargetUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetUpdatedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TargetUpdatedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetUpdatedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l’événement attaché <see cref="E:System.Windows.Data.Binding.TargetUpdated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceExceptionFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceExceptionFilter As UpdateSourceExceptionFilterCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceExceptionFilterCallback ^ UpdateSourceExceptionFilter { System::Windows::Data::UpdateSourceExceptionFilterCallback ^ get(); void set(System::Windows::Data::UpdateSourceExceptionFilterCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceExceptionFilter : System.Windows.Data.UpdateSourceExceptionFilterCallback with get, set" Usage="System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceExceptionFilterCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un gestionnaire que vous pouvez utiliser pour fournir une logique personnalisée pour gérer les exceptions que le moteur de liaison rencontre pendant la mise à jour de la valeur source de liaison. Cela s’applique uniquement si vous avez associé un <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> à votre liaison.</summary>
        <value>Méthode qui fournit la logique personnalisée pour gérer les exceptions que le moteur de liaison rencontre pendant la mise à jour de la valeur source de liaison.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Controls.ExceptionValidationRule> est une règle de validation intégrée qui cherche les exceptions levées pendant la mise à jour de la propriété de source de liaison. Si vous avez associé le <xref:System.Windows.Controls.ExceptionValidationRule> avec votre <xref:System.Windows.Data.Binding> de l’objet, vous pouvez utiliser cette propriété pour définir un gestionnaire pour fournir une logique personnalisée pour gérer ces exceptions. Si un <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> n’est pas spécifié sur le <xref:System.Windows.Data.Binding>, le moteur de liaison crée un <xref:System.Windows.Controls.ValidationError> avec l’exception et l’ajoute à la <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> collection de l’élément lié.  
  
   
  
## Examples  
 Le <xref:System.Windows.Controls.TextBox.Text%2A> propriété des éléments suivants <xref:System.Windows.Controls.TextBox> est lié aux données à une propriété de source `Age3` qui est de type `int`. Le <xref:System.Windows.Controls.ExceptionValidationRule> vérifications pour les exceptions levées pendant la mise à jour de la propriété source (par exemple, lorsque l’utilisateur entre une valeur qui ne peut pas être convertie en un entier).  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 Vous pouvez fournir une logique personnalisée pour gérer ces exceptions. L’exemple suivant montre comment utiliser le <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> propriété à définir un <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 Voici un exemple d’implémentation d’un <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 Le <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> peut également retourner `null`, l’exception proprement dite, ou un <xref:System.Windows.Controls.ValidationError>. Pour plus d'informations, consultez <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  
  
 Pour obtenir un exemple complet, consultez [Validation de liaison, exemple](https://go.microsoft.com/fwlink/?LinkID=159972).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger UpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine la planification des mises à jour de la source de liaison.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Data.UpdateSourceTrigger" />. La valeur par défaut est <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />, qui retourne la valeur par défaut <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> de la propriété de dépendance cible. Cependant, la valeur par défaut de la plupart des propriétés de dépendance est <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" />, tandis que celle de la propriété <see cref="P:System.Windows.Controls.TextBox.Text" /> est <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" />.  
  
Un moyen de déterminer par programmation la valeur par défaut <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> d’une propriété de dépendance consiste à obtenir les métadonnées de la propriété à l’aide de <see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />, puis à vérifier la valeur de la propriété <see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les liaisons sont <xref:System.Windows.Data.BindingMode.TwoWay> ou <xref:System.Windows.Data.BindingMode.OneWayToSource> écoutent les modifications de la propriété cible et les propagent à la source. On appelle cela la mise à jour de la source. En règle générale, ces mises à jour se produisent chaque fois que la propriété cible change. Cela convient pour les cases à cocher et autres contrôles simples, mais il n’est généralement pas approprié pour les champs de texte. La mise à jour après chaque frappe au clavier peut réduire les performances et empêcher l’utilisateur la possibilité de revenir en arrière pour corriger les fautes de frappe avant de valider la nouvelle valeur habituelle. Par conséquent, la valeur par défaut <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> valeur de la <xref:System.Windows.Controls.TextBox.Text%2A> propriété est <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> et non <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  
  
 Si vous définissez la <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> valeur <xref:System.Windows.Data.UpdateSourceTrigger.Explicit>, vous devez appeler la <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> méthode ou les modifications ne seront pas repropagées vers la source.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Mode" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s'il faut inclure <see cref="T:System.Windows.Controls.DataErrorValidationRule" />.</summary>
        <value><see langword="true" /> pour inclure <see cref="T:System.Windows.Controls.DataErrorValidationRule" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de cette propriété fournit une alternative à l’utilisation de la <xref:System.Windows.Controls.DataErrorValidationRule> élément explicitement. Le <xref:System.Windows.Controls.DataErrorValidationRule> est une règle de validation intégrée qui vérifie les erreurs qui sont déclenchés par le <xref:System.ComponentModel.IDataErrorInfo> implémentation de l’objet source. Si une erreur est générée, le moteur de liaison crée un <xref:System.Windows.Controls.ValidationError> avec l’erreur et l’ajoute à la <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> collection de l’élément lié. L’absence d’une erreur efface ces commentaires de validation, sauf si une autre règle génère un problème de validation.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> est introduit dans le .NET Framework version 3.5.  Pour plus d’informations, consultez [Versions et dépendances du .NET Framework](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 Les exemples suivants utilisent <xref:System.ComponentModel.IDataErrorInfo> et <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> pour valider l’entrée d’utilisateur dans un <xref:System.Windows.Controls.TextBox>. Le premier exemple crée un type de données qui implémente <xref:System.ComponentModel.IDataErrorInfo> pour signaler des erreurs de validation.  
  
 [!code-csharp[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#idataerrorinfodata)]
 [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#idataerrorinfodata)]  
  
 L’exemple suivant lie la `Age` propriété le <xref:System.Windows.Controls.TextBox> et définit <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A> à `true` sur le <xref:System.Windows.Data.Binding>.  Lorsque l’utilisateur entre une valeur non valide, une bordure rouge s’affiche dans le <xref:System.Windows.Controls.TextBox> et <xref:System.Windows.Controls.ToolTip> signale le message d’erreur.  
  
 [!code-xaml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#idataerrorinfoxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnExceptions">
      <MemberSignature Language="C#" Value="public bool ValidatesOnExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnExceptions : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s'il faut inclure <see cref="T:System.Windows.Controls.ExceptionValidationRule" />.</summary>
        <value><see langword="true" /> pour inclure <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de cette propriété fournit une alternative à l’utilisation de la <xref:System.Windows.Controls.ExceptionValidationRule> élément explicitement. Le <xref:System.Windows.Controls.ExceptionValidationRule> est une règle de validation intégrée qui cherche les exceptions levées pendant la mise à jour de la propriété source. Si une exception est levée, le moteur de liaison crée un <xref:System.Windows.Controls.ValidationError> avec l’exception et l’ajoute à la <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> collection de l’élément lié. L’absence d’une erreur efface ces commentaires de validation, sauf si une autre règle génère un problème de validation.  
  
 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> est introduit dans le .NET Framework version 3.5.  Pour plus d’informations, consultez [Versions et dépendances du .NET Framework](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
   
  
## Examples  
 Les exemples suivants utilisent <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> pour valider l’entrée d’utilisateur dans un <xref:System.Windows.Controls.TextBox>. Le premier exemple crée un type de données qui lève une exception lorsque la `Age` propriété est définie sur une propriété non valide.  
  
 [!code-csharp[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#throwexceptiondata)]
 [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#throwexceptiondata)]  
  
 L’exemple suivant lie la `Age` propriété le <xref:System.Windows.Controls.TextBox> et définit <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> à `true` sur le <xref:System.Windows.Data.Binding>. Lorsque l’utilisateur entre une valeur non valide, une bordure rouge s’affiche dans le <xref:System.Windows.Controls.TextBox> et <xref:System.Windows.Controls.ToolTip> signale le message d’erreur.  
  
 [!code-xaml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#throwexceptionxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnNotifyDataErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnNotifyDataErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatesOnNotifyDataErrors : bool with get, set" Usage="System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s'il faut inclure <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />.</summary>
        <value><see langword="true" /> pour inclure <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque <xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A> est `true`, la liaison vérifie et signale les erreurs qui sont déclenchés par une source de données qui implémente <xref:System.ComponentModel.INotifyDataErrorInfo>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidationRules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidationRules As Collection(Of ValidationRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ ValidationRules { System::Collections::ObjectModel::Collection&lt;System::Windows::Controls::ValidationRule ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidationRules : System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;" Usage="System.Windows.Data.Binding.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de règles qui vérifient la validité des entrées utilisateur.</summary>
        <value>Collection d'objets <see cref="T:System.Windows.Controls.ValidationRule" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle de liaison de données vous permet d’associer <xref:System.Windows.Data.Binding.ValidationRules%2A> avec votre <xref:System.Windows.Data.Binding> ou <xref:System.Windows.Data.MultiBinding> objet. Vous pouvez créer des règles personnalisées en dérivant le <xref:System.Windows.Controls.ValidationRule> classe et implémenter la <xref:System.Windows.Controls.ValidationRule.Validate%2A> (méthode), ou vous pouvez utiliser la fonction intégrée <xref:System.Windows.Controls.ExceptionValidationRule>, ce qui invalide une valeur s’il existe des exceptions pendant les mises à jour de la source.  
  
 Le moteur de liaison vérifie chaque <xref:System.Windows.Controls.ValidationRule> associé à une liaison chaque fois qu’une valeur d’entrée (valeur propriété cible de liaison) est transférée à la propriété de source de liaison. Pour obtenir une présentation détaillée du processus de validation, consultez la section de Validation des données dans le [vue d’ensemble de la liaison de données](~/docs/framework/wpf/data/data-binding-overview.md).  
  
> [!NOTE]
>  Cette propriété peut être définie [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] uniquement à l’aide de la syntaxe de collection indiquée, ou en accédant à l’objet de collection et à l’aide de ses différentes méthodes, telles que `Add`. La propriété pour accéder à l’objet de collection est en lecture seule, tandis que la collection elle-même est en lecture-écriture.  
  
<a name="xamlPropertyElementUsage_ValidationRules"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.ValidationRules>  
    oneOrMoreValidationRules  
  </object.ValidationRules>  
</object>  
  
```  
  
<a name="xamlValues_ValidationRules"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreValidationRules*  
 Un ou plusieurs <xref:System.Windows.Controls.ValidationRule> objets. Vous pouvez utiliser la <xref:System.Windows.Controls.ExceptionValidationRule> classe ou de créer des règles personnalisées en sous-classant la <xref:System.Windows.Controls.ValidationRule> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Validation" />
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManager">
      <MemberSignature Language="C#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="ILAsm" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XmlNamespaceManager" />
      <MemberSignature Language="VB.NET" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberSignature Language="F#" Value="see GetXmlNamespaceManager, and SetXmlNamespaceManager" Usage="see GetXmlNamespaceManager, and SetXmlNamespaceManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Xml.XmlNamespaceManager" /> utilisé pour effectuer des requêtes <see langword="XPath" /> tenant compte des espaces de noms dans des liaisons XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété attachée utilise l’héritage de valeur de propriété, qui reproduit le comportement d’héritage d’espace de noms qui est présent dans [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)]. Pour plus d’informations, consultez [Héritage de la valeur de propriété](~/docs/framework/wpf/advanced/property-value-inheritance.md).  
  
<a name="dependencyPropertyInfo_XmlNamespaceManager"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.Data.Binding.XmlNamespaceManagerProperty>|  
|La valeur des propriétés de métadonnées `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty XmlNamespaceManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly XmlNamespaceManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ XmlNamespaceManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable XmlNamespaceManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété jointe <see cref="P:System.Windows.Data.Binding.XmlNamespaceManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Windows.Data.Binding.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une requête <see langword="XPath" /> qui retourne la valeur de la source de liaison [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] à utiliser.</summary>
        <value>Requête <see langword="XPath" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque la source de liaison est [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] données au lieu d’un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] objet, le <xref:System.Windows.Data.Binding.XPath%2A> propriété est utilisée au lieu du <xref:System.Windows.Data.Binding.Path%2A> propriété pour indiquer le chemin d’accès à la valeur sur la source de liaison à utiliser.  
  
 En définissant le <xref:System.Windows.Data.Binding.XPath%2A> propriété, vous créez un `XPath` requête pour sélectionner un nœud ou une collection de nœuds (<xref:System.Xml.XmlElement?displayProperty=nameWithType> et <xref:System.Xml.XmlAttribute?displayProperty=nameWithType> dérivent tous les deux <xref:System.Xml.XmlNode?displayProperty=nameWithType>). <xref:System.Xml.XmlNode?displayProperty=nameWithType> est un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] objet, ce qui signifie que vous pouvez lier à ses propriétés à l’aide de la <xref:System.Windows.Data.Binding.Path%2A> propriété.  
  
 Le <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> méthode gère le `XPath` expressions à partir de la <xref:System.Windows.Data.Binding.XPath%2A> propriété. `XPath` fonctions ne sont pas prises en charge. Pour `XPath` informations sur l’expression, consultez le <xref:System.Xml.XmlNode.SelectNodes%2A> documentation et des exemples fournis dans la section exemple.  
  
 Objets LINQ to XML <xref:System.Xml.Linq.XDocument> et <xref:System.Xml.Linq.XElement> n’utilisez pas `XPath`. Pour plus d’informations, consultez [Guide pratique pour Effectuer une liaison avec XDocument, XElement ou LINQ pour des résultats de requête XML](~/docs/framework/wpf/data/how-to-bind-to-xdocument-xelement-or-linq-for-xml-query-results.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>