<Type Name="ResourceWriter" FullName="System.Resources.ResourceWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5dfb5f554c0bc7dc8e1d75342db1c3875a961911" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006169" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceWriter : System.Resources.IResourceWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceWriter extends System.Object implements class System.IDisposable, class System.Resources.IResourceWriter" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceWriter&#xA;Implements IResourceWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceWriter sealed : System::Resources::IResourceWriter" />
  <TypeSignature Language="F#" Value="type ResourceWriter = class&#xA;    interface IResourceWriter&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Writer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceWriter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Écrit les ressources au format par défaut du système dans un fichier ou un flux de sortie. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceWriter> Fournit une implémentation par défaut de la <xref:System.Resources.IResourceWriter> interface. Il vous permet de créer par programme un fichier de ressources binaire (.resources).  
  
 Les ressources sont spécifiées en tant que paires nom / valeur à l’aide de la <xref:System.Resources.ResourceWriter.AddResource%2A> (méthode). Noms de ressources respectent la casse lorsqu’il est utilisé pour les recherches, mais plus facilement en charge les outils de création et aider à éliminer les bogues, <xref:System.Resources.ResourceWriter> n’autorise pas un fichier .resources d’avoir des noms qui varient uniquement par la casse. Le <xref:System.Resources.ResourceWriter> classe vous permet de créer la chaîne, objet et ressources binaires. Ressources binaires peuvent être écrits au fichier de ressources en tant que tableau d’octets ou un flux de données.  
  
> [!IMPORTANT]
>  Ce type implémente le <xref:System.IDisposable> interface. Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement. Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc. Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic). Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.  
  
 Pour créer un fichier de ressources, créez un <xref:System.Resources.ResourceWriter> avec un nom de fichier unique, appelez <xref:System.Resources.ResourceWriter.AddResource%2A> au moins une fois, appelez <xref:System.Resources.ResourceWriter.Generate%2A> pour écrire le fichier de ressources sur le disque, puis appelez <xref:System.Resources.ResourceWriter.Close%2A> pour fermer le fichier. Appel <xref:System.Resources.ResourceWriter.Close%2A> appelle implicitement <xref:System.Resources.ResourceWriter.Generate%2A> si vous n’appelez pas explicitement <xref:System.Resources.ResourceWriter.Generate%2A>.  
  
 Les ressources ne seront pas nécessairement être écrites dans le même ordre qu’ils ont été ajoutés.  
  
 Pour récupérer des ressources à partir d’un fichier .resources binaire créé par le <xref:System.Resources.ResourceWriter> (classe), vous pouvez utiliser la <xref:System.Resources.ResourceManager> (classe), ce qui vous permet de récupérer des ressources nommées, ou le <xref:System.Resources.ResourceReader> (classe), qui vous permet d’énumérer toutes les ressources dans le fichier.  
  
   
  
## Examples  
 L’exemple suivant écrit plusieurs chaînes dans le fichier myResources.resources.  
  
 [!code-cpp[Classic ResourceWriter Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ResourceWriter Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CS/source.cs#1)]
 [!code-vb[Classic ResourceWriter Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ResourceWriter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Resources.IResourceWriter" />
    <altmember cref="T:System.IDisposable" />
    <related type="Article" href="https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890">Ressources dans des applications de bureau</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6c5ad891-66a0-4e7a-adcf-f41863ba6d8d">Création de fichiers de ressources pour les applications bureautiques</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Resources.ResourceWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceWriter(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceWriter : System.IO.Stream -&gt; System.Resources.ResourceWriter" Usage="new System.Resources.ResourceWriter stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flux de sortie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Resources.ResourceWriter" /> qui écrit les ressources dans le flux fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant définit une nouvelle instance de la <xref:System.Resources.ResourceWriter> classe écrit dans un flux spécifié. Le code ajoute des ressources au writer et écrit les ressources dans le flux.  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le paramètre <paramref name="stream" /> n'est pas accessible en écriture.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="stream" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/index.md">Internationalisation et localisation d’applications .NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceWriter (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceWriter(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceWriter : string -&gt; System.Resources.ResourceWriter" Usage="new System.Resources.ResourceWriter fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName">Nom du fichier de sortie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Resources.ResourceWriter" /> qui écrit les ressources dans le fichier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant définit une nouvelle instance de la <xref:System.Resources.ResourceWriter> classe écrit dans un fichier spécifié. Le code ajoute des ressources au writer et écrit les ressources dans le fichier.  
  
 [!code-cpp[Classic ResourceWriter Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ResourceWriter Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CS/source.cs#1)]
 [!code-vb[Classic ResourceWriter Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ResourceWriter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/globalization-localization/index.md">Internationalisation et localisation d’applications .NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute une ressource à la liste de ressources à écrire.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResource (name As String, value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddResource(System::String ^ name, cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddResource : string * byte[] -&gt; unit&#xA;override this.AddResource : string * byte[] -&gt; unit" Usage="resourceWriter.AddResource (name, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceWriter.AddResource(System.String,System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la ressource.</param>
        <param name="value">Valeur de la ressource en tant que tableau d'entiers non signés 8 bits.</param>
        <summary>Ajoute une ressource nommée, spécifiée en tant que tableau d'octets, à la liste des ressources à écrire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ressource n’est pas écrite jusqu'à ce que <xref:System.Resources.ResourceWriter.Generate%2A> est appelée.  
  
 Vous pouvez récupérer les ressources écrites par le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29> méthode en appelant le <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29> méthode pour ajouter une image de graphique qui ont été lues en tant que tableau d’octets à un <xref:System.Resources.ResourceWriter> objet.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_byt1.cs#4)]
 [!code-vb[System.Resources.ResourceWriter.AddResource#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_byt1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> (ou un nom dont seule la casse diffère) a déjà été ajouté à ce <see cref="T:System.Resources.ResourceWriter" />.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Resources.ResourceWriter" /> a été fermé et sa table de hachage n'est pas disponible.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/6c5ad891-66a0-4e7a-adcf-f41863ba6d8d">Création de fichiers de ressources pour les applications bureautiques</related>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, System.IO.Stream value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(string name, class System.IO.Stream value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResource (name As String, value As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResource(System::String ^ name, System::IO::Stream ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddResource : string * System.IO.Stream -&gt; unit" Usage="resourceWriter.AddResource (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.IO.Stream" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la ressource à ajouter.</param>
        <param name="value">La valeur de la ressource à ajouter. La ressource doit prendre en charge la propriété <see cref="P:System.IO.Stream.Length" />.</param>
        <summary>Ajoute une ressource nommée, spécifiée en tant que flux, à la liste des ressources à écrire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier n’importe quel flux qui prend en charge la <xref:System.IO.Stream.Length%2A?displayProperty=nameWithType> propriété pour `value`.  
  
 Vous pouvez récupérer les ressources écrites par le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29> méthode en appelant le <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29> méthode pour ajouter une image de graphique qui a été enregistrée dans un <xref:System.IO.MemoryStream> de l’objet à un <xref:System.Resources.ResourceWriter> objet.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_str1.cs#2)]
 [!code-vb[System.Resources.ResourceWriter.AddResource#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_str1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> (ou un nom dont seule la casse diffère) a déjà été ajouté à ce <see cref="T:System.Resources.ResourceWriter" />.  
  
ou 
Le flux ne prend pas en charge la propriété <see cref="P:System.IO.Stream.Length" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ce <see cref="T:System.Resources.ResourceWriter" /> a été fermé.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/6c5ad891-66a0-4e7a-adcf-f41863ba6d8d">Création de fichiers de ressources pour les applications bureautiques</related>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResource (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddResource(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddResource : string * obj -&gt; unit&#xA;override this.AddResource : string * obj -&gt; unit" Usage="resourceWriter.AddResource (name, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceWriter.AddResource(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la ressource.</param>
        <param name="value">Valeur de la ressource.</param>
        <summary>Ajoute une ressource nommée, spécifiée en tant qu'objet, à la liste des ressources à écrire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` doit être sérialisable.  
  
 La ressource n’est pas écrite jusqu'à ce que le <xref:System.Resources.ResourceWriter.Generate%2A> méthode est appelée.  
  
 Vous pouvez récupérer les ressources écrites par le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29> méthode en appelant le <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29> pour ajouter des données d’objet à un fichier de ressources binaire.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_obj1.cs#1)]  
  
 `DonorColumns` est une classe personnalisée dont les champs contiennent les noms des colonnes à afficher dans l’interface utilisateur. Notez que la classe est marquée avec le <xref:System.SerializableAttribute> attribut. En règle générale, la classe serait être définie dans un assembly distinct, et une référence à celle-ci serait être fournie au compilateur au moment de la compilation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> (ou un nom dont seule la casse diffère) a déjà été ajouté à ce <see cref="T:System.Resources.ResourceWriter" />.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Resources.ResourceWriter" /> a été fermé et sa table de hachage n'est pas disponible.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/6c5ad891-66a0-4e7a-adcf-f41863ba6d8d">Création de fichiers de ressources pour les applications bureautiques</related>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResource (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddResource(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddResource : string * string -&gt; unit&#xA;override this.AddResource : string * string -&gt; unit" Usage="resourceWriter.AddResource (name, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceWriter.AddResource(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la ressource.</param>
        <param name="value">Valeur de la ressource.</param>
        <summary>Ajoute une ressource de chaîne à la liste de ressources à écrire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ressource n’est pas écrite jusqu'à ce que <xref:System.Resources.ResourceWriter.Generate%2A> est appelée.  
  
 Vous pouvez récupérer les ressources écrites par le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.String%29> méthode en appelant le <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.AddResource%2A> méthode pour ajouter des ressources de chaîne à un <xref:System.Resources.ResourceWriter> objet.  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> (ou un nom dont seule la casse diffère) a déjà été ajouté à ce ResourceWriter.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="name" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Resources.ResourceWriter" /> a été fermé et sa table de hachage n'est pas disponible.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/6c5ad891-66a0-4e7a-adcf-f41863ba6d8d">Création de fichiers de ressources pour les applications bureautiques</related>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, System.IO.Stream value, bool closeAfterWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(string name, class System.IO.Stream value, bool closeAfterWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResource (name As String, value As Stream, closeAfterWrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResource(System::String ^ name, System::IO::Stream ^ value, bool closeAfterWrite);" />
      <MemberSignature Language="F#" Value="member this.AddResource : string * System.IO.Stream * bool -&gt; unit" Usage="resourceWriter.AddResource (name, value, closeAfterWrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="value" Type="System.IO.Stream" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="closeAfterWrite" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom de la ressource à ajouter.</param>
        <param name="value">La valeur de la ressource à ajouter. La ressource doit prendre en charge la propriété <see cref="P:System.IO.Stream.Length" />.</param>
        <param name="closeAfterWrite"><see langword="true" /> pour fermer le flux après l'appel de la méthode <see cref="M:System.Resources.ResourceWriter.Generate" /> ; sinon <see langword="false" />.</param>
        <summary>Ajoute une ressource nommée, spécifiée en tant que flux, à la liste des ressources à écrire et spécifie si le flux doit être fermé après l'appel de la méthode <see cref="M:System.Resources.ResourceWriter.Generate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier n’importe quel flux qui prend en charge la <xref:System.IO.Stream.Length%2A?displayProperty=nameWithType> propriété pour `value`.  
  
 Vous pouvez récupérer les ressources écrites par le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29> méthode en appelant le <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29> méthode pour ajouter une image de graphique qui a été enregistrée dans un <xref:System.IO.MemoryStream> de l’objet à un <xref:System.Resources.ResourceWriter> objet.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_str2.cs#3)]
 [!code-vb[System.Resources.ResourceWriter.AddResource#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_str2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> (ou un nom dont seule la casse diffère) a déjà été ajouté à ce <see cref="T:System.Resources.ResourceWriter" />.  
  
ou 
Le flux ne prend pas en charge la propriété <see cref="P:System.IO.Stream.Length" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Ce <see cref="T:System.Resources.ResourceWriter" /> a été fermé.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/6c5ad891-66a0-4e7a-adcf-f41863ba6d8d">Création de fichiers de ressources pour les applications bureautiques</related>
      </Docs>
    </Member>
    <Member MemberName="AddResourceData">
      <MemberSignature Language="C#" Value="public void AddResourceData (string name, string typeName, byte[] serializedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceData(string name, string typeName, unsigned int8[] serializedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddResourceData (name As String, typeName As String, serializedData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddResourceData(System::String ^ name, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ serializedData);" />
      <MemberSignature Language="F#" Value="member this.AddResourceData : string * string * byte[] -&gt; unit" Usage="resourceWriter.AddResourceData (name, typeName, serializedData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="typeName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="serializedData" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom qui identifie la ressource contenant les données ajoutées.</param>
        <param name="typeName">Nom du type des données ajoutées.</param>
        <param name="serializedData">Tableau d’octets qui contient la représentation binaire des données ajoutées.</param>
        <summary>Ajoute une unité de données comme ressource dans la liste de ressources à écrire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Resources.ResourceWriter.AddResourceData%2A> méthode pour ajouter une ressource sous forme binaire (autrement dit, en tant que tableau d’octets) à la liste des ressources à écrire. Vous devez spécifier le nom de la ressource, le nom de type des données contenues dans la ressource et la représentation binaire des données elles-mêmes. Après avoir ajouté chaque ressource que vous avez besoin, utilisez le <xref:System.Resources.ResourceWriter.Generate%2A> méthode pour écrire la liste des ressources dans le fichier de ressources ou un flux qui a été spécifiée dans le <xref:System.Resources.ResourceWriter.%23ctor%2A> constructeur.  
  
 `typeName` est une chaîne qui représente le type de données de la ressource. Il peut être une des valeurs suivantes :  
  
-   La représentation sous forme de chaîne d’un `ResourceTypeCode` membre d’énumération qui indique le type de données de la ressource. `ResourceTypeCode` est une énumération privée qui est utilisée par [Resgen.exe](~/docs/framework/tools/resgen-exe-resource-file-generator.md) pour indiquer qu’un format binaire spécial est utilisé pour stocker un des types de données courants 19. Ceux-ci incluent les types de données primitifs .NET Framework (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), ainsi que <xref:System.String>, <xref:System.DateTime>, et <xref:System.TimeSpan>. En outre, le `ResourceTypeCode` énumération inclut les valeurs indiquées dans le tableau suivant.  
  
    |Valeur`ResourceTypeCode` |Description |  
    |------------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|Les données sont un tableau d’octets.|  
    |`ResourceTypeCode.Null`|Les données sont une référence null.|  
    |`ResourceTypeCode.Stream`|Les données sont stockées dans un flux de données.|  
  
-   Chaîne qui contient le nom qualifié complet du type dont les données binaires sont affectées à la `serializedData` argument (par exemple, `System.String`). En outre, pour les types qui ne font pas partie de la bibliothèque de classes .NET Framework, la chaîne inclut le nom, la version, la culture et la clé publique de l’assembly qui contient le type. Par exemple, la chaîne suivante indique que les données sérialisées représentent une instance de la `Person` tapez dans la `Extensions` espace de noms, qui se trouve dans la version 1.0 d’un assembly nommé utilitaire qui a aucune clé publique et aucune culture désignée.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
 Une méthode parallèle pour la lecture des données de ressources écrites avec le <xref:System.Resources.ResourceWriter.AddResourceData%2A> méthode est <xref:System.Resources.ResourceReader.GetResourceData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.AddResourceData%2A> méthode pour écrire deux entier de valeurs dans un fichier .resources et utilise ensuite un <xref:System.Resources.ResourceReader> objet pour les récupérer.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResourceData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresourcedata/cs/addresourcedata.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.AddResourceData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresourcedata/vb/addresourcedata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />, <paramref name="typeName" /> ou <paramref name="serializedData" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> (ou un nom qui diffère uniquement par les majuscules) a déjà été ajouté à cet objet <see cref="T:System.Resources.ResourceWriter" />.</exception>
        <exception cref="T:System.InvalidOperationException">L’objet <see cref="T:System.Resources.ResourceWriter" /> actuel n’est pas initialisé. La cause probable est que l’objet <see cref="T:System.Resources.ResourceWriter" /> est fermé.</exception>
        <altmember cref="Overload:System.Resources.ResourceWriter.#ctor" />
        <altmember cref="M:System.Resources.ResourceWriter.Close" />
        <altmember cref="M:System.Resources.ResourceWriter.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceWriter.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceWriter.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre les ressources dans le flux de sortie puis ferme ce dernier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceWriter.Generate%2A> est appelé implicitement par <xref:System.Resources.ResourceWriter.Close%2A>, si nécessaire.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Resources.ResourceWriter.Close%2A> méthode pour écrire les ressources de tous les objets dans un <xref:System.Resources.ResourceWriter> classe dans le flux de sortie. Le code puis s’arrête l’enregistreur.  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Une erreur d’E/S s’est produite.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Une erreur s'est produite pendant la sérialisation de l'objet.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permet aux utilisateurs de fermer le fichier ou le flux de ressources, libérant de ce fait les ressources de manière explicite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation de cette méthode est identique à <xref:System.Resources.ResourceWriter.Close%2A>.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Resources.ResourceWriter.Dispose%2A> méthode pour écrire les ressources de tous les objets dans un <xref:System.Resources.ResourceWriter> classe dans le flux de sortie. Ensuite, le code arrête l’enregistreur et rendre les ressources du writer disponibles pour d’autres processus.  
  
 [!code-cpp[System.Resources.ResourceWriter.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/CPP/resourcewriterdispose.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/CS/resourcewriterdispose.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/VB/resourcewriterdispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Une erreur d’E/S s’est produite.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Une erreur s'est produite pendant la sérialisation de l'objet.</exception>
        <altmember cref="T:System.IDisposable" />
      </Docs>
    </Member>
    <Member MemberName="Generate">
      <MemberSignature Language="C#" Value="public void Generate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Generate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Generate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Generate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Generate();" />
      <MemberSignature Language="F#" Value="abstract member Generate : unit -&gt; unit&#xA;override this.Generate : unit -&gt; unit" Usage="resourceWriter.Generate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceWriter.Generate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enregistre toutes les ressources au format par défaut du système dans le flux de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Resources.ResourceWriter.Generate%2A> méthode est appelée implicitement par la <xref:System.Resources.ResourceWriter.Close%2A> méthode si elle n’est pas appelée par votre code d’application.  
  
 <xref:System.Resources.ResourceWriter.Generate%2A> peut uniquement être appelée qu’une seule fois, après tous les appels à <xref:System.Resources.ResourceWriter.AddResource%2A> et <xref:System.Resources.ResourceWriter.AddResourceData%2A> ont été apportées. Si une exception se produit lors de l’écriture des ressources, le flux de sortie est fermé pour empêcher l’écriture des informations non valides.  
  
 <xref:System.Resources.ResourceWriter.Generate%2A> ne fermez pas le flux de sortie dans les cas normaux. Sauf si vous combinez des données supplémentaires avec votre fichier .resources ou ont besoin d’accéder au flux par la suite, vous devez appeler <xref:System.Resources.ResourceWriter.Close%2A> après avoir appelé <xref:System.Resources.ResourceWriter.Generate%2A>, ou simplement appeler <xref:System.Resources.ResourceWriter.Close%2A>.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Resources.ResourceWriter.Generate%2A> méthode pour écrire les ressources de tous les objets dans un <xref:System.Resources.ResourceWriter> classe dans le flux de sortie  
  
 [!code-cpp[System.Resources.ResourceWriter.Generate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/CPP/resourcewritergenerate.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter.Generate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/CS/resourcewritergenerate.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.Generate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/VB/resourcewritergenerate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Une erreur d'E/S s'est produite.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Une erreur s'est produite pendant la sérialisation de l'objet.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Resources.ResourceWriter" /> a été fermé et sa table de hachage n'est pas disponible.</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeNameConverter">
      <MemberSignature Language="C#" Value="public Func&lt;Type,string&gt; TypeNameConverter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Type, string&gt; TypeNameConverter" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceWriter.TypeNameConverter" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeNameConverter As Func(Of Type, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Func&lt;Type ^, System::String ^&gt; ^ TypeNameConverter { Func&lt;Type ^, System::String ^&gt; ^ get(); void set(Func&lt;Type ^, System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeNameConverter : Func&lt;Type, string&gt; with get, set" Usage="System.Resources.ResourceWriter.TypeNameConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Type,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un délégué qui permet d’écrire des assemblys de ressources qui ciblent des versions du .NET Framework antérieures à [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] en utilisant des noms d’assemblys qualifiés.</summary>
        <value>Type encapsulé par le délégué.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] et MSBuild définie cette propriété si vous ciblez une version antérieure du .NET Framework.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>