<Type Name="SrgsDocument" FullName="System.Speech.Recognition.SrgsGrammar.SrgsDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88552cf1d889d4c92ddd1242cd0aa6bbd9d383f0" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66457838" /></Metadata><TypeSignature Language="C#" Value="public class SrgsDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsDocument" />
  <TypeSignature Language="F#" Value="type SrgsDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit un objet au moment du design qui est utilisé pour générer des grammaires d’exécution fortement typées qui soient conformes à la spécification <see href="https://www.w3.org/TR/speech-grammar/">Speech Recognition Grammar Specification (SRGS) Version 1.0</see>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez construire vide <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’instance et crée une grammaire en ajoutant des instances des classes qui représentent les éléments SRGS, tel que <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>,<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>, et <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Vous pouvez également construire un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance à partir d’un fichier de grammaire SRGS compatible XML existant, à partir d’une instance de <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, ou à partir d’une instance de <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Après le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet est créé, il peut être chargé dans un <xref:System.Speech.Recognition.Grammar> de l’objet ou compilés <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>, ce qui lui permet d’être lu par un <xref:System.Speech.Recognition.Grammar> objet.  
  
 Consultez [créer des grammaires à l’aide des SrgsGrammar](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)) dans le [Guide de programmation système de reconnaissance vocale pour .NET Framework](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361625(v%3doffice.14)) pour plus d’informations et des exemples.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14)">Créer les grammaires à l’aide de SrgsGrammar</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À l’aide de constructeurs pour la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> (classe), vous pouvez créer une instance de <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> à partir d’un <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, ou <xref:System.Xml.XmlReader> de l’objet, à partir d’une chaîne qui contient le chemin d’accès à une grammaire de format XML, ou vous pouvez lancer une instance vide de <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur crée un vide <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance. Pour générer une grammaire dans vide <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’instance, ajoutez des instances de classes qui représentent les éléments SRGS, tel que <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>, et <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’objet, puis crée une règle publique nommée `winnerRule`. Il crée ensuite un <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> qui se compose de la chaîne « est un état qui a remporté la coupe du monde : » et ajoute cet élément pour le <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> propriété de la règle. L’exemple crée ensuite deux règles plus (`ruleEurope` et `ruleSAmerica`), chacun étant un <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> objet qui contient trois <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> objets. Après cela, un autre <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> objet est créé qui contient <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> les objets qui font référence à `ruleEurope` et `ruleSAmerica`. La nouvelle <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> objet est ensuite ajouté à la <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> propriété du `winnerRule`. Après cela, tous les trois règles (`winnerRule`, `ruleEurope`, et `ruleSAmerica`) sont ajoutés à la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> propriété du <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Enfin, les trois règles sont compilés dans une représentation binaire de la grammaire.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  String fileName = Path.GetTempFileName();  
  using (FileStream stream = new FileStream(fileName, FileMode.Create))   
  {   
  
    // Compile the grammar to a binary format.  
    SrgsGrammarCompiler.Compile(document, stream);   
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Objet <see cref="T:System.Speech.Recognition.GrammarBuilder" /> permettant de créer l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> à partir d'un objet <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant génère une grammaire un <xref:System.Speech.Recognition.GrammarBuilder> à l’aide de l’instance <xref:System.Speech.Recognition.Choices> objets. Il crée ensuite un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> à partir de la <xref:System.Speech.Recognition.GrammarBuilder> objet.  
  
```csharp  
GrammarBuilder builder = null;  
  
// Create new Choices objects and add countries, and create GrammarBuilder objects.  
Choices choicesEurope = new Choices(new string[] { "England", "France", "Germany", "Italy" });  
GrammarBuilder europe = new GrammarBuilder(choicesEurope);  
  
Choices choicesSAmerica = new Choices(new string[] { "Argentina", "Brazil", "Uruguay" });  
GrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  
  
Choices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  
  
// Create new GrammarBuilder from a Choices object.  
builder = new GrammarBuilder(worldCupWinnerChoices);  
  
// Create an SrgsDocument object from a GrammarBuilder object.  
SrgsDocument document = new SrgsDocument(builder);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="builder" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (grammarRootRule As SrgsRule)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ grammarRootRule);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Speech.Recognition.SrgsGrammar.SrgsRule -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument grammarRootRule" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="grammarRootRule" Type="System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Parameters>
      <Docs>
        <param name="grammarRootRule">Objet <see langword="root rule" /> dans l'objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> et spécifie un objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" /> comme règle racine de la grammaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur ajoute la règle spécifiée pour le <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’objet et le définit comme le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> règle pour la grammaire.  
  
   
  
## Examples  
 L’exemple suivant crée deux règles (`chooseCities` et `destCities`) pour le choix des villes d’origine et de destination pour un vol. L’exemple initialise la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> à l’aide de l’instance la `chooseCities` règle en tant qu’argument. L’exemple écrit le contenu de la collection de règles et le nom de la règle racine dans la console.  
  
```csharp  
// Create a rule that contains a list of destination cities.  
SrgsRule destCities = new SrgsRule("Destination");  
SrgsOneOf toCities = new SrgsOneOf(new string[] { "New York", "Seattle", "Denver" });  
destCities.Add(toCities);  
  
// Create a list of origin cities and supporting phrases.  
SrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   
  new SrgsItem("Dallas"), new SrgsItem("Miami"), new SrgsItem("Chicago") });  
SrgsItem intro = new SrgsItem("I want to fly from");  
SrgsItem to = new SrgsItem("to");  
  
// Create the root rule of the grammar, and assemble the components.  
SrgsRule chooseCities = new SrgsRule("Trip");  
chooseCities.Add(intro);  
chooseCities.Add(fromCities);  
chooseCities.Add(to);  
chooseCities.Add(new SrgsRuleRef(destCities));  
  
// Create the SrgsDocument and specify the root rule to add.  
SrgsDocument bookFlight = new SrgsDocument(chooseCities);  
  
// Add the rule for the destination cities to the document's rule collection.  
bookFlight.Rules.Add(new SrgsRule[] { destCities });  
  
// Display the contents of the Rules collection and the name of the root rule.  
foreach (SrgsRule rule in bookFlight.Rules)  
{  
  Console.WriteLine("Rule " + rule.Id + " is in the rules collection");  
}  
Console.WriteLine("Root Rule " + bookFlight.Root.Id);  
  
// Create a Grammar object and load it to the recognizer.  
Grammar g = new Grammar(bookFlight);  
g.Name = ("City Chooser");  
recognizer.LoadGrammarAsync(g);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="grammarRootRule" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Emplacement du fichier XML SRGS.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> en spécifiant l'emplacement du document XML utilisé pour remplir l'instance de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un nouveau <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> à partir du fichier nommé « srgsDocumentFile.xml ».  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
   document = new SrgsDocument(srgsDocumentFile);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> est une chaîne vide.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsDocument (System.Xml.XmlReader srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (srgsGrammar As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsDocument(System::Xml::XmlReader ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsDocument : System.Xml.XmlReader -&gt; System.Speech.Recognition.SrgsGrammar.SrgsDocument" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsGrammar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">Objet <see cref="T:System.Xml.XmlReader" /> créé avec l'instance XML <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> d'une instance de <see cref="T:System.Xml.XmlReader" /> qui référence un fichier de grammaire au format XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée une nouvelle instance de <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> à partir d’une instance de <xref:System.Xml.XmlReader> qui fait référence au fichier « srgsDocumentFile.xml ».  
  
```csharp  
string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
SrgsDocument document = null;  
  
if (File.Exists(srgsDocumentFile))  
{  
  XmlReader reader = XmlReader.Create(srgsDocumentFile);  
  document = new SrgsDocument(reader);  
  reader.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyReferences">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; AssemblyReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; AssemblyReferences" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyReferences As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ AssemblyReferences { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyReferences : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les informations de référence de l'assembly pour l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>La propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences" /> retourne une collection de chaîne contenant la liste des références d'assembly.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBehind">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; CodeBehind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; CodeBehind" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBehind As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ CodeBehind { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBehind : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les informations code-behind pour l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>La propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind" /> retourne une collection de chaînes contenant la liste des documents code-behind.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les informations de culture de l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Objet <see cref="T:System.Globalization.CultureInfo" /> qui contient des informations actuelles de culture pour <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Windows et l’API System.Speech acceptent tous les codes de langue-pays valides. Pour effectuer la reconnaissance vocale à l’aide de la langue spécifiée dans le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture%2A> propriété, un moteur de reconnaissance vocale qui prend en charge que le code de langue-pays doit être installé. Le module de reconnaissance vocale fournis avec Microsoft Windows 7 fonctionne avec les codes de langue-pays suivants.  
  
-   en-GB. Anglais (Royaume-Uni)  
  
-   en-US. Anglais (États-Unis)  
  
-   fr-fr. Allemand (Allemagne)  
  
-   es-ES. Espagnol (Espagne)  
  
-   fr-FR. Français (France)  
  
-   ja-JP. Japonais (Japon)  
  
-   zh-CN. Chinois (Chine)  
  
-   zh-TW. Chinois (Taïwan)  
  
 Codes de langue à deux lettres tels que « fr », « fr », ou « es » sont également autorisées.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La valeur en cours d'assignation à <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La valeur en cours d'assignation à <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture" /> est <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Debug">
      <MemberSignature Language="C#" Value="public bool Debug { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Debug" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberSignature Language="VB.NET" Value="Public Property Debug As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Debug { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Debug : bool with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les numéros de ligne doivent être ajoutés aux scripts intégrés.</summary>
        <value>Propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug" /> retourne <see langword="true" /> si les numéros de ligne sont ajoutés à des fins de débogage ; sinon la propriété retourne <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNamespaces">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;string&gt; ImportNamespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;string&gt; ImportNamespaces" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImportNamespaces As Collection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ ImportNamespaces { System::Collections::ObjectModel::Collection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImportNamespaces : System.Collections.ObjectModel.Collection&lt;string&gt;" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les espaces de noms connexes pour l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> en cours.</summary>
        <value>La propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces" /> retourne une collection de chaîne contenant la liste des espaces de noms connexes dans l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Language" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Language { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le langage de programmation utilisé pour le code incorporé dans la classe de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>La propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language" /> retourne le langage de programmation dans lequel <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> est actuellement défini.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As SrgsGrammarMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode Mode { System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsGrammarMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Mode de reconnaissance du <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode%2A> propriété retourne un membre de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> qui détermine le type d’entrée qui le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> attend. Les deux valeurs possibles sont `Voice` pour la saisie vocale, et `Dtmf` pour l’entrée des tonalités-dual-tone multi-frequency (DTMF) qui sont généralement associés à un téléphone.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'espace de noms de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>La propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace" /> retourne l'espace de noms pour le <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> actuel.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticAlphabet">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberSignature Language="VB.NET" Value="Public Property PhoneticAlphabet As SrgsPhoneticAlphabet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet PhoneticAlphabet { System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsPhoneticAlphabet value); };" />
      <MemberSignature Language="F#" Value="member this.PhoneticAlphabet : System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'alphabet phonétique de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Retourne l'alphabet phonétique qui doit être utilisé pour spécifier des prononciations personnalisées dans l'objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alphabets phonétiques sont composés de téléphones, qui consistent en des lettres, chiffres et caractères, parfois conjointement. Chaque téléphone décrit un son unique de la voix. Ce comportement diffère l’alphabet Latin, pour laquelle n’importe quelle lettre peut représenter plusieurs sons prononcés. Prendre en compte les prononciations différentes de la lettre « c » dans le bonbons « mots » et « arrêter », ou les prononciations différentes de la combinaison de lettres « th » dans la mots « la décision » et « ceux ».  
  
 Dans System.Speech, vous pouvez utiliser une des trois alphabets phonétiques pour spécifier des prononciations personnalisées : Alphabet de téléphone international (IPA), Universal Phone définie (UPS) ou le SAPI téléphone ensemble. L’alphabet phonétique spécifié détermine quel jeu de téléphone doit être utilisé pour définir des prononciations inline pour <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> objets. Les téléphones spécifiés dans <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> doit correspondre à l’alphabet phonétique spécifié dans <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>.  
  
 Consultez [lexiques et Alphabets phonétiques](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) pour plus d’informations.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRule Root" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberSignature Language="VB.NET" Value="Public Property Root As SrgsRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRule ^ Root { System::Speech::Recognition::SrgsGrammar::SrgsRule ^ get(); void set(System::Speech::Recognition::SrgsGrammar::SrgsRule ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Root : System.Speech.Recognition.SrgsGrammar.SrgsRule with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la règle racine de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Retourne la règle qui est indiquée comme règle racine du <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> objet doit déjà figurer dans le document <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> avant qu’il peut être défini sur le **règle racine**.  
  
 Vous pouvez également définir la règle racine pour un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet en utilisant un <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> objet comme argument de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> constructeur.  
  
   
  
## Examples  
 L’exemple suivant crée une règle nommée `winnerRule`, puis crée un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet nommé `document`. L’exemple appelle ensuite la <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> méthode pour ajouter la règle au document. Enfin, l’exemple définit le document <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> propriété `winnerRule`, ce qui rend le `root rule` pour la grammaire définie par le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet.  
  
```csharp  
SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
winnerRule.Scope = SrgsRuleScope.Public;  
  
SrgsDocument document = new SrgsDocument();  
  
document.Rules.Add(winnerRule);  
document.Root = winnerRule;   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRule" />
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rules As SrgsRulesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ Rules { System::Speech::Recognition::SrgsGrammar::SrgsRulesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de règles qui sont actuellement définies pour la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>Retourne les règles définies pour l'objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez ajouter <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> des objets sur le <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> à l’aide de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> méthode sur le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> propriété. Si vous initialisez un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’objet et spécifiez un <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> objet comme argument, le <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> est automatiquement ajouté à la <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> pour le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
   
  
## Examples  
 L’exemple suivant crée une grammaire qui reconnaît la phrase « est un état qui a remporté la coupe du monde » suivi du nom d’un pays qui a remporté la coupe du monde. L’exemple crée un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’objet et crée ensuite une règle publique nommée `winnerRule`. Après l’ajout d’une chaîne à la règle `winnerRule`, l’exemple crée deux règles plus (`ruleEurope` et `ruleSAmerica`), chacun contenant une liste de pays. À l’aide de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> méthode, l’exemple ajoute tous les trois règles (`winnerRule`, `ruleEurope`, et `ruleSAmerica`) pour le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> propriété de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection" />
      </Docs>
    </Member>
    <Member MemberName="Script">
      <MemberSignature Language="C#" Value="public string Script { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Script" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberSignature Language="VB.NET" Value="Public Property Script As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Script { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Script : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le langage de script.NET pour la classe de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>La propriété <see langword="Script" /> retourne le langage de script .NET actuel pour la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Cette propriété est dépréciée. Son utilisation n’est plus recommandée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Une tentative est effectuée pour affecter à la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> la valeur null.</exception>
        <exception cref="T:System.ArgumentException">Une tentative est effectuée pour affecter à la propriété <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script" /> une chaîne vide.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSrgs">
      <MemberSignature Language="C#" Value="public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSrgs(class System.Xml.XmlWriter srgsGrammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSrgs (srgsGrammar As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSrgs(System::Xml::XmlWriter ^ srgsGrammar);" />
      <MemberSignature Language="F#" Value="member this.WriteSrgs : System.Xml.XmlWriter -&gt; unit" Usage="srgsDocument.WriteSrgs srgsGrammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srgsGrammar" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="srgsGrammar">Objet <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire l'instance <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Écrit le contenu de l’objet <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> dans un fichier de grammaire au format XML conforme à la spécification [Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de l’objet et crée ensuite une règle publique nommée `winnerRule`. Il crée ensuite un <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> qui se compose de la chaîne « est un état qui a remporté la coupe du monde : » et ajoute cet élément pour le <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> propriété de la règle. L’exemple crée ensuite deux règles plus (`ruleEurope` et `ruleSAmerica`), chacun étant un <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> objet qui contient trois <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> objets. Après cela, un autre <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> objet est créé qui contient <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> les objets qui font référence à `ruleEurope` et `ruleSAmerica`. La nouvelle <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> objet est ensuite ajouté à la <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> propriété du `winnerRule`. Après cela, tous les trois règles (`winnerRule`, `ruleEurope`, et `ruleSAmerica`) sont ajoutés à la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> propriété de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Enfin, l’exemple crée un fichier XML vide et une instance de <xref:System.Xml.XmlWriter>.  Le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs%2A> méthode utilise le <xref:System.Xml.XmlWriter> instance pour écrire le contenu de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> dans le fichier XML.  
  
```csharp  
public void WorldSoccerWinners ()  
{  
  
  // Create an SrgsDocument, create a new rule  
  // and set its scope to public.  
  SrgsDocument document = new SrgsDocument();  
  SrgsRule winnerRule = new SrgsRule("WorldCupWinner");  
  winnerRule.Scope = SrgsRuleScope.Public;  
  
  // Add the introduction.  
  winnerRule.Elements.Add(new SrgsItem("A nation that has won the World Cup is: "));  
  
  // Create the rule for the European nations.  
  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem("England"),   
    new SrgsItem("France"), new SrgsItem("Germany"), new SrgsItem("Italy")});  
  SrgsRule ruleEurope = (new SrgsRule("EuropeanNations", new SrgsElement[] {oneOfEurope}));  
  
  // Create the rule for the South American nations.  
  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem("Argentina"),   
    new SrgsItem("Brazil"), new SrgsItem("Uruguay")});  
  SrgsRule ruleSAmerica = (new SrgsRule("SouthAmericanNations", new SrgsElement[] {oneOfSAmerica}));  
  
  // Add references to winnerRule for ruleEurope and ruleSAmerica.  
  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   
    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  
  
  // Add all the rules to the document and make winnerRule   
  // the root rule of the document.  
  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  
  document.Root = winnerRule;  
  
  // Create a string object with the path to the file to use.  
  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), "srgsDocumentFile.xml");  
  
  // Create an XmlWriter object and pass the file path.  
  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  
  
  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  
  document.WriteSrgs(writer);  
  writer.Close();  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsGrammar" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlBase">
      <MemberSignature Language="C#" Value="public Uri XmlBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri XmlBase" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlBase As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ XmlBase { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlBase : Uri with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'URI de base de la classe <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <value>URI de base de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> propriété obtient une valeur qui est utilisée pour résoudre les URI relatifs dans un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objet. Supposons que la valeur de <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase%2A> est «http://www.contoso.com/» et le <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> contient une référence de règle relative à un autre document, par exemple `SrgsRuleRef("ExternalGrammar.grxml")`. Cette opération crée le chemin absolu au document externe : `http://www.contoso.com/ExternalGrammar.grxml`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>