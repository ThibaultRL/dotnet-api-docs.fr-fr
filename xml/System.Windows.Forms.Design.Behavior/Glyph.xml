<Type Name="Glyph" FullName="System.Windows.Forms.Design.Behavior.Glyph">
  <Metadata><Meta Name="ms.openlocfilehash" Value="93a6f4a81472da9378eb92acb167f339dd81059a" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65016363" /></Metadata><TypeSignature Language="C#" Value="public abstract class Glyph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Glyph extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.Behavior.Glyph" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Glyph" />
  <TypeSignature Language="C++ CLI" Value="public ref class Glyph abstract" />
  <TypeSignature Language="F#" Value="type Glyph = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente une entité d’interface utilisateur utilisateur unique gérée par un <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le seul but d’un <xref:System.Windows.Forms.Design.Behavior.Glyph> consiste à peindre et test de positionnement. Un <xref:System.Windows.Forms.Design.Behavior.Glyph> n’a pas un handle de fenêtre (HWND), qu’elle est affichée sur le contrôle de fenêtre de dispositif d’ornement de la <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Chaque <xref:System.Windows.Forms.Design.Behavior.Glyph> peut avoir un <xref:System.Windows.Forms.Design.Behavior.Behavior> associé. Un correctement testé <xref:System.Windows.Forms.Design.Behavior.Glyph> a la possibilité d’envoyer un nouveau ou différent <xref:System.Windows.Forms.Design.Behavior.Behavior> sur la pile de comportements de la <xref:System.Windows.Forms.Design.Behavior.BehaviorService>.  
  
 Pour plus d’informations, consultez [vue d’ensemble du Service de comportement](https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f).  
  
   
  
## Examples  
 L’exemple suivant montre comment créer votre propre <xref:System.Windows.Forms.Design.Behavior.Glyph> basé sur la classe avec <xref:System.Windows.Forms.Design.Behavior.Behavior> associé. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Windows.Forms.Design.Behavior.BehaviorService> classe.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
    <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
    <related type="Article" href="https://msdn.microsoft.com/library/7c60cc41-4324-46b5-b444-b39eda7cb33f">Vue d'ensemble du service de comportement</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Glyph (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.#ctor(System.Windows.Forms.Design.Behavior.Behavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Glyph(System::Windows::Forms::Design::Behavior::Behavior ^ behavior);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.Behavior.Glyph : System.Windows.Forms.Design.Behavior.Behavior -&gt; System.Windows.Forms.Design.Behavior.Glyph" Usage="new System.Windows.Forms.Design.Behavior.Glyph behavior" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Objet <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> associé au <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />. Peut être <see langword="null" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment initialiser une nouvelle instance de la <xref:System.Windows.Forms.Design.Behavior.Glyph> classe. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Windows.Forms.Design.Behavior.BehaviorService> classe.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
      </Docs>
    </Member>
    <Member MemberName="Behavior">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Design.Behavior.Behavior Behavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Design.Behavior.Behavior Behavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Glyph.Behavior" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Behavior As Behavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Design::Behavior::Behavior ^ Behavior { System::Windows::Forms::Design::Behavior::Behavior ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Behavior : System.Windows.Forms.Design.Behavior.Behavior" Usage="System.Windows.Forms.Design.Behavior.Glyph.Behavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> associé à l'objet <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
        <value>Le <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> associé à la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />, ou <see langword="null" /> s’il n’existe aucun comportement.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.Behavior.Glyph.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Windows.Forms.Design.Behavior.Glyph.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les limites de la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
        <value>Un <see cref="T:System.Drawing.Rectangle" /> représentant les limites de la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment substituer la <xref:System.Windows.Forms.Design.Behavior.Glyph.Bounds%2A> pour créer un glyphe avec des dimensions et de position. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Windows.Forms.Design.Behavior.BehaviorService> classe.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
      </Docs>
    </Member>
    <Member MemberName="GetHitTest">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Forms.Cursor GetHitTest (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.Cursor GetHitTest(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHitTest (p As Point) As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Forms::Cursor ^ GetHitTest(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="abstract member GetHitTest : System.Drawing.Point -&gt; System.Windows.Forms.Cursor" Usage="glyph.GetHitTest p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">Un point de test de positionnement.</param>
        <summary>Fournit la logique de test de positionnement.</summary>
        <returns>Un <see cref="T:System.Windows.Forms.Cursor" /> si le <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> associé <paramref name="p" />; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest%2A> méthode est un `abstract` méthode force <xref:System.Windows.Forms.Design.Behavior.Glyph> implémentations pour fournir la logique de test de positionnement. N’importe quel point donné, si le <xref:System.Windows.Forms.Design.Behavior.Glyph> a décidé de s’impliquer dans cet emplacement, il doit retourner un valide <xref:System.Windows.Forms.Cursor>. Sinon, retournant `null` entraîne la <xref:System.Windows.Forms.Design.Behavior.BehaviorService> ignore l’emplacement.  
  
   
  
## Examples  
 L’exemple suivant montre comment substituer la <xref:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest%2A> pour voir si le point se trouve dans ce glyphe. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Windows.Forms.Design.Behavior.BehaviorService> classe.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#9)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public abstract void Paint (System.Windows.Forms.PaintEventArgs pe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Paint(class System.Windows.Forms.PaintEventArgs pe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.Paint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Paint (pe As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Paint(System::Windows::Forms::PaintEventArgs ^ pe);" />
      <MemberSignature Language="F#" Value="abstract member Paint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="glyph.Paint pe" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pe" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pe"><see cref="T:System.Windows.Forms.PaintEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit une logique de peinture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Design.Behavior.Glyph.Paint%2A> méthode est un `abstract` méthode force <xref:System.Windows.Forms.Design.Behavior.Glyph> implémentations fournissent la logique de peinture. Le `pe` paramètre contient le <xref:System.Drawing.Graphics> liées à la fenêtre de dispositif d’ornement de la <xref:System.Windows.Forms.Design.Behavior.BehaviorService>.  
  
   
  
## Examples  
 L’exemple suivant montre comment substituer la <xref:System.Windows.Forms.Design.Behavior.Glyph.Paint%2A> pour dessiner un glyphe. Cet exemple de code fait partie d’un exemple plus complet fourni pour la <xref:System.Windows.Forms.Design.Behavior.BehaviorService> classe.  
  
 [!code-cpp[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/cpp/Form1.cpp#10)]
 [!code-csharp[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.Design.Behavior.BehaviorService#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
      </Docs>
    </Member>
    <Member MemberName="SetBehavior">
      <MemberSignature Language="C#" Value="protected void SetBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetBehavior(System::Windows::Forms::Design::Behavior::Behavior ^ behavior);" />
      <MemberSignature Language="F#" Value="member this.SetBehavior : System.Windows.Forms.Design.Behavior.Behavior -&gt; unit" Usage="glyph.SetBehavior behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Un <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> à associer à la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
        <summary>Modifications du <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> associé à la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Le <see cref="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)" /> méthode est appelée par les classes héritières pour modifier le <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> associé à la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</para></block>
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Behavior" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.Adorner" />
        <altmember cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ms171820(v=vs.120)">Procédure : Étendre l’apparence et le comportement des contrôles en Mode Création</related>
      </Docs>
    </Member>
  </Members>
</Type>