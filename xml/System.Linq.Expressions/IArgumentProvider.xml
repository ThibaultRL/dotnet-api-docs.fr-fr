<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4abd0b0508fdc62e37d2117e5823a54dfc7dfdce" /><Meta Name="ms.sourcegitcommit" Value="d3dcd8c426adcf1bbe5ff78a76dee13bd8ad6efd" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/28/2019" /><Meta Name="ms.locfileid" Value="66251526" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fournit une interface interne pour accéder aux arguments de plusieurs nœuds d’arborescence (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression et IndexExpression).  Cette API est destinée à un usage interne uniquement.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

Vous ne devez pas utiliser cette API.  Il est public uniquement en raison de la refactorisation de l’assembly, et il existe uniquement pour optimiser les performances internes. Il permet deux optimisations qui réduisent la taille des arborescences :
  
1. Il permet aux nœuds à maintenir un <xref:System.Collections.Generic.IList%601> au lieu d’un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  Cela permet d’économiser le coût d’allouer de la collection en lecture seule pour chaque nœud.
  
2. Il permet les sous-classes spécialisées à créer ce blocage sur un nombre spécifique d’arguments (par exemple, `Block2`, `Block2`, `Block4`).  Par conséquent, ces nœuds évitent l’allocation à la fois un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> et un tableau pour stocker leurs éléments, ce qui évite de 32 octets par nœud.  Cette technique est utilisée par différents nœuds, y compris <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, et <xref:System.Linq.Expressions.MethodCallExpression>.
            
Les nœuds d’arbre expression continuent d’exposer les propriétés LINQ d’origine de <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objets. Pour cela, ils réutilisation d’un champ pour stocker le tableau ou un élément qui serait normalement stocké dans le tableau.
            
Dans le cas du tableau, la collection est de type <xref:System.Collections.Generic.IList%601> au lieu de <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Quand le nœud est initialement créé, il s’agit d’un tableau.  Le compilateur ou les utilitaires dans cette bibliothèque accéder aux éléments via cette interface. L’accès aux éléments du tableau promeut le tableau en un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Dans le cas de l’objet, le premier argument est stocké dans un champ de type <xref:System.Object>. Quand le nœud est initialement créé, ce champ conserve le <xref:System.Linq.Expressions.Expression> du premier argument.  Lorsque le compilateur et les utilitaires dans cette bibliothèque accéder aux arguments, ils utilisent à nouveau cette interface, et l’accesseur pour le premier argument utilise interne `Expression.ReturnObject<T>(System.Object)` méthode d’assistance pour retourner l’objet qui gère la <xref:System.Linq.Expressions.Expression> ou <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> cas. Lorsque l’utilisateur accède à la <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, le champ objet est mis à jour pour conserver directement la <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Il est important que <xref:System.Linq.Expressions.Expression> propriétés retournent de manière cohérente les mêmes <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Sinon, l’analyseur d’arborescence de module de réécriture utilisé par les visiteurs de l’expression sera interrompue. Il s’agit d’une modification avec rupture de la version v1 LINQ pour retourner différents <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> à partir de la même <xref:System.Linq.Expressions.Expression> nœud. Actuellement, les utilisateurs peuvent compter sur l’identité de l’objet pour indiquer si le nœud a changé.  Stocker le <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> dans un champ surchargé à la fois réduit l’utilisation de mémoire et maintient la compatibilité pour l’API publique.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne le nombre d’arguments du nœud d’arborescence d’expression. Cette API est destinée à un usage interne uniquement.</summary>
        <value>Nombre d’arguments du nœud d’arborescence d’expression, au format <see cref="T:System.Int32" />.</value>
        <remarks>Vous ne devez pas utiliser cette API. Il est public uniquement en raison de la refactorisation de l’assembly, et il est utilisé en interne pour optimiser les performances.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de l’argument.</param>
        <summary>Retourne l’argument à l’<paramref name="index" />, en levant une exception si l’<paramref name="index" /> est hors limites. Cette API est destinée à un usage interne uniquement.</summary>
        <returns>Argument à l’index.</returns>
        <remarks>Vous ne devez pas utiliser cette API.  Il est public uniquement en raison de la refactorisation de l’assembly, et il est utilisé en interne pour optimiser les performances.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
