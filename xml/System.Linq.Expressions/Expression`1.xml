<Type Name="Expression&lt;TDelegate&gt;" FullName="System.Linq.Expressions.Expression&lt;TDelegate&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c55512c658c8e0677bdc8d6b10876733db319503" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65136311" /></Metadata><TypeSignature Language="C#" Value="public sealed class Expression&lt;TDelegate&gt; : System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Expression`1&lt;TDelegate&gt; extends System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Expression(Of TDelegate)&#xA;Inherits LambdaExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDelegate&gt;&#xA;public ref class Expression sealed : System::Linq::Expressions::LambdaExpression" />
  <TypeSignature Language="F#" Value="type Expression&lt;'Delegate&gt; = class&#xA;    inherit LambdaExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDelegate" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Linq.Expressions.LambdaExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TDelegate"><span data-ttu-id="daa21-101">Le type du délégué qui le <see cref="T:System.Linq.Expressions.Expression`1" /> représente.</span><span class="sxs-lookup"><span data-stu-id="daa21-101">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</span></span></typeparam>
    <summary><span data-ttu-id="daa21-102">Représente une expression lambda fortement typée en tant que structure de données sous la forme d’une arborescence d’expression.</span><span class="sxs-lookup"><span data-stu-id="daa21-102">Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</span></span> <span data-ttu-id="daa21-103">Cette classe ne peut pas être héritée.</span><span class="sxs-lookup"><span data-stu-id="daa21-103">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daa21-104">Quand une expression lambda est affectée à une variable, un champ ou un paramètre dont le type est <xref:System.Linq.Expressions.Expression%601>, le compilateur émet des instructions pour générer une arborescence d’expression.</span><span class="sxs-lookup"><span data-stu-id="daa21-104">When a lambda expression is assigned to a variable, field, or parameter whose type is <xref:System.Linq.Expressions.Expression%601>, the compiler emits instructions to build an expression tree.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="daa21-105">Une conversion à partir d’une expression lambda en type `Expression<D>` (`Expression(Of D)` en Visual Basic) existe si une conversion à partir de l’expression lambda à un délégué de type `D` existe.</span><span class="sxs-lookup"><span data-stu-id="daa21-105">A conversion from a lambda expression to type `Expression<D>` (`Expression(Of D)` in Visual Basic) exists if a conversion from the lambda expression to a delegate of type `D` exists.</span></span> <span data-ttu-id="daa21-106">Toutefois, la conversion peut échouer, par exemple, si le corps de l’expression lambda est un bloc.</span><span class="sxs-lookup"><span data-stu-id="daa21-106">However, the conversion may fail, for example, if the body of the lambda expression is a block.</span></span> <span data-ttu-id="daa21-107">Cela signifie que les délégués et les arborescences d’expression se comportent de la même façon en ce qui concerne la résolution de surcharge.</span><span class="sxs-lookup"><span data-stu-id="daa21-107">This means that delegates and expression trees behave similarly with regard to overload resolution.</span></span>  
  
 <span data-ttu-id="daa21-108">L’arborescence d’expression est une représentation de données en mémoire de l’expression lambda.</span><span class="sxs-lookup"><span data-stu-id="daa21-108">The expression tree is an in-memory data representation of the lambda expression.</span></span> <span data-ttu-id="daa21-109">L’arborescence d’expression rend la structure de l’expression lambda transparente et explicite.</span><span class="sxs-lookup"><span data-stu-id="daa21-109">The expression tree makes the structure of the lambda expression transparent and explicit.</span></span> <span data-ttu-id="daa21-110">Comme vous pouvez le faire avec n’importe quel autre structure de données, vous pouvez interagir avec les données dans l’arborescence d’expression.</span><span class="sxs-lookup"><span data-stu-id="daa21-110">You can interact with the data in the expression tree just as you can with any other data structure.</span></span>  
  
 <span data-ttu-id="daa21-111">La possibilité de traiter les expressions en tant que structures de données permet aux API de recevoir le code utilisateur dans un format qui peut être inspecté, transformé et traité de manière personnalisée.</span><span class="sxs-lookup"><span data-stu-id="daa21-111">The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</span></span> <span data-ttu-id="daa21-112">Par exemple, le [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] implémentation d’accès aux données utilise cette fonctionnalité pour traduire des arborescences d’expressions pour les instructions Transact-SQL qui peuvent être évaluées par la base de données.</span><span class="sxs-lookup"><span data-stu-id="daa21-112">For example, the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</span></span>  
  
 <span data-ttu-id="daa21-113">De nombreux opérateurs de requête standard définis dans le <xref:System.Linq.Queryable> classe possède un ou plusieurs paramètres de type <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="daa21-113">Many standard query operators defined in the <xref:System.Linq.Queryable> class have one or more parameters of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="daa21-114">Le <xref:System.Linq.Expressions.Expression.NodeType%2A> d’un <xref:System.Linq.Expressions.Expression%601> est <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span><span class="sxs-lookup"><span data-stu-id="daa21-114">The <xref:System.Linq.Expressions.Expression.NodeType%2A> of an <xref:System.Linq.Expressions.Expression%601> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="daa21-115">Utilisez le <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> ou <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> méthode pour créer un <xref:System.Linq.Expressions.Expression%601> objet.</span><span class="sxs-lookup"><span data-stu-id="daa21-115">Use the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> or <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> method to create an <xref:System.Linq.Expressions.Expression%601> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daa21-116">L’exemple de code suivant montre comment représenter une expression lambda en tant que code exécutable sous la forme d’un délégué et en tant que données sous la forme d’une arborescence d’expression.</span><span class="sxs-lookup"><span data-stu-id="daa21-116">The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</span></span> <span data-ttu-id="daa21-117">Il montre également comment reconvertir l’arborescence d’expression en code exécutable à l’aide de la <xref:System.Linq.Expressions.Expression%601.Compile%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="daa21-117">It also demonstrates how to turn the expression tree back into executable code by using the <xref:System.Linq.Expressions.Expression%601.Compile%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="daa21-118">Expressions lambda (Guide de programmation C#)</span><span class="sxs-lookup"><span data-stu-id="daa21-118">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b"><span data-ttu-id="daa21-119">Arborescences de l’expression</span><span class="sxs-lookup"><span data-stu-id="daa21-119">Expression Trees</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="expression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="daa21-120">Visiteur avec lequel visiter ce nœud.</span><span class="sxs-lookup"><span data-stu-id="daa21-120">The visitor to visit this node with.</span></span></param>
        <summary><span data-ttu-id="daa21-121">Distribue à la méthode de visite spécifique à ce type de nœud.</span><span class="sxs-lookup"><span data-stu-id="daa21-121">Dispatches to the specific visit method for this node type.</span></span></summary>
        <returns><span data-ttu-id="daa21-122">Résultat de la visite de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="daa21-122">The result of visiting this node.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile();" />
      <MemberSignature Language="F#" Value="override this.Compile : unit -&gt; 'Delegate" Usage="expression.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="daa21-123">Compile l’expression lambda décrite par l’arborescence d’expression en code exécutable et produit un délégué qui représente l’expression lambda.</span><span class="sxs-lookup"><span data-stu-id="daa21-123">Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="daa21-124">Un délégué du type <paramref name="TDelegate" /> qui représente l’expression lambda compilée décrite par le <see cref="T:System.Linq.Expressions.Expression`1" />.</span><span class="sxs-lookup"><span data-stu-id="daa21-124">A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="daa21-125">Le <xref:System.Linq.Expressions.Expression%601.Compile%2A> méthode produit un délégué du type `TDelegate` lors de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="daa21-125">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method produces a delegate of type `TDelegate` at runtime.</span></span> <span data-ttu-id="daa21-126">Lorsque ce délégué est exécuté, il a le comportement décrit par la sémantique de la <xref:System.Linq.Expressions.Expression%601>.</span><span class="sxs-lookup"><span data-stu-id="daa21-126">When that delegate is executed, it has the behavior described by the semantics of the <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="daa21-127">Le <xref:System.Linq.Expressions.Expression%601.Compile%2A> méthode peut être utilisée pour obtenir la valeur de toute arborescence d’expressions.</span><span class="sxs-lookup"><span data-stu-id="daa21-127">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method can be used to obtain the value of any expression tree.</span></span> <span data-ttu-id="daa21-128">Commencez par créer une expression lambda qui a l’expression en tant que son corps à l’aide de la <xref:System.Linq.Expressions.Expression.Lambda%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="daa21-128">First, create a lambda expression that has the expression as its body by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span> <span data-ttu-id="daa21-129">Appelez ensuite <xref:System.Linq.Expressions.Expression%601.Compile%2A> pour obtenir un délégué et exécutez le délégué pour obtenir la valeur de l’expression.</span><span class="sxs-lookup"><span data-stu-id="daa21-129">Then call <xref:System.Linq.Expressions.Expression%601.Compile%2A> to obtain a delegate, and execute the delegate to obtain the value of the expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="daa21-130">L’exemple de code suivant montre comment <xref:System.Linq.Expressions.Expression%601.Compile%2A> est utilisé pour exécuter une arborescence d’expression.</span><span class="sxs-lookup"><span data-stu-id="daa21-130">The following code example demonstrates how <xref:System.Linq.Expressions.Expression%601.Compile%2A> is used to execute an expression tree.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(bool preferInterpretation);" />
      <MemberSignature Language="F#" Value="override this.Compile : bool -&gt; 'Delegate" Usage="expression.Compile preferInterpretation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation"><span data-ttu-id="daa21-131"><see langword="true" /> pour indiquer que l’expression doit être compilée en un formulaire interprété, si disponible ; <see langword="false" /> dans le cas contraire.</span><span class="sxs-lookup"><span data-stu-id="daa21-131"><see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="daa21-132">Compile l’expression lambda décrite par l’arborescence de l’expression dans du code interprété ou compilé, et produit un délégué qui représente l’expression lambda.</span><span class="sxs-lookup"><span data-stu-id="daa21-132">Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="daa21-133">Délégué qui représente l’expression lambda compilée décrite par <see cref="T:System.Linq.Expressions.Expression`1" />.</span><span class="sxs-lookup"><span data-stu-id="daa21-133">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberSignature Language="F#" Value="override this.Compile : System.Runtime.CompilerServices.DebugInfoGenerator -&gt; 'Delegate" Usage="expression.Compile debugInfoGenerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator"><span data-ttu-id="daa21-134">Générateur d’informations débogage utilisé par le compilateur pour marquer des points de séquence et annoter les variables locales.</span><span class="sxs-lookup"><span data-stu-id="daa21-134">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span></span></param>
        <summary><span data-ttu-id="daa21-135">Produit un délégué qui représente l’expression lambda.</span><span class="sxs-lookup"><span data-stu-id="daa21-135">Produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="daa21-136">Délégué qui contient la version compilée de l’expression lambda.</span><span class="sxs-lookup"><span data-stu-id="daa21-136">A delegate containing the compiled version of the lambda.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;TDelegate&gt; Update (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression`1&lt;!TDelegate&gt; Update(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Update(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression * seq&lt;System.Linq.Expressions.ParameterExpression&gt; -&gt; System.Linq.Expressions.Expression&lt;'Delegate&gt;" Usage="expression.Update (body, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="daa21-137">Propriété <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> du résultat.</span><span class="sxs-lookup"><span data-stu-id="daa21-137">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</span></span></param>
        <param name="parameters"><span data-ttu-id="daa21-138">Propriété <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> du résultat.</span><span class="sxs-lookup"><span data-stu-id="daa21-138">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="daa21-139">Crée une expression qui est semblable à celle-ci, mais en utilisant les enfants fournis.</span><span class="sxs-lookup"><span data-stu-id="daa21-139">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="daa21-140">Si tous les enfants sont identiques, cette expression est retournée.</span><span class="sxs-lookup"><span data-stu-id="daa21-140">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="daa21-141">Cette expression si aucun enfant n’est modifié, ou une expression avec les enfants mis à jour.</span><span class="sxs-lookup"><span data-stu-id="daa21-141">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>