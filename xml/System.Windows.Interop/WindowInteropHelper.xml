<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994523" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Facilite l’interopérabilité entre Windows Presentation Foundation (WPF) et le code Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Membres de cette classe permet à l’appelant un accès interne à la [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND et le HWND du parent d’un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  Vérifications de sécurité appropriées sont effectuées par ces membres.  
  
 Utilisez cette classe chaque fois que vous avez besoin d’un objet plus spécifique en fonction de son HWND.  
  
 Un exemple de scénario est si vous avez besoin pour héberger un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] boîte de dialogue dans un [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application. Initialiser le <xref:System.Windows.Interop.WindowInteropHelper> avec un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] objet de fenêtre pour la boîte de dialogue. Vous pouvez ensuite obtenir le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] le handle de fenêtre (HWND) à partir de la <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> propriété et spécifiez le propriétaire de la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] fenêtre avec le <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> propriété. L’exemple de code suivant montre comment utiliser <xref:System.Windows.Interop.WindowInteropHelper> lorsque vous hébergez un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] boîte de dialogue dans un [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 Un autre scénario pris en charge par cette classe consiste à obtenir un <xref:System.Windows.Interop.HwndSource> de l’objet à partir d’un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> objet. Le <xref:System.Windows.Interop.HwndSource> permet d’effectuer un traitement de [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages par le biais du <xref:System.Windows.Interop.HwndSource.AddHook%2A> (méthode). À l’aide de <xref:System.Windows.Interop.HwndSource> et <xref:System.Windows.Interop.HwndSource.AddHook%2A> au lieu d’un <xref:System.Windows.Window> vous pouvez toujours gérer des messages qui ont aucun équivalent ou traitement dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Créer un <xref:System.Windows.Interop.WindowInteropHelper> avec la <xref:System.Windows.Window> source, puis appelez <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> sur le <xref:System.Windows.Interop.WindowInteropHelper> pour passer de HWND à <xref:System.Windows.Interop.HwndSource>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">Un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] objet window.</param>
        <summary>Initialise une nouvelle instance de la <see cref="T:System.Windows.Interop.WindowInteropHelper" /> classe spécifié [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] fenêtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La fenêtre peut être une boîte de dialogue ou une fenêtre convient sinon pas hébergé dans les limites d’un [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée le HWND de la fenêtre si le HWND n’a pas encore été créé.</summary>
        <returns>Un <see cref="T:System.IntPtr" /> qui représente le HWND.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> méthode lorsque vous souhaitez séparer la création de handle (HWND) de fenêtre à partir de l’affichage réel de managé <xref:System.Windows.Window>. Cela est utile lorsque vous avez un client automation qui peut accomplir ses tâches sans avoir besoin d’afficher une fenêtre.  
  
 Si la fenêtre native n’a pas encore été créée, cette méthode crée la fenêtre native, définit le <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> propriété et retourne le HWND. Si la fenêtre native a déjà été créée, le handle de la fenêtre native existante est retourné.  
  
 Si la fenêtre native est créée en appelant cette méthode, le <xref:System.Windows.Window.SourceInitialized> événement est déclenché.  
  
 Interrogation de la <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> propriété après la <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> méthode est appelée retourne le handle de fenêtre existante. L’arborescence visuelle n’est pas attaché à la fenêtre jusqu’après la <xref:System.Windows.Window.Show%2A> méthode est appelée.  
  
 Appel de la <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> méthode plusieurs fois ne crée pas de nouveaux handles de fenêtre. Appel de la <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> méthode lorsque le handle a déjà été créé par un appel à la <xref:System.Windows.Window.Show%2A> méthode ne crée pas un nouveau handle de fenêtre. Une fenêtre native est créée uniquement lorsqu’aucun handle n’existe lorsque le <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> méthode est appelée.  
  
 Propriétés de la fenêtre sont définies à l’aide des API de fenêtre natives via p/invoke ne semble pas dans l’API de fenêtre managées. Par exemple, si vous définissez la fenêtre au premier plan à l’aide de l’indicateur MS_EX_TOPMOST natif après le <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> méthode est appelée, le <xref:System.Windows.Window.Topmost%2A> propriété n’est pas garantie pour refléter le paramètre natif.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour créer et accéder à un handle de fenêtre. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reçoit le handle de fenêtre pour une fenêtre [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] utilisée pour créer ce <see cref="T:System.Windows.Interop.WindowInteropHelper" />.</summary>
        <value>Le [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] le handle de fenêtre (HWND).</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour obtenir un handle de fenêtre. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le handle de la fenêtre propriétaire de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <value>Le handle de fenêtre propriétaire (HWND).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez redéfinir la parenté windows en définissant cette propriété. En l’état true pour général [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] de programmation, redéfinir pas la parenté de windows qui sont déjà en cours d’utilisation.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour obtenir ou définir cette valeur de propriété. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>