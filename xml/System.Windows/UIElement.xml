<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5dd5d2ffc2ee4681cdac2feb826323d9d1240b97" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66008776" /></Metadata><TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type UIElement = class&#xA;    inherit Visual&#xA;    interface IAnimatable&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.UIElement" /> est une classe de base pour les implémentations WPF au niveau principal reposant sur des éléments WPF (Windows Presentation Foundation) et des caractéristiques de présentation de base.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> fournit un point de départ pour les caractéristiques de disposition d’éléments, mais expose également des méthodes virtuelles que les classes dérivées peuvent substituer, qui peut influencer la disposition du rendu des éléments de comportement de l’élément et ses enfants.  
  
 Une grande partie de l’entrée et le focus de comportement pour les éléments en général est également définie dans le <xref:System.Windows.UIElement> classe. Cela inclut les événements de clavier, souris entrée du stylet et des propriétés de l’état associé. La plupart de ces événements sont des événements routés, et la plupart des événements d’entrée associées ont les deux un routage par propagation version ainsi que d’une version de tunneling de l’événement. Ces événements jumelées sont généralement les plus intéressants pour les auteurs de contrôles.  
  
 <xref:System.Windows.UIElement> inclut également [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] qui concernent le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modèle d’événement, y compris les méthodes qui peuvent déclencher spécifiés événements routés qui proviennent d’une instance de l’élément.  
  
 En termes d’architecture, <xref:System.Windows.UIElement> peut être considéré comme à peu près équivalent à un handle de fenêtre [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programmation, ou un élément de [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] de programmation. <xref:System.Windows.UIElement> est un élément de base au niveau du noyau WPF.  
  
 Un <xref:System.Windows.UIElement> inclut les fonctionnalités suivantes qui sont spécifiquement définies par le <xref:System.Windows.UIElement> classe :  
  
-   Peut rendre comme élément enfant (<xref:System.Windows.UIElement> dérive <xref:System.Windows.Media.Visual>, une classe graphique de niveau élevé)  
  
-   Contient la logique qui est utilisée pour dimensionner et positionner des éléments enfants possibles d’un <xref:System.Windows.UIElement> (lorsqu’il est interprété par un système de disposition)  
  
-   Peut répondre à une entrée utilisateur (y compris le contrôle d’où entrée est bien envoyée par le biais de leur gestion de l’événement de routage ou de routage des commandes)  
  
-   Peut déclencher des événements routés qui suivent un itinéraire à travers l’arborescence logique d’éléments  
  
-   Prend en charge de certains aspects du système d’animation  
  
 <xref:System.Windows.FrameworkElement> est la classe d’implémentation de niveau infrastructure WPF qui s’appuie sur <xref:System.Windows.UIElement>et ajoute des interactions spécifiques avec le niveau de framework WPF. <xref:System.Windows.FrameworkElement> Ajoute et définit les fonctionnalités suivantes :  
  
-   Caractéristiques supplémentaires spécifiques à l’infrastructure disposition  
  
-   Prise en charge des rapports sur les propriétés de métadonnées plus riches  
  
-   L’implémentation spécifique de certains d’entrée des classes de base et de leurs propriétés ou événements attachés  
  
-   Prise en charge de style  
  
-   Obtenir une assistance supplémentaire animation  
  
 Une autre classe connexe est <xref:System.Windows.ContentElement>. Le <xref:System.Windows.ContentElement> classe implémente la plupart des mêmes membres que <xref:System.Windows.UIElement>; la différence entre ces deux classes d’a à dans leur emplacement prévu dans le modèle de contenu global. Un <xref:System.Windows.UIElement> classe dérivée définit généralement un modèle de contenu relativement rigid, ce qui signifie qu’il existe des restrictions sur les éléments pouvant être des éléments enfants dans le balisage. Il peut y avoir de capacité de prendre moins restrictif contenu enfant un <xref:System.Windows.UIElement>, mais cette capacité est généralement centralisée dans les propriétés de contenu désignées. Un <xref:System.Windows.ContentElement> classe dérivée n’est généralement pas aussi restrictive sur le contenu, pour prendre en charge des scénarios tels que les documents de format de flux.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> état affecte toutes les entrées par cet élément. Les éléments qui ne sont pas visibles ne participent pas au test de positionnement et ne reçoivent pas les événements d’entrée, même si la souris est positionnée les limites dans lequel l’élément serait si étaient visibles.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Création d’une nouvelle instance qui est en fait de type <xref:System.Windows.UIElement> est rare dans le code d’application, car <xref:System.Windows.UIElement> est un élément de base. Consultez [vue d’ensemble des éléments de Base](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute un gestionnaire d’événements routés pour un événement routé spécifié, en ajoutant le gestionnaire à la collection de gestionnaires sur l’élément actuel.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificateur de l’événement routé à gérer.</param>
        <param name="handler">Référence à l’implémentation du gestionnaire.</param>
        <summary>Ajoute un gestionnaire d’événements routés pour un événement routé spécifié, en ajoutant le gestionnaire à la collection de gestionnaires sur l’élément actuel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez ajouter le même gestionnaire pour le même événement plusieurs fois sans lever d’exception. Toutefois, le gestionnaire est appelé en fait plusieurs fois lorsque l’événement est géré. Par conséquent, envisagez comment ce comportement peut avoir des effets secondaires qui doivent être comptabilisés dans votre implémentation de gestionnaire.  
  
 Vous utilisez généralement cette méthode pour fournir l’implémentation de l’accesseur « Ajouter » pour le [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] modèle d’accès aux événements d’un événement routé personnalisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificateur de l’événement routé à gérer.</param>
        <param name="handler">Référence à l’implémentation du gestionnaire.</param>
        <param name="handledEventsToo"><see langword="true" /> pour inscrire le gestionnaire pour qu’il soit appelé même quand l’événement routé est marqué comme géré dans ses données d’événement ; <see langword="false" /> pour inscrire le gestionnaire avec la condition par défaut selon laquelle il ne sera pas appelé si l’événement routé est déjà marqué comme géré.  
  
La valeur par défaut est <see langword="false" />.  
  
Ne demandez pas régulièrement à regérer un événement routé.</param>
        <summary>Ajoute un gestionnaire d’événements routés pour un événement routé spécifié, en ajoutant le gestionnaire à la collection de gestionnaires sur l’élément actuel. Spécifiez <paramref name="handledEventsToo" /> comme <see langword="true" /> pour que le gestionnaire fourni soit appelé pour un événement routé qui a déjà été marqué comme géré par un autre élément le long de son itinéraire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Traitement des événements d’entrée de bas niveau d’une façon pratique est une tâche complexe. De nombreux contrôles implémentent le comportement où un certain événement est marqué comme géré et est remplacé par un autre événement plus intuitif. En règle générale, un contrôle marque un événement d’entrée de plateforme comme géré s’il existe certaines intention de conception pour effectuer cette opération. Dans certains scénarios, ces intentions de conception peut-être pas ce que requiert votre gestion de l’événement d’entrée spécifique. Pour ces scénarios, il est que l’inscription gestionnaires avec `handledEventsToo` comme `true` est appropriée. Mais vous ne devez pas le faire régulièrement. Appeler des gestionnaires en réponse à tous les événements même si gérée contribuera à compliquer votre propre logique de traitement des événements application. Vous pouvez voir une baisse des performances si la logique du gestionnaire est importante. Vous devez réserver l’utilisation de gestionnaires pour les événements déjà gérés pour les situations où vous avez déjà découverts pendant le processus de développement que certains contrôles gèrent des événements que vous souhaitez toujours gérer avec la logique d’application.  
  
 Une autre technique pour éviter la comportement de certaines combinaisons de contrôle de l’événement de gestion de classe consiste à utiliser alternative la version préliminaire de l’événement. Par exemple, si <xref:System.Windows.UIElement.MouseLeftButtonDown> est marqué comme géré par la gestion de classe, vous pourrez ajouter des gestionnaires pour <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> à la place.  
  
 Vous pouvez ajouter le même gestionnaire pour le même événement plusieurs fois sans lever d’exception. Toutefois, le gestionnaire est appelé en fait plusieurs fois lorsque l’événement est géré. Par conséquent, envisagez comment ce comportement peut avoir des effets secondaires qui doivent être comptabilisés dans votre implémentation de gestionnaire.  
  
 Vous utilisez généralement cette méthode pour fournir l’implémentation de l’accesseur « Ajouter » pour le [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] modèle d’accès aux événements d’un événement routé personnalisé.  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire appelé sur le <xref:System.Windows.FrameworkElement.Initialized> événement sur une page qui attache un gestionnaire défini à un des éléments nommés de la page à l’aide `handledEventsToo` `true`. Ce gestionnaire est appelé même si un autre élément sur l’itinéraire marqué les données d’événement partagé comme étant géré avant d’atteindre l’élément de gestion dans l’itinéraire.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Itinéraire d'événement auquel sont ajoutés les gestionnaires.</param>
        <param name="e">Données d'événement utilisées pour ajouter les gestionnaires. Cette méthode utilise la propriété <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> des données d'événement pour créer les gestionnaires.</param>
        <summary>Ajoute des gestionnaires à la classe <see cref="T:System.Windows.EventRoute" /> spécifiée pour la collection de gestionnaires d'événements <see cref="T:System.Windows.UIElement" /> actuelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode peut être utilisée par les éléments de l’hôte de contenu (ceux qui implémentent <xref:System.Windows.IContentHost> ou ceux qui ne) pour ajouter des gestionnaires pour les éléments enfants pour le <xref:System.Windows.EventRoute>. En règle générale, cela n’est pas nécessaire pour <xref:System.Windows.UIElement>, car les gestionnaires sont automatiquement ajoutés pour tous les éléments trouvés dans une arborescence logique complète. Toutefois, dans certains cas où <xref:System.Windows.ContentElement> et <xref:System.Windows.UIElement> sont combinés dans les arborescences basés sur des modèles, des éléments provenant de ce modèle doivent être ajoutés à un itinéraire intermédiaires. Les deux <xref:System.Windows.ContentElement> et <xref:System.Windows.UIElement> prend en charge une version de cette méthode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si cet élément est utilisable comme cible d’une opération de glisser-déposer.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si cet élément peut être utilisé comme cible d’une opération de glisser-déplacer ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Opérations de glisser-déplacer ne sont pas activées par défaut et doit être délibérément en définissant <xref:System.Windows.UIElement.AllowDrop%2A> à `true`. Au-delà de ce paramètre de base, le comportement de glisser-déplacer est entièrement spécifique à l’implémentation et n’est pas défini par <xref:System.Windows.UIElement> ou toute autre classe d’élément de base. Certains contrôles, par exemple, <xref:System.Windows.Controls.RichTextBox>, n’ont pas un comportement par défaut. Pour plus d’informations sur la fonction glisser- déposer, consultez [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> substitue les métadonnées pour cette propriété de dépendance dans son implémentation. Plus précisément, <xref:System.Windows.FrameworkElement> désigne cette propriété pour autoriser l’héritage de valeur de propriété (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> est `true` dans les métadonnées). L’héritage de valeur de propriété dans ce contexte signifie que s’il existe des éléments enfants avec aucune autre valeur pour <xref:System.Windows.UIElement.AllowDrop%2A> affecté par l’intermédiaire de valeurs locales ou de styles, la valeur de l’élément parent le plus proche avec cette valeur attribuée (là encore, soit dans les styles, par défaut valeurs, ou une valeur locale), la valeur de l’élément parent est affectée à tous les éléments enfants non précédemment attribués par le système de propriétés. Dans la pratique, cela signifie que vous pouvez spécifier s’il faut autoriser les opérations de suppression à l’élément racine, et cette valeur se propage à tous les éléments enfants qui n’ont pas spécifiquement affectés en tant que `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.AllowDropProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple de balisage suivant définit le <xref:System.Windows.UIElement.AllowDrop%2A> propriété `true` à l’aide d’un attribut sur un <xref:System.Windows.Controls.TextBox>, ainsi que la définition d’autres propriétés connexes qui sous forme groupée activer qui <xref:System.Windows.Controls.TextBox> à être la cible d’un objet de données de texte multiligne lorsque Il est glissé. Pour obtenir un exemple complet, consultez [charger un exemple de fichier supprimé](https://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applique une animation à une propriété de dépendance spécifiée sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est sealed et ne peut pas être substituée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identificateur de la propriété à animer.</param>
        <param name="clock">Horloge d’animation qui contrôle et déclare l’animation.</param>
        <summary>Applique une animation à une propriété de dépendance spécifiée sur cet élément. Les animations existantes sont arrêtées et remplacées par la nouvelle animation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour supprimer une animation d’une propriété, spécifiez l’identificateur pour cette propriété en tant que `dp` et spécifiez `clock` comme `null`. Cette opération supprime l’animation et la propriété animée est définie à sa valeur de base. Toutefois, l’horloge d’animation associée au départ n’est pas arrêtée. Toutes les autres animations assignées à cette horloge continue à s’exécuter.  
  
   
  
## Examples  
 Dans l’exemple suivant, un <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` a une animation de minutage particulier appliquée à ce dernier en appelant <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Propriété à animer.</param>
        <param name="clock">Horloge d’animation qui contrôle et déclare l’animation.</param>
        <param name="handoffBehavior">Valeur de l’énumération. La valeur par défaut est <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, ce qui arrête toute animation existante et la remplace par la nouvelle.</param>
        <summary>Applique une animation à une propriété de dépendance spécifiée sur cet élément, avec la possibilité de spécifier ce qui se produit si la propriété a déjà une animation en cours d’exécution.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour supprimer une animation d’une propriété, spécifiez l’identificateur pour cette propriété en tant que `dp` et spécifiez `clock` comme `null`. Cette opération supprime l’animation et la propriété animée est définie à sa valeur de base. Toutefois, l’horloge d’animation associée au départ n’est pas arrêtée. Toutes les autres animations assignées à cette horloge continue à s’exécuter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si au moins un événement tactile est capturé dans cet élément.</summary>
        <value><see langword="true" /> si au moins un événement tactile est capturé dans cet élément ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si au moins un périphérique tactile est capturé dans cet élément ou les éléments enfants de son arborescence d'éléments visuels.</summary>
        <value><see langword="true" /> si au moins un événement tactile est capturé dans cet élément ou les éléments enfants de son arborescence d'éléments visuels ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si au moins une pression tactile est effectuée sur cet élément.</summary>
        <value><see langword="true" /> si au moins une pression tactile est effectuée sur cet élément ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si au moins une pression tactile est effectuée sur cet élément ou les éléments enfants de son arborescence d'éléments visuels.</summary>
        <value><see langword="true" /> si au moins une pression tactile est effectuée sur cet élément ou les éléments enfants de son arborescence d'éléments visuels ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="member this.Arrange : System.Windows.Rect -&gt; unit" Usage="uIElement.Arrange finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Taille finale calculée par le parent pour l’élément enfant, fournie sous forme d’instance de <see cref="T:System.Windows.Rect" />.</param>
        <summary>Positionne les éléments enfants et détermine une taille pour un <see cref="T:System.Windows.UIElement" />. Les éléments parents appellent cette méthode à partir de leur implémentation de <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (ou d’un équivalent de niveau infrastructure WPF) pour former une mise à jour de disposition récursive. Cette méthode constitue la seconde passe d’une mise à jour de disposition.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour l’élément de niveau infrastructure WPF dérivant des scénarios, le comportement pour <xref:System.Windows.UIElement.Arrange%2A> ne doit pas (et ne peut pas, sauf si vous masquez) être modifié. Au lieu de cela, vous devez substituer la <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> mise en œuvre dans votre classe. Votre <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implémentation est appelée en interne par <xref:System.Windows.UIElement.Arrange%2A> dans le cadre des opérations de mise en page de niveau infrastructure WPF par défaut. Votre <xref:System.Windows.UIElement.ArrangeCore%2A> implémentation doit également appeler <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> sur chaque élément enfant, s’il a des éléments enfants.  
  
 Pour l’élément de niveau noyau WPF dérivant des scénarios, le comportement pour <xref:System.Windows.UIElement.Arrange%2A> ne doit pas (et ne peut pas, sauf si vous masquez) être modifié. Au lieu de cela, vous devez substituer <xref:System.Windows.UIElement.ArrangeCore%2A> dans votre classe. Votre <xref:System.Windows.UIElement.ArrangeCore%2A> implémentation est appelée en interne par <xref:System.Windows.UIElement.Arrange%2A> dans le cadre des opérations de mise en page de niveau infrastructure WPF par défaut. Toutefois, cela suppose que vous utilisez une disposition de niveau infrastructure WPF et son système de disposition, ce qui est souvent le cas si vous dérivez spécialement des éléments à WPF au niveau du noyau à partir de la <xref:System.Windows.UIElement> élément classe de base. Votre <xref:System.Windows.UIElement.ArrangeCore%2A> implémentation doit également appeler <xref:System.Windows.UIElement.Arrange%2A> sur chaque élément enfant, s’il a des éléments enfants. Notez que le scénario de niveau noyau WPF implique que vous n’utilisez pas un <xref:System.Windows.FrameworkElement> classe dérivée, étant donné que <xref:System.Windows.FrameworkElement> scellés <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Calcul de positionnement de disposition de niveau framework WPF dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] se compose d’un <xref:System.Windows.UIElement.Measure%2A> appeler et un <xref:System.Windows.UIElement.Arrange%2A> appeler. Lors de la <xref:System.Windows.UIElement.Measure%2A> appel, le système de disposition détermine les exigences de taille d’un élément à l’aide d’un fourni <xref:System.Windows.Size> (`availableSize`) argument. Pendant la <xref:System.Windows.UIElement.Arrange%2A> appel, le système de disposition finalise la taille et la position d’un élément de cadre englobant.  Pour plus d’informations, consultez [Disposition](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize` peut être n’importe quel nombre de zéro à l’infini. Les éléments doivent être disposées renvoient la valeur minimale <xref:System.Windows.Size> dont ils ont besoin via le `availableSize` paramètre.  
  
 Lorsqu’une mise en page est instanciée, elle reçoit toujours un <xref:System.Windows.UIElement.Measure%2A> appeler avant <xref:System.Windows.UIElement.Arrange%2A>. Toutefois, après la première passe de disposition, il peut recevoir un <xref:System.Windows.UIElement.Arrange%2A> appeler sans un <xref:System.Windows.UIElement.Measure%2A>; cela peut se produire lorsqu’une propriété qui affecte uniquement <xref:System.Windows.UIElement.Arrange%2A> est modifiée (par exemple, alignement), ou lorsque le parent reçoit un <xref:System.Windows.UIElement.Arrange%2A> sans un <xref:System.Windows.UIElement.Measure%2A>. Un <xref:System.Windows.UIElement.Measure%2A> appel invalidera automatiquement un <xref:System.Windows.UIElement.Arrange%2A> appeler.  
  
 Mises à jour de disposition se produisent généralement en mode asynchrone (à un moment déterminé par le système de disposition). Un élément peut refléter pas immédiatement les modifications apportées aux propriétés qui affectent le dimensionnement d’éléments (tels que <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  Mises à jour de disposition peuvent être forcés à l’aide de la <xref:System.Windows.UIElement.UpdateLayout%2A> méthode ; Toutefois, appel de cette fonction est déconseillé, car elle n’est généralement pas nécessaire et peut altérer les performances. Dans de nombreuses situations où l’appel <xref:System.Windows.UIElement.UpdateLayout%2A> peut convenir, le système de disposition est sans doute déjà traitées par les mises à jour. Le système de disposition peut traiter les modifications de disposition de manière permettant d’optimiser toutes les mises à jour nécessaires dans le cadre d’un package.  
  
 Le système de disposition effectue deux files d’attente distinctes de dispositions non valides, une pour <xref:System.Windows.UIElement.Measure%2A> et l’autre pour <xref:System.Windows.UIElement.Arrange%2A>. La file d’attente de disposition est triée en fonction de l’ordre des éléments dans l’arborescence visuelle. Plus haut dans l’arborescence d’éléments sont en haut de la file d’attente, afin d’éviter des dispositions redondantes causées par des modifications répétées dans les parents. Entrées en double sont automatiquement supprimées de la file d’attente et les éléments sont automatiquement supprimés de la file d’attente s’ils sont déjà valides.  
  
 Lors de la mise à jour de disposition, le <xref:System.Windows.UIElement.Measure%2A> file d’attente est d’abord vidée, suivi par le <xref:System.Windows.UIElement.Arrange%2A> file d’attente. Un élément dans le <xref:System.Windows.UIElement.Arrange%2A> file d’attente n’est jamais disposé s’il existe un élément dans le <xref:System.Windows.UIElement.Measure%2A> file d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeCore : System.Windows.Rect -&gt; unit&#xA;override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="uIElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Dernière zone dans le parent que cet élément doit utiliser pour se réorganiser et réorganiser ses éléments enfants.</param>
        <summary>Définit le modèle pour la définition de disposition de réorganisation au niveau du noyau WPF.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Substitution de cette méthode n’est approprié si vous effectuez une dérivation au niveau noyau WPF, et vous n’utilisez pas le système de disposition de niveau framework WPF et <xref:System.Windows.FrameworkElement> classe dérivée, étant donné que <xref:System.Windows.FrameworkElement> scellés <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Si vous utilisez le système de disposition de niveau framework WPF, la méthode appropriée pour substituer la mise en forme spécifique à la classe réorganiser le comportement est <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> implémentations doivent appeler l’implémentation de base pour retourner une taille, puis appelez le <xref:System.Windows.UIElement.Arrange%2A> (méthode) de chaque élément enfant visible, puis rapprocher les tailles retournées par ces <xref:System.Windows.UIElement.Arrange%2A> appels avec la taille de l’implémentation de base. La logique de l’aspect de rapprochement d’un <xref:System.Windows.UIElement.ArrangeCore%2A> implémentation peut varier, selon les caractéristiques de mise en page de votre élément. Dans l’exemple de modèle, `VisualChildren` est une propriété hypothétique que votre élément peut définir pour aider à énumérer son contenu ; <xref:System.Windows.UIElement> ne définit pas de collections de contenu à ce niveau, l’architecture de niveau infrastructure WPF diffère le comportement de contenu aux éléments dérivés tels que des contrôles ou des classes de base de contrôle.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si vous développez des éléments au niveau du noyau WPF, vous devez substituer cette méthode pour donner à votre élément de niveau noyau WPF unique réorganisation de comportement de disposition, ou pour effectuer la mise en forme adéquate des décisions sur les éléments enfants de vos éléments. Un remplacement peut être nécessaire si ces éléments enfants ne sont pas reconnaissables d’un modèle défini comme un <see cref="T:System.Windows.Controls.ItemCollection" />.  
  
Un élément parent doit appeler la classe spécifique <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> sur chaque élément enfant, sinon ces éléments enfants ne sont pas restitués.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Lance une animation pour une propriété animée spécifiée sur cet élément.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Propriété permettant d'animer, spécifiée sous forme d'identificateur de propriété de dépendance.</param>
        <param name="animation">Chronologie de l'animation à lancer.</param>
        <summary>Lance une animation pour une propriété animée spécifiée sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous vérifiez si une propriété est animée, notez que l’animation commence et être considéré comme animée lorsque la première image au-delà du point de départ non animées est rendue.  
  
 Si le <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> pour `animation` est `null`, puis les animations en cours sont supprimées et la valeur actuelle de la propriété est conservée.  
  
 Si l’ensemble du `animation` valeur est `null`, toutes les animations sont supprimées de la propriété et la valeur de propriété revient à sa valeur de base. Toutefois, la chronologie d’animation associée au départ n’est pas arrêtée. Toutes les autres animations assignées à cette chronologie continue à s’exécuter.  
  
   
  
## Examples  
 L’exemple suivant crée une animation, il assigne, puis appelle <xref:System.Windows.UIElement.BeginAnimation%2A> pour le démarrer.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="uIElement.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Propriété permettant d'animer, spécifiée sous forme d'identificateur de propriété de dépendance.</param>
        <param name="animation">Chronologie de l'animation à s'appliquer.</param>
        <param name="handoffBehavior">Valeur quelconque de l'énumération qui spécifie comment la nouvelle animation interagit avec toute animation en cours affectant déjà la valeur de la propriété.</param>
        <summary>Lance une animation spécifique pour une propriété animée spécifiée sur cet élément, avec l'option de la spécification de ce qui arrive si la propriété possède déjà une animation en cours d'exécution.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous vérifiez si une propriété est animée, notez que l’animation commence et être considéré comme animée lorsque la première image au-delà du point de départ non animées est rendue.  
  
 Si le <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> pour `animation` est `null`, puis les animations en cours sont supprimées et la valeur actuelle de la propriété est conservée.  
  
 Si l’ensemble du `animation` valeur est `null`, toutes les animations sont supprimées de la propriété et la valeur de propriété revient à sa valeur de base. Toutefois, la chronologie d’animation associée au départ n’est pas arrêtée. Toutes les autres animations assignées à cette chronologie continue à s’exécuter.  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire qui obtient une animation d’une ressource, puis appelle <xref:System.Windows.UIElement.BeginAnimation%2A> avec un comportement de transfert spécifié.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffect : System.Windows.Media.Effects.BitmapEffect with get, set" Usage="System.Windows.UIElement.BitmapEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un effet bitmap qui s'applique directement au contenu affiché pour cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value>Effet bitmap à appliquer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> est un type abstrait, donc le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilisation requiert une classe dérivée implémentée de <xref:System.Windows.Media.Effects.BitmapEffect>, tel que <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Notez qu’une classe dérivée implémentée est un type de collection qui vous permet de spécifier plusieurs séquentiel <xref:System.Windows.Media.Effects.BitmapEffect>, en utilisant une syntaxe de balise imbriquée.  
  
 Aucune passerelle existante classe ne dérivée de <xref:System.Windows.Media.Effects.BitmapEffect> prend en charge un convertisseur de type, par conséquent, le [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe que vous utilisez pour cette propriété est généralement la syntaxe d’élément de propriété.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant définit une image bitmap d’effet, à l’aide de <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BitmapEffectInput : System.Windows.Media.Effects.BitmapEffectInput with get, set" Usage="System.Windows.UIElement.BitmapEffectInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.Obsolete("Avoid using BitmapEffects as they have very poor performance characteristics.  They will be deprecated in a future version.  Consider using the UIElement.Effect property and ShaderEffects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une source d'entrée pour l'effet bitmap qui s'applique directement au contenu affiché pour cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value>Source des effets bitmap.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectInputProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.BitmapEffectInput" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BitmapEffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.BitmapEffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.BitmapEffect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheMode : System.Windows.Media.CacheMode with get, set" Usage="System.Windows.UIElement.CacheMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la représentation mise en cache de <see cref="T:System.Windows.UIElement" />.</summary>
        <value><see cref="T:System.Windows.Media.CacheMode" /> qui contient une représentation mise en cache de <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définir le <xref:System.Windows.UIElement.CacheMode%2A> propriété lorsque vous avez besoin accroître les performances pour le contenu qui prend beaucoup de temps à restituer. Pour plus d'informations, consultez <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CacheModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.CacheModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.CacheMode" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Essaie de forcer la capture de la souris par cet élément.</summary>
        <returns><see langword="true" /> si la souris est capturée correctement ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour être capturé, un élément doit être activé. Vérifiez si <xref:System.Windows.UIElement.IsEnabled%2A> est `true` avant d’appeler <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Si l’appel <xref:System.Windows.UIElement.CaptureMouse%2A> retourne `true`, puis <xref:System.Windows.UIElement.IsMouseCaptured%2A> est également `true`.  
  
 Si l’appel <xref:System.Windows.UIElement.CaptureMouse%2A> retourne `true`, puis le <xref:System.Windows.UIElement.GotMouseCapture> et <xref:System.Windows.UIElement.IsMouseCapturedChanged> événements sont déclenchés, avec <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> de l’événement signalé de données en tant que l’élément où la <xref:System.Windows.UIElement.CaptureMouse%2A> méthode est appelée. Si vous forcez la capture, vous pouvez interférer avec les captures - en particulier avec des captures qui se rapportent à glisser-déplacer avec la souris.  
  
 Pour effacer la capture de la souris à partir de tous les éléments, appelez <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> avec la `element` paramètre fourni en tant que `null`.  
  
   
  
## Examples  
 L’exemple suivant implémente deux gestionnaires de souris et les touches d’entrée qui capture (et annuler la capture) de la souris et activer un mode spécial de la souris pour l’affichage d’un modèle 3D.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Essaie de forcer la capture du stylet par cet élément.</summary>
        <returns><see langword="true" /> si le stylet a été capturé correctement ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retourne l’implémentation par défaut basée sur le périphérique de stylet par défaut sous-jacent toujours `true`. Toutefois, si vous étendez les périphériques d’entrée qui fournissent l’implémentation de l’appareil pour le système d’entrée, il est possible de créer un système avec une implémentation du stylet alternatives qui peut-être retourner des résultats différents.  
  
 Lorsqu’un élément capture le stylet, il reçoit l’entrée du stylet même si le stylet se trouve en dehors de ses limites. Le stylet est capturé en général uniquement pendant les opérations de glisser-déplacer.  
  
 Appel de cette méthode appelle sous-jacent statique <xref:System.Windows.Input.Stylus> méthode <xref:System.Windows.Input.Stylus.Capture%2A>. Le comportement de capture est implémenté par l’implémentation de périphérique de stylet actif.  
  
 Pour être capturé, un élément doit être activé. Vérifiez si <xref:System.Windows.UIElement.IsEnabled%2A> est `true` retourner avant d’appeler <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Si l’appel <xref:System.Windows.UIElement.CaptureStylus%2A> retourne `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> est également `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Périphérique à capturer.</param>
        <summary>Tente de forcer la capture de l'événement tactile par cet élément.</summary>
        <returns><see langword="true" /> si l'événement tactile spécifié est capturé dans cet élément ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> retournera `false` si le <xref:System.Windows.Input.TouchDevice> est actuellement capturé à un autre élément.  
  
 Si <xref:System.Windows.UIElement.CaptureTouch%2A> retourne `true`, puis le <xref:System.Windows.UIElement.GotTouchCapture> événement est déclenché.  
  
 Pour libérer la capture de l’événement tactile unique à partir de cet élément, utilisez le <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> (méthode) et spécifiez le périphérique tactile à libérer. Pour libérer tous les fonctions tactiles de cet élément, utilisez le <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" /> est <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.UIElement.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la géométrie utilisée pour définir le contour du contenu d’un élément  Il s’agit d’une propriété de dépendance.</summary>
        <value>Géométrie à utiliser pour le découpage des dimensions de la zone. La valeur par défaut est un <see cref="T:System.Windows.Media.Geometry" /> null.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Éléments en dehors de la géométrie apparaîtront détourés dans la disposition de l’affichage. La géométrie ne devra pas être rectangulaire.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ClipProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 Cet exemple montre comment définir un élément d’infrastructure <xref:System.Windows.UIElement.Clip%2A> région. Pour définir un élément, utilisez un <xref:System.Windows.Media.Geometry> (par exemple, un <xref:System.Windows.Media.EllipseGeometry> pour définir l’élément <xref:System.Windows.UIElement.Clip%2A> propriété. Seule la zone qui se trouve dans la région de la géométrie sera visible.  
  
 L’exemple suivant montre un <xref:System.Windows.Controls.Image> élément sans une zone de découpage définie. Parce qu’aucune zone de découpage n’est défini, l’image entière s’affiche.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Un objet avant d’appliquer une zone de découpage](~/add/media/mil-task-clip-region-noclip.png "un objet avant d’appliquer une zone de découpage")  
Image avec aucune zone de découpage  
  
 Dans l’exemple suivant, une Image identique est créée, sauf qu’il a une zone de découpage définie. Seule la partie de l’image qui se trouve dans la zone de la <xref:System.Windows.Media.EllipseGeometry> s’affichera.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Objet découpé](~/add/media/mil-task-clip-region-ellispe.PNG "objet découpé")  
Image avec une zone de découpage elliptique  
  
 L’exemple suivant montre comment animer un élément d’infrastructure <xref:System.Windows.UIElement.Clip%2A> région. Dans cet exemple, un <xref:System.Windows.Media.EllipseGeometry> est utilisé pour définir une zone de découpage elliptique pour un <xref:System.Windows.Controls.Image> élément. Un <xref:System.Windows.Media.Animation.PointAnimation> anime la géométrie d’ellipse <xref:System.Windows.Media.EllipseGeometry.Center%2A> propriété à partir de (0, 0) à (200, 150). Lancer l’animation une fois que l’image est chargée et se répète indéfiniment.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Pour l’exemple complet, consultez la [exemple de région de découpage](https://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.Clip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ClipToBounds : bool with get, set" Usage="System.Windows.UIElement.ClipToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s'il faut ou non détourer le contenu de cet élément (ou le contenu provenant des éléments enfants de cet élément) pour l'ajuster à la taille de l'élément qui les contient.   Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si le contenu doit être détouré ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour les éléments enfants, <xref:System.Windows.UIElement.ClipToBounds%2A> peut avoir différents effets sur les comportements de disposition selon que la hauteur et largeur de l’élément parent sont déterminées par <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> ou <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> de l’élément parent sont toujours respectés, quel que soit la valeur de <xref:System.Windows.UIElement.ClipToBounds%2A> et le découpage s’effectue toujours le contenu en fonction de ces valeurs maximales. Le parent <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> paramètres ne seront pas détourer le contenu lorsque <xref:System.Windows.UIElement.ClipToBounds%2A> est `false`, mais découpe le contenu si <xref:System.Windows.UIElement.ClipToBounds%2A> est `true`.  
  
 Notez cette valeur par défaut : `false` est le comportement général tel qu’implémenté dans le <xref:System.Windows.UIElement> classe. Il est possible pour tout élément qui dérive de <xref:System.Windows.UIElement> à substituer les métadonnées de propriété de dépendance pour cette propriété dans cette instance par défaut à `true` à la place. Plusieurs classes dérivées existantes substituent ces métadonnées et/ou ajustent la valeur par défaut de la propriété de dépendance.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, et <xref:System.Windows.Controls.Primitives.Popup> chaque substitution de la valeur par défaut pour être `true`.  
  
 <xref:System.Windows.FrameworkElement> substitue les métadonnées pour cette propriété de dépendance. Plus précisément, <xref:System.Windows.FrameworkElement> désigne cette propriété pour autoriser l’héritage de valeur de propriété (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> est `true` dans les métadonnées). L’héritage de valeur de propriété dans ce contexte signifie que s’il existe des éléments enfants avec aucune autre valeur pour <xref:System.Windows.UIElement.ClipToBounds%2A> affecté par l’intermédiaire de valeurs locales ou de styles, la valeur de l’élément parent le plus proche avec cette valeur attribuée (là encore, soit dans les styles, par défaut valeurs, ou une valeur localement), la valeur de l’élément parent est affectée à tous les éléments enfants non attribués par le système de propriétés. Dans la pratique, cela signifie que vous pouvez spécifier s’il faut autoriser le clip limites à l’élément racine, et cette valeur se propage à tous les éléments enfants qui n’ont pas spécifiquement affectés en tant que `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipToBoundsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.ClipToBounds" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets <see cref="T:System.Windows.Input.CommandBinding" /> associés à cet élément. <see cref="T:System.Windows.Input.CommandBinding" /> active la gestion de commande pour cet élément et déclare la liaison entre une commande, ses événements et les gestionnaires attachés par cet élément.</summary>
        <value>Collection de tous les objets <see cref="T:System.Windows.Input.CommandBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une autre manière classique pour remplir le <xref:System.Windows.UIElement.CommandBindings%2A> collection consiste à utiliser <xref:System.Windows.Input.CommandManager> méthodes par programmation.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreCommandBindings*  
 Un ou plusieurs <xref:System.Windows.Input.CommandBinding> éléments. Chacun d'entre eux doit avoir un <xref:System.Windows.Input.CommandBinding.Command%2A> attribut défini sur une commande connue, et des attributs définis pour le <xref:System.Windows.Input.CommandBinding.CanExecute> et <xref:System.Windows.Input.CommandBinding.Executed> les implémentations de gestionnaire. Pour plus d'informations, consultez <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 L’exemple suivant ajoute un <xref:System.Windows.Input.CommandBinding> à une fenêtre à l’aide de balisage. Notez que dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], le <xref:System.Windows.Input.CommandBindingCollection> n’est pas déclaré dans le balisage en tant qu’élément ; l’objet de collection est déduit par le type de la propriété, et vous devez remplir l’élément de propriété avec une ou plusieurs <xref:System.Windows.Input.CommandBinding> éléments :  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Pour plus d’informations sur la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe pour les collections, consultez [syntaxe de XAML en détail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 L’exemple suivant effectue essentiellement la même chose dans le code :  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DesiredSize : System.Windows.Size" Usage="System.Windows.UIElement.DesiredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la taille que cet élément a calculée pendant la passe de mesure du processus de disposition.</summary>
        <value>Taille calculée, qui devient la taille souhaitée pour la passe de réorganisation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur retournée par cette propriété sera uniquement d’une mesure valide si la valeur de la <xref:System.Windows.UIElement.IsMeasureValid%2A> propriété est `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> est vérifié en général comme un des facteurs de mesure lorsque vous implémentez le comportement de disposition remplace comme <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, ou <xref:System.Windows.UIElement.OnRender%2A> (dans le <xref:System.Windows.UIElement.OnRender%2A> cas, vous pouvez vérifier <xref:System.Windows.UIElement.RenderSize%2A> au lieu de cela, mais cela dépend de votre implémentation). Selon le scénario, <xref:System.Windows.UIElement.DesiredSize%2A> peut être respecté pleinement par votre logique d’implémentation, les contraintes sur <xref:System.Windows.UIElement.DesiredSize%2A> peut être appliqué, et elles peuvent également modifier d’autres caractéristiques de l’élément parent ou un élément enfant. Par exemple, un contrôle qui prend en charge les zones déroulantes (mais ne pas dériver des contrôles de niveau infrastructure WPF qui activent déjà des régions déroulantes) peut comparer la taille disponible pour <xref:System.Windows.UIElement.DesiredSize%2A>. Le contrôle peut ensuite définir un état interne qui active des barres de défilement dans le [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] pour ce contrôle. Ou, <xref:System.Windows.UIElement.DesiredSize%2A> peut éventuellement être ignoré aussi dans certains scénarios.  
  
   
  
## Examples  
 L’exemple suivant <xref:System.Windows.UIElement.DesiredSize%2A> en tant que partie d’un <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implémentation. Notez comment <xref:System.Windows.UIElement.Measure%2A> est appelée immédiatement avant l’obtention de <xref:System.Windows.UIElement.DesiredSize%2A>. Cela garantit que <xref:System.Windows.UIElement.DesiredSize%2A> contient une valeur légitime.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de glissement sous-jacent qui a pour cible cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.DragEnter> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Substituer <xref:System.Windows.UIElement.OnDragEnter%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de glissement sous-jacent qui a pour origine cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.DragLeave> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Substituer <xref:System.Windows.UIElement.OnDragLeave%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de glissement sous-jacent avec pour cible de dépôt potentielle cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement se produit même si le glissement commence dans les limites de l’élément. Si l’opération glisser commence en dehors des limites, puis déplace à l’intérieur, cet événement est également déclenché, ainsi que <xref:System.Windows.UIElement.DragEnter> et autres événements d’aperçu associés.  
  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.DragOver> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.DragOverEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Substituer <xref:System.Windows.UIElement.OnDragOver%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de déplacement sous-jacent avec cet élément comme cible de déplacement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.Drop> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.DropEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Substituer <xref:System.Windows.UIElement.OnDrop%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Media.Effects.Effect with get, set" Usage="System.Windows.UIElement.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'effet bitmap à appliquer à <see cref="T:System.Windows.UIElement" />. Il s’agit d’une propriété de dépendance.</summary>
        <value><see cref="T:System.Windows.Media.Effects.Effect" /> qui représente l'effet bitmap.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.UIElement.Effect%2A> propriété pour appliquer un effet bitmap à un <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.EffectProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 Le XAML suivant montre comment affecter un personnalisé <xref:System.Windows.Media.Effects.ShaderEffect> à la <xref:System.Windows.UIElement.Effect%2A> propriété.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable EffectProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.EffectProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.Effect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Essaie d'affecter le focus sur cet élément.</summary>
        <returns><see langword="true" /> si le focus clavier et le focus logique ont eu pour valeur cet élément ; <see langword="false" /> si seul le focus logique a eu pour valeur cet élément, ou si l'appel de cette méthode n'a pas entraîné de modification du focus.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Soit actif, <xref:System.Windows.UIElement.Focusable%2A> et <xref:System.Windows.UIElement.IsEnabled%2A> doivent tous deux être `true`.  
  
 Même si l’élément est actif et valide, le `Focus` événements preview peuvent être traités dans une arborescence spécifique, et le focus sur cet élément ne peuvent pas être autorisé (par exemple, dans un contrôle composite).
Dans ce cas, cette méthode retourne `false`.
 
 En règle générale, le focus est contrôlé par deux concepts différents : le focus clavier et le focus logique. Ces deux concepts ne sont pas toujours à la même. Pour plus d’informations, consultez [résumé de Focus](~/docs/framework/wpf/advanced/focus-overview.md) et [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).
 
 Si l’appel <xref:System.Windows.UIElement.Focus%2A> retourne `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> et <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> sont également `true`.  
  
 Si les propriétés associées ne sont pas déjà `true`, lorsque vous appelez <xref:System.Windows.UIElement.Focus%2A>, un ou plusieurs des événements suivants sont déclenchés dans l’ordre suivant : <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (la source est la cible de focus), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (la source est la cible de focus).  
  
 Afin que cet appel réussisse, un autre élément dans l’application requises pour que le focus précédemment.  
  
   
  
## Examples  
 L’exemple suivant définit le focus un <xref:System.Windows.Controls.TextBox> référencé par <xref:System.Windows.FrameworkElement.Name%2A>, puis ajuste la position du curseur dans le <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si l'élément peut recevoir le focus.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si l’élément peut être actif ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul l’élément ayant le focus reçoit l’entrée au clavier.  
  
 <xref:System.Windows.UIElement.Focusable%2A> est le [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] accesseur de propriété pour ce qui est en réalité une propriété de dépendance. Cette propriété de dépendance particulière a assez souvent et sa valeur « par défaut » apparente défini différemment dans les classes d’éléments dérivés, en particulier dans les contrôles. Cela se produit généralement de deux manières :  
  
-   La propriété de dépendance est héritée par une classe dérivée particulière, mais qui classe dérivée substitue les métadonnées de la propriété de dépendance et modifie la valeur par défaut de la propriété.  
  
-   Un style ou un modèle est appliqué à un élément, qui définit cette valeur de propriété de dépendance différemment.  
  
 Par exemple, apparent « défaut » de <xref:System.Windows.UIElement.Focusable%2A> pour un <xref:System.Windows.Controls.Button> contrôle sera `true`, même si <xref:System.Windows.Controls.Button> hérite <xref:System.Windows.UIElement.Focusable%2A> comme un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] propriété directement à partir de <xref:System.Windows.UIElement>. Il s’agit, car la valeur de la métadonnée appliquée pour la <xref:System.Windows.UIElement.Focusable%2A> propriété de dépendance a été substituée dans le constructeur statique de la <xref:System.Windows.Controls.Control> classe de base, qui est situé entre <xref:System.Windows.Controls.Button> et <xref:System.Windows.UIElement> dans la hiérarchie de classes.  
  
 Cas hérité par <xref:System.Windows.Controls.Control> ou ses classes dérivées, <xref:System.Windows.Controls.Control> redéfinit la valeur par défaut de cette propriété doit être `true`.  
  
 Cas hérité par <xref:System.Windows.Controls.Label> (c'est-à-dire un <xref:System.Windows.Controls.Control> classe dérivée), la valeur par défaut est redéfinie à nouveau pour être `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.FocusableProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple de code suivant illustre un modèle de contrôle pour un contrôle personnalisé particulier, qui définit <xref:System.Windows.UIElement.Focusable%2A> `false` sur l’un des éléments dans le modèle.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Lorsque vous dérivez de <see cref="T:System.Windows.UIElement" /> directement (par opposition à partir de <see cref="T:System.Windows.Controls.Control" />), prévoyez d’indiquer si votre élément soit actif, car l’élément ne le n'est pas par défaut. Si vous souhaitez que votre élément soit actif, remplacer les métadonnées pour cette propriété dans le constructeur statique de votre type comme suit : 
[!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)] [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)] 
où <paramref name="myElement" /> doit être du type que vous substituez la valeur des métadonnées sur le nom de classe.</para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la valeur de la propriété <see cref="P:System.Windows.UIElement.Focusable" /> change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="uIElement.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Propriété de dépendance à vérifier.</param>
        <summary>Retourne la valeur de propriété de base de la propriété spécifiée sur cet élément, en ignorant toute valeur animée provenant d’une animation en cours d’exécution ou arrêtée.</summary>
        <returns>Valeur de propriété, comme si aucune animation n’était attachée à la propriété de dépendance spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si aucune animation n’est attachée à la propriété, puis le <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> valeur de retour est toujours identique à la <xref:System.Windows.DependencyObject.GetValue%2A> valeur de retour. S’il existe des animations attachées, puis toutes les animations possibles dérivées des valeurs, notamment le début des valeurs de mots vides sont ignorées et la valeur de propriété est déterminée en fonction de toutes les autres entrées possibles. Pour plus d’informations, consultez [Priorité de la valeur de propriété de dépendance](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire qui signale la valeur de base d’un texte animé <xref:System.Windows.FrameworkElement.Width%2A> propriété sur un <xref:System.Windows.Controls.Button>, ainsi que la valeur de base d’une transformation.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry&#xA;override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="uIElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Taille disponible fournie par l’élément.</param>
        <summary>Retourne une géométrie de détourage de remplacement qui représente la région qui est détourée si <see cref="P:System.Windows.UIElement.ClipToBounds" /> a la valeur <see langword="true" />.</summary>
        <returns>Géométrie de détourage éventuelle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation par défaut retourne une valeur légitime, mais n’utilise pas le `layoutSlotSize` paramètre dans ses calculs. Au lieu de cela, il utilise la valeur de <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Cette méthode est substituée de façon significative en immédiatement dérivée <xref:System.Windows.FrameworkElement> (classe) et le <xref:System.Windows.FrameworkElement> remplacement produit un comportement plus sophistiqué pour les éléments de niveau infrastructure WPF généraux. Pour plus d'informations, consultez <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="abstract member GetUIParentCore : unit -&gt; System.Windows.DependencyObject&#xA;override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne un autre parent de l'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] pour cet élément si aucun parent visuel n'existe.</summary>
        <returns>Objet, si l'implémentation d'une classe dérivée présente une autre connexion parente à signaler.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation virtuelle par défaut de cette méthode retourne `null`. <xref:System.Windows.FrameworkElement> Fournit une implémentation pratique.  
  
 Les autres parents sont utilisés pour le routage d’événement, dans les cas où un élément crée une autre structure parente afin que ses événements soient acheminées d’une manière qui diffère du modèle standard de routage l’arborescence d’éléments visuels au parent standard, ou vers le bas dans la afficher un aperçu de la stratégie de routage.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le système d’entrée signale un événement de glisser-déposer sous-jacent qui implique cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.GiveFeedback> événement permet à la source d’un événement glisser de modifier l’apparence du pointeur de la souris pour fournir une rétroaction visuelle pendant une opération de glisser-déplacer. Le retour visuel renforce qu’une opération de glisser-déplacer est en cours.  
  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.GiveFeedback> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.GiveFeedback> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Substituer <xref:System.Windows.UIElement.OnGiveFeedback%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément reçoit le focus logique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le focus logique diffère du focus clavier si le focus est délibérément forcé à l’aide d’un appel de méthode, mais le focus clavier précédent existe dans une étendue différente. Dans ce scénario, le focus clavier reste où elle et l’élément où un <xref:System.Windows.UIElement.Focus%2A> méthode est appelée toujours Obtient le focus logique.  
  
 Une interprétation plus précise de cet événement est qu’il est déclenché lorsque la valeur de la <xref:System.Windows.UIElement.IsFocused%2A> propriété d’un élément dans l’itinéraire est modifiée à partir de `false` à `true`.  
  
 Cet événement utilise le routage par propagation, l’élément qui reçoit le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a effectivement reçu le focus.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.RoutedEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant.  
  
-   Substituer <xref:System.Windows.UIElement.OnGotFocus%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le focus du clavier est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> est un événement similaire qui assure le suivi des changements d’état dans une propriété qui maintient l’état de focus sur un élément ; le <xref:System.Windows.UIElement.GotKeyboardFocus> événement est déclenché dans de nombreuses circonstances mêmes.  
  
 Cet événement utilise le routage par propagation, l’élément qui a le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a le focus.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.GotKeyboardFocus> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.GotKeyboardFocus> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Substituer <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément capture la souris.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un élément capture la souris, il reçoit l’entrée de la souris même si le pointeur de la souris est en dehors de ses limites. La souris est capturée en général uniquement pendant les opérations de glisser-déplacer et reste capturée jusqu'à ce que l’action drop de l’opération de glisser-déplacer se produit.  
  
 Cet événement utilise le routage par propagation, l’élément qui possède la capture peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifier le <xref:System.Windows.RoutedEventArgs.Source%2A> de l’événement de capture de données pour déterminer l’élément qui a la souris.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.GotMouseCapture> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.GotMouseCapture> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant défini.  
  
-   Substituer <xref:System.Windows.UIElement.OnGotMouseCapture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément capture le stylet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un élément capture le stylet, il reçoit l’entrée du stylet même si le pointeur se trouve en dehors de ses limites. Le stylet est capturé en général uniquement pendant les opérations de glisser-déplacer et ce jusqu'à la fin de l’opération de glisser-déplacer, l’action de déplacement.  
  
 Cet événement utilise le routage par propagation, l’élément qui possède la capture peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui possède la capture.  
  
 Cet événement crée un alias pour l’événement attaché pour cette classe afin que <xref:System.Windows.UIElement.GotStylusCapture> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.GotStylusCapture> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant défini.  
  
-   Substituer <xref:System.Windows.UIElement.OnGotStylusCapture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une entrée tactile est capturée dans cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituer <xref:System.Windows.UIElement.OnGotTouchCapture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.UIElement.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si élément présente des propriétés animées.</summary>
        <value><see langword="true" /> si cet élément contient des animations attachées à l'une de ses propriétés ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne `true` pour persistantes animations (perpétuelle, toujours-en cours d’exécution), ou pour les animations qui possèdent une chronologie spécifique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasEffectiveKeyboardFocus : bool" Usage="System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Récupère une valeur qui indique si le <see cref="T:System.Windows.UIElement" /> avait le focus.</summary>
        <value><see langword="true" /> si le <see cref="T:System.Windows.UIElement" /> a le focus ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les sous-classes peuvent substituer cette propriété pour spécifier quand l’élément a le focus clavier.  Cela est utile quand votre <xref:System.Windows.UIElement> contient des éléments qui peuvent avoir le focus clavier et vous souhaitez que votre élément de rapport qu’il a le focus.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implémente <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> pour fournir le comportement de test de positionnement des éléments de base.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.GeometryHitTestParameters -&gt; System.Windows.Media.GeometryHitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Décrit le test de positionnement à effectuer, notamment le point d’accès initial.</param>
        <summary>Implémente <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> pour fournir le comportement de test de positionnement des éléments de base (en retournant <see cref="T:System.Windows.Media.GeometryHitTestResult" />). </summary>
        <returns>Résultats du test, notamment la géométrie évaluée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consultez la méthode virtuelle d’origine <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> pour plus d’informations sur la substitution de cette méthode en plus des classes dérivées. Notez que plusieurs contrôles spécifiques (<xref:System.Windows.Controls.TextBlock>, par exemple) présentent des implémentations distinctes, qui substituent celle-ci.  
  
 Cette méthode n’est pas destinée à être appelée à partir de votre code d’application. Cette méthode prend en charge les comportements de tests d’atteinte internes qui sont exposées par les différents aspects du système d’entrée (si le pointeur de la souris est au-dessus d’un élément, par exemple).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberSignature Language="F#" Value="override this.HitTestCore : System.Windows.Media.PointHitTestParameters -&gt; System.Windows.Media.HitTestResult" Usage="uIElement.HitTestCore hitTestParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Décrit le test de positionnement à effectuer, notamment le point d’accès initial.</param>
        <summary>Implémente <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> pour fournir le comportement de test de positionnement des éléments de base (en retournant <see cref="T:System.Windows.Media.HitTestResult" />). </summary>
        <returns>Résultats du test, notamment le point évalué.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consultez la méthode virtuelle d’origine <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> pour plus d’informations sur la substitution de cette méthode en plus des classes dérivées. Notez que plusieurs contrôles spécifiques (<xref:System.Windows.Controls.TextBlock>, par exemple) présentent des implémentations distinctes, qui remplacent <xref:System.Windows.UIElement.HitTestCore%2A> tel que défini par <xref:System.Windows.UIElement>.  
  
 Cette méthode n’est pas destinée à être appelée à partir de votre code d’application. Cette méthode prend en charge les comportements de tests d’atteinte internes qui sont exposées par les différents aspects du système d’entrée (si le pointeur de la souris est au-dessus d’un élément, par exemple).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de liaisons d’entrée associées à cet élément.</summary>
        <value>Collection de liaisons d'entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Liaisons d’entrée prennent en charge la liaison des commandes pour les périphériques d’entrée. Par exemple, <xref:System.Windows.Input.MouseBinding> implémente liaisons d’entrée qui incluent des propriétés qui sont spécifiques aux dispositifs de pointage.  
  
 La collection de liaisons d’entrée inclut les liaisons d’entrée qui se rapportent au type ainsi que des liaisons d’entrée qui sont déclarés sur l’instance.  
  
 Une propriété connexe, <xref:System.Windows.UIElement.CommandBindings%2A>, gère une collection de liaisons de commande. Ceux-ci diffèrent des liaisons d’entrée car elles représentent le niveau suivant vers le bas du traitement de commande - actions qui sont liés aux commandes connus.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreInputBindings*  
 Un ou plusieurs <xref:System.Windows.Input.InputBinding> éléments (généralement le <xref:System.Windows.Input.KeyBinding> ou <xref:System.Windows.Input.MouseBinding> des classes dérivées). Chacun d'entre eux doit avoir un <xref:System.Windows.Input.InputBinding.Command%2A> et <xref:System.Windows.Input.InputBinding.Gesture%2A> ensemble d’attributs.  
  
   
  
## Examples  
 L’exemple suivant remplit cette propriété sur un <xref:System.Windows.Window>, avec un seul <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Pour plus d’informations sur la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntaxe pour les collections, consultez [syntaxe de XAML en détail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.InputHitTest : System.Windows.Point -&gt; System.Windows.IInputElement" Usage="uIElement.InputHitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Coordonnées d'offset dans cet élément.</param>
        <summary>Retourne l'élément d'entrée dans l'élément actif qui se trouve aux coordonnées spécifiées relatives à l'origine de l'élément actif.</summary>
        <returns>Élément enfant situé à la position donnée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> est retourné en tant que type de retour, car ce type est une interface commune pour les deux <xref:System.Windows.UIElement> et <xref:System.Windows.ContentElement>. Vous pouvez ensuite convertir de manière adéquate le type de retour, ou utiliser l’instance d’interface pour certains membres qui sont définis par le <xref:System.Windows.IInputElement> interface.  
  
 Cette méthode n’est généralement pas appelée à partir de votre code d’application. Appel de cette méthode n’est approprié si vous avez l’intention de ré-implémenter une quantité substantielle des fonctionnalités d’entrée de bas niveau qui sont déjà présents, tels que de recréer la logique de la souris.  
  
 <xref:System.Windows.IContentHost> contrats un <xref:System.Windows.IContentHost.InputHitTest%2A> méthode avec la même signature que certains éléments choisissent d’implémenter explicitement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberSignature Language="F#" Value="member this.InvalidateArrange : unit -&gt; unit" Usage="uIElement.InvalidateArrange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalide l’état de réorganisation (disposition) de l’élément. Après l’invalidation, la disposition de l’élément est mise à jour, ce qui se produit de façon asynchrone, sauf en cas de forçage ultérieur par <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Des appels fréquents au <xref:System.Windows.UIElement.InvalidateArrange%2A> ou en particulier à <xref:System.Windows.UIElement.UpdateLayout%2A> avoir des conséquences significatives des performances. Par conséquent, évitez d’appeler cette méthode, sauf si vous avez absolument besoin un état de disposition pour les appels suivants à d’autres [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] dans votre code. Un scénario avancé où vous pouvez appeler <xref:System.Windows.UIElement.InvalidateArrange%2A> est si vous créez un <xref:System.Windows.PropertyChangedCallback> pour une propriété de dépendance qui n’est pas suite un <xref:System.Windows.Freezable> ou <xref:System.Windows.FrameworkElement> classe dérivée qui influence toujours la passe de réorganisation de disposition lorsqu’il est modifié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberSignature Language="F#" Value="member this.InvalidateMeasure : unit -&gt; unit" Usage="uIElement.InvalidateMeasure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalide l’état de mesure (disposition) de l’élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel de cette méthode appelle également <xref:System.Windows.UIElement.InvalidateArrange%2A> en interne, il n’est pas nécessaire d’appeler <xref:System.Windows.UIElement.InvalidateMeasure%2A> et <xref:System.Windows.UIElement.InvalidateArrange%2A> à la suite. Après l’invalidation, l’élément aura sa disposition mise à jour, ce qui se produisent de façon asynchrone, à moins que <xref:System.Windows.UIElement.UpdateLayout%2A> est appelée pour forcer un changement synchrone.  
  
 Le système de disposition de niveau framework WPF effectue sa propre gestion des modifications dans l’arborescence visuelle d’un élément, et dans le cas de l’invalidation de mise en page les plus courants, le système de disposition est appelle l’équivalent de cette méthode lorsque cela est nécessaire. Vous devez appeler cette méthode uniquement si vous générez une implémentation de disposition complète, ce qui les manipulations directes dans l’arborescence d’éléments, ou similaire des scénarios avancés. Un de ces scénarios est que si vous créez un <xref:System.Windows.PropertyChangedCallback> pour une propriété de dépendance qui n’est pas suite un <xref:System.Windows.Freezable> ou <xref:System.Windows.FrameworkElement> classe dérivée qui influence toujours la passe de mesure de disposition lorsqu’il est modifié.  
  
 Des appels fréquents au <xref:System.Windows.UIElement.InvalidateMeasure%2A> ou en particulier à <xref:System.Windows.UIElement.UpdateLayout%2A> avoir des conséquences significatives des performances. Par conséquent, évitez d’appeler cette méthode, sauf si vous avez absolument besoin un état de disposition pour les appels suivants à d’autres [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] dans votre code.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberSignature Language="F#" Value="member this.InvalidateVisual : unit -&gt; unit" Usage="uIElement.InvalidateVisual " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalide le rendu de l’élément et force une nouvelle passe de disposition complète. <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> est appelée une fois le cycle de disposition terminé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode appelle <xref:System.Windows.UIElement.InvalidateArrange%2A> en interne.  
  
 En règle générale, cette méthode n’est pas appelée à partir de votre code d’application. Le système de disposition de niveau framework WPF opère sa propre gestion des modifications dans l’arborescence visuelle d’un élément et appelle l’équivalent de cette méthode lorsque cela est nécessaire déjà. Appel de cette méthode est nécessaire uniquement pour les scénarios avancés. Un de ces scénarios est que si vous créez un <xref:System.Windows.PropertyChangedCallback> pour une propriété de dépendance qui n’est pas suite un <xref:System.Windows.Freezable> ou <xref:System.Windows.FrameworkElement> classe dérivée qui influence toujours la mise en page lorsqu’il est modifié.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArrangeValid : bool" Usage="System.Windows.UIElement.IsArrangeValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si les dimensions et la position calculées d'éléments enfants dans la disposition de cet élément sont valides.</summary>
        <value><see langword="true" /> si les dimensions et la position de disposition sont valides ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez forcer la disposition en appelant <xref:System.Windows.UIElement.InvalidateArrange%2A> sur cet élément (ou ses parents). Cette variable marque la disposition de la recomposition dès que le système de disposition détermine. Vous pouvez également immédiatement un appel à <xref:System.Windows.UIElement.UpdateLayout%2A> a pu être établie, mais cela doit être effectuée uniquement si vous êtes certain qu’aucune autre invalidation complémentaire n’est en attente (un grand nombre de mises à jour forcées inutilement a des conséquences sur les performances).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> ne peut pas être `true` , sauf si <xref:System.Windows.UIElement.IsMeasureValid%2A> est également `true` (dans le processus de disposition, l’agencement ne peut pas être valide sans mesure préalablement valide).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si cet élément est activé dans l’élément [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si l'élément est activé ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Notez que cette propriété est influencée par les implémentations spécifiques à la classe de <xref:System.Windows.UIElement.IsEnabledCore%2A> sur des éléments particuliers, souvent lors de l’exécution. Par conséquent, la valeur par défaut répertoriée ici n’est parfois pas efficace. Par exemple, un <xref:System.Windows.Controls.Primitives.ScrollBar> sera <xref:System.Windows.UIElement.IsEnabled%2A> `false` chaque fois qu’il est déterminé qu’il n’est pas nécessaire pour prendre en charge d’une barre de défilement. Tentative de définition de cette valeur sera également potentiellement remplacée par la valeur retournée par <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Les éléments qui ne sont pas activés ne participent pas le test de positionnement ou le focus et par conséquent ne sera pas sources d’événements d’entrée.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire sur un bouton que lorsque la valeur sera exécutée <xref:System.Windows.UIElement.IsEnabled%2A> `false` sur un autre bouton nommé `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsEnabled" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui devient la valeur de retour d'<see cref="P:System.Windows.UIElement.IsEnabled" /> dans les classes dérivées.</summary>
        <value><see langword="true" /> si l'élément est activé ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>L’implémentation par défaut de cette propriété met en cache la valeur et calcule également si l’élément parent de cet élément est activé. (Si le parent n’est pas activé, l’élément enfant ne peut pas être activé de façon efficace dans les pratiques [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Si vous choisissez de substituer cette implémentation, assurez-vous que vous appelez l’implémentation de base pour maintenir ce comportement.  
  
Le <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> classe fournit une implémentation de substitution existante de cette propriété. Ce remplacement détermine si le contenu à l’intérieur de la zone de présentation du contenu dépasse la taille disponible. Si le contenu dépasse la zone, la partie de la barre de défilement est activée. Sinon, la barre de défilement n’est pas activée.</para></block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui détermine si cet élément a le focus logique.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si cet élément a le focus logique ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le focus logique peut différer du focus clavier si une application a plusieurs départements de focus, comme entre le contenu du menu et le reste de l’application. Dans ce scénario, le focus clavier peut être uniquement sur un seul élément de l’interface utilisateur de l’application, toutefois, certains éléments dans d’autres divisions peuvent conserver le focus logique. Pour plus d’informations sur le focus logique, consultez [vue d’ensemble du Focus](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Vous ne définissez pas le focus en définissant cette propriété (il est en lecture seule). L’utilisation classique de cette propriété consiste à utiliser comme une propriété de dépendance pour un <xref:System.Windows.Setter> ou <xref:System.Windows.EventTrigger>. Pour définir le focus par programmation, appelez <xref:System.Windows.UIElement.Focus%2A>. Le focus peut également être défini par l’utilisateur ou par les implémentations de contrôle, pouvant inclure le comportement de capture de la souris.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant est un gestionnaire de code qui modifie l’arrière-plan d’un contrôle lorsqu’il a le focus.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Une autre méthode pour obtenir ce même effet consiste à placer un <xref:System.Windows.Trigger> dans le <xref:System.Windows.Style> d’un contrôle ; cette approche ne nécessite pas de gestion des événements spécifiques avec code-behind et donne un meilleur accès à la nature interactive et graphique de concepteurs le [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Pour voir un exemple, consultez [Comment : Créer un effet d’éclat extérieur](https://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui déclare si cet élément peut être renvoyé en tant que résultat d'un test de positionnement à partir d'une certaine partie de son contenu affiché. Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si cet élément peut être retourné comme résultat d’un test de positionnement d’au moins un point ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur effective de cette propriété est influencée par la position relative des éléments testables dans l’arborescence logique. Par exemple, si un élément est un élément enfant d’un élément qui est pas visible de test d’atteinte, la valeur effective de la propriété sur l’enfant reste `false`, même si vous tentez de définir cette valeur localement. Pour cette raison, il est important que vous ne définissez pas <xref:System.Windows.UIElement.IsHitTestVisible%2A> à `false` sur un contrôle composé à moins que ne pas souhaitez toute entrée ou de test de positionnement sur ce contrôle. Pour plus d’informations sur le test des résultats, consultez [Test des résultats dans la couche visuelle](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété de dépendance <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsHitTestVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si un système de méthode d’entrée, comme un [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], est activé pour traiter l’entrée dans cet élément.</summary>
        <value><see langword="true" /> si une méthode d’entrée est active ; sinon, <see langword="false" />. La valeur par défaut de la propriété jointe sous-jacente est <see langword="true;" />. Cela est cependant influencé par l’état réel des méthodes d’entrée au moment de l’exécution.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la valeur retournée par la propriété jointe <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> pour les méthodes d’entrée actuellement activées (clavier, vocale et autres périphériques d’entrée).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si cet élément a le focus clavier.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si cet élément accepte le focus clavier ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifications apportées à la valeur déterminée de cette propriété peuvent être accompagnées d’événements associés au focus.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> et <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> sont couramment utilisés dans les gestionnaires d’événements de classe pour les autres événements associés à l’entrée, par exemple pour déterminer si l’élément a déjà le focus clavier, ou lorsque la souris pour déterminer les moments événements et les événements de clavier se produisent conjointement.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le focus clavier se trouve n’importe où dans l’élément ou dans ses éléments enfants de l’arborescence d’éléments visuels.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si le focus clavier se trouve sur l’élément ou sur ses éléments enfants ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les modifications apportées à la valeur de cette propriété déclenchent en général le <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> événement, sauf si une classe dérivée a remplacé <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> pour supprimer l’événement.  
  
 Vous ne définissez pas cette propriété directement, mais vous pouvez définir le focus à un élément en appelant <xref:System.Windows.UIElement.Focus%2A>, ou en effectuant un <xref:System.Windows.UIElement.MoveFocus%2A> demande. Un de ces appels de méthode peut modifier cette valeur de propriété.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> et <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> sont généralement utilisés dans les gestionnaires d’événements de classe pour les autres événements associés à l’entrée, par exemple pour déterminer si l’élément a déjà le focus clavier, ou lorsque la souris pour déterminer les moments événements et les événements de clavier se produisent conjointement.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsManipulationEnabled : bool with get, set" Usage="System.Windows.UIElement.IsManipulationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les événements de manipulation sont activés sur ce <see cref="T:System.Windows.UIElement" />.</summary>
        <value><see langword="true" /> si les événements de manipulation sont activés sur ce <see cref="T:System.Windows.UIElement" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définissez cette propriété sur true si vous souhaitez que le <xref:System.Windows.UIElement> pour recevoir le <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, et <xref:System.Windows.UIElement.ManipulationCompleted> événements. Pour plus d’informations sur les manipulations, consultez le [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  Pour obtenir un exemple d’une application qui répond à des manipulations, consultez [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 L’exemple suivant crée une application qui a un Rectangle rouge.  Le <xref:System.Windows.UIElement.IsManipulationEnabled%2A> propriété du Rectangle est définie sur true et l’application fenêtre s’abonne à la <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, et <xref:System.Windows.UIElement.ManipulationInertiaStarting> événements. Cet exemple fait partie d’un exemple plus complet dans [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsManipulationEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsManipulationEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMeasureValid : bool" Usage="System.Windows.UIElement.IsMeasureValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si les dimensions actuelles retournées par la mesure de la disposition sont valides.</summary>
        <value><see langword="true" /> si la passe de mesure de disposition a retourné une valeur valide actuelle ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez forcer la mesure et disposition devant être invalidée en appelant <xref:System.Windows.UIElement.InvalidateMeasure%2A> sur cet élément (ou tout élément parent de l’arborescence d’éléments visuels). Ainsi, vous désignez la disposition de la recomposition de façon asynchrone, qui se produisent à un moment déterminé par le système de disposition. Vous pouvez également, lancer des immédiatement un appel à <xref:System.Windows.UIElement.UpdateLayout%2A>. Toutefois, vous devez uniquement appeler <xref:System.Windows.UIElement.UpdateLayout%2A> si il est probable qu’aucune autre invalidation complémentaire n’est en attente (un grand nombre de mises à jour forcées inutilement a des conséquences de performances).  
  
 Si <xref:System.Windows.UIElement.IsMeasureValid%2A> est `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> doit également être `false` (par la logique forcée du processus de mise en page, l’organisation ne peut pas être valide sans mesure préalablement valide).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la souris est capturée pour cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si l’élément a la capture de la souris ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 État de capture de la souris est liée aux opérations de glisser-déplacer in-process.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant active ou désactive l’état de capture de la souris selon que la souris est capturée déjà pour l’élément.  
  
 Si la capture de la souris se trouve ailleurs, que la capture de la souris est définie pour cet élément. Si l’élément avait la capture de la souris, il est effacé en appelant <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> avec une entrée null.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui détermine si la capture de la souris est détenue par cet élément ou par des éléments enfants dans son arborescence d’éléments visuels. Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si cet élément ou un élément contenu possède la capture de la souris ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la position du pointeur de la souris correspond aux résultats de test de positionnement, qui prennent en considération la composition des éléments.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si le pointeur de la souris se trouve sur le même résultat d’élément qu’un test de positionnement ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement aux <xref:System.Windows.UIElement.IsMouseOver%2A>, cette propriété est uniquement `true` si le pointeur de la souris est sur l’élément littéral - car il s’agit d’un test de positionnement. Si le pointeur de la souris est sur un élément enfant, en particulier sur les éléments qui font partie plus approfondie d’un élément modèle d’et la composition, cette propriété sera `false`. Sauf si vous savez comment un contrôle est composé (par exemple, vous utilisez cette propriété dans un modèle de contrôle personnalisé pour un contrôle que vous définissez), cette propriété peut retourner des résultats inattendus. La plupart des scénarios où vous ne créez pas de contrôles, utiliser <xref:System.Windows.UIElement.IsMouseOver%2A> à la place.  
  
 Si la souris est capturée par cet élément, et cette propriété est `true` au moment de la capture, cette propriété continue à renvoyer `true` jusqu'à ce que la capture de la souris est perdue et le pointeur n’est pas sur ses limites.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le pointeur de la souris se trouve sur cet élément (notamment les éléments enfants dans l’arborescence d’éléments visuel).  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si le pointeur de la souris se trouve sur l’élément ou ses éléments enfants ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, les contrôles sont composés tels que les différents éléments à l’intérieur du contrôle (l’arborescence d’éléments visuels) signalent tous l’état de la souris pour le contrôle conteneur. Par exemple, un <xref:System.Windows.Controls.ListBox> contrôle style signalera <xref:System.Windows.UIElement.IsMouseOver%2A> comme `true` si la souris est n’importe où sur sa géométrie, y compris ceux <xref:System.Windows.Controls.ListBoxItem>.  
  
 Bien qu’un événement « IsMouseOverChanged » analogue analogue n’existe pas, plusieurs événements semblables existent. Par exemple, vous pouvez gérer <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, et <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Si cet élément capture la souris, cette propriété demeure `true` jusqu'à ce que la capture de la souris est perdue et le pointeur de la souris quitte les limites de l’élément.  
  
 Certains contrôles capturent délibérément la souris sur certaines actions qui ne semblent pas impliquer directement la souris. Cela peut entraîner <xref:System.Windows.UIElement.IsMouseOver%2A> en cours `true` même si la souris n’a apparemment pas été déplacée.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant fait référence à cette propriété en tant que type de propriété d’un <xref:System.Windows.Trigger>, qui fait partie d’un \<Style.Triggers > bloc. Si la souris est positionnée sur le contrôle, le texte du contrôle devient bleu et le curseur se transforme en main.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le stylet est capturé par cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si l’élément a la capture du stylet ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui détermine si la capture du stylet est détenue par cet élément ou par un élément dans les limites de l’élément et de son arborescence d’éléments visuels. Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si cet élément ou un élément contenu possède la capture du stylet ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [entrée tactile prise en charge dans Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) et [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit d’un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si la position du stylet correspond aux résultats de test de positionnement, qui prennent en considération la composition des éléments.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si le pointeur du stylet se trouve sur le même élément du résultat qu’un test de positionnement ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement aux <xref:System.Windows.UIElement.IsStylusOver%2A>, cette propriété est uniquement `true` si le stylet se trouve au-dessus de l’élément. Si le stylet est plutôt sur un élément enfant ou sur des éléments qui font partie de la composition des plus approfondie d’un élément (l’arborescence d’éléments visuels), cette propriété sera `false`.  
  
 Sauf si vous savez comment un contrôle est composé (par exemple, vous utilisez cette propriété dans un modèle de contrôle personnalisé pour un contrôle que vous définissez), cette propriété peut retourner des résultats inattendus. La plupart des scénarios où vous ne créez pas de contrôles, utiliser <xref:System.Windows.UIElement.IsStylusOver%2A> à la place.  
  
 Si cet élément possède la capture du stylet et que cette propriété est `true` au moment de la capture, cette propriété demeure `true` jusqu'à ce que la capture du stylet est perdue et le stylet se ne trouve pas sur ses limites.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le curseur du stylet se trouve sur cet élément (notamment les éléments enfants de l’élément visuel).  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si le curseur du stylet se trouve sur l’élément ou sur ses éléments enfants ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cet élément possède la capture du stylet, cette propriété continue à renvoyer `true` jusqu'à ce que la capture du stylet est perdue et le pointeur se trouve en dehors de ses limites.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si cet élément est visible dans l’[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si l’élément est visible ; sinon <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Détermination de la <xref:System.Windows.UIElement.IsVisible%2A> valeur tient compte des facteurs de mise en page. En revanche, <xref:System.Windows.UIElement.Visibility%2A>, qui est une propriété définissable, indique seulement l’intention de faire par programme un élément visible ou invisible.  
  
 Éléments où <xref:System.Windows.UIElement.IsVisible%2A> est `false` ne pas participer aux événements d’entrée (ou des commandes), faire pas influencer soit la mesure ou organiser les passes de disposition, ne sont pas peut recevoir le focus, ne sont pas dans une séquence d’onglet et ne seront pas signalées dans le test de positionnement. En revanche, les éléments où <xref:System.Windows.UIElement.IsEnabled%2A> est `false` participent aux événements et des commandes et le test de positionnement, mais ne sont pas peut recevoir le focus.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur de la propriété <see cref="P:System.Windows.UIElement.IsVisible" /> de cet élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement n’est pas déclenché si l’élément n’est pas restitué par le système de disposition, pour des raisons autres que la valeur de la <xref:System.Windows.UIElement.IsVisible%2A> propriété. Par exemple, l’élément aurait un effet visuel associé.  
  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.IsVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand une touche est enfoncée alors que l’élément a le focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestion de clé interagit avec d’autres fonctionnalités de plateforme telles que des commandes et le texte de composition. Le <xref:System.Windows.UIElement.KeyDown> événement est un événement d’entrée de texte de niveau inférieur qui ne peut-être pas se comporter comme prévu sur certains contrôles. Il s’agit, car certains contrôles comportent la composition de contrôle ou de gestion de classe qui fournit une version de niveau supérieur du texte de la gestion des entrées et les événements associés.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.KeyDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.KeyDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnKeyDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand une touche est relâchée alors que l’élément a le focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> événement pour cette classe attaché afin que <xref:System.Windows.UIElement.KeyUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.KeyUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnKeyUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberSignature Language="F#" Value="member this.LayoutUpdated : EventHandler " Usage="member this.LayoutUpdated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la disposition des différents éléments visuels, associés au <see cref="T:System.Windows.Threading.Dispatcher" /> actif, change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une mise à jour de disposition peut se produire suite à une modification de propriété, de redimensionnement d’une fenêtre ou d’une demande explicite de l’utilisateur.  
  
 Ce membre est un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] événement, pas un événement routé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément perd le focus logique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le focus logique diffère du focus clavier si son abandon est délibérément forcé par l'appel à une méthode ; le focus clavier précédent existe cependant dans une étendue différente. Dans ce scénario, clavier le focus reste en place et l’élément où un <xref:System.Windows.UIElement.Focus%2A> méthode est appelée toujours Obtient le focus logique.  
  
 Une interprétation plus précise de cet événement est qu’il est déclenché lorsque la valeur de la <xref:System.Windows.UIElement.IsFocused%2A> propriété d’un élément dans l’itinéraire passe de `true` à `false`.  
  
 Cet événement utilise le routage par propagation, l’élément qui perd le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a effectivement reçu le focus.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.RoutedEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant.  
  
-   Substituer <xref:System.Windows.UIElement.OnLostFocus%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le focus du clavier n’est plus sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement utilise le routage par propagation, l’élément qui a perdu le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a perdu le focus.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.LostKeyboardFocus> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.LostKeyboardFocus> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Substituer <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément perd la capture de la souris.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un élément capture la souris, il reçoit l’entrée de la souris même si le pointeur se trouve en dehors de ses limites. En règle générale, la souris est capturée uniquement pendant les opérations de glisser-déplacer.  
  
 Cet événement utilise le routage par propagation, l’élément qui perd la capture peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément réel qui perd la capture.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.LostMouseCapture> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.LostMouseCapture> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant défini.  
  
-   Substituer <xref:System.Windows.UIElement.OnLostMouseCapture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément perd la capture du stylet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un élément capture le stylet, il reçoit l’entrée du stylet même si le pointeur se trouve en dehors de ses limites. Le stylet est capturé en général uniquement pendant les opérations de glisser-déplacer.  
  
 Cet événement utilise le routage par propagation, l’élément qui perd le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a perdu le focus.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.LostStylusCapture> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.LostStylusCapture> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant défini.  
  
-   Substituer <xref:System.Windows.UIElement.OnLostStylusCapture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément perd une capture d'entrée tactile.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituer <xref:System.Windows.UIElement.OnLostTouchCapture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberSignature Language="F#" Value="member this.ManipulationBoundaryFeedback : EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " Usage="member this.ManipulationBoundaryFeedback : System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la manipulation rencontre une limite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationBoundaryFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationCompleted : EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " Usage="member this.ManipulationCompleted : System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une manipulation et l'inertie sur l'objet <see cref="T:System.Windows.UIElement" /> sont terminées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cet événement pour obtenir des informations sur la manipulation lorsqu’elle est terminée.  Par exemple, vous pouvez utiliser le <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> de modifier la propriété pour déterminer la quantité totale de la position de la manipulation.  
  
 Pour plus d’informations sur les manipulations, consultez le [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  Pour obtenir un exemple d’une application qui répond à des manipulations, consultez [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationCompletedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.ManipulationCompleted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberSignature Language="F#" Value="member this.ManipulationDelta : EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " Usage="member this.ManipulationDelta : System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le périphérique d'entrée change de position pendant une manipulation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.ManipulationDelta> événement produit plusieurs fois lorsque l’utilisateur fait glisser doigts sur l’écran pendant une manipulation et lorsque l’inertie se produit.  Vous pouvez utiliser le <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> propriété à vérifier si l’événement se produit pendant l’inertie.  
  
 L’élément sur lequel <xref:System.Windows.UIElement.ManipulationDelta> événement se produit n’est pas affectée en aucune façon lorsque l’événement se produit.  Vous devez fournir la logique à l’élément qui doit être manipulé.  Le <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> et <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propriétés, qui sont de type <xref:System.Windows.Input.ManipulationDelta>, contiennent des données sur la façon dont la position des manipulations change et interprété en tant que le déplacement, redimensionnement ou rotation d’un objet.  Vous appliquez ces informations à l’élément qui doit être manipulé.  
  
 Pour plus d’informations sur les manipulations, consultez le [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  Pour obtenir un exemple d’une application qui répond à des manipulations, consultez [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 L’exemple suivant montre un gestionnaire d’événements pour le <xref:System.Windows.UIElement.ManipulationDelta> événement. L’exemple utilise le <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propriété à déplacer, redimensionner et faire pivoter un <xref:System.Windows.Shapes.Rectangle>.  L’exemple vérifie également si le <xref:System.Windows.UIElement.ManipulationDelta> événement s’est produit pendant l’inertie et si le rectangle touche le bord d’une fenêtre.  Si ces cas sont trues, l’application arrête la manipulation pour empêcher le rectangle de quitter la zone visible de l’application. Cet exemple fait partie d’un exemple plus complet dans [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationDeltaEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationInertiaStarting : EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " Usage="member this.ManipulationInertiaStarting : System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le périphérique d'entrée perd le contact avec l'objet <see cref="T:System.Windows.UIElement" /> pendant une manipulation et que l'inertie commence.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.ManipulationInertiaStarting> événement se produit lorsque l’utilisateur retire tous les doigts de l’écran pendant une manipulation. Par exemple, si un utilisateur « jette » un <xref:System.Windows.UIElement> sur une surface, l’utilisateur touchera le <xref:System.Windows.UIElement> pour commencer l’action, déplacez le doigt sur l’écran sur une courte distance et relâchez la <xref:System.Windows.UIElement>. Lorsque l’utilisateur relâche à l’élément, l’inertie commence et le <xref:System.Windows.UIElement.ManipulationInertiaStarting> événement se produit.  Le <xref:System.Windows.UIElement> continue à recevoir <xref:System.Windows.UIElement.ManipulationDelta> événements pour indiquer que l’inertie se produit sur l’élément.  
  
 Vous pouvez utiliser cet événement pour spécifier le comportement de l’inertie.  Par exemple, vous pouvez définir la rapidité initiale qui est utilisée lors de l’inertie commence.  Vous pouvez également spécifier la quantité de l’inertie en définissant la décélération souhaitée, ou en définissant l’emplacement souhaité.  Vous pouvez définir ces valeurs pour chaque type de manipulation (translation, expansion ou rotation) indépendamment.  Pour plus d'informations, consultez <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Pour plus d’informations sur les manipulations, consultez le [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  Pour obtenir un exemple d’une application qui répond à des manipulations, consultez [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 L’exemple suivant montre le <xref:System.Windows.UIElement.ManipulationInertiaStarting> Gestionnaire d’événements et définit la décélération souhaitée pour la traduction, expansion et rotation utilisée pendant l’inertie. Cet exemple fait partie d’un exemple plus complet dans [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationInertiaStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarted : EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " Usage="member this.ManipulationStarted : System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un périphérique d'entrée commence une manipulation sur l'objet <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.ManipulationStarted> événement se produit après le <xref:System.Windows.UIElement.ManipulationStarting> événement.  Vous pouvez effectuer les opérations suivantes le <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Obtenir l’élément de position de la manipulation est relative à l’aide de la <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> propriété.  
  
-   Obtenez l’origine de la manipulation à l’aide de la <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> propriété.  
  
-   Annuler la manipulation en appelant le <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> (méthode).  
  
 Pour plus d’informations sur les manipulations, consultez le [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  Pour obtenir un exemple d’une application qui répond à des manipulations, consultez [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartedEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.ManipulationStarted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberSignature Language="F#" Value="member this.ManipulationStarting : EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " Usage="member this.ManipulationStarting : System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le processeur de manipulation est créé initialement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.ManipulationStarting> événement se produit sur un élément qui possède le <xref:System.Windows.UIElement.IsManipulationEnabled%2A> propriété définie sur `true` lorsque l’utilisateur place un doigt sur celui-ci. Par défaut, les événements de manipulation suivants signalent la position de la manipulation par rapport à l’élément qui a <xref:System.Windows.UIElement.IsManipulationEnabled%2A> défini sur `true`.  Vous pouvez spécifier que la position doit être relatif à un autre élément en définissant le <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> propriété. Par exemple, vous pouvez rendre la manipulation par rapport au parent de l’élément.  
  
 Vous pouvez également effectuer les opérations suivantes dans un gestionnaire d’événements <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Spécifiez si l’utilisateur a besoin de plusieurs doigts pour exécuter les manipulations en définissant le <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> propriété.  
  
-   Spécifiez quels types de manipulation sont activés en définissant le <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> propriété un <xref:System.Windows.Input.ManipulationModes> énumération.  
  
-   Spécifiez le centre d’une rotation d’un seul doigt en définissant le <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> propriété.  
  
-   Annuler la manipulation en appelant le <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> (méthode).  
  
 Pour plus d’informations sur les manipulations, consultez le [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  Pour obtenir un exemple d’une application qui répond à des manipulations, consultez [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 L’exemple suivant montre le Gestionnaire d’événements pour le <xref:System.Windows.UIElement.ManipulationStarting> événements et définit le <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> à l’élément parent qui reçoit les événements de manipulation afin que les coordonnées de la manipulation sont exprimées par rapport à l’élément parent.  Cet exemple fait partie d’un exemple plus complet dans [procédure pas à pas : Créer votre première Application Touch](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ManipulationStartingEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.ManipulationStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="member this.Measure : System.Windows.Size -&gt; unit" Usage="uIElement.Measure availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">L’espace disponible qu’un élément parent peut allouer à un élément enfant. Un élément enfant peut demander plus d’espace que ce qui est disponible ; la taille fournie peut être adaptée si le défilement est possible dans le modèle de contenu pour l’élément actuel.</param>
        <summary>Met à jour le <see cref="P:System.Windows.UIElement.DesiredSize" /> d’un <see cref="T:System.Windows.UIElement" />. Les éléments parents appellent cette méthode à partir de leurs propres implémentations de <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> pour former une mise à jour de disposition récursive. L’appel de cette méthode constitue la première passe (la passe « Mesure ») de la mise à jour d’une disposition.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calcul de positionnement dans [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] se compose d’un <xref:System.Windows.UIElement.Measure%2A> appeler et un <xref:System.Windows.UIElement.Arrange%2A> appeler. Lors de la <xref:System.Windows.UIElement.Measure%2A> appel, un élément détermine ses exigences de taille en utilisant un `availableSize` d’entrée. Pendant la <xref:System.Windows.UIElement.Arrange%2A> appel, la taille d’élément est finalisé.  
  
 `availableSize` peut être n’importe quel nombre compris entre zéro et infini. Éléments participant à la disposition doivent retourner la valeur minimale <xref:System.Windows.Size> ils ont besoin pour une donnée `availableSize`.  
  
 Lorsqu’une mise en page est instanciée, elle reçoit toujours un <xref:System.Windows.UIElement.Measure%2A> appeler avant <xref:System.Windows.UIElement.Arrange%2A>. Toutefois, après la première passe de disposition, il peut recevoir un <xref:System.Windows.UIElement.Arrange%2A> appeler sans un <xref:System.Windows.UIElement.Measure%2A>; cela peut se produire lorsqu’une propriété qui affecte uniquement <xref:System.Windows.UIElement.Arrange%2A> est modifiée (par exemple, alignement), ou lorsque le parent reçoit un <xref:System.Windows.UIElement.Arrange%2A> sans un <xref:System.Windows.UIElement.Measure%2A>. Un <xref:System.Windows.UIElement.Measure%2A> appel invalidera automatiquement un <xref:System.Windows.UIElement.Arrange%2A> appeler.  
  
 Mises à jour de disposition se produisent de façon asynchrone, telles que le thread principal n’attend pas de chaque modification de la disposition. Interrogation d’un élément par le biais de la vérification des valeurs de propriété de code-behind ne peut pas refléter immédiatement les modifications apportées aux propriétés qui interagissent avec les caractéristiques de dimensionnement ou de disposition (le <xref:System.Windows.FrameworkElement.Width%2A> propriété, par exemple).  
  
> [!NOTE]
>  Mises à jour de disposition peuvent être forcés à l’aide de la <xref:System.Windows.UIElement.UpdateLayout%2A> (méthode). Toutefois, l’appel de cette méthode est généralement inutile et peut altérer les performances.  
  
 Le système de disposition effectue deux files d’attente distinctes de dispositions non valides, une pour <xref:System.Windows.UIElement.Measure%2A> et l’autre pour <xref:System.Windows.UIElement.Arrange%2A>. La file d’attente de disposition est triée en fonction de l’ordre des éléments dans l’arborescence visuelle de l’élément de mise en forme ; plus haut dans l’arborescence d’éléments figurent en haut de la file d’attente, afin d’éviter des dispositions redondantes causées par des modifications répétées dans les parents. Entrées en double sont automatiquement supprimées de la file d’attente et les éléments sont automatiquement supprimés de la file d’attente s’ils sont déjà validés à la disposition.  
  
 Lors de la mise à jour de disposition, le <xref:System.Windows.UIElement.Measure%2A> file d’attente est d’abord vidée, suivi par le <xref:System.Windows.UIElement.Arrange%2A> file d’attente. Un élément dans le <xref:System.Windows.UIElement.Arrange%2A> file d’attente n’est jamais disposé s’il existe un élément dans le <xref:System.Windows.UIElement.Measure%2A> file d’attente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureCore : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="uIElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Dimensions disponibles que l'élément parent peut allouer à l'enfant.</param>
        <summary>En cas de substitution dans une classe dérivée, fournit le code de mesure afin de dimensionner cet élément correctement, en considérant les dimensions de tout contenu d'élément enfant.</summary>
        <returns>Taille souhaitée de cet élément dans la disposition.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il est plus courant de dériver un élément de <xref:System.Windows.FrameworkElement> plutôt que <xref:System.Windows.UIElement>. Si vous dérivez de <xref:System.Windows.FrameworkElement>, notez qu’une substitution de <xref:System.Windows.UIElement.MeasureCore%2A> sur <xref:System.Windows.FrameworkElement> scellés le <xref:System.Windows.UIElement.MeasureCore%2A> (méthode). Par conséquent, vous ne substituer <xref:System.Windows.UIElement.MeasureCore%2A> comme un moyen de modifier les caractéristiques de mesure de disposition si vous dérivez de <xref:System.Windows.UIElement> à travers un héritage qui n’inclut pas <xref:System.Windows.FrameworkElement>. Cela peut être le cas si vous tentez de créer votre propre implémentation sur le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] au niveau du noyau. Sinon, si vous dérivez de <xref:System.Windows.FrameworkElement>, puis le modèle d’implémentation pour le comportement de mesure est la <xref:System.Windows.FrameworkElement> implémentation de.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Un élément parent des éléments enfants doit appeler <xref:System.Windows.UIElement.Measure%2A> sur chaque enfant, sinon ces éléments enfants ne sont pas en taille réelle ou organisées et disparaissent en fait à partir de la mise en page.  
  
   
  
## Examples  
 Une substitution typique de <xref:System.Windows.UIElement.MeasureCore%2A> suit ce modèle approximatif (il n’est pas une collection intégrée appelée `VisualChildren`; `VisualChildren` est un espace réservé qui représente n’importe quelle collection enfant conserve votre élément).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   Vous devez appeler <xref:System.Windows.UIElement.Measure%2A> sur chaque élément enfant.  
  
-   En règle générale, votre implémentation doit mettre en cache des informations de mesure entre les <xref:System.Windows.UIElement.MeasureCore%2A> et <xref:System.Windows.UIElement.ArrangeCore%2A> des appels de méthode dans le même élément.  
  
-   Implémentations de base de l’appel <xref:System.Windows.UIElement.MeasureCore%2A> n’est pas obligatoire, mais peut être approprié si l’implémentation de base fournit une fonctionnalité de disposition souhaité.  
  
-   Les appels à <xref:System.Windows.UIElement.Measure%2A> éléments sur enfant doivent passer la même `availableSize` en tant que parent, ou un sous-ensemble de la zone, selon le type de disposition de l’élément parent prend en charge. Par exemple, il serait judicieux de supprimer la zone de bordure d’un élément spécifique ou remplissage, une barre de défilement ou un contrôle personnalisé.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implémentations doivent être en mesure de traiter une valeur fournie pour <paramref name="availableSize" /> qui est infinie. Une valeur infinie n’indique aucune contrainte demandée et diffère en effet le choix de la mesure à l’élément parent, via les appels récursifs à Measure.  
  
Les implémentations peuvent considérer la valeur fournie pour <paramref name="availableSize" /> soit une contrainte souple. L’élément enfant peut spécifier une plus grande taille, même si d’autres aspects du code d’application ont été en mesure de déterminer la taille actuelle réelle de l’élément parent. La demande de grande taille est une convention qui indique que l’interrogation de l’élément enfant est si votre élément parent peut prendre en charge le défilement de contenu dans une région de l’affichage de contenu.</para></block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un bouton de la souris est enfoncé alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.MouseDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.MouseDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Le <xref:System.Windows.UIElement.MouseDown> événement est déclenché souvent avec <xref:System.Windows.UIElement.MouseLeftButtonDown> ou <xref:System.Windows.UIElement.MouseRightButtonDown>, qui correspondent à une action sur l’un des deux boutons de souris standard. <xref:System.Windows.UIElement.MouseLeftButtonDown> et <xref:System.Windows.UIElement.MouseRightButtonDown> sont également des événements routés, mais ils sont les événements routés directs, et l’événement spécifique au bouton approprié est déclenché lorsque le <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement atteint cet élément le long de l’itinéraire d’événement. Consultez la section Notes pour <xref:System.Windows.UIElement.MouseLeftButtonDown> ou <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Certains contrôles peuvent disposer de gestion pour les événements de bouton de la souris de classe inhérente. La pression du bouton gauche de la souris est le plus probable pour que la gestion de classe dans un contrôle. La gestion souvent de classe marque sous-jacent <xref:System.Windows.Input.Mouse> événement de classe comme étant géré. Une fois que l’événement est marqué comme géré, les autres gestionnaires d’instance qui sont attachés à cet élément ne sont généralement pas déclenchés. N’importe quel autres instance ou la classe gestionnaires d’associés aux éléments dans la direction de propagation vers la racine dans l’arborescence de l’interface utilisateur sont également pas généralement déclenchés.  
  
 Vous pouvez résoudre le problème décrit dans l’Important précédent et recevez toujours <xref:System.Windows.UIElement.MouseDown> événements pour le bouton gauche de la souris vers le bas sur une classe dérivée qui a l’aide d’une de ces solutions de gestion de classe :  
  
-   Joindre des gestionnaires pour les <xref:System.Windows.UIElement.PreviewMouseDown> événement, qui n’est pas marqué comme géré par les contrôles. Notez que, comme il s’agit d’un événement d’aperçu, l’itinéraire démarre à la racine et tunnels au contrôle.  
  
-   Enregistrez un gestionnaire sur le contrôle en appelant <xref:System.Windows.UIElement.AddHandler%2A> et en choisissant l’option de signature qui permet aux gestionnaires d’écouter des événements même s’ils sont déjà marqués comme gérés dans les données d’événement routé.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le pointeur de la souris entre dans les limites de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> est un [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) qui utilise la gestion de stratégie de routage d’événement direct. Les événements routés directs ne sont pas déclenchés sur un itinéraire. au lieu de cela, ils sont gérés dans le même élément dans lequel ils sont déclenchés. Toutefois, ils activent d’autres aspects du comportement de l’événement routé, telles que les déclencheurs d’événements dans les styles.  
  
 Bien que <xref:System.Windows.UIElement.MouseEnter> littéralement, effectue le suivi lorsque le pointeur de la souris entre dans les limites d’un élément, cet événement plus signale que le <xref:System.Windows.UIElement.IsMouseOver%2A> valeur de propriété est devenue `false` à `true` sur cet élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.MouseEnter> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.MouseEnter> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Un <xref:System.Windows.Controls.Button> (ou n’importe quel <xref:System.Windows.Controls.Primitives.ButtonBase> classe dérivée) dispose de gestion native pour un <xref:System.Windows.UIElement.KeyDown> événement lorsque le bouton a le focus et la touche enfoncée est la barre d’espace. La gestion native déclenche le <xref:System.Windows.Controls.Primitives.ButtonBase.Click> événement avec le bouton comme source et capture également la souris, même si le pointeur de souris n’apparaît pas à déplacer. À la suite de la capture de la souris, un <xref:System.Windows.UIElement.MouseEnter> est également déclenché avec le bouton comme source. En général, si un élément capture la souris, puis <xref:System.Windows.UIElement.MouseEnter> est déclenché, ainsi que <xref:System.Windows.UIElement.GotMouseCapture> et éventuellement d’autres événements propres au contrôle.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseEnter%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le pointeur de la souris quitte les limites de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> est un [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) qui utilise la gestion de stratégie de routage d’événement direct. Les événements routés directs ne sont pas déclenchés sur un itinéraire. au lieu de cela, ils sont gérés dans le même élément dans lequel ils sont déclenchés. Toutefois, ils activent d’autres aspects du comportement de l’événement routé, telles que les déclencheurs d’événements dans les styles.  
  
 Bien que <xref:System.Windows.UIElement.MouseLeave> littéralement, effectue le suivi lorsque la souris quitte un élément, cet événement plus signale que le <xref:System.Windows.UIElement.IsMouseOver%2A> valeur de propriété est devenue `true` à `false` sur cet élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.MouseLeave> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.MouseLeave> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseLeave%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton gauche de la souris est enfoncé alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de propagation dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.MouseLeftButtonDown> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés. Cela peut inclure les événements du Gestionnaire de la classe générée comme <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Certaines classes de contrôle peuvent avoir inhérente gestion de classe pour les événements de bouton de la souris. La pression du bouton gauche de la souris est le plus probable pour que la gestion de classe dans un contrôle. La gestion souvent de classe marque sous-jacent <xref:System.Windows.Input.Mouse> événement de classe comme étant géré. Une fois que l’événement est marqué comme géré, les autres gestionnaires d’instance qui sont attachés à cet élément ne sont généralement pas déclenchés. N’importe quel autres instance ou la classe gestionnaires d’associés aux éléments dans la direction de propagation vers la racine dans l’arborescence de l’interface utilisateur sont également pas généralement déclenchés.  
  
 Vous pouvez résoudre le problème décrit dans l’Important précédent et recevez toujours <xref:System.Windows.UIElement.MouseLeftButtonDown> événements pour le bouton gauche de la souris vers le bas sur une classe dérivée qui a l’aide d’une de ces solutions de gestion de classe :  
  
-   Joindre des gestionnaires pour les <xref:System.Windows.UIElement.PreviewMouseDown> événement, qui n’est pas marqué comme géré par les contrôles. Notez que, comme il s’agit d’un événement d’aperçu, l’itinéraire démarre à la racine et tunnels au contrôle.  
  
-   Enregistrez un gestionnaire sur le contrôle en appelant <xref:System.Windows.UIElement.AddHandler%2A> et en choisissant l’option de signature qui permet aux gestionnaires d’écouter des événements même s’ils sont déjà marqués comme gérés dans les données d’événement routé.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton gauche de la souris est relâché alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de propagation dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.MouseLeftButtonUp> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le pointeur de la souris est déplacé alors qu'il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.MouseMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.MouseMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton droit de la souris est enfoncé avec le pointeur de la souris sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de propagation dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.MouseRightButtonDown> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés. Cela peut inclure les événements du Gestionnaire de la classe générée comme <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
 Événements de souris du bouton droit ont fréquemment une gestion native dans les scénarios d’application. Par exemple, un bouton droit de la souris vers le bas peut afficher un menu contextuel. Consultez [vue d’ensemble de ContextMenu](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton droit de la souris est relâché avec le pointeur de la souris sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de propagation dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.MouseRightButtonUp> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un bouton de la souris est relâché au-dessus de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.MouseUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.MouseUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Le <xref:System.Windows.UIElement.MouseUp> événement est déclenché souvent avec <xref:System.Windows.UIElement.MouseLeftButtonUp> ou <xref:System.Windows.UIElement.MouseRightButtonUp>, qui correspondent à une version d’un des deux boutons de souris standard. <xref:System.Windows.UIElement.MouseLeftButtonUp> et <xref:System.Windows.UIElement.MouseRightButtonUp> sont également des événements routés, mais ils sont les événements routés directs, et l’événement spécifique au bouton approprié est déclenché lorsque le <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement atteint cet élément le long de l’itinéraire d’événement. Consultez la section Notes pour <xref:System.Windows.UIElement.MouseLeftButtonUp> ou <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'utilisateur utilise la roulette de la souris avec le pointeur de la souris sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Capture le focus ou de la souris sont prioritaires sur où se trouve le pointeur de souris ; Par conséquent, si vous recevez le <xref:System.Windows.UIElement.MouseWheel> événement à partir d’un élément ayant le focus ou la capture, le pointeur de la souris peut réellement être sur un autre élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.MouseWheel> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.MouseWheel> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Substituer <xref:System.Windows.UIElement.OnMouseWheel%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Requête de parcours qui contient une propriété spécifiant un mode pour parcourir les éléments selon un ordre de tabulation établi ou un sens de déplacement sur le plan visuel.</param>
        <summary>Essaie de déplacer le focus de cet élément vers un autre élément. Le sens de déplacement du focus est indiqué par un sens guide, interprété dans l'agencement du parent visuel pour cet élément.</summary>
        <returns><see langword="true" /> si le parcours demandé a été effectué ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Assurez-vous que vous vérifiez la valeur de retour de cette méthode. La valeur de retour `false` peut être retournée si le parcours s’exécute dans un taquet de tabulation est défini par la composition d’un contrôle, et la requête de parcours n’a pas demandé à encapsuler.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Données de l'événement de touche d'accès rapide. Les données d'événement signalent la touche qui a été appelée et indiquent si l'objet <see cref="T:System.Windows.Input.AccessKeyManager" /> qui contrôle que l'envoi de ces événements a également envoyé cet appel de touche d'accès rapide à d'autres éléments.</param>
        <summary>Fournit la gestion de classe dans les cas où une touche d'accès rapide explicite pour cet élément est appelée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il n’existe aucun événement AccessKey dans la <xref:System.Windows.UIElement> classe ou un autre emplacement, que vous pouvez déclencher ou joindre des gestionnaires pour. Au lieu de cela, l’événement provient en fait une classe de gestionnaire dédiée, <xref:System.Windows.Input.AccessKeyManager>, qui post-traite toutes les entrées pour rechercher des clés d’accès qui s’appliquent à l’ensemble du modèle d’entrée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>L’implémentation par défaut de cette méthode dans <see cref="T:System.Windows.UIElement" /> définit le focus clavier sur cet élément (en appelant <see cref="M:System.Windows.UIElement.Focus" />). Les implémentations doivent perpétuer ce comportement si elles sont actif, car il s’agit d’un comportement attendu pour les scénarios d’accessibilité. Notez que l’implémentation de base ne fait rien avec les données d’événement passé et ne déclenche aucun événement supplémentaire ; Elle définit le focus.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit&#xA;override this.OnChildDesiredSizeChanged : System.Windows.UIElement -&gt; unit" Usage="uIElement.OnChildDesiredSizeChanged child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Élément enfant faisant l'objet du redimensionnement.</param>
        <summary>Prend en charge les comportements de disposition lorsqu'un élément enfant est redimensionné.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’est généralement pas appelée par votre code d’application. Il est exposé pour cet élément dérivé les classes peuvent effectuer Pluss de vérifications sur leur propre état de disposition éventuellement non valide. Les classes peuvent également tenter des optimisations pour réduire le temps de traitement pour une passe de disposition en fonction des modifications de taille aux éléments enfants. Un exemple élément classe dérivée qui implémente <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> est la <xref:System.Windows.Controls.Grid> contrôle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> méthode a l’implémentation par défaut de l’appel <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> sur lui-même. Une implémentation classique serait : faire optimisation quelconque que votre propre élément prend en charge et appelez ensuite la base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> d’au moins une des branches de code (celui indiquant l’état « modifié » par votre propre logique de mise en cache de mesure).  
  
Cette méthode est appelée uniquement dans le traitement de disposition s’il s’agissait de l’enfant lui-même qui provient de la taille change. Sinon, si l’élément parent initie la <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> passer, en fonction des règles de système de disposition, le parent est le recalcul disposition déjà. Le système de disposition traite la mise en page dans l’ordre enfant-parent, aucun retour au redimensionnement d’élément parent par des appels de disposition d’élément enfant n’est donc nécessaire.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne des implémentations <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> spécifiques aux classes pour l'infrastructure [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Implémentation de <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> spécifique au type.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>L’implémentation de cette méthode consiste généralement à appeler le constructeur d’une spécifique <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implémentation et le retourner comme valeur de retour.  
  
Tous les <see cref="T:System.Windows.UIElement" /> classes dérivées doivent implémenter cette méthode afin de fournir leurs propres spécifiques <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implémentations pour les [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure. Pour plus d’informations sur l’implémentation de ce modèle, consultez <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.DragEnter" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.DragLeave" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.DragOver" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.DragEnter" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.GiveFeedbackEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.GiveFeedback" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.RoutedEventArgs" /> qui contient des données d’événement. Ces données d’événement doivent contenir l’identificateur de l’événement <see cref="E:System.Windows.UIElement.GotFocus" />.</param>
        <summary>Déclenche l’événement routé <see cref="E:System.Windows.UIElement.GotFocus" /> en utilisant les données d’événement fournies.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode, bien que virtuelle, a une implémentation par défaut qui déclenche l’événement.  
  
 Cela sur * implémentation de la méthode est destinée à déclencher l’événement, et ce même implémentation de la méthode est appelée en interne pour déclencher l’événement lorsque la <xref:System.Windows.UIElement.IsFocused%2A> valeur de propriété change. Le <xref:System.Windows.UIElement.OnGotFocus%2A> implémentation diffère d’un autre [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] sur * implémentations qui fournissent uniquement un moyen pratique pour ajouter la gestion de classe pour cet événement.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sauf si vous avez un besoin délibéré et exceptionnel ne pas déclencher les événements de focus, assurez-vous que votre implémentation appelle l’implémentation de base. Sinon, le <see cref="E:System.Windows.UIElement.GotFocus" /> événement n’est pas déclenché pendant les opérations utilisateur typique normalement définir le focus sur cet élément. Si vous n’envisagez pas de votre élément soit actif, vous pouvez empêcher l’élément en affectant la valeur <see cref="P:System.Windows.UIElement.Focusable" /> à <see langword="false" />.</para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.GotTouchCapture" /> qui se produit lorsqu'une pression tactile est capturée pour cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnGotTouchCapture%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnGotTouchCapture%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.GotTouchCapture> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnGotTouchCapture%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsKeyboardFocused%2A> les modifications de propriété de dépendance. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> événement est déclenché avec cette même instance de données d’événement. Notez que le <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelé juste avant que cet élément déclenche l’événement <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> les modifications de propriété de dépendance. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> événement est déclenché avec cette même instance de données d’événement. Notez que le <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsMouseCaptured%2A> propriété de dépendance modifie sa valeur. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsMouseCapturedChanged> événement est déclenché avec cette même instance de données d’événement. Notez que le <xref:System.Windows.UIElement.IsMouseCapturedChanged> événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Cette méthode virtuelle est déclenchée lorsque la valeur de la <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> propriété de dépendance modifie sa valeur. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> événement est déclenché avec cette même instance de données d’événement. Notez que l’événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> propriété de dépendance modifie sa valeur. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> événement est déclenché avec cette même instance de données d’événement. Notez que le <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsStylusCaptured%2A> propriété de dépendance modifie sa valeur. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsStylusCapturedChanged> événement est déclenché avec cette même instance de données d’événement. Notez que l’événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> propriété de dépendance modifie sa valeur. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> événement est déclenché avec cette même instance de données d’événement. Notez que l’événement n’est pas un événement routé. Par conséquent, vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode virtuelle est déclenchée lorsque la valeur de la <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> propriété de dépendance modifie sa valeur. La méthode virtuelle est déclenchée en premier et peut manipuler les données d’événement en fonction des besoins. Le <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> événement est déclenché avec cette même instance de données d’événement. Notez que l’événement n’est pas un événement routé. Par conséquent vous ne pouvez pas le marquer comme géré dans le Gestionnaire de classe.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Séquences de touches sont gérées par un gestionnaire d’entrée dédié. Autres fonctionnalités de programmation qui s’appuient sur des séquences de touches, par exemple, les liaisons d’entrée et de commande, peuvent gérer la séquence de touches avant qu’elle est exposée comme séquence générale. Si ces fonctionnalités d’entrée système marquent l’événement comme géré, puis <xref:System.Windows.UIElement.OnKeyDown%2A> n’est pas appelé.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Séquences de touches sont gérées par un gestionnaire d’entrée dédié. Autres fonctionnalités de programmation qui s’appuient sur des séquences de touches, par exemple, les liaisons d’entrée et de commande, peuvent gérer la séquence de touches avant qu’elle est exposée comme séquence générale. Si ces fonctionnalités d’entrée système marquent l’événement comme géré, puis <xref:System.Windows.UIElement.OnKeyUp%2A> n’est pas appelé.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.RoutedEventArgs" /> qui contient des données d’événement. Ces données d’événement doivent contenir l’identificateur de l’événement <see cref="E:System.Windows.UIElement.LostFocus" />.</param>
        <summary>Déclenche l’événement routé <see cref="E:System.Windows.UIElement.LostFocus" /> en utilisant les données d’événement fournies.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode, bien que virtuelle, a une implémentation par défaut qui déclenche l’événement.  
  
 Cela sur * implémentation de la méthode est destinée à déclencher l’événement, et ce même implémentation de la méthode est appelée en interne pour déclencher l’événement lorsque la <xref:System.Windows.UIElement.IsFocused%2A> valeur de propriété change. Cette implémentation diffère d’un autre [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] sur * implémentations qui fournissent uniquement un moyen pratique pour ajouter la gestion de classe pour cet événement.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Sauf si vous avez un besoin délibéré et exceptionnel ne pas déclencher les événements de focus, assurez-vous que votre implémentation appelle l’implémentation de base. Sinon, le <see cref="E:System.Windows.UIElement.LostFocus" /> événement n’est pas déclenché pendant les opérations utilisateur typique normalement définir le focus sur cet élément. Si vous n’envisagez pas de votre élément soit actif, vous pouvez empêcher l’élément en affectant la valeur <see cref="P:System.Windows.UIElement.Focusable" /> à <see langword="false" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> qui contient les données d’événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> qui contient les données d’événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d’événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.LostTouchCapture" /> qui se produit lorsque cet élément perd une capture de pression tactile.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnLostTouchCapture%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnLostTouchCapture%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.LostTouchCapture> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnLostTouchCapture%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit&#xA;override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="uIElement.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Données de l'événement.</param>
        <summary>Appelée lorsque l'événement <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> se produit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> événement. Veillez à appeler la <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> méthode de la classe de base afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit&#xA;override this.OnManipulationCompleted : System.Windows.Input.ManipulationCompletedEventArgs -&gt; unit" Usage="uIElement.OnManipulationCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Données de l'événement.</param>
        <summary>Appelée lorsque l'événement <see cref="E:System.Windows.UIElement.ManipulationCompleted" /> se produit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnManipulationCompleted%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnManipulationCompleted%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.ManipulationCompleted> événement. Veillez à appeler la <xref:System.Windows.UIElement.OnManipulationCompleted%2A> méthode de la classe de base afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit&#xA;override this.OnManipulationDelta : System.Windows.Input.ManipulationDeltaEventArgs -&gt; unit" Usage="uIElement.OnManipulationDelta e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Données de l'événement.</param>
        <summary>Appelée lorsque l'événement <see cref="E:System.Windows.UIElement.ManipulationDelta" /> se produit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnManipulationDelta%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnManipulationDelta%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.ManipulationDelta> événement. Veillez à appeler la <xref:System.Windows.UIElement.OnManipulationDelta%2A> méthode de la classe de base afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit&#xA;override this.OnManipulationInertiaStarting : System.Windows.Input.ManipulationInertiaStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationInertiaStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Données de l'événement.</param>
        <summary>Appelée lorsque l'événement <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> se produit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.ManipulationInertiaStarting> événement. Veillez à appeler la <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> méthode de la classe de base afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit&#xA;override this.OnManipulationStarted : System.Windows.Input.ManipulationStartedEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">Données de l'événement.</param>
        <summary>Appelée lorsque l'événement <see cref="E:System.Windows.UIElement.ManipulationStarted" /> se produit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnManipulationStarted%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnManipulationStarted%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.ManipulationStarted> événement. Veillez à appeler la <xref:System.Windows.UIElement.OnManipulationStarted%2A> méthode de la classe de base afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit&#xA;override this.OnManipulationStarting : System.Windows.Input.ManipulationStartingEventArgs -&gt; unit" Usage="uIElement.OnManipulationStarting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.ManipulationStarting" /> qui se produit lors de la création initiale du processeur de manipulation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnManipulationStarting%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnManipulationStarting%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.ManipulationStarting> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnManipulationStarting%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Ces données d’événement signalent des informations concernant le bouton de la souris qui a été appuyé et l’état géré.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.MouseDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Actions de bouton de la souris sont également gérées par un gestionnaire d’entrée dédié. Autres fonctionnalités de programmation qui s’appuient sur les actions de bouton de la souris, comme entrée et de liaisons, des commandes peuvent appeler des gestionnaires pour l’action avant qu’elle est exposée comme une action de bouton de souris général. Si ces d’entrée système fonctionnalités marque le <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> événement comme géré, <xref:System.Windows.UIElement.OnMouseDown%2A> n’est pas appelé.  
  
 Si vous utilisez ce gestionnaire de classe pour marquer l’événement comme géré, vous avoir un impact sur les événements suivants : <xref:System.Windows.UIElement.MouseLeftButtonDown> et <xref:System.Windows.UIElement.MouseRightButtonDown>. Un de ces événements peut être déclenché sur l’élément cible lorsque <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> est reçue.  
  
 Si vous marquez cet événement comme géré dans la gestion de classe, sous-événements sont toujours déclenchés ; Toutefois, elles passent de l’état géré dans les données d’événement. Si l’événement est géré dans la gestion de classe, les gestionnaires d’instance pour les sous-événements ne sont pas appelés, sauf si vous utilisez explicitement <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> avec `handledEventsToo` `true` pour attacher des gestionnaires. Gestionnaires de classe sont également pas appelés à moins que ces gestionnaires de classe ont été inscrits avec le <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature avec `handledEventsToo` `true`. En gérant <xref:System.Windows.UIElement.OnMouseDown%2A>, vous est pressions que votre gestion de classe pour tous les boutons de la souris. Ce comportement peut être indésirable ; Par conséquent, soyez prudent lorsque vous utilisez cette méthode virtuelle pour marquer des événements comme étant géré.  
  
 Chacun des événements directs spécifique au bouton possède également une machine virtuelle * méthode ; prendre en compte si la substitution de ces gestionnaires de classe spécifiques au bouton peut être plus approprié.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée quand un événement attaché <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé, avec une stratégie de routage direct. Marquer l’événement comme géré est néanmoins utile pour empêcher les gestionnaires d’instance habituels (ceux qui ne spécifient pas `handledEventsToo`) ne soit appelé.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée quand un événement attaché <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé, avec une stratégie de routage direct. Marquer l’événement comme géré est néanmoins utile pour empêcher les gestionnaires d’instance habituels (ceux qui ne spécifient pas `handledEventsToo`) ne soit appelé.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement signalent que le bouton gauche de la souris a été enfoncé.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> non géré est déclenché sur cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.MouseLeftButtonDown> événement semble suivre un itinéraire de propagation mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par propagation et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.MouseLeftButtonDown>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.MouseLeftButtonDown> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 Ou bien, vous pouvez substituer cette méthode afin de modifier la gestion des événements pour un état spécifique de la souris. Vous pouvez choisir d’appeler l’implémentation de base dépend de votre scénario. Ne pas appeler la base désactive la gestion de l’entrée par défaut pour cet événement de la souris sur les classes ancêtres qui prévoient également d’appeler <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Par exemple, vous pouvez dériver de <xref:System.Windows.Controls.Button> et remplacer <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> dans votre classe dérivée sans appeler l’implémentation de base ; Toutefois, cette substitution désactive le <xref:System.Windows.Controls.Primitives.ButtonBase.Click> événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement signalent que le bouton gauche de la souris a été relâché.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.MouseLeftButtonUp> événement semble suivre un itinéraire de propagation mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par propagation et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.MouseLeftButtonUp>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.MouseLeftButtonUp> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.MouseMove" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement indiquent que le bouton droit de la souris a été enfoncé.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.MouseRightButtonDown> événement semble suivre un itinéraire de propagation mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par propagation et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.MouseRightButtonDown>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.MouseRightButtonDown> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 Ou bien, vous pouvez substituer cette méthode afin de modifier la gestion des événements pour un état spécifique de la souris. Vous pouvez choisir d’appeler l’implémentation de base dépend de votre scénario. Ne pas appeler la base désactive la gestion de l’entrée par défaut pour cet événement de la souris sur les classes ancêtres qui prévoient également d’appeler <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Par exemple, vous pouvez dériver de <xref:System.Windows.Controls.Control> et remplacer <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> dans votre classe dérivée sans base de l’appelant ; toutefois, ce remplacement désactive les services de menus contextuels sur votre contrôle, qui font partie de la <xref:System.Windows.Controls.Control> comportement par défaut.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données de l’événement signalent que le bouton droit de la souris a été relâché.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.MouseRightButtonUp> événement semble suivre un itinéraire de propagation mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par propagation et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.MouseRightButtonUp>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.MouseRightButtonUp> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement signalent que le bouton de la souris a été relâché.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.Input.Mouse.MouseUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Actions de bouton de la souris sont également gérées par un gestionnaire d’entrée dédié. Autres fonctionnalités de programmation qui s’appuient sur les actions de bouton de la souris, comme entrée et de liaisons, des commandes peuvent appeler des gestionnaires pour l’action avant qu’elle est exposée comme une action de bouton de souris général. Si ces d’entrée système fonctionnalités marque le <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> événement comme géré, <xref:System.Windows.UIElement.OnMouseUp%2A> n’est pas appelé.  
  
 Si vous utilisez ce gestionnaire de classe pour marquer l’événement comme géré, vous avoir un impact sur les événements suivants : <xref:System.Windows.UIElement.MouseLeftButtonUp> et <xref:System.Windows.UIElement.MouseRightButtonUp>. Un de ces événements peut être déclenché sur l’élément cible lorsque <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> est reçue.  
  
 Si vous marquez cet événement comme géré dans la gestion de classe, sous-événements sont toujours déclenchés ; Toutefois, elles passent de l’état géré dans les données d’événement. Si l’événement est géré dans la gestion de classe, les gestionnaires d’instance pour les sous-événements ne sont pas appelés, sauf si vous utilisez explicitement <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> avec `handledEventsToo` `true` pour attacher des gestionnaires. Gestionnaires de classe sont également pas appelés à moins que ces gestionnaires de classe ont été inscrits avec le <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature avec `handledEventsToo` `true`. En gérant <xref:System.Windows.UIElement.OnMouseUp%2A>, vous est pressions que votre gestion de classe pour tous les boutons de la souris actions. Ce comportement peut être indésirable ; Par conséquent, soyez prudent lorsque vous utilisez cette méthode virtuelle pour marquer des événements comme étant géré.  
  
 Chacun des événements directs spécifique au bouton possède également une machine virtuelle * méthode ; prendre en compte si la substitution de ces gestionnaires de classe spécifiques au bouton peut être plus approprié.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseWheelEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.DragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.PreviewDrop" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.GiveFeedbackEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement indiquent qu’un ou plusieurs boutons de la souris ont été enfoncés.</param>
        <summary>Méthode appelée quand un événement routé attaché <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Actions de bouton de la souris sont également gérées par un gestionnaire d’entrée dédié. Autres fonctionnalités de programmation qui s’appuient sur les actions de bouton de la souris, comme entrée et de liaisons, des commandes peuvent appeler des gestionnaires pour l’action avant qu’elle est exposée comme une action de bouton de souris général. Si ces d’entrée système fonctionnalités marque le <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement comme géré, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> n’est pas appelé.  
  
 Si vous utilisez ce gestionnaire de classe pour marquer l’événement comme géré, vous avoir un impact sur les événements suivants : <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> et <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Un de ces événements peut être déclenché sur l’élément cible lorsque <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> est reçue.  
  
 Si vous marquez cet événement comme géré dans la gestion de classe, sous-événements sont toujours déclenchés ; Toutefois, elles passent de l’état géré dans les données d’événement. Si l’événement est géré dans la gestion de classe, les gestionnaires d’instance pour les sous-événements ne sont pas appelés, sauf si vous utilisez explicitement <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> avec `handledEventsToo` `true` pour attacher des gestionnaires. Gestionnaires de classe sont également pas appelés à moins que ces gestionnaires de classe ont été inscrits avec le <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature avec `handledEventsToo` `true`. En gérant <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, vous est pressions que votre gestion de classe pour tous les boutons de la souris. Ce comportement peut être indésirable ; Par conséquent, soyez prudent lorsque vous utilisez cette méthode virtuelle pour marquer des événements comme étant géré.  
  
 Chacun des événements directs spécifique au bouton possède également une machine virtuelle * méthode ; prendre en compte si la substitution de ces gestionnaires de classe spécifiques au bouton peut être plus approprié.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement signalent que le bouton gauche de la souris a été enfoncé.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> événement semble suivre un itinéraire de tunneling mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par tunneling et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 Ou bien, vous pouvez substituer cette méthode afin de modifier la gestion des événements pour un état spécifique de la souris. Vous pouvez choisir d’appeler l’implémentation de base dépend de votre scénario. Ne pas appeler la base désactive la gestion de l’entrée par défaut pour cet événement de la souris sur les classes ancêtres qui prévoient également d’appeler <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Par exemple, vous pouvez dériver de <xref:System.Windows.Controls.Button> et remplacer <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> dans votre classe dérivée sans appeler l’implémentation de base ; Toutefois, cette substitution désactive le <xref:System.Windows.Controls.Primitives.ButtonBase.Click> événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement signalent que le bouton gauche de la souris a été relâché.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> événement semble suivre un itinéraire de tunneling mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par tunneling et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données d’événement indiquent que le bouton droit de la souris a été enfoncé.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> événement semble suivre un itinéraire de tunneling mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par tunneling et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.MouseRightButtonDown>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 Ou bien, vous pouvez substituer cette méthode afin de modifier la gestion des événements pour un état spécifique de la souris. Vous pouvez choisir d’appeler l’implémentation de base dépend de votre scénario. Ne pas appeler la base désactive la gestion de l’entrée par défaut pour cet événement de la souris sur les classes ancêtres qui prévoient également d’appeler <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Par exemple, vous pouvez dériver de <xref:System.Windows.Controls.Control> et remplacer <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> dans votre classe dérivée sans base de l’appelant ; toutefois, ce remplacement désactive les services de menus contextuels sur votre contrôle, qui font partie de la <xref:System.Windows.Controls.Control> comportement par défaut.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données de l’événement signalent que le bouton droit de la souris a été relâché.</param>
        <summary>Méthode appelée quand un événement routé <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> événement semble suivre un itinéraire de tunneling mais en fait se déplace de manière indirecte. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> est l’événement sous-jacent qui est routé par tunneling et chaque <xref:System.Windows.UIElement> le long de l’événement itinéraire utilise une gestion identique pour déclencher l’événement routé directement <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Bien que vous pouvez marquer le <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> événement comme géré dans le cadre de cet élément, l’état géré ne se propage pas à d’autres éléments le long de l’itinéraire d’événement. Toutefois, vous pouvez souhaiter marquer l’événement comme géré afin d’éviter les gestionnaires d’instance généraux (ceux qui ne spécifiait pas `handledEventsToo`) ne soit appelé.  
  
 L’implémentation par défaut de gestion dans des événements de souris général <xref:System.Windows.UIElement> écoute <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> et le convertit en un événement local approprié. Si vous souhaitez changer cette logique, vous devez créer une classe dérivée. Dans le constructeur statique de votre classe dérivée, inscrivez un gestionnaire de classe de remplacement pour <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Vous ne pouvez pas modifier la comportement de gestion de la souris <xref:System.Windows.UIElement> en substituant <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseButtonEventArgs" /> qui contient les données d'événement. Les données des événements signalent qu'un ou plusieurs boutons de la souris ont été relâchés.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Actions de bouton de la souris sont également gérées par un gestionnaire d’entrée dédié. Autres fonctionnalités de programmation qui s’appuient sur les actions de bouton de la souris, comme entrée et de liaisons, des commandes peuvent appeler des gestionnaires pour l’action avant qu’elle est exposée comme une action de bouton de souris général. Si ces d’entrée système fonctionnalités marque le <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement comme géré, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> n’est pas appelé.  
  
 Si vous utilisez ce gestionnaire de classe pour marquer l’événement comme géré, vous avoir un impact sur les événements suivants : <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> et <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Un de ces événements peut être déclenché sur l’élément cible lorsque <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> est reçue.  
  
 Si vous marquez cet événement comme géré dans la gestion de classe, sous-événements sont toujours déclenchés ; Toutefois, elles passent de l’état géré dans les données d’événement. Si l’événement est géré dans la gestion de classe, les gestionnaires d’instance pour les sous-événements ne sont pas appelés, sauf si vous utilisez explicitement <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> avec `handledEventsToo` `true` pour attacher des gestionnaires. Gestionnaires de classe sont également pas appelés à moins que ces gestionnaires de classe ont été inscrits avec le <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature avec `handledEventsToo` `true`. En gérant <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, vous est pressions que votre gestion de classe pour tous les boutons de la souris actions. Ce comportement peut être indésirable ; Par conséquent, soyez prudent lorsque vous utilisez cette méthode virtuelle pour marquer des événements comme étant géré.  
  
 Chacun des événements directs spécifique au bouton possède également une machine virtuelle * méthode ; prendre en compte si la substitution de ces gestionnaires de classe spécifiques au bouton peut être plus approprié.  
  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.MouseWheelEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.QueryContinueDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusDownEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TextCompositionEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré. Un autre scénario qui s’adresse particulièrement aux événements d’aperçu est de les marquer comme gérés afin que les gestionnaires de classe par propagation correspondants ne sont pas appelés.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.PreviewTouchDown" /> qui se produit lorsqu'une pression tactile est exercée sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.PreviewTouchDown> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> qui se produit lorsqu'une pression tactile se déplace à l'intérieur de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.PreviewTouchMove> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> qui se produit lorsqu'une pression tactile se relâche à l'intérieur de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.PreviewTouchUp> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.QueryContinueDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.QueryCursorEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberSignature Language="F#" Value="abstract member OnRender : System.Windows.Media.DrawingContext -&gt; unit&#xA;override this.OnRender : System.Windows.Media.DrawingContext -&gt; unit" Usage="uIElement.OnRender drawingContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">Instructions de dessin pour un élément spécifique. Ce contexte est fourni au système de disposition.</param>
        <summary>En cas de substitution dans une classe dérivée, participe aux opérations de rendu dirigées par le système de disposition. Les instructions de rendu pour cet élément ne sont pas utilisées directement lorsque cette méthode est appelée, et sont en fait conservées en vue de leur utilisation asynchrone ultérieure pour la disposition et le dessin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucune implémentation par défaut le <xref:System.Windows.UIElement> classe.  
  
   
  
## Examples  
 L’exemple de code suivant montre une implémentation possible pour une classe dérivée de panneau.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> méthode peut être substituée pour ajouter d’autres éléments graphiques (non définis précédemment dans une arborescence logique) à un élément rendu, tels que des effets ou des ornements. Un <see cref="T:System.Windows.Media.DrawingContext" /> objet est passé en tant qu’argument, qui fournit des méthodes pour dessiner des formes, texte, images ou des vidéos.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberSignature Language="F#" Value="abstract member OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit&#xA;override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="uIElement.OnRenderSizeChanged info" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">Paramètres empaquetés (<see cref="T:System.Windows.SizeChangedInfo" />) qui incluent les anciennes tailles et les nouvelles, ainsi que les dimensions qui changent.</param>
        <summary>En cas de substitution dans une classe dérivée, participe aux opérations de rendu dirigées par le système de disposition. Cette méthode est appelée après la mise à jour de la disposition et, si celle-ci a entraîné la modification du <see cref="P:System.Windows.UIElement.RenderSize" /> de l’élément, avant le rendu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Un élément de niveau infrastructure WPF typique utilise l’implémentation de substitution de <xref:System.Windows.FrameworkElement>. Le <xref:System.Windows.FrameworkElement> implémentation invalide le <xref:System.Windows.FrameworkElement.Width%2A> et <xref:System.Windows.FrameworkElement.Height%2A> propriétés et gère les principes fondamentaux de renouveler la mise en page. Substitution de <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> à la <xref:System.Windows.UIElement> niveau implique que votre implémentation de l’élément n’est délibérément pas à l’aide de l’implémentation de niveau infrastructure WPF, et par conséquent, votre élément doit gérer la logique de disposition plus directement, généralement en écrivant un système de disposition de remplacement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusButtonEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusDownEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusDown" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> non géré est déclenché par cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 L’objectif de cette méthode est similaire à [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Marquer l’événement comme géré est néanmoins utile pour empêcher les gestionnaires d’instance habituels (ceux qui ne spécifient pas `handledEventsToo`) ne soit appelé.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Appelée quand un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> non géré est déclenché par cet élément. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation. Vous pouvez appeler le base avant ou après le traitement spécial, selon vos besoins.  
  
 L’objectif de cette méthode est similaire à [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Marquer l’événement comme géré est néanmoins utile pour empêcher les gestionnaires d’instance habituels (ceux qui ne spécifient pas `handledEventsToo`) ne soit appelé.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusMove" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.StylusEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.Stylus.StylusUp" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TextCompositionEventArgs" /> qui contient les données d'événement.</param>
        <summary>Méthode appelée lorsqu'un événement attaché <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> non géré atteint un élément de son itinéraire qui est dérivé de cette classe. Implémentez cette méthode pour ajouter la gestion de classes pour cet événement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a pas d’implémentation par défaut. Car une classe intermédiaire dans l’héritage peut implémenter cette méthode, nous vous recommandons d’appeler l’implémentation de base dans votre implémentation.  
  
 L’objectif de cette méthode est similaire à la [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] modèle d’événement sur * méthodes : cette méthode fournit les moyens de gérer l’événement correspondant à partir de classes dérivées en établissant un gestionnaire de classe au lieu d’un gestionnaire d’instance. Dans ce cas, l’événement correspondant est un événement routé. Le modèle d’implémentation des méthodes On * est différent pour les événements routés, car un événement routé peut être déclenché par un élément enfant, qui n’est pas nécessairement l’élément qui appelle les gestionnaires. Par conséquent, votre implémentation doit examiner les propriétés de la source des données d’événement. Il ne doit pas tenter de redéclencher l’événement dans la plupart des cas.  
  
 Soit en substituant cette méthode ou en inscrivant avec les gestionnaires de classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>, les classes dérivées de <xref:System.Windows.UIElement> peut appeler des méthodes de gestionnaire de classe privée lorsque l’événement est reçu sur l’itinéraire d’événement. Un scénario où la gestion de classe est appropriée consiste à manipuler les données d’événement et marquer l’événement routé comme géré.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.TouchDown" /> qui se produit lorsqu'une pression tactile est exercée à l'intérieur de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnTouchDown%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnTouchDown%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.TouchDown> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnTouchDown%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.TouchEnter" /> qui se produit lorsqu'une pression tactile se déplace de l'extérieur vers l'intérieur des limites de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnTouchEnter%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnTouchEnter%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.TouchEnter> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnTouchEnter%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.TouchLeave" /> qui se produit lorsqu'une pression tactile se déplace de l'intérieur vers l'extérieur des limites de ce <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnTouchLeave%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnTouchLeave%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.TouchLeave> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnTouchLeave%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.TouchMove" /> qui se produit lorsqu'une pression tactile se déplace à l'intérieur de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnTouchMove%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnTouchMove%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.TouchMove> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnTouchMove%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Input.TouchEventArgs" /> qui contient les données d'événement.</param>
        <summary>Fournit la gestion de classe pour l'événement routé <see cref="E:System.Windows.UIElement.TouchUp" /> qui se produit lorsqu'une pression tactile se relâche à l'intérieur de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.OnTouchUp%2A> (méthode) n’a aucune implémentation par défaut. Substituer <xref:System.Windows.UIElement.OnTouchUp%2A> dans une classe dérivée pour gérer le <xref:System.Windows.UIElement.TouchUp> événement. Veillez à appeler la classe de base <xref:System.Windows.UIElement.OnTouchUp%2A> méthode afin que les classes de base reçoivent l’événement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Parent précédent. <see langword="null" /> peut être fourni si <see cref="T:System.Windows.DependencyObject" /> n'avait pas d'élément parent auparavant.</param>
        <summary>Appelé lorsque l'élément parent de <see cref="T:System.Windows.UIElement" /> signale une modification à son parent visuel sous-jacent.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Si vous substituez cette méthode, appelez toujours l’implémentation de base. L’implémentation de base par défaut effectue une maintenance interne de l’état de la propriété héritée en sens inverse. Ne pas appeler l’implémentation de base invalide cet état.  
  
Cette méthode se substitue à <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> et <see cref="T:System.Windows.Window" /> substituent tous deux également le <see cref="T:System.Windows.UIElement" /> implémentation de <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, et <see cref="T:System.Windows.Window" /> scelle.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Opacity : double with get, set" Usage="System.Windows.UIElement.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le facteur d’opacité appliqué au <see cref="T:System.Windows.UIElement" /> entier quand il est affiché dans l’[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Il s’agit d’une propriété de dépendance.</summary>
        <value>Facteur d’opacité. L’opacité par défaut est 1,0. Les valeurs attendues sont comprises entre 0,0 et 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par 1,0 défaut est la valeur par défaut fournie par les métadonnées initiales de cette propriété de dépendance sur la <xref:System.Windows.UIElement> classe. Autres classes dérivées peuvent potentiellement modifier cette valeur par défaut en substituant les métadonnées à partir de son constructeur de classe.  
  
 La valeur de <xref:System.Windows.UIElement.Opacity%2A> n’est pas appliqué à la disposition réelle, sauf si l’élément est également visible (<xref:System.Windows.UIElement.IsVisible%2A> est `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> est appliqué à partir d’éléments parents sur vers le bas de l’arborescence d’éléments pour les éléments enfants, mais les effets visibles de l’opacité imbriquée paramètres ne sont pas indiqués dans la valeur de propriété de chaque élément enfant. Par exemple, si une liste a une opacité de 50 % (0,5) et de ses éléments a une opacité de 20 % (0,2), l’opacité visible pour cet élément de liste est restituée comme s’il s’agissait de 10 % (0,1), mais la valeur de propriété de l’élément de liste <xref:System.Windows.UIElement.Opacity%2A> propriété serait toujours  0,2 lorsqu’il est interrogé.  
  
 Même si l’opacité déclarée ou évaluée est 0, un élément toujours participe aux commandes et les événements d’entrée et potentiellement peut recevoir le focus. Cet aspect peut être utile, par exemple, vous pouvez utiliser un objet d’opacité nulle (par exemple, une forme) pour le masquage des objets sous-jacents avec les éléments transparents. L’objet d’opacité nulle peut alors gérer l’événement d’entrée de traitement pour une zone sous-jacente. Toutefois, le `Background` ou `Fill` de l’objet ou de la forme doit être définie sur une valeur, même si elle est <xref:System.Windows.Media.Brushes.Transparent%2A>, sinon le test de positionnement n’est pas activé et aucun événement n’est reçus.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.OpacityProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OpacityMask : System.Windows.Media.Brush with get, set" Usage="System.Windows.UIElement.OpacityMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un masque d’opacité sous forme d’implémentation de <see cref="T:System.Windows.Media.Brush" /> appliquée aux masquages de canal alpha pour le contenu affiché de cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value>Pinceau à utiliser pour les masquage d’opacité.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété utilise uniquement ce que la valeur du canal alpha pour fourni <xref:System.Windows.Media.Brush>. Les autres canaux de la <xref:System.Windows.Media.Brush>du rendu de contenu (rouge, vert ou bleu) sont ignorés.  
  
 La plus courante <xref:System.Windows.Media.Brush> pour cet effet est un <xref:System.Windows.Media.ImageBrush>, qui peut être utilisée pour diverses techniques, telles que l’application d’une vignette de masquage de photos. Mais les défini <xref:System.Windows.Media.Brush> (tel que <xref:System.Windows.Media.LinearGradientBrush>) peut être utilisé.  
  
 Dans [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], cette valeur de propriété peut utiliser une syntaxe inline qui est spécifique à chaque implémentation de la <xref:System.Windows.Media.Brush> classe abstraite. Pour plus d’informations, consultez [peinture avec des couleurs unies et vue d’ensemble des dégradés](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple de balisage suivant montre un <xref:System.Windows.Media.ImageBrush> masque d’opacité appliqué à une autre <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityMaskProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityMaskProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.OpacityMask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OpacityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.OpacityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.Opacity" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PersistId : int" Usage="System.Windows.UIElement.PersistId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui identifie cet élément de manière unique.</summary>
        <value>Identificateur unique pour cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> identifie de façon unique chaque élément. Un élément conserve le même <xref:System.Windows.UIElement.PersistId%2A> chaque fois que le même [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] est chargé (y compris les représentations binaires). Cet identificateur est utilisé pour la configuration requise lors du chargement, d’analyse et de sérialisation interne. Il n’est pas destiné à être utilisé par votre code d’application.  
  
 Cette propriété n’a aucune relation avec le <xref:System.Object.GetHashCode%2A> résultat pour toute instance donnée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Sens de parcours indiqué du focus.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne l'élément prévu pour faire l'objet du focus selon un sens spécifié de parcours du focus, sans pour autant déplacer le focus sur cet élément.</summary>
        <returns>L'élément qui devrait recevoir le focus si <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> était effectivement appelé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation par défaut de cette méthode dans cette classe est incomplète et retourne toujours `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de glissement sous-jacent qui a pour cible cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewDragEnter> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewDragEnter> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.DragEnter>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de glissement sous-jacent qui a pour origine cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewDragLeave> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewDragLeave> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.DragLeave>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de glissement sous-jacent avec pour cible de dépôt potentielle cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewDragOver> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewDragOver> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.DragOver>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewDragOver%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le système d’entrée signale un événement de déplacement sous-jacent avec cet élément comme cible de déplacement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewDrop> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewDrop> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.DragEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.Drop>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewDrop%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit au début d’une opération de glisser-déposer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewGiveFeedback> événement permet à la source d’un événement glisser de modifier l’apparence du pointeur de la souris, pour fournir une rétroaction visuelle pendant une opération de glisser-déplacer.  
  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewGiveFeedback> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewGiveFeedback> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le focus du clavier est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement utilise le tunneling de routage, l’élément qui a le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a le focus.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand une touche est enfoncée alors que l’élément a le focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestion de clé interagit avec d’autres fonctionnalités de plateforme telles que des commandes et le texte de composition. Le <xref:System.Windows.UIElement.KeyDown> événement est un événement d’entrée de texte de niveau inférieur qui ne peut-être pas se comporter comme prévu sur certains contrôles. Il s’agit, car certains contrôles comportent la composition de contrôle ou de gestion de classe qui fournit une version de niveau supérieur du texte de la gestion des entrées et les événements associés.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewKeyDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewKeyDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.KeyDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand une touche est relâchée alors que l’élément a le focus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestion de clé interagit avec d’autres fonctionnalités de plateforme telles que des commandes et le texte de composition. Le <xref:System.Windows.UIElement.KeyUp> événement est un événement d’entrée de texte de niveau inférieur qui ne peut-être pas se comporter comme prévu sur certains contrôles. Il s’agit, car certains contrôles comportent la composition de contrôle ou de gestion de classe qui fournit une version de niveau supérieur du texte de la gestion des entrées et les événements associés. Pour plus d’informations, consultez la documentation pour les contrôles individuels.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewKeyUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewKeyUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.KeyUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le focus du clavier n'est plus sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement utilise le tunneling de routage, l’élément qui a perdu le focus peut être un élément enfant au lieu de l’élément où le Gestionnaire d’événements est en fait attaché. Vérifiez le <xref:System.Windows.RoutedEventArgs.Source%2A> dans les données d’événement pour déterminer l’élément qui a perdu le focus.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> événements sont attachés à sous-jacent <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un bouton de la souris est enfoncé alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewMouseDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewMouseDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Le <xref:System.Windows.UIElement.PreviewMouseDown> événement est déclenché souvent avec <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, qui correspondent à une action sur l’un des deux boutons de souris standard. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> et <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> sont également des événements routés, mais ils sont les événements routés directs, et l’événement spécifique au bouton approprié est déclenché lorsque le <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement atteint cet élément le long de l’itinéraire d’événement. Consultez la section Notes pour <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.MouseDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton gauche de la souris est enfoncé alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de tunneling dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés. Cela peut inclure les événements du Gestionnaire de la classe générée comme <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton gauche de la souris est relâché alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de tunneling dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le pointeur de la souris se déplace en étant sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement produit lorsque le pointeur de la souris entre dans tout d’abord dans les limites de l’élément, et également lorsque le pointeur de la souris se déplace tout en restant dans les limites de l’élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewMouseMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewMouseMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.MouseMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton droit de la souris est enfoncé avec le pointeur de la souris sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de tunneling dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés. Cela peut inclure les événements du Gestionnaire de la classe générée comme <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton droit de la souris est relâché avec le pointeur de la souris sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bien que cela [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) semble suivre un itinéraire de tunneling dans une arborescence d’éléments, il est en fait un événement routé direct qui est déclenché à plusieurs reprises dans l’arborescence d’éléments, chacun <xref:System.Windows.UIElement>.  
  
 Cet événement est une de plusieurs événements associés qui signalent les spécificités de bouton de la souris de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement, qui est un événement attaché est traité par chaque élément le long d’un itinéraire d’événement.  
  
 Les données d’événement de cet événement exposent les données d’événement de sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement. Si cet événement est marqué comme géré sur l’itinéraire d’événement, le bouton de la souris spécifiques sont toujours déclenchés ; Toutefois, les gestionnaires des événements spécifiques de bouton de la souris doivent être ajoutés en appelant explicitement <xref:System.Windows.UIElement.AddHandler%2A>, avec l’option pour gérer les événements qui sont déjà marqués comme géré, afin d’être des écouteurs à l’événement. Si vous marquez <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> gérée, vous marquez essentiellement <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> géré pour toutes les autres écouteurs sur l’itinéraire et tous les événements associés.  
  
 Point de vue conceptuel, considérez cet événement (et d’autres événements de bouton de la souris sur <xref:System.Windows.UIElement>) pour être une « service » de la souris (avec la définition du service fournie par le <xref:System.Windows.Input.Mouse> classe). L’événement ajoute la commodité ne pas nécessité de vérifier les États de bouton de la souris (gauche à droite, haut-bas) des événements de souris d’origine dans les données d’événement. Pour des scénarios plus avancés, tels que la vérification des États de boutons non standard, vous devrez peut-être utiliser le [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sur le <xref:System.Windows.Input.Mouse> classe plutôt que ceux sur <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu’un bouton de la souris est relâché alors que le pointeur est sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewMouseUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewMouseUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Le <xref:System.Windows.UIElement.PreviewMouseUp> événement est déclenché souvent avec <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, qui correspondent à une action sur l’un des deux boutons de souris standard. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> et <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> sont également des événements routés, mais ils sont les événements routés directs, et l’événement spécifique au bouton approprié est déclenché lorsque le <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> événement atteint cet élément le long de l’itinéraire d’événement. Consultez la section Notes pour <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> ou <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.MouseUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'utilisateur utilise la roulette de la souris avec le pointeur de la souris sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Capture le focus ou de la souris sont prioritaires sur où se trouve le pointeur de souris ; Par conséquent, si vous recevez cet événement à partir d’un élément ayant le focus ou la capture, le pointeur de la souris peut réellement être sur un autre élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewMouseMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewMouseMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'état du clavier ou des boutons de la souris change au cours d'une opération de glisser-déplacer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewQueryContinueDrag> événement permet de la source de glissement déclarer si l’opération de glisser-déplacer doit être annulée.  
  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewQueryContinueDrag> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewQueryContinueDrag> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton du stylet est enfoncé avec le pointeur sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusButtonDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusButtonDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [entrée tactile prise en charge dans Windows Vista](https://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) et [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton du stylet est relâché avec le pointeur sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusButtonUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusButtonUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet touche le numériseur alors qu’il est au-dessus de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet se déplace au-dessus d’un élément sans réellement toucher le numériseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusInAirMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusInAirMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet est suffisamment près du numériseur pour être détecté quand il se trouve au-dessus de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusInRange> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusInRange> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet se déplace alors qu’il est au-dessus de l’élément. Pour déclencher cet événement, le stylet doit se déplacer au moment où il est détecté par le numériseur ; sinon, <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" /> est déclenché à la place.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le stylet est trop loin du numériseur pour être détecté.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusOutOfRange> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusOutOfRange> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un utilisateur exécute un mouvement du stylet parmi plusieurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les mouvements de stylet, consultez <xref:System.Windows.Input.SystemGesture>.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusSystemGesture> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusSystemGesture> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’utilisateur lève le stylet du numériseur alors qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewStylusDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewStylusDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.StylusUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément recueille du texte indépendamment du périphérique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.PreviewTextInput> événement permet à un composant ou une application à l’écoute pour l’entrée de texte de manière indépendante du périphérique. Le clavier est le moyen principal de <xref:System.Windows.UIElement.PreviewTextInput>; mais peuvent également générer des voix, l’écriture manuscrite et autres périphériques d’entrée <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 En raison des combinaisons de touches - dans les claviers par défaut ou à travers des éditeurs de méthode d’entrée - plusieurs événements de clés peuvent déclencher un seul événement d’entrée de texte.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.PreviewTextInput> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.PreviewTextInput> événements sont attachés à sous-jacent <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.TextInput>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewTextInput%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’utilisateur touche l’écran avec le doigt sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le <xref:System.Windows.UIElement.PreviewTouchDown> et <xref:System.Windows.UIElement.TouchDown> événements ne se produisent pas jusqu'à ce qu’un doigt touche l’écran et se déplace. Appuyez un doigt sur l’écran et maintenant sans le déplacer provoque la presse et maintenez le comportement d’un <xref:System.Windows.Input.Stylus>. Le comportement appuyer et maintenir est équivalent à un clic droit de la souris.  
  
 Pour provoquer le <xref:System.Windows.UIElement.PreviewTouchDown> et <xref:System.Windows.UIElement.TouchDown> événements se produisent dès qu’un doigt touche l’écran, définissez le <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> propriété jointe `false` pour cet élément.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.TouchDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand vous déplacez votre doigt sur l’écran pendant qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.TouchMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand vous soulevez votre doigt de l’écran pendant qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Stratégie de routage|Le tunneling|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L’événement de propagation correspondante est <xref:System.Windows.UIElement.TouchUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'état du clavier ou des boutons de la souris change au cours d'une opération de glisser-déplacer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.UIElement.QueryContinueDrag> événement permet de la source de glissement déterminer si l’opération de glisser-déplacer doit être annulée.  
  
 Cet événement crée un alias pour le <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.QueryContinueDrag> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.QueryContinueDrag> événements sont attachés à sous-jacent <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Substituer <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’affichage du curseur est demandé. Cet événement est déclenché sur un élément chaque fois que le pointeur de la souris se déplace vers un nouvel emplacement, ce qui signifie qu’il peut être nécessaire de modifier l’objet curseur en fonction de sa nouvelle position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.QueryCursor> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.QueryCursor> événements sont attachés à sous-jacent <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Le curseur qui est référencé par ce nom de l’événement n’est pas nécessairement le curseur de texte (parfois appelé le point d’insertion). Au lieu de cela, le curseur dans ce contexte est l’objet qui déclare l’affichage graphique actuel relatif à plusieurs périphériques d’entrée possibles ou les concepts de programmation de Windows. Cet objet est représenté par la <xref:System.Windows.Input.Cursor> classe dans WPF. Le système d’entrée WPF vous permet de modifier ce curseur lorsqu’il représente la position à l’écran du pointeur de la souris. Vous pouvez utiliser des valeurs prédéfinies à partir de la <xref:System.Windows.Input.Cursors> énumération, ou vous pouvez déclarer un curseur personnalisé comme un fichier image.  
  
 À l’écoute pour le <xref:System.Windows.UIElement.QueryCursor> événement n’est pas une technique efficace pour la gestion de curseur. Au lieu de cela, chaque élément doit définir son propre comportement du curseur avec <xref:System.Windows.FrameworkContentElement.Cursor%2A> et <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. Vous pouvez vous fier uniquement <xref:System.Windows.UIElement.QueryCursor> si vous n’utilisez pas les éléments de base de niveau infrastructure WPF, ou dans des cas très rares où la définition du comportement du curseur sur une base par élément ne satisfait pas vos besoins. Pour plus d’informations sur l’implémentation du comportement du curseur en réponse à <xref:System.Windows.UIElement.QueryCursor>, consultez <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Il n’existe aucun événement de tunneling correspondant défini.  
  
-   Substituer <xref:System.Windows.UIElement.OnQueryCursor%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.RoutedEventArgs" /> qui contient les données d’événement et identifie aussi l’événement à déclencher.</param>
        <summary>Déclenche un événement routé spécifique. Le <see cref="T:System.Windows.RoutedEvent" /> à déclencher est identifié dans l’instance de <see cref="T:System.Windows.RoutedEventArgs" /> fournie (comme propriété <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> de ces données d’événement).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `e` paramètre est typé en tant que type de base commun pour toutes les données d’événement routé ; Toutefois, les données d’événement doivent être étant données que le type de données d’événement plus spécifique qui est disponible pour l’événement déclenché, car <xref:System.Windows.RoutedEventArgs> contiennent des classes dérivées le propriétés spécifiques des données prévues pour l’événement spécifique lorsqu’il est déclenché.  
  
 <xref:System.Windows.RoutedEventArgs> n’est pas simplement les propriétés de l’état de l’événement ; Il identifie également l’événement routé à déclencher. Ce modèle de déclenchement d’événements et les données d’événement routé diffèrent [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] classes d’événements et les données, qui contiennent seulement des propriétés qui sont liées à l’événement.  
  
   
  
## Examples  
 L’exemple suivant crée les données d’événement, ajoute l’identificateur d’événement aux données, puis utilise l’instance de données d’événement pour déclencher un événement routé personnalisé.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère tous les périphériques tactiles capturés de cet élément.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère la capture de la souris si cet élément suspend la capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cet élément ne contenait pas la capture, l’appel de cette méthode n’a aucun effet. Envisagez de vérifier la valeur de <xref:System.Windows.UIElement.IsMouseCaptured%2A> avant d’appeler cette méthode.  
  
   
  
## Examples  
 L’exemple suivant est parallèle à l’exemple donné pour <xref:System.Windows.UIElement.CaptureMouse%2A>: il gère le bouton de la souris jusqu'à la capture de la souris de mise en production et réactiver le déplacement de la souris.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère la capture du stylet périphérique si cet élément suspend la capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cet élément ne contenait pas la capture, l’appel de cette méthode n’a aucun effet. Envisagez de vérifier la valeur de <xref:System.Windows.UIElement.IsStylusCaptured%2A> avant d’appeler cette méthode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Périphérique à libérer.</param>
        <summary>Tente de libérer le périphérique tactile spécifié de cet élément.</summary>
        <returns><see langword="true" /> si le périphérique tactile est libéré ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="touchDevice" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificateur de l'événement routé pour lequel le gestionnaire est attaché.</param>
        <param name="handler">Implémentation de gestionnaire spécifique à supprimer de la collection de gestionnaires d’événements sur cet élément.</param>
        <summary>Supprime le gestionnaire d’événements routés spécifié de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le scénario le plus courant pour utiliser cette [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] est lorsque vous implémentez le [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] « événement wrapper » qui est associé à un événement routé personnalisé, en particulier lorsque vous implémentez la logique de « supprimer » pour les gestionnaires le [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] niveau. L’exemple qui suit cette section illustre ce scénario de notes.  
  
 Appel de cette méthode n’a aucun effet s’il n’y avait aucun gestionnaire inscrit avec les critères qui correspond aux paramètres d’entrée pour l’appel de méthode.  
  
 Si plusieurs gestionnaires est attaché qui correspond aux critères, uniquement le premier gestionnaire dans le magasin de gestionnaires est supprimé des événements. Ce comportement est cohérent avec [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportement de la `-=` opérateur.  
  
 Ni `routedEvent` ni `handler` peut être `null`. Tentative de valeur `null` lève une exception.  
  
 Cette méthode ignore la `handledEventsToo` les informations de paramètre, qui sont fournies si le gestionnaire a d’abord été ajoutée avec la <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature qui permet une gestion d’événements déjà gérés. Ces deux types de gestionnaire est supprimé.  
  
   
  
## Examples  
 L’exemple suivant utilise <xref:System.Windows.UIElement.RemoveHandler%2A> dans le cadre d’une définition de wrapper d’événement.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.RenderSize : System.Windows.Size with get, set" Usage="System.Windows.UIElement.RenderSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient (ou définit) la taille de rendu finale de cet élément.</summary>
        <value>Taille de rendu de cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  N’essayez pas de définir cette propriété, soit dans [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ou dans le code, si vous utilisez le système de disposition de niveau framework WPF. Presque tous les scénarios d’application standard utilisera ce système de disposition. Le système de disposition ne respecte pas les dimensions définies le <xref:System.Windows.UIElement.RenderSize%2A> propriété directement. Le <xref:System.Windows.UIElement.RenderSize%2A> propriété est déclarée accessible en écriture uniquement afin d’activer certains cas qui contournent délibérément les protocoles typiques de disposition, telles que la prise en charge pour le pontage au niveau du noyau WPF le <xref:System.Windows.Documents.Adorner> classe.  
  
 Cette propriété peut être utilisée pour vérifier la taille de rendu applicables au sein du système de disposition des substitutions comme <xref:System.Windows.UIElement.OnRender%2A> ou <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Un scénario plus courant consiste à gérer le <xref:System.Windows.FrameworkElement.SizeChanged> remplacer de l’événement avec le Gestionnaire de classe ou la <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> événement.  
  
## Examples  
 L’exemple suivant montre comment un ornement personnalisé utilise le <xref:System.Windows.UIElement.RenderSize%2A> valeur afin de créer et dimensionner le rectangle qui définit l’ornement, dans le cadre de son <xref:System.Windows.UIElement.OnRender%2A> implémentation.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.UIElement.RenderTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les informations de transformation qui affectent la position de rendu de cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value>Décrit les caractéristiques de la transformation de rendu souhaitée. La valeur par défaut est <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une transformation de rendu ne pas régénérer la taille de disposition ou afficher des informations sur la taille. Afficher les transformations sont généralement destinées à l’animation ou appliquer un effet temporaire à un élément. Par exemple, l’élément peut effectuer un zoom lorsqu’ou placé sur le curseur ou lors du chargement pour attirer l’attention à la partie de la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderTransformOrigin : System.Windows.Point with get, set" Usage="System.Windows.UIElement.RenderTransformOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le point central des transformations de rendu possibles déclarées par <see cref="P:System.Windows.UIElement.RenderTransform" /> par rapport aux limites de l’élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value>Valeur qui déclare la transformation de rendu. La valeur par défaut est <see cref="T:System.Windows.Point" /> avec les coordonnées (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> a une utilisation quelque peu non standard de la <xref:System.Windows.Point> structure de valeur, qui le <xref:System.Windows.Point> ne représente pas un emplacement absolu dans un système de coordonnées. Au lieu de cela, les valeurs comprises entre 0 et 1 sont interprétés comme un facteur pour la plage de l’élément actuel dans chaque axes x et y. Par exemple, (0.5,0.5) provoquera la transformation de rendu sera centré sur l’élément, ou (1,1) placez la transformation de rendu dans la partie inférieure droite de l’élément. <xref:System.Double.NaN> n’est pas une valeur admise.  
  
 Les valeurs supérieures à 0 et 1 sont également acceptées et entraînent des effets de transformation non conventionnelles plus. Par exemple, si vous définissez <xref:System.Windows.UIElement.RenderTransformOrigin%2A> (5,5), puis appliquer un <xref:System.Windows.Media.RotateTransform>, le point de rotation sera bien en dehors des limites de l’élément lui-même. La transformation tournera votre élément autour d’un cercle big provient au-delà en bas à droite. L’origine peut être quelque part à l’intérieur de son élément parent et ne peut être éventuellement hors trame ou la vue. Les valeurs de point négatif sont similaires, il va au-delà des limites supérieures gauches.  
  
 Restituer transformations n’affectent pas la mise en page et sont généralement utilisées pour animer ou appliquer un effet temporaire à un élément.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *xOrigin*  
 Facteur d’origine horizontal. Cela est généralement indiquée comme une valeur comprise entre 0 et 1. Consultez la section Notes.  
  
 *yOrigin*  
 Facteur d’origine vertical. Cela est généralement indiquée comme une valeur comprise entre 0 et 1. Consultez la section Notes.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant génère des éléments dans le code, applique un <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, puis applique un <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformOriginProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.RenderTransformOrigin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RenderTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.RenderTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.RenderTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si les processus de sérialisation doivent sérialiser le contenu de la propriété <see cref="P:System.Windows.UIElement.CommandBindings" /> sur les instances de cette classe.</summary>
        <returns><see langword="true" /> si la valeur de la propriété <see cref="P:System.Windows.UIElement.CommandBindings" /> doit être sérialisée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ceci renverra `true` si <xref:System.Windows.UIElement.CommandBindings%2A> est définie localement.  
  
 Cela `ShouldSerialize` méthode est fournie car la <xref:System.Windows.UIElement.CommandBindings%2A> propriété n’a pas de valeur par défaut simple. Cette méthode indique si la propriété a changé sa valeur par défaut. En règle générale, vous appelez cette méthode si vous développer un concepteur ou votre propre contrôle incorporant un <xref:System.Windows.UIElement>.  
  
 Pour plus d’informations, consultez [définissant les valeurs par défaut avec les méthodes ShouldSerialize et Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indique si les processus de sérialisation doivent sérialiser le contenu de la propriété <see cref="P:System.Windows.UIElement.InputBindings" /> sur les instances de cette classe.</summary>
        <returns><see langword="true" /> si la valeur de la propriété <see cref="P:System.Windows.UIElement.InputBindings" /> doit être sérialisée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ceci renverra `true` si <xref:System.Windows.UIElement.InputBindings%2A> est définie localement.  
  
 Cela `ShouldSerialize` méthode est fournie car la <xref:System.Windows.UIElement.InputBindings%2A> propriété n’a pas de valeur par défaut simple. Cette méthode indique si la propriété a changé sa valeur par défaut. En règle générale, vous appelez cette méthode si vous développer un concepteur ou votre propre contrôle incorporant un <xref:System.Windows.UIElement>.  
  
 Pour plus d’informations, consultez [définissant les valeurs par défaut avec les méthodes ShouldSerialize et Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SnapsToDevicePixels : bool with get, set" Usage="System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine si le rendu de cet élément doit utiliser les paramètres de pixel spécifiques à l’appareil pendant le rendu.  Il s’agit d’une propriété de dépendance.</summary>
        <value><see langword="true" /> si l’élément doit être rendu conformément aux pixels de l’appareil ; sinon, <see langword="false" />. La valeur par défaut déclarée au niveau de <see cref="T:System.Windows.UIElement" /> est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez définir cette propriété sur `true` sur votre élément racine pour activer le pixel aligner rendu tout au long de l’interface utilisateur. Pour les appareils fonctionnant à supérieure à 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel aligner rendu peut réduire les artefacts visuels d’anticrénelage à proximité des lignes pleines seule unité.  
  
 Cas hérité par <xref:System.Windows.FrameworkElement> ou toute classe dérivée, <xref:System.Windows.FrameworkElement> substitue les métadonnées pour cette propriété de dépendance définir le <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> propriété de métadonnées à `true`. Ce qui en découle est que seul l’élément extérieur d’une sous-arborescence doit spécifier <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> comme `true`, et tous les éléments enfants de la sous-arborescence signalera puis <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> comme `true` et aura la <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> effet visuel.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970908(v=vs.90)">Pixels de l’alignement dans les Applications WPF</related>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SnapsToDevicePixelsProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton du stylet est enfoncé avec le pointeur sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusButtonDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusButtonDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusButtonDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le bouton du stylet est relâché avec le pointeur sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusButtonUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusButtonUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusButtonUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet touche le numériseur alors qu’il est au-dessus de l’élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusDown> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusDown> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le stylet entre dans les limites de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> est un [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) qui utilise la gestion de stratégie de routage d’événement direct. Les événements routés directs ne sont pas déclenchés sur un itinéraire. au lieu de cela, ils sont gérés dans le même élément dans lequel ils sont déclenchés. Toutefois, ils activent d’autres aspects du comportement de l’événement routé, telles que les déclencheurs d’événements dans les styles.  
  
 Bien que <xref:System.Windows.UIElement.StylusEnter> littéralement, effectue le suivi lorsque le stylet entre dans les limites d’un élément, cet événement plus signale que le <xref:System.Windows.UIElement.IsStylusOver%2A> valeur de propriété est devenue `false` à `true` sur cet élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusEnter> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusEnter> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusEnter%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet se déplace au-dessus d’un élément sans réellement toucher le numériseur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusInAirMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusInAirMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusInAirMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet est suffisamment près du numériseur pour être détecté quand il se trouve au-dessus de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusInRange> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusInRange> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusInRange%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le stylet quitte les limites de l'élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> est un [événement routé](~/docs/framework/wpf/advanced/routed-events-overview.md) qui utilise la gestion de stratégie de routage d’événement direct. Les événements routés directs ne sont pas déclenchés sur un itinéraire. au lieu de cela, ils sont gérés dans le même élément dans lequel ils sont déclenchés. Toutefois, ils activent d’autres aspects du comportement de l’événement routé, telles que les déclencheurs d’événements dans les styles.  
  
 Bien que <xref:System.Windows.UIElement.StylusLeave> littéralement, effectue le suivi lorsque le stylet quitte les limites d’un élément, cet événement plus signale que le <xref:System.Windows.UIElement.IsStylusOver%2A> valeur de propriété est devenue `true` à `false` sur cet élément.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusLeave> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusLeave> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusLeave%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet se déplace sur cet élément. Le stylet doit se déplacer alors qu’il est sur le numériseur pour déclencher cet événement. Sinon, <see cref="E:System.Windows.UIElement.StylusInAirMove" /> est déclenché à la place.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusMove> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusMove> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand le stylet est trop éloigné du numériseur pour être détecté, alors qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusOutOfRange> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusOutOfRange> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StylusPlugIns : System.Windows.Input.StylusPlugIns.StylusPlugInCollection" Usage="System.Windows.UIElement.StylusPlugIns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de tous les objets de plug-in (personnalisation) du stylet associés à cet élément.</summary>
        <value>Collection de plug-in de stylet, sous forme de collection spécialisée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un exemple d’un contrôle qui remplit cette collection est <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> Ajoute le <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> comme un élément de collection, ce qui permet la <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> pour interagir avec l’entrée du stylet et produire le rendu unique en réponse à stylet pilotée par événements.  
  
 Pour plus d’informations sur la création de plug-ins personnalisés qui peut recevoir et interpréter l’entrée du stylet, consultez [interception d’entrée à partir du stylet](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> de l’instance et l’ajoute à la <xref:System.Windows.UIElement.StylusPlugIns%2A> collection pour un contrôle de gestion de l’encre personnalisé.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un utilisateur exécute un mouvement du stylet parmi plusieurs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les mouvements de stylet, consultez <xref:System.Windows.Input.SystemGesture>.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusSystemGesture> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusSystemGesture> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’utilisateur lève le stylet du numériseur alors qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement crée un alias pour le <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.StylusUp> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.StylusUp> événements sont attachés à sous-jacent <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
 Tactile, souris et entrée du stylet existent dans une relation particulière. Pour plus d’informations, consultez [vue d’ensemble de l’entrée](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnStylusUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque cet élément recueille du texte indépendamment du périphérique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Cet événement peut déjà être marqué comme géré par les implémentations internes des contrôles composés. Consultez la Remarque ci-dessous.  
  
 Le <xref:System.Windows.UIElement.TextInput> événement peut déjà être marqué comme géré par les implémentations internes des contrôles composés. Par exemple, un <xref:System.Windows.Controls.TextBox> est un contrôle composé où le <xref:System.Windows.UIElement.TextInput> événement est déjà marqué comme géré ; dans sa composition. Contrôles pour cela, car le contrôle doit interpréter certains types d’entrée, telles que les touches de direction, comme ayant une signification particulière pour ce contrôle. Si vous utilisez <xref:System.Windows.UIElement.PreviewTextInput> en tant que l’événement auquel vous attachez des gestionnaires pour l’entrée de texte, vous pouvez recevoir les meilleurs résultats. Cette technique permet de contourner la plupart des cas où la composition de contrôle a déjà marqué cet événement comme géré et empêche votre gestionnaire de réception de l’événement le long de l’itinéraire d’événement.  
  
 Le <xref:System.Windows.UIElement.TextInput> événement permet à un composant ou une application à l’écoute pour l’entrée de texte de manière indépendante du périphérique. Le clavier est le moyen principal de <xref:System.Windows.UIElement.TextInput>, mais peuvent également déclencher des voix, l’écriture manuscrite et autres périphériques d’entrée <xref:System.Windows.UIElement.TextInput>.  
  
 En raison des combinaisons de touches - dans les claviers par défaut ou à travers des éditeurs de méthode d’entrée - plusieurs événements de clés peuvent déclencher un seul événement d’entrée de texte.  
  
 Cet événement crée un alias pour le <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> joint des événements pour cette classe, afin que <xref:System.Windows.UIElement.TextInput> fait partie de la classe liste des membres lorsque <xref:System.Windows.UIElement> est hérité comme élément de base. Gestionnaires d’événements qui sont attachés à la <xref:System.Windows.UIElement.TextInput> événements sont attachés à sous-jacent <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> événement attaché et reçoivent la même instance de données d’événement.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.TextInputEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Substituer <xref:System.Windows.UIElement.OnTextInput%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les identificateurs d’événements routés sont créés quand les événements routés sont inscrits. Ces identificateurs contiennent un nom identificateur, le type de propriétaire, le type de gestionnaire, la stratégie de routage et la méthode utilitaire pour ajouter des propriétaires à l’événement. Vous pouvez utiliser ces identificateurs pour ajouter des gestionnaires de classe.  
  
 Pour plus d’informations sur l’inscription des événements routés, consultez <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Pour plus d’informations sur l’utilisation des identificateurs d’événements routés pour ajouter des gestionnaires de classe, consultez <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’utilisateur touche l’écran avec le doigt sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par défaut, le <xref:System.Windows.UIElement.PreviewTouchDown> et <xref:System.Windows.UIElement.TouchDown> événements ne se produisent pas jusqu'à ce qu’un doigt touche l’écran et se déplace. Appuyez un doigt sur l’écran et maintenant sans le déplacer provoque la presse et maintenez le comportement d’un <xref:System.Windows.Input.Stylus>. Le comportement appuyer et maintenir est équivalent à un clic droit de la souris.  
  
 Pour provoquer le <xref:System.Windows.UIElement.PreviewTouchDown> et <xref:System.Windows.UIElement.TouchDown> événements se produisent dès qu’un doigt touche l’écran, définissez le <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> propriété jointe `false` pour cet élément.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Substituer <xref:System.Windows.UIElement.OnTouchDown%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une entrée tactile se déplace depuis l'extérieur vers l'intérieur des limites de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est toujours déclenché, que le périphérique tactile est capturé pour cet élément ou non.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituer <xref:System.Windows.UIElement.OnTouchEnter%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les périphériques tactiles capturés dans cet élément.</summary>
        <value>Énumération d'objets <see cref="T:System.Windows.Input.TouchDevice" /> capturés dans cet élément.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les périphériques tactiles capturés dans cet élément ou les éléments enfants de son arborescence d'éléments visuels.</summary>
        <value>Énumération d'objets <see cref="T:System.Windows.Input.TouchDevice" /> capturés dans cet élément ou les éléments enfants de son arborescence d'éléments visuels.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les périphériques tactiles qui se trouvent sur cet élément.</summary>
        <value>Énumération d'objets <see cref="T:System.Windows.Input.TouchDevice" /> situés au-dessus de cet élément.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les périphériques tactiles se trouvant sur cet élément ou les éléments enfants de son arborescence d'éléments visuels.</summary>
        <value>Énumération d'objets <see cref="T:System.Windows.Input.TouchDevice" /> se trouvant sur cet élément ou les éléments enfants de son arborescence d'éléments visuels.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'une entrée tactile se déplace depuis l'intérieur vers l'extérieur des limites de cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est toujours déclenché, que le périphérique tactile est capturé pour cet élément ou non.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Stratégie de routage|Direct|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Substituer <xref:System.Windows.UIElement.OnTouchLeave%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand vous déplacez votre doigt sur l’écran pendant qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Substituer <xref:System.Windows.UIElement.OnTouchMove%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand vous soulevez votre doigt de l’écran pendant qu’il se trouve sur cet élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informations sur les événements acheminés  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Stratégie de routage|Propagation|  
|délégué|<xref:System.EventHandler%601> de type <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   L’événement de tunneling correspondant est <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Substituer <xref:System.Windows.UIElement.OnTouchUp%2A> pour implémenter la gestion de classe pour cet événement dans les classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie l'événement acheminé <see cref="E:System.Windows.UIElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="member this.TranslatePoint : System.Windows.Point * System.Windows.UIElement -&gt; System.Windows.Point" Usage="uIElement.TranslatePoint (point, relativeTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">Valeur de point par rapport à cet élément.</param>
        <param name="relativeTo">Élément à convertir dans le point donné.</param>
        <summary>Convertit un point relatif à cet élément en coordonnées relatives à l’élément spécifié.</summary>
        <returns>Valeur de point maintenant relative à l’élément cible et non à cet élément source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En passant `null` pour `relativeTo` est autorisé et indique que les coordonnées doivent être relatif à l’élément racine dans l’arborescence logique auquel appartient cet élément.  
  
 Cette méthode est utilisée pour la traduction des valeurs de point de test d’accès. Appel de cette méthode est principalement utile si vous créez un contrôle et que vous avez besoin traiter l’entrée à un niveau inférieur. Si vous utilisez des contrôles existants, vous pouvez supposer généralement que les contrôles terminés signalent les résultats de test de positionnement traduites correctement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Uid : string with get, set" Usage="System.Windows.UIElement.Uid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’identificateur unique (pour la localisation) de cet élément. Il s’agit d’une propriété de dépendance.</summary>
        <value>Chaîne qui est l’identificateur unique de cet élément.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisé par les concepteurs pour obtenir la `x:Uid` valeur (consultez [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) pour plus d’informations).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.UidProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/81defade-483b-4a89-b76d-9b25bba34010">Attribut x : Uid</related>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UidProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.UidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.Uid" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberSignature Language="F#" Value="member this.UpdateLayout : unit -&gt; unit" Usage="uIElement.UpdateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permet de s'assurer que tous les éléments enfants visuels de cet élément sont correctement mis à jour en vue de la disposition.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous appelez cette méthode, les éléments avec <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` ou <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` appellera spécifiques à un élément <xref:System.Windows.UIElement.MeasureCore%2A> et <xref:System.Windows.UIElement.ArrangeCore%2A> mettre à jour les méthodes, ce qui force la mise en page, et toutes les tailles calculées seront validées.  
  
 Appel de cette méthode n’a aucun effet si la disposition est inchangée, ou si l’état d’agencement ou de mesure d’une disposition n’est pas valide. Toutefois, si la disposition n’est pas valide à l’égard, le <xref:System.Windows.UIElement.UpdateLayout%2A> appel doit rétablir la disposition complète. Par conséquent, vous devez éviter d’appeler <xref:System.Windows.UIElement.UpdateLayout%2A> après chaque modification incrémentielle et mineure dans l’arborescence d’éléments. Le système de disposition effectue la disposition des éléments de manière différée, à l’aide d’un algorithme qui équilibre les performances et les devises, et avec une stratégie de pondération de différer des modifications aux racines jusqu'à ce que tous les éléments enfants sont valides. Vous devez uniquement appeler <xref:System.Windows.UIElement.UpdateLayout%2A> si vous avez absolument besoin de mise à jour des tailles et positions, et uniquement une fois que vous êtes certain que toutes les modifications apportées aux propriétés que vous contrôlez et qui pouvez affecter la disposition sont terminées.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la visibilité [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] de cet élément.  Il s’agit d’une propriété de dépendance.</summary>
        <value>Valeur de l’énumération. La valeur par défaut est <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété affecte la valeur de <xref:System.Windows.UIElement.IsVisible%2A>, ce qui peut déclencher la <xref:System.Windows.UIElement.IsVisibleChanged> événement. Toutefois, <xref:System.Windows.UIElement.IsVisible%2A> a d’autres facteurs qui influencent, par exemple les paramètres de visibilité des parents qui le contiennent.  
  
 Éléments où <xref:System.Windows.UIElement.Visibility%2A> n’est pas <xref:System.Windows.Visibility.Visible> ne participent pas aux événements d’entrée (ou de commandes), n’influent pas sur des passes de mesure ou de réorganisation de la disposition, ne sont pas dans une séquence d’onglet et ne seront pas signalées dans le test de positionnement.  
  
 Cas hérité par <xref:System.Windows.Window> ou ses classes dérivées, <xref:System.Windows.Window> redéfinit la valeur par défaut de cette propriété doit être <xref:System.Windows.Visibility.Collapsed>. Cela a pour effet de ne pas exécuter la passe de mesure de disposition sur initialement créé <xref:System.Windows.Window>, et <xref:System.Windows.UIElement.RenderSize%2A> retourne (0,0). Pour plus d'informations, consultez <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> redéfinit la valeur par défaut pour être <xref:System.Windows.Visibility.Collapsed>, ayant un comportement similaire qui en résulte pour <xref:System.Windows.Controls.Primitives.Popup> et ses classes dérivées.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Informations sur les propriétés de dépendance  
  
|||  
|-|-|  
|Champ d’identificateur|<xref:System.Windows.UIElement.VisibilityProperty>|  
|La valeur des propriétés de métadonnées `true`|Aucun.|  
  
   
  
## Examples  
 L’exemple suivant implémente un gestionnaire qui fait référence à deux boutons nommés différents qui sont destinées à être une paire qui s’excluent mutuellement dans l’interface utilisateur. Avant d’exécuter la logique de programme associée au bouton, le bouton lui-même est défini comme relation <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, et l’autre bouton de la paire est définie sur <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifie la propriété de dépendance <see cref="P:System.Windows.UIElement.Visibility" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>