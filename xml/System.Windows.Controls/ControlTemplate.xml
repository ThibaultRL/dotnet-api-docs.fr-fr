<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="295eb3e206af0ec828c568e6d86ec8ea6a118d4b" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66302045" /></Metadata><TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Spécifie la structure visuelle et les aspects comportementaux d'un <see cref="T:System.Windows.Controls.Control" /> qui peuvent être partagés par plusieurs instances du contrôle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Controls.ControlTemplate> vous permet de spécifier la structure visuelle d’un contrôle. L’auteur du contrôle peut définir la valeur par défaut <xref:System.Windows.Controls.ControlTemplate> et l’auteur de l’application peut substituer le <xref:System.Windows.Controls.ControlTemplate> pour reconstruire la structure visuelle du contrôle.  
  
 Création de modèles de contrôle est une des nombreuses fonctionnalités offertes par le [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styles et modèles. Le modèle de style et création de modèles vous offre une flexibilité exceptionnelle que dans de nombreux cas il est inutile d’écrire vos propres contrôles. Si vous êtes un auteur de l’application qui souhaite modifier la visualisation de votre contrôle ou remplacer le <xref:System.Windows.Controls.ControlTemplate> d’un contrôle existant, consultez le [Styling and Templating](~/docs/framework/wpf/controls/styling-and-templating.md) rubrique pour une présentation détaillée et des exemples.  
  
 Si vous écrivez votre propre contrôle, consultez « Création d’un contrôle personnalisé » dans le [vue d’ensemble de la création de contrôles](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
 Un <xref:System.Windows.Controls.ControlTemplate> est destinée à être une unité autonome de détails d’implémentation est invisible aux utilisateurs extérieurs et aux objets, y compris les styles. Le seul moyen de manipuler le contenu du modèle de contrôle provient dans le même modèle de contrôle.  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```xaml
<ControlTemplate>  
  <VisualTreeRootNode>
    VisualTreeNodeContents  
  </VisualTreeRootNode>  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *ControlTemplate*  
 Élément objet pour <xref:System.Windows.Controls.ControlTemplate> ou une classe dérivée.  
  
 *VisualTreeRootNode*  
 Un seul [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] élément en tant qu’enfant immédiat de la <xref:System.Windows.Controls.ControlTemplate> (ou une classe dérivée). Modèles doivent avoir un nœud racine unique. Afin de générer un modèle utile, l’élément choisi en tant que *VisualTreeRootNode* est prévu pour prendre en charge un modèle de contenu propre, souvent un modèle qui prend en charge de plusieurs éléments enfants.  
  
 *VisualTreeNodeContents*  
 Un ou plusieurs éléments qui complètent le modèle prévu. Si l’élément choisi en tant que *VisualTreeRootNode* prend uniquement en charge un seul enfant, puis il peut uniquement être un élément déclaré en tant que *VisualTreeNodeContents*. Il est également possible (bien que rare) de fournir du contenu si choisi *VisualTreeRootNode* prend en charge une propriété de contenu de texte.  
  
   
  
## Examples  
 Le suivant un <xref:System.Windows.Controls.Button> <xref:System.Windows.Style> qui définit le <xref:System.Windows.Controls.ControlTemplate> d’un <xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 Lorsque cela est appliqué, le <xref:System.Windows.Controls.Button> apparaît comme un <xref:System.Windows.Shapes.Ellipse>:  
  
 ![Exemple de ControlTemplate de bouton](~/add/media/stylingintro-buttoncontroltemplate.png "exemple de ControlTemplate de bouton")  
  
 Lorsque vous définissez la <xref:System.Windows.Controls.Control.Template%2A> propriété d’un <xref:System.Windows.Controls.Control> vers un nouveau <xref:System.Windows.Controls.ControlTemplate> comme dans l’exemple ci-dessus, vous remplacez l’ensemble du modèle. Ce que le <xref:System.Windows.Controls.Button> ressemble lorsqu’il a le focus ou enfoncé fait partie de l’apparence par défaut du bouton que vous remplacez. Par conséquent, selon vos besoins, vous souhaiterez mettre dans votre définition de votre quel bouton doit ressembler quand il est appuyé sur celui-ci et ainsi de suite, comme dans l’exemple suivant :  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 Notez que cet exemple référence des ressources qui ne sont pas affichés ici. Pour voir l’exemple complet, consultez [Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating) (Exemple de style avec ControlTemplates). Cet exemple fournit des exemples de modèles de contrôle pour de nombreux contrôles et est le meilleur moyen pour vous familiariser avec la création de modèles de contrôle.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Introduction aux styles et modèles, exemple</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">Type pour lequel ce modèle est prévu.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Controls.ControlTemplate" /> à l'aide du type de cible spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type auquel ce <see cref="T:System.Windows.Controls.ControlTemplate" /> est destiné.</summary>
        <value>La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous avez un autonome <xref:System.Windows.Controls.ControlTemplate> dans la section de ressources avec le <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> propriété définie sur le type, le <xref:System.Windows.Controls.ControlTemplate> ne s’appliquent pas à ce type automatiquement. Au lieu de cela, vous devez spécifier un `x:Key` et appliquer explicitement le modèle.  
  
 Notez également que le <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> propriété est requise sur un <xref:System.Windows.Controls.ControlTemplate> si la définition du modèle contient un <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>Utilisation d'attributs XAML  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *typeName*  
 Le nom de type de la classe. Pour faire référence à la <xref:System.Type> nom de la classe, utilisez le [Extensions de balisage et WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de cette propriété :  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 L’exemple ci-dessus utilise la ressource suivante :  
  
  
  
 Pour voir l’exemple complet, consultez [Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating) (Exemple de style avec ControlTemplates).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> ne doit pas avoir la valeur <see langword="null" /> si la définition du modèle contient un <see cref="T:System.Windows.Controls.ContentPresenter" />.</exception>
        <exception cref="T:System.ArgumentException">Les types spécifiés ne sont pas valides. Le <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> d'un <see cref="T:System.Windows.Controls.ControlTemplate" /> doit être un <see cref="T:System.Windows.Controls.Control" />, une <see cref="T:System.Windows.Controls.Page" /> ou une <see cref="T:System.Windows.Navigation.PageFunctionBase" />, ou bien hériter de ces éléments.</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection d'objets <see cref="T:System.Windows.TriggerBase" /> qui appliquent des modifications de propriété ou effectuent des actions selon des conditions spécifiées.</summary>
        <value>Collection d'objets <see cref="T:System.Windows.TriggerBase" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Utilisation des éléments de propriété XAML  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valeurs XAML  
 *oneOrMoreTriggers*  
 Un ou plusieurs <xref:System.Windows.TriggerBase> objets (ceux-ci sont généralement un <xref:System.Windows.Trigger>).  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de cette propriété :  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 L’exemple ci-dessus utilise les ressources suivantes :  
  
  
  
  
 Pour voir l’exemple complet, consultez [Styling with ControlTemplates Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Styles%20&%20Templates/IntroToStylingAndTemplating) (Exemple de style avec ControlTemplates).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010">Introduction aux styles et modèles, exemple</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">Élément auquel est appliqué le modèle.</param>
        <summary>Vérifie le parent basé sur des modèles par rapport à un ensemble de règles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode utilise les règles suivantes :  
  
 1. Le `templatedParent` ne peut pas être de type <xref:System.Windows.FrameworkContentElement>.  
  
 2. Le `templatedParent` ne peut pas être de type <xref:System.Windows.FrameworkElement> qui n’est pas un <xref:System.Windows.Controls.Control>.  
  
 3. Le `templatedParent` ne peut pas être un <xref:System.Windows.Controls.Control> qui n’est pas associé le <xref:System.Windows.Controls.ControlTemplate>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="templatedParent" /> ne doit pas avoir la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Vous devez associer le <see cref="T:System.Windows.Controls.ControlTemplate" /> à un <see cref="T:System.Windows.Controls.Control" /> en affectant une valeur à la propriété <see cref="P:System.Windows.Controls.Control.Template" /> avant d'utiliser le <see cref="T:System.Windows.Controls.ControlTemplate" /> sur le <see cref="T:System.Windows.Controls.Control" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
