<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91e0560293f80b6e0c78d1e44d420ebc68719bd9" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66005662" /></Metadata><TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gère l'appartenance (membership) de l'utilisateur aux rôles pour vérifier ses autorisations dans une application ASP.NET. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestion des rôles ASP.NET vous permet de gérer l’autorisation pour votre application basée sur des groupes d’utilisateurs, connu en tant que rôles. En affectant des utilisateurs aux rôles, vous pouvez contrôler l’accès à différentes parties ou des fonctionnalités de votre application Web spécifiant l’autorisation basée sur le nom d’utilisateur. Par exemple, une application d’employé peut avoir des rôles, tels que les gestionnaires, les employés, les directeurs, etc., où les privilèges différents sont spécifiés pour chaque rôle.  
  
 Les utilisateurs peuvent appartenir à plusieurs rôles. Par exemple, si votre site est un forum de discussion, certains utilisateurs peuvent être dans le rôle de membres et les modérateurs. Vous pouvez définir chaque rôle pour avoir des privilèges différents sur le site, et un utilisateur qui est dans les deux rôles aura ensuite les deux ensembles de privilèges.  
  
 Pour activer la gestion des rôles pour votre application ASP.NET, utilisez le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément de la `system.web` section dans le fichier Web.config pour votre application, comme indiqué dans l’exemple suivant.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Vous pouvez spécifier des règles d’autorisation dans le fichier de configuration pour votre application Web ou par programmation dans votre code. Par exemple, ce qui suit [autorisation](https://msdn.microsoft.com/library/2d3d9bf6-f914-4c30-ad03-32eea98fa612) section d’un fichier Web.config nécessite que les utilisateurs de se connecter (en refusant des utilisateurs anonymes), puis permet uniquement aux utilisateurs dans le rôle administrateurs aient accès.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 Si vous utilisez la `authorization` section dans le fichier Web.config de votre application pour spécifier l’autorisation basée sur les rôles, les utilisateurs de votre application doit fournir une identité d’utilisateur authentifié. Vous pouvez authentifier les utilisateurs à l’aide de l’authentification Windows ou des formulaires. Les utilisateurs anonymes ne peuvent pas être attribués à un rôle. Rôles peuvent être utilisés indépendamment ou conjointement avec ASP.NET <xref:System.Web.Security.Membership> classes.  
  
 Pour vérifier l’appartenance au rôle par programme, vous pouvez utiliser la <xref:System.Web.Security.Roles> classe ou le <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> propriété avec le <xref:System.Web.Security.Roles.IsUserInRole%2A> (méthode), ou vous pouvez utiliser la <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> propriété avec le <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> (méthode). Pour l’exemple de code qui vérifie l’appartenance au rôle par programme, consultez la section exemple dans cette rubrique.  
  
 Le <xref:System.Web.Security.Roles> classe vous permet également de créer et supprimer des rôles et ajouter ou supprimer des utilisateurs des rôles.  
  
> [!NOTE]
>  Si vous avez configuré votre application pour utiliser le <xref:System.Web.Security.WindowsTokenRoleProvider> (classe), vous ne pouvez pas modifier les rôles ou l’appartenance au rôle. Le <xref:System.Web.Security.WindowsTokenRoleProvider> classe vérifie l’appartenance aux groupes de sécurité Windows uniquement. Dans ce cas, vous devez utiliser Gestion des comptes utilisateur Windows plutôt que les rôles ASP.NET pour créer et supprimer des groupes et gérer l’appartenance au groupe.  
  
 Vous pouvez stocker des informations de rôle dans plusieurs sources de données.  
  
-   Vous pouvez utiliser la <xref:System.Web.Security.WindowsTokenRoleProvider> classe à récupérer les informations de rôle en fonction de l’appartenance aux groupes de Windows.  
  
-   Vous pouvez stocker des informations de rôle dans une base de données SQL Server à l’aide de la <xref:System.Web.Security.SqlRoleProvider> classe.  
  
-   Si vous avez des informations de rôle existant, ou que vous souhaitez stocker les informations de rôle dans et récupérer des informations de rôle à partir d’une source de données autre que Windows, d’un Store de l’autorisation ou de SQL Server, vous pouvez implémenter un fournisseur de rôle personnalisé en créant une classe qui hérite de la <xref:System.Web.Security.RoleProvider> classe abstraite. Pour plus d’informations, consultez [implémentation d’un fournisseur de rôle](https://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d).  
  
 Si le navigateur de l’utilisateur accepte les cookies, vous pouvez stocker des informations de rôle pour cet utilisateur dans un cookie sur l’ordinateur de l’utilisateur. Sur chaque demande de page, ASP.NET lit les informations de rôle pour cet utilisateur à partir du cookie. Cela peut améliorer les performances de l’application en réduisant la quantité des communications avec la source de données pour récupérer des informations de rôle. Si les informations de rôle pour un utilisateur sont trop longues pour stocker dans un cookie, ASP.NET stocke simplement les informations de rôle des derniers fichiers utilisées dans le cookie et recherche les informations de rôle supplémentaires dans la source de données en fonction des besoins. Si le navigateur de l’utilisateur ne prend pas en charge les cookies ou les cookies sont désactivés, les informations de rôle ne sont pas mis en cache dans un cookie.  
  
 Vous pouvez améliorer la fiabilité des noms de rôles mis en cache dans un cookie en spécifiant un <xref:System.Web.Security.Roles.CookieProtectionValue%2A> propriété lorsque vous configurez les rôles ASP.NET. La valeur par défaut <xref:System.Web.Security.Roles.CookieProtectionValue%2A> est `All`, qui chiffre les noms de rôles dans le cookie et valide le fait que le contenu du cookie n’a pas été modifié.  
  
   
  
## Examples  
 L’exemple suivant montre le fichier Web.config d’une application configurée pour utiliser l’appartenance d’ASP.NET et les rôles ASP.NET et utiliser le <xref:System.Web.Security.SqlRoleProvider> pour stocker les informations d’appartenance et de rôle dans une base de données SQL Server. Les utilisateurs sont authentifiés avec l’authentification par formulaire et seuls les utilisateurs dans le rôle Administrateurs sont autorisés à accéder à l’application.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 L’exemple de code suivant vérifie par programme si l’utilisateur connecté est dans le rôle Administrateurs avant d’autoriser l’utilisateur d’afficher les rôles d’autres utilisateurs.  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Tableau de chaînes contenant les noms d'utilisateurs à ajouter au rôle spécifié.</param>
        <param name="roleName">Rôle auquel ajouter les noms d'utilisateurs spécifiés.</param>
        <summary>Ajoute les utilisateurs spécifiés au rôle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.AddUsersToRole%2A> méthode appelle le fournisseur de rôle par défaut pour associer les utilisateurs spécifiés au rôle spécifié dans la source de données.  
  
 Si votre application utilise le <xref:System.Web.Security.SqlRoleProvider> classe, les mises à jour de la base de données qui sont effectuées pendant l’appel à la <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> méthode sont effectuées dans une transaction. Si une erreur s’est produite, par exemple un nom d’utilisateur qui se trouve déjà dans un rôle spécifié, la transaction est annulée et aucune mise à jour n’est effectuées.  
  
> [!NOTE]
>  Noms d’utilisateur et les noms de rôles ne peuvent pas contenir de virgules.  
  
   
  
## Examples  
 L’exemple de code suivant ajoute un ou plusieurs utilisateurs à un rôle ou supprime un utilisateur d’un rôle basé sur l’entrée d’utilisateur. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.  
  
ou 
Un des éléments de <paramref name="usernames" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
Un des éléments de <paramref name="usernames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="usernames" /> contient un élément en double.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Tableau de chaînes contenant les noms d'utilisateurs à ajouter aux rôles spécifiés.</param>
        <param name="roleNames">Tableau de chaînes contenant le nom des rôles auxquels les noms d’utilisateurs spécifiés doivent être ajoutés.</param>
        <summary>Ajoute les utilisateurs spécifiés aux rôles spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.AddUsersToRoles%2A> méthode appelle le fournisseur de rôle par défaut pour associer les utilisateurs spécifiés aux rôles spécifiés dans la source de données.  
  
 Si votre application utilise le <xref:System.Web.Security.SqlRoleProvider> classe, les mises à jour de la base de données qui sont effectuées pendant l’appel à la <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> méthode sont effectuées dans une transaction. Si une erreur s’est produite, par exemple un nom d’utilisateur qui se trouve déjà dans un rôle spécifié, la transaction est annulée et aucune mise à jour n’est effectuées.  
  
> [!NOTE]
>  Noms d’utilisateur et les noms de rôles ne peuvent pas contenir de virgules.  
  
   
  
## Examples  
 L’exemple de code suivant ajoute un ou plusieurs utilisateurs à un ou plusieurs rôles. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Un des rôles dans <paramref name="roleNames" /> est <see langword="null" />.  
  
ou 
L'un des utilisateurs de <paramref name="usernames" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un des rôles dans <paramref name="roleNames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
Un des utilisateurs dans <paramref name="usernames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="roleNames" /> contient un élément en double.  
  
- ou - 
 <paramref name="usernames" /> contient un élément en double.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nom de l'utilisateur à ajouter au rôle spécifié.</param>
        <param name="roleName">Rôle auquel ajouter le nom d'utilisateur spécifié.</param>
        <summary>Ajoute l'utilisateur spécifié au rôle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.AddUserToRole%2A> méthode appelle le fournisseur de rôle par défaut pour associer l’utilisateur spécifié du rôle spécifié dans la source de données.  
  
> [!NOTE]
>  Noms d’utilisateur et les noms de rôles ne peuvent pas contenir de virgules.  
  
   
  
## Examples  
 L’exemple de code suivant ajoute un utilisateur à un rôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="username" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="username" /> est une chaîne vide ou contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.  
  
ou 
L'utilisateur est déjà assigné au rôle spécifié.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">Nom de l'utilisateur à ajouter aux rôles spécifiés.</param>
        <param name="roleNames">Tableau de chaînes contenant le nom de l'utilisateur à ajouter aux rôles.</param>
        <summary>Ajoute l'utilisateur spécifié aux rôles spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.AddUserToRoles%2A> méthode appelle le fournisseur de rôle par défaut pour associer l’utilisateur spécifié des rôles spécifiés dans la source de données.  
  
 Si votre application utilise le <xref:System.Web.Security.SqlRoleProvider> classe, les mises à jour de la base de données qui sont effectuées pendant l’appel à la <xref:System.Web.Security.Roles.AddUserToRoles%2A> méthode sont effectuées dans une transaction. Si une erreur s’est produite, par exemple un nom d’utilisateur qui se trouve déjà dans un rôle spécifié, la transaction est annulée et aucune mise à jour n’est effectuées.  
  
> [!NOTE]
>  Noms d’utilisateur et les noms de rôles ne peuvent pas contenir de virgules.  
  
   
  
## Examples  
 L’exemple de code suivant ajoute un utilisateur à un ou plusieurs rôles. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Un des rôles dans <paramref name="roleNames" /> est <see langword="null" />.  
  
ou 
 <paramref name="username" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un des rôles dans <paramref name="roleNames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="username" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="roleNames" /> contient un élément en double.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'application pour laquelle stocker ou récupérer des informations de rôle.</summary>
        <value>Nom de l'application pour laquelle stocker et récupérer des informations de rôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété est utilisée par la <xref:System.Web.Security.Roles> classe à associer des utilisateurs et des rôles à différentes applications. Cela permet à plusieurs applications à utiliser la même source de données pour stocker des informations d’utilisateur et rôle sans provoquer de conflits entre les noms d’utilisateur en double ou les noms de rôles en double. Plusieurs applications ASP.NET peuvent utiliser la même source de données en spécifiant la même valeur dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété. Vous pouvez définir le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété par programmation, ou vous pouvez définir il façon déclarative dans le fichier de configuration pour l’application Web à l’aide de la `applicationName` attribut.  
  
 Si votre application Web utilise le <xref:System.Web.Security.SqlRoleProvider> classe et une valeur n’est pas spécifié pour le `applicationName` attribut dans le fichier de configuration, le <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> valeur de propriété pour actuel <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> propriété est utilisée.  
  
> [!CAUTION]
>  Car une instance de fournisseur de rôle par défaut unique est utilisée pour toutes les demandes prises en charge par un <xref:System.Web.HttpApplication> de l’objet, plusieurs demandes peuvent s’exécuter simultanément et tentez de définir la <xref:System.Web.Security.Roles.ApplicationName%2A> valeur de propriété. Le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété n’est pas thread-safe pour les écritures multiples et la modification du <xref:System.Web.Security.Roles.ApplicationName%2A> valeur de propriété peut entraîner un comportement inattendu pour plusieurs utilisateurs d’une application. Vous devez éviter d’écrire du code pour permettre aux utilisateurs de définir la <xref:System.Web.Security.Roles.ApplicationName%2A> propriété, sauf si nécessaire. Un exemple d’une application où le paramètre le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété peut être requise est une application administrative qui gère les données de rôle pour plusieurs applications. Ce type d’application doit être une application pour utilisateur unique et non une application Web.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et définit les `applicationName` attribut `MyApplication`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les rôles de l'utilisateur en cours sont mis en cache dans un cookie.</summary>
        <value><see langword="true" /> si les rôles de l'utilisateur en cours sont mis en cache dans un cookie; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> propriété est définie sur `true` dans le fichier Web.config, les informations de rôle pour chaque utilisateur sont stockées dans un cookie. Lors de la gestion des rôles vérifie si un utilisateur est dans un rôle particulier, le cookie de rôles est vérifié avant que le fournisseur de rôles est appelé pour vérifier la liste des rôles au niveau de la source de données. Le cookie est mis à jour dynamiquement pour mettre en cache les noms de rôle plus récemment validés.  
  
 Vous pouvez améliorer la fiabilité des noms de rôles mis en cache dans un cookie en spécifiant un <xref:System.Web.Security.Roles.CookieProtectionValue%2A> propriété lorsque vous configurez les rôles ASP.NET. La valeur par défaut <xref:System.Web.Security.Roles.CookieProtectionValue%2A> est `All`, qui chiffre les noms de rôles dans le cookie et valide le fait que le contenu du cookie n’a pas été modifié.  
  
> [!NOTE]
>  Étant donné que les noms de rôles peuvent être mis en cache en dehors de la source de données, il est possible que les modifications apportées à la gestion des rôles au niveau de la source de données ne soient pas répercutées dans les valeurs mises en cache. Dans ce cas, l’utilisateur doit fermer et rouvrir son navigateur pour effacer la valeur du cookie mis en cache.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et définit les `cacheRolesInCookie` attribut `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom du cookie contenant les noms de rôles en cache.</summary>
        <value>Nom du cookie contenant les noms de rôles en cache. La valeur par défaut est « .ASPXROLES ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier le nom du cookie où les rôles sont mis en cache pour votre application en définissant le `cookieName` attribut dans le fichier Web.config de votre application ASP.NET. Cela est utile lorsque vous souhaitez identifier de manière unique un cookie pour votre application ou lorsqu’un cookie est partagé entre plusieurs applications, comme un cookie de domaine.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et affecte le `cookieName` attribut. ASPROLES.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le chemin d’accès pour le cookie contenant les noms de rôles en cache.</summary>
        <value>Chemin d'accès du cookie contenant les noms de rôles en cache. La valeur par défaut est « / ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier le chemin d’accès du cookie où les rôles sont mis en cache pour votre application en définissant le `cookiePath` attribut dans le fichier Web.config de votre application ASP.NET. Pour plus d’informations sur les chemins d’accès du cookie, consultez <xref:System.Web.HttpCookie.Path%2A>.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et définit les `cookiePath` /MyApplication l’attribut.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant comment les noms de rôles mis en cache dans un cookie sont protégés.</summary>
        <value>L'une des valeurs d'énumération <see cref="T:System.Web.Security.CookieProtection" /> indiquant comment les noms de rôles mis en cache dans un cookie sont protégés. La valeur par défaut est <see langword="All" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier la protection du cookie où les rôles sont mis en cache pour votre application en définissant le `cookieProtection` attribut dans le fichier Web.config de votre application ASP.NET. Le `cookieProtection` attribut prend un <xref:System.Web.Security.CookieProtection> valeur d’énumération qui indique si les noms de rôles sont chiffrés, validé, deux ou aucun.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et jeux `cookieProtection` attribut `Encrypted`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le cookie contenant les noms de rôles requiert une connexion SSL pour être retourné au serveur.</summary>
        <value><see langword="true" /> si une connexion SSL est nécessaire pour retourner le cookie contenant les noms de rôles au serveur ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier si SSL (Secure Sockets Layer) est requise pour retourner le cookie contenant les noms de rôles au serveur dans votre application en définissant le `cookieRequireSSL` attribut dans le fichier Web.config de votre application ASP.NET. Pour plus d'informations, consultez <xref:System.Web.HttpCookie.Secure%2A>.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et jeux `cookieRequireSSL` à `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indique si la date et l'heure d'expiration du cookie contenant les noms de rôles seront périodiquement réinitialisées.</summary>
        <value><see langword="true" /> si la date et l'heure d'expiration du cookie des noms du rôle seront périodiquement réinitialisées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier si date d’expiration du cookie de noms de rôles et l’heure est réinitialisées avec chaque réponse à l’aide de la `cookieSlidingExpiration` attribut dans le fichier Web.config de votre application ASP.NET. Si `true`, l’expiration du cookie sera défini initialement à la date et heure actuelles ainsi que les <xref:System.Web.Security.Roles.CookieTimeout%2A> en quelques minutes. Pendant que l’utilisateur continue à utiliser activement l’application ASP.NET, la date d’expiration et l’heure du cookie sont automatiquement actualisées s’il est inférieur à la moitié de la <xref:System.Web.Security.Roles.CookieTimeout%2A> restantes. Pour plus d'informations, consultez la propriété <xref:System.Web.HttpCookie.Expires%2A>.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et définit les <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> propriété `false`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de minutes avant l'expiration du cookie de rôles.</summary>
        <value>Entier qui spécifie le nombre de minutes avant l'expiration du cookie de rôles. La valeur par défaut est 30 minutes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.CookieTimeout%2A> propriété est utilisée lorsque le <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> propriété est `true` et spécifie le time-to-live en quelques minutes pour le cookie de rôles. Pour définir le <xref:System.Web.Security.Roles.CookieTimeout%2A> valeur, ajoutez le `cookieTimeout` attribut le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans le fichier Web.config de fichiers pour l’application ASP.NET et spécifiez une valeur entière.  
  
 Si <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> est `false`, cette propriété est ignorée.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et affecte le <xref:System.Web.Security.Roles.CookieTimeout%2A> propriété à 30 minutes.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le cookie des noms de rôles se fonde sur la session ou est persistant.</summary>
        <value><see langword="true" /> si le cookie de noms de rôles est un cookie persistant ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> valeur de propriété est définie dans la configuration pour une application ASP.NET en utilisant le `createPersistentCookie` attribut de la [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément de configuration.  
  
 Lorsque `false`, le cookie de noms de rôles est un cookie de session, autrement dit, le cookie est perdu lorsque le navigateur est fermé. Lorsque `true`, le cookie de noms de rôles est un cookie persistant qui est disponible dans plusieurs sessions de navigateur. La date d’expiration du cookie persistant et l’heure sont définies sur la date et heure actuelles ainsi que les <xref:System.Web.Security.Roles.CookieTimeout%2A> valeur en minutes.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nom du rôle à créer.</param>
        <summary>Ajoute un nouveau rôle à la source de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.CreateRole%2A> méthode ajoute un nom de rôle à la source de données. <xref:System.Web.Security.Roles.CreateRole%2A> appelle le <xref:System.Web.Security.RoleProvider.CreateRole%2A> méthode du fournisseur de rôle par défaut pour ajouter le rôle spécifié à la source de données.  
  
> [!NOTE]
>  Les noms de rôle ne peut pas contenir de virgules.  
  
   
  
## Examples  
 L’exemple de code suivant crée un nouveau rôle dans la source de données. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide.  
  
- ou - 
 <paramref name="roleName" /> contient une virgule.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime le cookie contenant les noms de rôles en cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.DeleteCookie%2A> méthode efface le contenu du cookie qui est utilisé pour le cache des noms de rôle. Pour plus d’informations sur la mise en cache des noms de rôles, consultez <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.  
  
   
  
## Examples  
 Le code suivant exemple appelle la <xref:System.Web.Security.Roles.DeleteCookie%2A> méthode pour effacer les mises en cache des noms de rôle lorsqu’un utilisateur se connecte. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Supprime un rôle de la source de données.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nom du rôle à supprimer.</param>
        <summary>Supprime un rôle de la source de données.</summary>
        <returns><see langword="true" /> si <paramref name="roleName" /> a été supprimé de la source de données ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.DeleteRole%2A> méthode supprime un nom de rôle à partir de la source de données. <xref:System.Web.Security.Roles.DeleteRole%2A> appelle le <xref:System.Web.Security.RoleProvider.DeleteRole%2A> méthode du fournisseur de rôle par défaut pour supprimer le rôle spécifié à partir de la source de données.  
  
 Si le rôle est identifié par le `roleName` paramètre a un ou plusieurs membres, puis une exception est levée et le rôle ne sera pas supprimé.  
  
   
  
## Examples  
 L’exemple de code suivant supprime un rôle à partir de la source de données. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> possède au moins un membre.  
  
ou 
La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Nom du rôle à supprimer.</param>
        <param name="throwOnPopulatedRole">Si <see langword="true" />, lève une exception si <paramref name="roleName" /> possède au moins un membre.</param>
        <summary>Supprime un rôle de la source de données.</summary>
        <returns><see langword="true" /> si <paramref name="roleName" /> a été supprimé de la source de données ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.DeleteRole%2A> méthode supprime un nom de rôle à partir de la source de données. <xref:System.Web.Security.Roles.DeleteRole%2A> appelle le <xref:System.Web.Security.RoleProvider.DeleteRole%2A> méthode du fournisseur de rôle par défaut pour supprimer le rôle spécifié à partir de la source de données.  
  
 Si `throwOnPopulatedRole` est `true`, puis une exception est levée et le rôle ne sera pas supprimé si le rôle est identifié par le `roleName` paramètre a un ou plusieurs membres. Si `throwOnPopulatedRole` est `false`, le rôle est supprimé si elle est vide ou non.  
  
   
  
## Examples  
 L’exemple de code suivant supprime un rôle à partir de la source de données. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> possède au moins un membre et <paramref name="throwOnPopulatedRole" /> a la valeur <see langword="true" />.  
  
ou 
La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur du domaine du cookie de noms de rôles.</summary>
        <value><see cref="P:System.Web.HttpCookie.Domain" /> du cookie de noms de rôles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.Domain%2A> valeur de propriété est définie dans la configuration pour une application ASP.NET en utilisant le `domain` attribut de la [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément de configuration.  
  
 Si aucune valeur n’est spécifiée dans la configuration pour l’attribut de domaine, le <xref:System.Web.Security.Roles.Domain%2A> retourne de la propriété `null` et le domaine du cookie de noms de rôles par défaut est le comportement de la <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> propriété.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la gestion des rôles est activée pour l'application Web en cours.</summary>
        <value><see langword="true" /> si la gestion des rôles est activée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et définit les `enabled` attribut `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Rôle dans lequel effectuer la recherche.</param>
        <param name="usernameToMatch">Nom d'utilisateur à rechercher.</param>
        <summary>Obtient une liste des utilisateurs figurant dans un rôle spécifié contenant le nom d'utilisateur correspondant au nom spécifié.</summary>
        <returns>Tableau de chaînes contenant le nom de tous les utilisateurs dont le nom d'utilisateur correspond à <paramref name="usernameToMatch" /> et qui sont membres du rôle spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> Retourne une liste d’utilisateurs dans un rôle dont le nom d’utilisateur contient l’équivalent de l’élément `usernameToMatch` pour configuré `applicationName`. Par exemple, si le `usernameToMatch` paramètre est défini sur « utilisateur », alors que les utilisateurs « user1 », « user2 », « utilisateur3 », et ainsi de suite sont retournés. Les utilisateurs sont retournés dans l’ordre alphabétique par nom d’utilisateur.  
  
 Le <xref:System.Web.Security.SqlRoleProvider> effectue sa recherche à l’aide d’une clause LIKE contre le `usernameToMatch` paramètre. Tous les caractères génériques sont pris en charge par SQL Server dans comme clauses peuvent être utilisées dans le `usernameToMatch` valeur du paramètre.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.FindUsersInRole%2A> méthode pour afficher l’appartenance au rôle en fonction de l’utilisateur. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).  
  
- ou - 
 <paramref name="usernameToMatch" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="usernameToMatch" /> est une chaîne vide.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient la liste de tous les rôles pour l'application.</summary>
        <returns>Tableau de chaînes contenant le nom de tous les rôles stockés dans la source de données pour l'application.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.GetAllRoles%2A> les appels de méthode le <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> méthode du fournisseur de rôle par défaut pour obtenir la liste de tous les rôles à partir de la source de données pour une application. Seuls les rôles pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété sont récupérées.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.GetAllRoles%2A> méthode pour obtenir la liste des rôles pour une application et de lier les résultats à un <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> contrôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient une liste des rôles dans lesquels figure l'utilisateur.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient une liste des rôles dans lesquels figure l'utilisateur actuellement connecté.</summary>
        <returns>Tableau de chaînes contenant les noms de tous les rôles dans lesquels figure l'utilisateur actuellement connecté.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.GetRolesForUser%2A> les appels de méthode le <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> méthode du fournisseur de rôle par défaut pour extraire les données les rôles dans lesquels figure l’utilisateur actuellement connecté à la source. L’utilisateur actuellement connecté est identifié par le <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> propriété du courant <xref:System.Web.HttpContext?displayProperty=nameWithType>, ou par <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> environnements d’hébergement pour les non-HTTP. Si aucun utilisateur n’est connecté, une exception sera levée. Seuls les rôles pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété sont récupérées.  
  
 Si <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> est `true`, puis les résultats de la <xref:System.Web.Security.Roles.GetRolesForUser%2A> méthode peut être retournée à partir du cache des rôles plutôt que le fournisseur de rôles spécifié.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.GetRolesForUser%2A> méthode pour récupérer la liste des rôles pour un utilisateur spécifié et le lier à un <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> contrôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Aucun utilisateur n'est actuellement connecté.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Utilisateur pour lequel retourner une liste de rôles.</param>
        <summary>Obtient une liste des rôles dans lesquels figure l'utilisateur.</summary>
        <returns>Tableau de chaînes contenant le nom de tous les rôles dans lesquels figure l'utilisateur spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.GetRolesForUser%2A> les appels de méthode le <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> méthode du fournisseur de rôle par défaut pour extraire les données les rôles dont l’utilisateur est dans la source. Seuls les rôles pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété sont récupérées.  
  
 Si `username` est égal à l’utilisateur connecté et <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> est `true`, les résultats de la <xref:System.Web.Security.Roles.GetRolesForUser%2A> méthode peut être retournée à partir du cache des rôles plutôt que le texte spécifié <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.GetRolesForUser%2A> méthode pour récupérer la liste des rôles pour un utilisateur spécifié et le lier à un <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> contrôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Rôle pour lequel obtenir la liste des utilisateurs.</param>
        <summary>Obtient une liste des utilisateurs du rôle spécifié.</summary>
        <returns>Tableau de chaînes contenant le nom de tous les utilisateurs membres du rôle spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.GetUsersInRole%2A> les appels de méthode le <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> méthode du fournisseur de rôle par défaut pour récupérer les noms d’utilisateur associés à un rôle à partir de la source de données. Seuls les rôles pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété sont récupérées.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.GetUsersInRole%2A> méthode pour obtenir la liste des utilisateurs dans un rôle particulier et lie les résultats à un <xref:System.Web.UI.WebControls.GridView> contrôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtient une valeur indiquant si un utilisateur figure dans le rôle spécifié.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nom du rôle dans lequel effectuer la recherche.</param>
        <summary>Obtient une valeur indiquant si l'utilisateur actuellement connecté figure dans le rôle spécifié. L’API est censée être appelée uniquement dans le contexte d’un thread de requête ASP.NET, et dans ce cas d’utilisation autorisée elle est sécurisée (thread-safe).</summary>
        <returns><see langword="true" /> si l'utilisateur actuellement connecté figure dans le rôle spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.IsUserInRole%2A> les appels de méthode le <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> méthode du fournisseur de rôle par défaut pour déterminer si l’utilisateur actuellement connecté est associé à un rôle à partir de la source de données pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété. L’utilisateur actuellement connecté est identifié par le <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> propriété du courant <xref:System.Web.HttpContext?displayProperty=nameWithType>, ou par <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> environnements d’hébergement pour les non-HTTP. Si aucun utilisateur n’est connecté, une exception sera levée. Seuls les rôles pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété sont récupérées.  
  
 Si <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> est `true`, puis `roleName` peut être vérifié avec le cache de rôles plutôt que le fournisseur de rôles spécifié.  
  
   
  
## Examples  
 L’exemple de code suivant vérifie par programme si l’utilisateur actuellement connecté est dans le rôle Administrateurs avant d’autoriser l’utilisateur d’afficher les paramètres des rôles de l’application. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.  
  
ou 
Aucun utilisateur n'est actuellement connecté.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Nom de l'utilisateur à rechercher.</param>
        <param name="roleName">Nom du rôle dans lequel effectuer la recherche.</param>
        <summary>Obtient une valeur indiquant si l'utilisateur spécifié figure dans le rôle spécifié. L’API est censée être appelée uniquement dans le contexte d’un thread de requête ASP.NET, et dans ce cas d’utilisation autorisée elle est sécurisée (thread-safe).</summary>
        <returns><see langword="true" /> si l'utilisateur spécifié figure dans le rôle spécifié ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.IsUserInRole%2A> les appels de méthode le <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> méthode du fournisseur de rôle par défaut pour déterminer si un nom d’utilisateur est associé à un rôle à partir de la source de données pour l’application qui est spécifié dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété.  
  
 Si `username` est égal à l’utilisateur connecté et le <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> valeur de propriété est `true`, `roleName` peut être vérifié avec le cache de rôle plutôt que le texte spécifié <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant vérifie par programme si un utilisateur est dans le rôle Administrateurs avant d’autoriser l’utilisateur d’afficher les paramètres des rôles de l’application. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="username" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="username" /> contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre maximal de noms de rôles à mettre en cache pour un utilisateur.</summary>
        <value>Nombre maximal de noms de rôles à mettre en cache pour un utilisateur. La valeur par défaut est 25.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.MaxCachedResults%2A> propriété est définie à l’aide de la `maxCachedResults` attribut de configuration. La valeur de la `maxCachedResults` attribut de configuration doit être défini sur une valeur entière supérieure à zéro.  
  
   
  
## Examples  
 L’exemple suivant montre le [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) élément dans la `system.web` section du fichier Web.config pour une application ASP.NET. Il spécifie que l’application utilise un <xref:System.Web.Security.SqlRoleProvider> instance et affecte le `maxCachedResults` attribut à 10.  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le fournisseur de rôle par défaut de l'application.</summary>
        <value>Fournisseur de rôle par défaut de l'application, exposé sous forme de classe héritant de la classe abstraite <see cref="T:System.Web.Security.RoleProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.Provider%2A> propriété vous permet de référencer directement le fournisseur de rôle par défaut pour une application. Elle est couramment utilisée pour accéder aux membres personnalisés du fournisseur de rôle qui ne sont pas dans le cadre de la <xref:System.Web.Security.RoleProvider> classe abstraite.  
  
 Par exemple, le <xref:System.Web.Security.WindowsTokenRoleProvider> classe inclut une surcharge de la <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> méthode qui vous permet de déterminer si un utilisateur est dans un rôle Windows commun à l’aide un <xref:System.Security.Principal.WindowsBuiltInRole> valeur d’énumération. Une référence à la <xref:System.Web.Security.WindowsTokenRoleProvider> pour une application peut être obtenue à l’aide de la classe la <xref:System.Web.Security.Roles.Provider%2A> propriété et peut être casté en un <xref:System.Web.Security.WindowsTokenRoleProvider> pour faire référence à la <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> de surcharge.  
  
 Si plusieurs fournisseurs de rôles sont configurés pour une application, vous pouvez accéder à ces fournisseurs à l’aide de la <xref:System.Web.Security.Roles.Providers%2A> collection.  
  
   
  
## Examples  
 L’exemple de code suivant convertit le fournisseur de rôle par défaut comme un <xref:System.Web.Security.WindowsTokenRoleProvider> et vérifie si l’utilisateur actuellement connecté figure dans le rôle Administrateurs avant d’autoriser l’utilisateur d’afficher les paramètres des rôles de l’application. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.WindowsTokenRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de fournisseurs de rôles pour l'application ASP.NET.</summary>
        <value><see cref="T:System.Web.Security.RoleProviderCollection" /> contenant les fournisseurs de rôles configurés pour l'application ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.Providers%2A> propriété fait référence à tous les fournisseurs de rôle activés pour une application, y compris les fournisseurs ajoutés dans le fichier Web.config. Vous pouvez contrôler à quel rôle fournisseurs sont disponibles pour une application à l’aide de la `providers` élément de la [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) section dans le fichier Web.config pour votre application.  
  
 L’exemple suivant montre un [roleManager](https://msdn.microsoft.com/library/4b0f6078-4824-4fc8-a5ee-4ae00ee3ceec) section qui supprime tous les fournisseurs existants (tels que ceux spécifiés dans le fichier Machine.config) et ajoute un <xref:System.Web.Security.SqlRoleProvider> instance en tant que fournisseur de rôle de l’application.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Vous pouvez obtenir une référence fortement typée à un fournisseur à partir de la <xref:System.Web.Security.Roles.Providers%2A> collection par le fournisseur de rôles d’indexation par nom et un cast en tant que le type souhaité.  
  
 Vous pouvez obtenir une référence au fournisseur par défaut pour une application qui utilise le <xref:System.Web.Security.Roles.Provider%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant répertorie les fournisseurs activés pour une application et leurs types respectifs.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">L'utilisateur à supprimer du rôle spécifié.</param>
        <param name="roleName">Le rôle duquel supprimer l'utilisateur spécifié.</param>
        <summary>Supprime l'utilisateur spécifié du rôle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> méthode appelle le fournisseur de rôle par défaut pour supprimer l’utilisateur spécifié du rôle spécifié à la source de données.  
  
   
  
## Examples  
 L’exemple de code suivant supprime un utilisateur d’un rôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="username" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,). 
 <paramref name="username" /> est une chaîne vide ou contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">L'utilisateur à supprimer des rôles spécifiés.</param>
        <param name="roleNames">Tableau de chaînes contenant les noms de rôles desquels supprimer l'utilisateur spécifié.</param>
        <summary>Supprime l'utilisateur spécifié des rôles spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> méthode appelle le fournisseur de rôle par défaut pour supprimer l’utilisateur spécifié des rôles spécifiés à la source de données.  
  
 Si l’application est configurée pour utiliser le <xref:System.Web.Security.SqlRoleProvider> classe, les mises à jour de la base de données qui sont effectuées pendant l’appel à la <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> méthode sont effectuées dans une transaction. Si une erreur s’est produite, par exemple un nom d’utilisateur qui n’est pas dans un rôle spécifié, la transaction est annulée et aucune mise à jour n’est effectuées.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> méthode pour supprimer un utilisateur à partir d’un ou plusieurs rôles. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Un des rôles dans <paramref name="roleNames" /> est <see langword="null" />.  
  
ou 
 <paramref name="username" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un des rôles dans <paramref name="roleNames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="username" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="roleNames" /> contient un élément en double.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Tableau de chaînes contenant le nom des utilisateurs à supprimer des rôles spécifiés.</param>
        <param name="roleName">Le rôle duquel supprimer les utilisateurs spécifiés.</param>
        <summary>Supprime les utilisateurs spécifiés du rôle spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> méthode appelle le fournisseur de rôle par défaut pour supprimer les utilisateurs spécifiés au rôle spécifié dans la source de données.  
  
 Si l’application utilise le <xref:System.Web.Security.SqlRoleProvider> classe, les mises à jour de la base de données qui sont effectuées pendant l’appel à la <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> méthode sont effectuées dans une transaction. Si une erreur s’est produite, par exemple un nom d’utilisateur qui n’est pas dans un rôle spécifié, la transaction est annulée et aucune mise à jour n’est effectuées.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> méthode pour supprimer un ou plusieurs utilisateurs d’un rôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" />.  
  
ou 
L'un des noms d'utilisateurs de <paramref name="usernames" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
Un des noms d'utilisateurs dans <paramref name="usernames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="usernames" /> contient un élément en double.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Tableau de chaînes contenant le nom des utilisateurs à supprimer des rôles spécifiés.</param>
        <param name="roleNames">Tableau de chaînes contenant le nom des rôles desquels supprimer les utilisateurs spécifiés.</param>
        <summary>Supprime les noms d'utilisateurs spécifiés des rôles spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> méthode appelle le fournisseur de rôle par défaut pour supprimer les utilisateurs spécifiés des rôles spécifiés à la source de données.  
  
 Si l’application utilise le <xref:System.Web.Security.SqlRoleProvider> classe, les mises à jour de la base de données qui sont effectuées pendant l’appel à la <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> méthode sont effectuées dans une transaction. Si une erreur s’est produite, par exemple un nom d’utilisateur qui n’est pas dans un rôle spécifié, la transaction est annulée et aucune mise à jour n’est effectuées.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> méthode pour supprimer un ou plusieurs utilisateurs d’un ou plusieurs rôles en fonction de l’utilisateur. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Un des rôles spécifiés dans <paramref name="roleNames" /> est <see langword="null" />.  
  
ou 
L'un des utilisateurs spécifiés dans <paramref name="usernames" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un des rôles spécifiés dans <paramref name="roleNames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
Un des utilisateurs spécifiés dans <paramref name="usernames" /> est une chaîne vide ou contient une virgule (,).  
  
ou 
 <paramref name="roleNames" /> contient un élément en double.  
  
- ou - 
 <paramref name="usernames" /> contient un élément en double.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nom du rôle à rechercher dans la source de données.</param>
        <summary>Obtient une valeur qui indique si le nom de rôle spécifié existe déjà dans la source de données du rôle.</summary>
        <returns><see langword="true" /> si le nom de rôle existe déjà dans la source de données; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Security.Roles.RoleExists%2A> les appels de méthode le `RoleExists` méthode du fournisseur de rôle par défaut pour déterminer si un nom de rôle existe dans la source de données pour l’application qui est spécifiée dans le <xref:System.Web.Security.Roles.ApplicationName%2A> propriété.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Security.Roles.RoleExists%2A> méthode pour déterminer si un nom de rôle existe déjà avant de créer le rôle. Pour obtenir un exemple d’un fichier Web.config qui permet la gestion des rôles, consultez <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  Cet exemple contient une zone de texte qui accepte l’entrée d’utilisateur, ce qui constitue une menace de sécurité potentielle. Par défaut, les pages web ASP.NET vérifient que l’entrée d’utilisateur n’inclut pas de script ou d’éléments HTML. Pour plus d’informations, consultez [Vue d’ensemble des attaques de script](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> est <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> est une chaîne vide ou contient une virgule (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">La gestion des rôles n'est pas activée.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Présentation de la gestion de rôle ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>