<Type Name="FilteredCatalog" FullName="System.ComponentModel.Composition.Hosting.FilteredCatalog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f81f428adb950a8ff09db76e87e7f5809c47ad16" /><Meta Name="ms.sourcegitcommit" Value="e1a67db2e206daee8a9e2370b6cda8b921644a0a" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="09/19/2018" /><Meta Name="ms.locfileid" Value="46321495" /></Metadata><TypeSignature Language="C#" Value="public class FilteredCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog, System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilteredCatalog extends System.ComponentModel.Composition.Primitives.ComposablePartCatalog implements class System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />
  <TypeSignature Language="VB.NET" Value="Public Class FilteredCatalog&#xA;Inherits ComposablePartCatalog&#xA;Implements INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilteredCatalog : System::ComponentModel::Composition::Primitives::ComposablePartCatalog, System::ComponentModel::Composition::Hosting::INotifyComposablePartCatalogChanged" />
  <TypeSignature Language="F#" Value="type FilteredCatalog = class&#xA;    inherit ComposablePartCatalog&#xA;    interface INotifyComposablePartCatalogChanged" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Composition.Primitives.ComposablePartCatalog</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="12cc0-101">Représente un catalogue auquel une fonction de filtre a été appliquée.</span><span class="sxs-lookup"><span data-stu-id="12cc0-101">Represents a catalog after a filter function is applied to it.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="12cc0-102">Ce type implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="12cc0-102">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="12cc0-103">Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement.</span><span class="sxs-lookup"><span data-stu-id="12cc0-103">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="12cc0-104">Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="12cc0-104">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="12cc0-105">Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en C#) ou `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="12cc0-105">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="12cc0-106">Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.</span><span class="sxs-lookup"><span data-stu-id="12cc0-106">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilteredCatalog (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool&gt; filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition, bool&gt; filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As ComposablePartCatalog, filter As Func(Of ComposablePartDefinition, Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilteredCatalog(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, Func&lt;System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^, bool&gt; ^ filter);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.FilteredCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog * Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition, bool&gt; -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="new System.ComponentModel.Composition.Hosting.FilteredCatalog (catalog, filter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="filter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="catalog"><span data-ttu-id="12cc0-107">Catalogue sous-jacent.</span><span class="sxs-lookup"><span data-stu-id="12cc0-107">The underlying catalog.</span></span></param>
        <param name="filter"><span data-ttu-id="12cc0-108">Fonction permettant de filtrer les éléments.</span><span class="sxs-lookup"><span data-stu-id="12cc0-108">The function to filter parts.</span></span></param>
        <summary><span data-ttu-id="12cc0-109">Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> avec le catalogue sous-jacent et le filtre spécifiés.</span><span class="sxs-lookup"><span data-stu-id="12cc0-109">Initializes a new instance of the <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> class with the specified underlying catalog and filter.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As EventHandler(Of ComposablePartCatalogChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^&gt; ^ Changed;" />
      <MemberSignature Language="F#" Value="member this.Changed : EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " Usage="member this.Changed : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="12cc0-110">Se produit lorsque le catalogue sous-jacent a changé.</span><span class="sxs-lookup"><span data-stu-id="12cc0-110">Occurs when the underlying catalog has changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Changing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; Changing" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changing As EventHandler(Of ComposablePartCatalogChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler&lt;System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^&gt; ^ Changing;" />
      <MemberSignature Language="F#" Value="member this.Changing : EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " Usage="member this.Changing : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged.Changing</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="12cc0-111">Se produit lorsque le catalogue sous-jacent est en cours de modification.</span><span class="sxs-lookup"><span data-stu-id="12cc0-111">Occurs when the underlying catalog is changing.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complement">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog Complement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Composition.Hosting.FilteredCatalog Complement" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Complement As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Composition::Hosting::FilteredCatalog ^ Complement { System::ComponentModel::Composition::Hosting::FilteredCatalog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Complement : System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="12cc0-112">Obtient un catalogue qui contient les éléments qui sont présents dans le catalogue sous-jacent mais qui ont été filtrés par la fonction de filtre.</span><span class="sxs-lookup"><span data-stu-id="12cc0-112">Gets a catalog that contains parts that are present in the underlying catalog but that were filtered out by the filter function.</span></span></summary>
        <value><span data-ttu-id="12cc0-113">Catalogue qui contient le complément de ce catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-113">A catalog that contains the complement of this catalog.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="filteredCatalog.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="12cc0-114"><see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="12cc0-114"><see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="12cc0-115">Appelé par les méthodes <see langword="Dispose()" /> et <see langword="Finalize()" /> pour libérer les ressources managées et non managées utilisées par l'instance actuelle de la classe <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" />.</span><span class="sxs-lookup"><span data-stu-id="12cc0-115">Called by the <see langword="Dispose()" /> and <see langword="Finalize()" /> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12cc0-116">Cette méthode est appelée uniquement par le public `Dispose()` et `Finalize()` méthodes ; n’appelez pas cette méthode directement. Lorsque vous implémentez le modèle de suppression, le paramètre booléen de la `Dispose(Boolean)` méthode doit être utilisée comme suit :</span><span class="sxs-lookup"><span data-stu-id="12cc0-116">This method is called only by the public `Dispose()` and `Finalize()` methods; do not call this method directly.When you implement the dispose pattern, the Boolean parameter of the `Dispose(Boolean)` method should be used as follows:</span></span>  
  
-   <span data-ttu-id="12cc0-117">Le `Dispose()` méthode de l’objet actuel doit appeler `Dispose(Boolean)` avec le paramètre booléen défini sur `true` pour libérer les ressources managées et non managées.</span><span class="sxs-lookup"><span data-stu-id="12cc0-117">The `Dispose()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `true` to release both managed and unmanaged resources.</span></span>  
  
-   <span data-ttu-id="12cc0-118">Le `Finalize()` méthode de l’objet actuel doit appeler `Dispose(Boolean)` avec le paramètre booléen défini sur `false` pour libérer uniquement les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="12cc0-118">The `Finalize()` method of the current object should call `Dispose(Boolean)` with the Boolean parameter set to `false` to release only unmanaged resources.</span></span>
  
  <span data-ttu-id="12cc0-119">Pour plus d’informations, consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="12cc0-119">For more information, see [Implementing a Dispose method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerator&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEnumerator () As IEnumerator(Of ComposablePartDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerator&lt;System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt;" Usage="filteredCatalog.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="12cc0-120">Retourne un énumérateur qui itère au sein du catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-120">Returns an enumerator that iterates through the catalog.</span></span></summary>
        <returns><span data-ttu-id="12cc0-121">Énumérateur permettant d'itérer au sein du catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-121">An enumerator that can be used to iterate through the catalog.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Tuple&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition, class System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetExports (definition As ImportDefinition) As IEnumerable(Of Tuple(Of ComposablePartDefinition, ExportDefinition))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;Tuple&lt;System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^, System::ComponentModel::Composition::Primitives::ExportDefinition ^&gt; ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="override this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition * System.ComponentModel.Composition.Primitives.ExportDefinition&gt;" Usage="filteredCatalog.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition"><span data-ttu-id="12cc0-122">Importation à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="12cc0-122">The import to match.</span></span></param>
        <summary><span data-ttu-id="12cc0-123">Obtient les parties exportées à partir de ce catalogue qui correspondent à l'importation spécifiée.</span><span class="sxs-lookup"><span data-stu-id="12cc0-123">Gets the exported parts from this catalog that match the specified import.</span></span></summary>
        <returns><span data-ttu-id="12cc0-124">Collection d'éléments correspondants.</span><span class="sxs-lookup"><span data-stu-id="12cc0-124">A collection of matching parts.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IncludeDependencies">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="12cc0-125">Obtient un nouvel objet <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> qui contient toutes les parties de ce catalogue et de toutes leurs dépendances.</span><span class="sxs-lookup"><span data-stu-id="12cc0-125">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependencies.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IncludeDependencies">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependencies () As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependencies();" />
      <MemberSignature Language="F#" Value="member this.IncludeDependencies : unit -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="12cc0-126">Obtient un nouvel objet <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> qui contient toutes les parties de ce catalogue et de toutes leurs dépendances.</span><span class="sxs-lookup"><span data-stu-id="12cc0-126">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependencies.</span></span></summary>
        <returns><span data-ttu-id="12cc0-127">Nouveau catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-127">The new catalog.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDependencies">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies (Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,bool&gt; importFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies(class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; importFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependencies (importFilter As Func(Of ImportDefinition, Boolean)) As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependencies(Func&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^, bool&gt; ^ importFilter);" />
      <MemberSignature Language="F#" Value="member this.IncludeDependencies : Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependencies importFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importFilter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="importFilter"><span data-ttu-id="12cc0-128">Filtre des importations.</span><span class="sxs-lookup"><span data-stu-id="12cc0-128">The filter for imports.</span></span></param>
        <summary><span data-ttu-id="12cc0-129">Obtient un nouvel objet <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> qui contient toutes les parties de ce catalogue et de toutes les dépendances qui peuvent être accessibles via les importations qui correspondent au filtre spécifié.</span><span class="sxs-lookup"><span data-stu-id="12cc0-129">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all dependencies that can be reached through imports that match the specified filter.</span></span></summary>
        <returns><span data-ttu-id="12cc0-130">Nouveau catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-130">The new catalog.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IncludeDependents">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="12cc0-131">Obtient un nouvel objet <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> qui contient toutes les parties de ce catalogue et de tous leurs éléments dépendants.</span><span class="sxs-lookup"><span data-stu-id="12cc0-131">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependents.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IncludeDependents">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependents () As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependents();" />
      <MemberSignature Language="F#" Value="member this.IncludeDependents : unit -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="12cc0-132">Obtient un nouvel objet <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> qui contient toutes les parties de ce catalogue et de tous leurs éléments dépendants.</span><span class="sxs-lookup"><span data-stu-id="12cc0-132">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all their dependents.</span></span></summary>
        <returns><span data-ttu-id="12cc0-133">Nouveau catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-133">The new catalog.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDependents">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents (Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,bool&gt; importFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents(class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; importFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function IncludeDependents (importFilter As Func(Of ImportDefinition, Boolean)) As FilteredCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Composition::Hosting::FilteredCatalog ^ IncludeDependents(Func&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^, bool&gt; ^ importFilter);" />
      <MemberSignature Language="F#" Value="member this.IncludeDependents : Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition, bool&gt; -&gt; System.ComponentModel.Composition.Hosting.FilteredCatalog" Usage="filteredCatalog.IncludeDependents importFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importFilter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="importFilter"><span data-ttu-id="12cc0-134">Filtre des importations.</span><span class="sxs-lookup"><span data-stu-id="12cc0-134">The filter for imports.</span></span></param>
        <summary><span data-ttu-id="12cc0-135">Obtient un nouvel objet <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> qui contient toutes les parties de ce catalogue et de tous les éléments dépendants qui peuvent être accessibles via les importations qui correspondent au filtre spécifié.</span><span class="sxs-lookup"><span data-stu-id="12cc0-135">Gets a new <see cref="T:System.ComponentModel.Composition.Hosting.FilteredCatalog" /> object that contains all the parts from this catalog and all dependents that can be reached through imports that match the specified filter.</span></span></summary>
        <returns><span data-ttu-id="12cc0-136">Nouveau catalogue.</span><span class="sxs-lookup"><span data-stu-id="12cc0-136">The new catalog.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChanged (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChanged(class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChanged (e As ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChanged(System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChanged : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit&#xA;override this.OnChanged : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit" Usage="filteredCatalog.OnChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="12cc0-137">Fournit des données pour l'événement.</span><span class="sxs-lookup"><span data-stu-id="12cc0-137">Provides data for the event.</span></span></param>
        <summary><span data-ttu-id="12cc0-138">Déclenche l'événement <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" />.</span><span class="sxs-lookup"><span data-stu-id="12cc0-138">Raises the <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnChanging (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChanging(class System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChanging (e As ComposablePartCatalogChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChanging(System::ComponentModel::Composition::Hosting::ComposablePartCatalogChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChanging : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit&#xA;override this.OnChanging : System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs -&gt; unit" Usage="filteredCatalog.OnChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="12cc0-139">Fournit des données pour l'événement.</span><span class="sxs-lookup"><span data-stu-id="12cc0-139">Provides data for the event.</span></span></param>
        <summary><span data-ttu-id="12cc0-140">Déclenche l'événement <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" />.</span><span class="sxs-lookup"><span data-stu-id="12cc0-140">Raises the <see cref="E:System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>