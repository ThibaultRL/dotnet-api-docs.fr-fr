<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a25845144db4c8ac809233e618e67a229b8c9446" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156354" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Le <see langword="Conversion" /> module contient les procédures utilisées pour effectuer diverses opérations de conversion.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui convertissent des nombres décimaux en d’autres bases, les nombres en chaînes, des chaînes en nombres et données d’un type vers un autre.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Mots clés (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membres de la bibliothèque d’exécution Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">Objet à convertir.</param>
        <param name="TargetType">Le type vers lequel convertir l’objet.</param>
        <summary>Convertit un objet vers le type spécifié.</summary>
        <returns>Objet dont le type au moment de l’exécution est le type cible demandé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `CTypeDynamic` méthode convertit l’objet passé comme le `Expression` paramètre vers le type spécifié par le `TargetType` paramètre. Si l’objet est un objet dynamique, le `CTypeDynamic` méthode applique les conversions dynamiques disponibles.  
  
 Le `CTypeDynamic` méthode applique les conversions dynamiques conformément à la sémantique de conversion définie par l’objet lui-même. Si un objet dynamique hérite <xref:System.Dynamic.DynamicObject>, le `CTypeDynamic` méthode tente tout d’abord effectuer la conversion à l’aide d’une conversion statique définie par l’utilisateur. Si la conversion statique définie par l’utilisateur échoue, la `CTypeDynamic` méthode tente d’effectuer la conversion à l’aide des conversions dynamiques. Si un objet dynamique implémente <xref:System.Dynamic.IDynamicMetaObjectProvider>, le `CTypeDynamic` méthode donne la priorité aux conversions dynamiques sur les conversions définies par l’utilisateur, statiques.  
  
   
  
## Examples  
 L’exemple suivant utilise la `CTypeDynamic` méthode pour convertir une chaîne à l’aide de la conversion définie par l’objet dynamique dans un objet dynamique.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Utilisation d'objets dynamiques (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Procédure pas à pas : Création et utilisation d’objets dynamiques (C# et Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">Le type vers lequel convertir l’objet.</typeparam>
        <param name="Expression">Objet à convertir.</param>
        <summary>Convertit un objet vers le type générique spécifié.</summary>
        <returns>Objet typé statiquement comme type générique demandé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `CTypeDynamic` méthode convertit l’objet passé comme le `Expression` paramètre vers le type spécifié par le type du paramètre générique. Si l’objet est un objet dynamique, le `CTypeDynamic` méthode applique les conversions dynamiques disponibles.  
  
 Le `CTypeDynamic` méthode applique les conversions dynamiques conformément à la sémantique de conversion définie par l’objet lui-même. Si un objet dynamique hérite <xref:System.Dynamic.DynamicObject>, le `CTypeDynamic` méthode tente tout d’abord effectuer la conversion à l’aide d’une conversion statique définie par l’utilisateur. Si la conversion statique définie par l’utilisateur échoue, la `CTypeDynamic` méthode tente d’effectuer la conversion à l’aide des conversions dynamiques. Si un objet dynamique implémente <xref:System.Dynamic.IDynamicMetaObjectProvider>, le `CTypeDynamic` méthode donne la priorité aux conversions dynamiques sur les conversions définies par l’utilisateur, statiques.  
  
   
  
## Examples  
 L’exemple suivant utilise la `CTypeDynamic` méthode pour convertir une chaîne à l’aide de la conversion définie par l’objet dynamique dans un objet dynamique.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">Utilisation d'objets dynamiques (Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">Procédure pas à pas : Création et utilisation d’objets dynamiques (C# et Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne le message d’erreur qui correspond à un numéro d’erreur donné.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le message d’erreur qui correspond à un numéro d’erreur donné.</summary>
        <returns>Le message d’erreur qui correspond à une erreur d’exécution la plus récente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `ErrorToString` fonction examine les paramètres de propriété de la `Err` objet pour identifier l’erreur d’exécution la plus récente. La valeur de retour de la `ErrorToString` fonction correspond à la `Description` propriété de la `Err` objet. Si aucune erreur d’exécution se n’est produite, `ErrorToString` retourne une chaîne de longueur nulle ( » »).  
  
 Dans la version 6.0 et versions antérieure de Visual Basic, cette fonctionnalité a été fournie par le `Error` (fonction).  
  
   
  
## Examples  
 Le code suivant utilise la `ErrorToString` (fonction) pour afficher les messages d’erreur qui correspondent aux numéros d’erreur spécifié.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> est hors limites.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">Facultatif. N’importe quel numéro d’erreur valide.</param>
        <summary>Retourne le message d’erreur qui correspond à un numéro d’erreur donné.</summary>
        <returns>Le message d’erreur qui correspond à un numéro d’erreur donné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `ErrorToString` fonction examine les paramètres de propriété de la `Err` objet pour identifier l’erreur d’exécution la plus récente. La valeur de retour de la `ErrorToString` fonction correspond à la `Description` propriété de la `Err` objet. Si `ErrorNumber` est un numéro d’erreur valide mais n’est pas défini, `ErrorToString` retourne la chaîne `"Application-defined or object-defined error."` si `ErrorNumber` n’est pas valide, une erreur se produit. Si `ErrorNumber` est omis, le message correspondant à la dernière erreur d’exécution est retournée. Si aucune erreur d’exécution se n’est produite ou `ErrorNumber` est 0, `ErrorToString` retourne une chaîne de longueur nulle ( » »).  
  
 Dans la version 6.0 et versions antérieure de Visual Basic, cette fonctionnalité a été fournie par le `Error` (fonction).  
  
   
  
## Examples  
 Le code suivant utilise la `ErrorToString` (fonction) pour afficher les messages d’erreur qui correspondent aux numéros d’erreur spécifié.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" /> est hors limites.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Renvoie la partie entière d’un nombre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Decimal" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Double" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  

En commençant par 15.8 Visual Basic, les performances de `Double`-à-conversion d’un entier est optimisé si vous passez la valeur retournée par la `Fix` (méthode) à une de la [des fonctions de conversion d’un intégral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou si le `Double`valeur retournée par `Fix` est implicitement converti en un entier avec [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) défini sur `Off`. Cette optimisation permet au code de s’exécuter plus rapidement (jusqu’à deux fois plus rapidement pour le code qui effectue un grand nombre de conversions en types d’entier). L’exemple suivant illustre une conversion optimisée de ce type :

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Short" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Integer" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Long" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Object" /> ou toute expression numérique valide. Si <paramref name="Number" /> contient <see langword="Nothing" />, <see langword="Nothing" /> est retournée.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  

En commençant par 15.8 Visual Basic, si le `Number` argument est un objet dont le type de runtime est `Double` ou `Single`, les performances de la conversion de flottante-virgule en entier sont optimisé si vous passez la valeur retournée par la `Fix` méthode à l’ou le [des fonctions de conversion d’un intégral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou si la valeur retournée par `Fix` est automatiquement convertie en un entier avec [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) la valeur désactivée. Cette optimisation permet au code de s’exécuter plus rapidement (jusqu’à deux fois plus rapidement pour le code qui effectue un grand nombre de conversions en types d’entier). Exemple :

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Single" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
En commençant par 15.8 Visual Basic, les performances de `Single`-à-conversion d’un entier est optimisé si vous passez la valeur retournée par la `Fix` (méthode) à une de la [des fonctions de conversion d’un intégral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou si le `Single`valeur retournée par `Fix` est automatiquement convertie en un entier avec [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) la valeur désactivée. Cette optimisation permet au code de s’exécuter plus rapidement (jusqu’à deux fois plus rapidement pour le code qui effectue un grand nombre de conversions en types d’entier). L’exemple suivant illustre une conversion optimisée de ce type :
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur hexadécimale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur hexadécimale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si `Number` est|Hex retourne|  
|-|-|  
|Empty|zéro (0)|  
|N’importe quelle valeur numérique|Seize caractères hexadécimaux|  
  
 Vous pouvez représenter des nombres hexadécimaux directement en faisant précéder les nombres dans la plage correcte avec `&H`. Par exemple, `&H10` représente le 16 décimal en notation hexadécimale.  
  
   
  
## Examples  
 Cet exemple utilise le `Hex` fonction pour retourner la valeur hexadécimale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">Procédure : convertir des chaînes hexadécimales en nombres</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Renvoie la partie entière d’un nombre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Decimal" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Double" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
À partir de Visual Basic 15.8, les performances de la conversion d’un Double-entier sont optimisé si vous passez la valeur retournée par la `Int` méthode à l’ou le [des fonctions de conversion d’un intégral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou si la valeur Double retourné par `Int` est automatiquement convertie en un entier avec [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) la valeur désactivée. Cette optimisation permet au code de s’exécuter plus rapidement (jusqu’à deux fois plus rapidement pour le code qui effectue un grand nombre de conversions en types d’entier). L’exemple suivant illustre une conversion optimisée de ce type :

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Short" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Integer" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Long" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Object" /> ou toute expression numérique valide. Si <paramref name="Number" /> contient <see langword="Nothing" />, <see langword="Nothing" /> est retournée.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
En commençant par 15.8 Visual Basic, si le `Number` argument est un objet dont le type de runtime est `Double` ou `Single`, les performances de la conversion de flottante-virgule en entier sont optimisé si vous passez la valeur retournée par la `Int` méthode à l’ou le [des fonctions de conversion d’un intégral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou si la valeur retournée par `Int` est automatiquement convertie en un entier avec [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) la valeur désactivée. Cette optimisation permet au code de s’exécuter plus rapidement (jusqu’à deux fois plus rapidement pour le code qui effectue un grand nombre de conversions en types d’entier). Exemple :

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un nombre de type <see langword="Single" /> ou toute expression numérique valide.</param>
        <summary>Renvoie la partie entière d’un nombre.</summary>
        <returns>Partie entière d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À la fois le `Int` et `Fix` fonctions suppriment la partie fractionnaire des `Number` et retourner la valeur entière résultante.  
  
 La différence entre `Int` et `Fix` fonctions est que si `Number` est négatif, `Int` retourne le premier entier négatif inférieur ou égal à `Number`, tandis que `Fix` retourne le premier entier négatif supérieur ou égal à `Number`. Par exemple, `Int` convertit-8,4 en -9, et `Fix` convertit-8,4 en -8.  
  
 `Fix(number)` équivaut à `Sign(number) * Int(Abs(number)).`  
  
En commençant par 15.8 Visual Basic, les performances de `Single`-à-conversion d’un entier est optimisé si vous passez la valeur retournée par la `Int` (méthode) à une de la [des fonctions de conversion d’un intégral](~/docs/visual-basic/language-reference/functions/conversion-functions.md), ou si le `Single`valeur retournée par `Int` est automatiquement convertie en un entier avec [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) la valeur désactivée. Cette optimisation permet au code de s’exécuter plus rapidement (jusqu’à deux fois plus rapidement pour le code qui effectue un grand nombre de conversions en types d’entier). L’exemple suivant illustre une conversion optimisée de ce type :

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 Cet exemple illustre comment la `Int` et `Fix` fonctions retournent la partie entière des nombres. Dans le cas d’un argument est négatif, le `Int` fonction retourne le premier entier négatif inférieur ou égal au nombre ; le `Fix` fonction retourne le premier entier négatif supérieur ou égal au nombre. L’exemple suivant, vous devez spécifier `Option Strict Off` , car les conversions implicites du type `Double` à taper `Integer` ne sont pas autorisés sous `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 Vous pouvez utiliser la `CInt` fonction pour convertir explicitement les autres types de données en type `Integer` avec `Option Strict Off`. Toutefois, `CInt` est arrondi à l’entier le plus proche au lieu de tronquer la partie fractionnaire des nombres. Exemple :  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 Vous pouvez utiliser la `CInt` fonction sur le résultat d’un appel à `Fix` ou `Int` pour effectuer une conversion explicite en entier sans arrondi. Exemple :  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 Pour plus d’informations sur `CInt`, consultez [les fonctions de Conversion de Type](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nombre n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException">Nombre n’est pas un type numérique.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">Liste des mots clés mathématiques</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">Fonctions mathématiques (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Toute expression numérique valide ou <see langword="String" /> expression.</param>
        <summary>Retourne une chaîne représentant la valeur octale d’un nombre.</summary>
        <returns>Une chaîne représentant la valeur octale d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `Number` n’est pas déjà un nombre entier, il est arrondi au nombre entier le plus proche avant d’être évalué.  
  
|Si le nombre est|Oct retourne|  
|-|-|  
|Empty|zéro (0)|  
|Nombre quelconque|22 caractères octaux|  
  
 Vous pouvez représenter des nombres octaux directement en faisant précéder les nombres dans la plage appropriée de `&O`. Par exemple, `&O10` est la notation octale décimal 8.  
  
   
  
## Examples  
 Cet exemple utilise le `Oct` fonction pour retourner la valeur octale d’un nombre.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. Un <see langword="Object" /> contenant toute expression numérique valide.</param>
        <summary>Retourne un <see langword="String" /> représentation d’un nombre.</summary>
        <returns>Représentation <see langword="String" /> d’un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque les nombres sont convertis en chaînes, un espace à gauche est toujours réservé pour le signe de `Number`. Si `Number` est un nombre positif, la chaîne retournée contient un espace à gauche et le signe est implicite. Un nombre négatif inclura le signe moins (-) et aucun espace à gauche.  
  
 Utilisez le `Format` fonction pour convertir des valeurs numériques à formater en tant que dates, heures ou monnaie ou dans d’autres formats définis par l’utilisateur. Contrairement à la `Str` (fonction), le `Format` fonction n’inclut pas d’espace à gauche pour le signe de `Number`.  
  
> [!NOTE]
>  Le `Str` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide. Si des séparateurs décimaux différents sont utilisés (par exemple, dans des applications internationales), utilisez le `CStr` ou `Format` fonctions pour convertir un nombre en une chaîne. Pour obtenir la représentation sous forme de chaîne d’un nombre dans une culture particulière, utilisez le nombre `ToString(IFormatProvider)` (méthode). Par exemple, utilisez <xref:System.Double.ToString%2A> lors de la conversion d’une valeur de type `Double` vers une chaîne.  
  
   
  
## Examples  
 Cet exemple utilise le `Str` fonction pour retourner un `String` représentation d’un nombre. Lorsqu’un nombre positif est converti en une chaîne, un espace à gauche est toujours réservé pour son signe.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" /> n’est pas spécifié.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" /> n’est pas un type numérique.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">Résumé de la conversion</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Toute expression <see langword="String" />, variable <see langword="Object" /> ou valeur <see langword="Char" /> valide. Si <paramref name="Expression" /> est de type <see langword="Object" />, sa valeur doit être convertible en <see langword="String" />, ou une erreur <see cref="T:System.ArgumentException" /> se produit.</param>
        <summary>Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</summary>
        <returns>Nombres contenus dans une chaîne en tant que valeur numérique du type approprié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Val` fonction arrête la lecture de la chaîne au premier caractère qu’il ne peut pas identifier comme partie d’un nombre. Les caractères qui sont souvent considérés comme parties des valeurs numériques, telles que les signes dollar et les virgules et les symboles ne sont pas reconnus. Toutefois, la fonction reconnaît les préfixes `&O` (pour octal) et `&H` (pour hexadécimal). Les espaces, les onglets et les caractères de saut de ligne sont supprimés de l’argument.  
  
 L’appel suivant retourne la valeur 1615198.  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
L’appel suivant retourne la valeur décimale -1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Le `Val` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide. Lorsque des séparateurs décimaux différents sont utilisés, comme dans les applications internationales, utilisez `CDbl` ou `CInt` à la place pour convertir une chaîne en un nombre. Pour convertir la représentation sous forme de chaîne d’un nombre dans une culture particulière en une valeur numérique, utilisez le type numérique `Parse(String, IFormatProvider)` (méthode). Par exemple, utilisez <xref:System.Double.Parse%2A?displayProperty=nameWithType> lors de la conversion d’une chaîne à un `Double`.  
  
Un <xref:System.InvalidCastException> exception peut être levée en réponse à certains formats numériques rares. Par exemple, le code suivant lève cette exception.  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

Le conflit entre le nombre sous la forme un `Double` et `Integer` et `Long` caractères de type seraient interceptées par le compilateur si elle n’était pas contenue dans une chaîne.  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 L’exemple suivant utilise le `Val` fonction pour retourner les nombres contenus dans chaque chaîne. `Val` arrête la conversion au premier caractère qui ne peut pas être interprété comme un chiffre, modificateur numérique, une ponctuation numérique ou d’espace blanc.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> est trop grand.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> est une expression de type <see langword="Object" /> non convertible en <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Toute expression <see langword="String" />, variable <see langword="Object" /> ou valeur <see langword="Char" /> valide. Si <paramref name="Expression" /> est de type <see langword="Object" />, sa valeur doit être convertible en <see langword="String" />, ou une erreur <see cref="T:System.ArgumentException" /> se produit.</param>
        <summary>Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</summary>
        <returns>Nombres contenus dans une chaîne en tant que valeur numérique du type approprié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Val` fonction arrête la lecture de la chaîne au premier caractère qu’il ne peut pas identifier comme partie d’un nombre. Les caractères qui sont souvent considérés comme parties des valeurs numériques, telles que les signes dollar et les virgules et les symboles ne sont pas reconnus. Toutefois, la fonction reconnaît les préfixes `&O` (pour octal) et `&H` (pour hexadécimal). Les espaces, les onglets et les caractères de saut de ligne sont supprimés à partir de l’argument.  
  
 L’appel suivant renvoie la valeur 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
L’appel suivant retourne la valeur décimale -1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Le `Val` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide. Lorsque d’autres séparateurs décimaux sont utilisés, comme dans les applications internationales, utilisez `CDbl` ou `CInt` à la place pour convertir une chaîne en un nombre. Pour convertir la représentation sous forme de chaîne d’un nombre dans une culture particulière en une valeur numérique, utilisez le type numérique `Parse(String, IFormatProvider)` (méthode). Par exemple, utilisez <xref:System.Double.Parse%2A?displayProperty=nameWithType> lors de la conversion d’une chaîne à un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> exception peut être levée en réponse à certains formats numériques rares. Par exemple, le code suivant lève cette exception.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Le conflit entre le nombre sous la forme un `Double` et `Integer` et `Long` caractères de type seraient interceptées par le compilateur si le conflit n’était pas contenu dans les chaînes.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 L’exemple suivant utilise le `Val` fonction pour retourner les nombres contenus dans chaque chaîne. `Val` arrête la conversion au premier caractère qui ne peut pas être interprété comme un chiffre, modificateur numérique, une ponctuation numérique ou d’espace blanc.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> est trop grand.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> est une expression de type <see langword="Object" /> non convertible en <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">Obligatoire. Toute expression <see langword="String" />, variable <see langword="Object" /> ou valeur <see langword="Char" /> valide. Si <paramref name="Expression" /> est de type <see langword="Object" />, sa valeur doit être convertible en <see langword="String" />, ou une erreur <see cref="T:System.ArgumentException" /> se produit.</param>
        <summary>Renvoie les nombres contenus dans une chaîne en tant que valeur numérique du type adéquat.</summary>
        <returns>Nombres contenus dans une chaîne en tant que valeur numérique du type approprié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Val` fonction arrête la lecture de la chaîne au premier caractère qu’il ne peut pas identifier comme partie d’un nombre. Les caractères qui sont souvent considérés comme parties des valeurs numériques, telles que les signes dollar et les virgules et les symboles ne sont pas reconnus. Toutefois, la fonction reconnaît les préfixes `&O` (pour octal) et `&H` (pour hexadécimal). Les espaces, les onglets et les caractères de saut de ligne sont supprimés à partir de l’argument.  
  
 L’appel suivant renvoie la valeur 1234123.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
L’appel suivant retourne la valeur décimale -1.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  Le `Val` fonction ne reconnaît que le point (`.`) comme séparateur décimal valide. Lorsque d’autres séparateurs décimaux sont utilisés, comme dans les applications internationales, utilisez `CDbl` ou `CInt` à la place pour convertir une chaîne en un nombre. Pour convertir la représentation sous forme de chaîne d’un nombre dans une culture particulière en une valeur numérique, utilisez le type numérique `Parse(String, IFormatProvider)` (méthode). Par exemple, utilisez <xref:System.Double.Parse%2A?displayProperty=nameWithType> lors de la conversion d’une chaîne à un `Double`.  
  
> [!NOTE]
>  Un <xref:System.InvalidCastException> exception peut être levée en réponse à certains formats numériques rares. Par exemple, le code suivant lève cette exception.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  Le conflit entre le nombre sous la forme un `Double` et `Integer` et `Long` caractères de type seraient interceptées par le compilateur si le conflit n’était pas contenu dans les chaînes.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 L’exemple suivant utilise le `Val` fonction pour retourner les nombres contenus dans chaque chaîne. `Val` arrête la conversion au premier caractère qui ne peut pas être interprété comme un chiffre, modificateur numérique, une ponctuation numérique ou d’espace blanc.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" /> est trop grand.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" /> est une expression de type <see langword="Object" /> non convertible en <see langword="String" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">Type Conversion Functions</related>
      </Docs>
    </Member>
  </Members>
</Type>