<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67203d2e3262083e36b5d156d1c448b2571fa2ce" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156371" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Le <see langword="ErrObject" /> module contient des propriétés et procédures utilisées pour identifier et gérer les erreurs d’exécution à l’aide de la <see langword="Err" /> objet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `ErrObject` module prend en charge la `Err` objet. Pour plus d'informations, consultez <xref:Microsoft.VisualBasic.Information.Err%2A>.  
  
   
  
## Examples  
 Cet exemple utilise les propriétés de la `Err` objet lors de la construction d’une boîte de dialogue de message d’erreur. Notez que se passe-t-il lorsque vous utilisez la `Clear` méthode premier : Lorsque vous générez une erreur Visual Basic avec le `Raise` (méthode), les valeurs par défaut de Visual Basic deviennent les propriétés de la `Err` objet.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error, instruction (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally, instruction (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Mots clés (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membres de la bibliothèque d’exécution Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Efface tous les paramètres de propriété de la <see langword="Err" /> objet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez `Clear` à vider explicitement la `Err` après une erreur a été gérée, comme lorsque vous utilisez l’aide de l’objet `On Error Resume Next`. Le `Clear` méthode est appelée automatiquement chaque fois que l’une des instructions suivantes est exécutée :  
  
-   N’importe quel type de `Resume` instruction  
  
-   `Exit Sub`, `Exit Function`ou `Exit Property`  
  
-   N’importe quel `On Error` instruction  
  
-   N’importe quel `Try...Catch...Finally` instruction  
  
    > [!NOTE]
    >  Le `On Error Resume Next` construction peut être préférable `On Error GoTo` lors de la gestion des erreurs générées pendant l’accès à d’autres objets. La vérification `Err` après chaque interaction avec un objet supprime l’ambiguïté dont l’objet est accessible par le code : Vous pouvez être sûr quel objet placé dans le code d’erreur `Err.Number`, ainsi que de l’objet qui a généré l’erreur (l’objet spécifié dans `Err.Source`).  
  
   
  
## Examples  
 Cet exemple utilise le `Err` l’objet `Clear` méthode pour réinitialiser les propriétés numériques de le `Err` objet à zéro et ses propriétés de chaîne pour les chaînes de longueur nulle. Sans l’appel à `Clear`, le deuxième appel à `MsgBox` afficherait le même message d’erreur.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error, instruction (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit un <see langword="String" /> expression contenant une chaîne descriptive associée à une erreur. Lecture/écriture.</summary>
        <value>Retourne ou définit un <see langword="String" /> expression contenant une chaîne descriptive associée à une erreur. Lecture/écriture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Description` propriété comprend une brève description de l’erreur. Utilisez cette propriété pour avertir l’utilisateur d’une erreur que vous ne pouvez pas ou ne souhaitez pas gérer. Lors de la génération d’une erreur définie par l’utilisateur, assignez une courte description de votre erreur à la `Description` propriété. Si le `Description` propriété n’est pas renseignée et la valeur de la <xref:Microsoft.VisualBasic.ErrObject.Number%2A> propriété correspond à une erreur d’exécution Visual Basic, puis la chaîne retournée par la <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> fonction est définie dans le `Description` propriété lors de l’erreur est générée.  
  
   
  
## Examples  
 Cet exemple assigne un message défini par l’utilisateur pour le `Description` propriété de la `Err` objet.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un entier indiquant le numéro de ligne de la dernière instruction exécutée.</summary>
        <value>Le numéro de ligne de la dernière instruction exécutée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si Visual Basic ne rencontre aucun numéro de ligne, elle retourne 0.  
  
   
  
## Examples  
 Cet exemple utilise le `Erl` propriété pour indiquer le numéro de ligne.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne l’exception représentant l’erreur qui s’est produite.</summary>
        <returns>L’exception représentant l’erreur survenue.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `GetException` fonction est disponible uniquement à partir de la `Err` classe d’objet. Il fonctionne avec le `Exception` propriété de la `Err` objet pour afficher l’erreur qui s’est produite.  
  
   
  
## Examples  
 Le code suivant affiche le message assigné à l’exception dans le `Err` objet :  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit un <see langword="Integer" /> contenant l’ID de contexte pour une rubrique dans un fichier d’aide. Lecture/écriture.</summary>
        <value>Retourne ou définit un <see langword="Integer" /> contenant l’ID de contexte pour une rubrique dans un fichier d’aide. Lecture/écriture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `HelpContext` propriété est utilisée pour afficher l’aide contextuelle pour une application. Si un fichier d’aide est spécifié dans `HelpFile`, le `HelpContext` propriété est utilisée pour afficher automatiquement le fichier d’aide identifié. Si les deux le `HelpFile` et `HelpContext` propriétés sont vides, la valeur de la <xref:Microsoft.VisualBasic.ErrObject.Number%2A> propriété est vérifiée. Si la valeur de la `Number` propriété correspond à une valeur d’erreur d’exécution Visual Basic, puis l’ID de contexte de l’aide de Visual Basic pour l’erreur est utilisé. Si la valeur de la `Number` propriété ne correspond pas à une erreur Visual Basic, l’écran de contenu pour le fichier d’aide Visual Basic s’affiche.  
  
> [!NOTE]
>  Vous devez écrire des routines dans votre application pour gérer les erreurs courantes. Lors de la programmation avec un objet, vous pouvez utiliser le fichier d’objet aide pour améliorer la qualité de votre gestion des erreurs, ou pour afficher un message significatif à votre utilisateur si l’erreur n’est pas récupérable.  
  
   
  
## Examples  
 Cet exemple utilise le `HelpContext` propriété de la `Err` objet pour afficher la rubrique d’aide Visual Basic pour le `Overflow` erreur.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit un <see langword="String" /> expression contenant le chemin d’accès qualifié complet à un fichier d’aide. Lecture/écriture.</summary>
        <value>Retourne ou définit un <see langword="String" /> expression contenant le chemin d’accès qualifié complet à un fichier d’aide. Lecture/écriture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un fichier d’aide est spécifié par le `HelpFile` propriété, elle est automatiquement appelée lorsque l’utilisateur appuie sur la touche d’aide (ou la touche F1) dans la boîte de dialogue de message erreur. Si le `HelpContext` propriété contient un contexte valide ID pour le fichier spécifié, cette rubrique est automatiquement affiché. Si aucun `HelpFile` est spécifié, le fichier d’aide Visual Basic s’affiche.  
  
> [!NOTE]
>  Vous devez écrire des routines dans votre application pour gérer les erreurs courantes. Lors de la programmation avec un objet, vous pouvez utiliser le fichier d’objet aide pour améliorer la qualité de votre gestion des erreurs, ou pour afficher un message significatif à votre utilisateur si l’erreur n’est pas récupérable.  
  
   
  
## Examples  
 Cet exemple utilise le `HelpFile` propriété de la `Err` objet pour démarrer le système d’aide. Par défaut, le `HelpFile` propriété comporte le nom du fichier d’aide de Visual Basic.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un code d’erreur système produit par un appel à une bibliothèque de liens dynamiques (DLL).</summary>
        <value>Code d’erreur système produit par un appel à une bibliothèque de liens dynamiques (DLL).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriété s’applique uniquement aux appels DLL effectués à partir de code Visual Basic. Lorsqu’un appel est effectué, la fonction appelée retourne généralement un code indiquant la réussite ou l’échec et le <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriété est remplie. Consultez la documentation pour les fonctions de la DLL déterminer les valeurs de retour qui indiquent la réussite ou l’échec. Chaque fois que le code d’échec est retourné, l’application Visual Basic doit vérifier immédiatement la <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriété. Aucune exception n’est levée lorsque le <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriété est définie.  
  
> [!NOTE]
>  Le <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> propriété est protégée par <xref:System.Security.Permissions.SecurityAction.LinkDemand>, ce qui empêche qu’il soit accessible à partir de code non fiable. Toutefois, <xref:System.Security.Permissions.SecurityAction.LinkDemand> nécessite uniquement l’appelant immédiat doit être <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> autorisation. Si votre code peut être appelé à partir du code partiellement fiable, exposant la valeur de <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> sans validation constitue un risque de sécurité.  
>   
>  Pour les limitations importantes concernant l’utilisation de la <xref:System.Security.Permissions.SecurityAction.LinkDemand> membre, consultez [Demand et. LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Pour plus d’informations sur les autorisations, consultez <xref:System.Security.Permissions.SecurityPermission> et [autorisations d’accès de Code](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Remarque pour les périphériques intelligents de que cette propriété retourne toujours la valeur zéro.  
  
   
  
## Examples  
 L’exemple suivant montre comment vous pouvez utiliser le `LastDllError` propriété après l’appel d’une fonction dans l’API Windows. Le `PrintWindowCoordinates` procédure accepte un handle à une fenêtre et appelle le `GetWindowRect` (fonction). `GetWindowRect` remplit la structure de données RECT avec les longueurs des côtés du rectangle qui composent la fenêtre. Si vous passez un handle non valide, une erreur se produit, et le numéro d’erreur est disponible via le `LastDllError` propriété.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit une valeur numérique spécifiant une erreur. Lecture/écriture.</summary>
        <value>Retourne ou définit une valeur numérique spécifiant une erreur. Lecture/écriture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les `Raise` les arguments sauf `Number` sont facultatifs. Si vous omettez les arguments facultatifs et les paramètres de propriété de la `Err` objet contiennent des valeurs qui n’ont pas été effacées, ces valeurs servent de valeurs pour votre erreur.  
  
 Étant donné que le `Err` objet donne des informations plus riches que lorsque vous générez des erreurs avec le `Error` instruction, `Raise` est utile pour générer des erreurs lors de l’écriture de modules de classe. Par exemple, avec le `Raise` méthode, la source ayant généré l’erreur peut être spécifiée dans le `Source` propriété, aide en ligne pour l’erreur peut être référencée et ainsi de suite.  
  
 Lors du retour d’une erreur définie par l’utilisateur à partir d’un objet, définissez `Err.Number` en ajoutant le nombre que vous avez sélectionnée comme un code d’erreur à la `VbObjectError` constante. Par exemple, vous utilisez le code suivant pour retourner le nombre 1051 comme code d’erreur :  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 Cet exemple illustre une utilisation typique de la `Number` propriété dans une routine de gestion des erreurs.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 Cet exemple utilise le `Err` l’objet `Raise` méthode permettant de générer une erreur d’origine dans une fonction écrite en Visual Basic. La fonction appelante peut intercepter l’erreur et la signaler à l’utilisateur. Remarquez que la procédure `CallingProcedure` compare le type d’informations que vous pouvez dériver d’un `Err` objet avec les informations que vous pouvez dériver d’un `Exception` objet.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> est supérieur à 65535.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Obligatoire. <see langword="Long" /> entier qui identifie la nature de l’erreur. Les erreurs Visual Basic se situent dans la plage 0-65535 ; la plage 0-512 est réservée aux erreurs système ; la plage 513-65535 est disponible pour les erreurs définies par l’utilisateur. Lors de la définition du <see langword="Number" /> propriété votre propre code d’erreur dans un module de classe, vous ajoutez votre numéro de code d’erreur à la <see langword="vbObjectError" /> constante. Par exemple, pour générer le numéro d’erreur 513, affectez la valeur <c>vbObjectError + 513</c> à la propriété <see langword="Number" />.</param>
        <param name="Source">Facultatif. <see langword="String" /> expression nommant l’objet ou l’application qui a généré l’erreur. Lorsque vous définissez cette propriété pour un objet, utilisez la forme <c>project</c>.<c>class</c>. Si <paramref name="Source" /> n’est pas spécifié, l’ID de processus du projet Visual Basic actuel est utilisé.</param>
        <param name="Description">Facultatif. <see langword="String" /> expression décrivant l’erreur. Si non spécifié, la valeur dans le <see langword="Number" /> propriété est examinée. S’il peut être mappé à une erreur d’exécution Visual Basic, la chaîne de code qui serait retournée par la <see langword="Error" /> fonction est utilisée comme le <see langword="Description" /> propriété. S’il n’existe aucune erreur Visual Basic correspondant à la <see langword="Number" /> propriété, le message « erreur définie par l’Application ou définie par l’objet » est utilisée.</param>
        <param name="HelpFile">Facultatif. Le chemin d’accès complet au fichier d’aide dans lequel l’aide sur cette erreur peut être trouvé. Si non spécifié, Visual Basic utilise le lecteur complet, le chemin d’accès et le nom du fichier d’aide de Visual Basic.</param>
        <param name="HelpContext">Facultatif. L’ID de contexte identifiant une rubrique dans <paramref name="HelpFile" /> qui fournit une aide pour l’erreur. Si omis, l’ID de contexte de fichier d’aide Visual Basic pour l’erreur correspondant à la <see langword="Number" /> propriété est utilisée, si elle existe.</param>
        <summary>Génère une erreur d’exécution ; peut être utilisé au lieu du <see langword="Error" /> instruction.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les `Raise` les arguments sauf `Number` sont facultatifs. Si vous omettez les arguments facultatifs et les paramètres de propriété de la `Err` objet contiennent des valeurs qui n’ont pas été effacées, ces valeurs servent de valeurs pour votre erreur.  
  
 Étant donné que le `Err` objet donne des informations plus riches que lorsque vous générez des erreurs avec le `Error` instruction, `Raise` est utile pour générer des erreurs lors de l’écriture de modules de classe. Par exemple, avec le `Raise` méthode, la source ayant généré l’erreur peut être spécifiée dans le `Source` propriété, aide en ligne pour l’erreur peut être référencée et ainsi de suite.  
  
   
  
## Examples  
 Cet exemple utilise le `Err` l’objet `Raise` méthode permettant de générer une erreur dans une fonction écrite en Visual Basic. La fonction appelante peut intercepter l’erreur et la signaler à l’utilisateur avec une boîte de message.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error, instruction</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error, instruction (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retourne ou définit un <see langword="String" /> expression qui spécifie le nom de l’objet ou l’application qui a généré l’erreur. Lecture/écriture.</summary>
        <value>Retourne ou définit un <see langword="String" /> expression qui spécifie le nom de l’objet ou l’application qui a généré l’erreur. Lecture/écriture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Source` propriété spécifie un `String` expression représentant l’objet qui a généré l’erreur ; l’expression est généralement le nom de classe de l’objet ou l’ID de processus. Utilisez le `Source` propriété pour fournir des informations lorsque votre code est incapable de gérer une erreur générée dans un objet accessible. Par exemple, si vous accédez à Microsoft Excel et qu’il génère un `Division by zero` erreur, Microsoft Excel définit `Err.Number` à son code d’erreur pour cette erreur et les jeux `Source` à « Excel.Application ».  
  
 Lorsque l’application génère une erreur à partir du code, `Source` votre ID d’application par programmation. Dans une classe, `Source` doit contenir un nom ayant la forme *projet*. *classe*. Lorsqu’une erreur inattendue se produit dans votre code, le `Source` propriété est automatiquement renseignée. Les erreurs dans un module, `Source` contient le nom du projet.  
  
   
  
## Examples  
 Cet exemple illustre l’utilisation de la `Source` propriété dans une routine classique de gestion des erreurs. Lorsqu’une erreur est levée à partir de `Class1`, la chaîne `"Class1"` est affectée à la `Source` propriété de la `Err` objet. Cette chaîne est ensuite affichée dans un message d’information indiquant la source et le numéro de l’erreur.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error, instruction (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>