<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0818b20d88b4475c4e82d722179c62133eef703" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65135723" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e440d-101">Le <see langword="Information" /> module contient les procédures utilisées pour retourner, tester ou vérifier les informations.</span><span class="sxs-lookup"><span data-stu-id="e440d-101">The <see langword="Information" /> module contains the procedures used to return, test for, or verify information.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-102">Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui fournissent des informations d’erreur, valident des données, déterminent les limites du tableau et récupèrent des informations de couleur et le type de données.</span><span class="sxs-lookup"><span data-stu-id="e440d-102">This module supports the Visual Basic language keywords and run-time library members that provide error information, validate data, determine array bounds, and retrieve data type and color information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-103">L’exemple suivant utilise le `VbTypeName` fonction pour retourner les noms de type de données de plusieurs variables.</span><span class="sxs-lookup"><span data-stu-id="e440d-103">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md"><span data-ttu-id="e440d-104">Liste des informations et des interactions</span><span class="sxs-lookup"><span data-stu-id="e440d-104">Information and Interaction Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md"><span data-ttu-id="e440d-105">Data Types Summary</span><span class="sxs-lookup"><span data-stu-id="e440d-105">Data Types Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md"><span data-ttu-id="e440d-106">Liste des déclarations et des constantes</span><span class="sxs-lookup"><span data-stu-id="e440d-106">Declarations and Constants Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="e440d-107">Mots clés (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-107">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="e440d-108">Membres de la bibliothèque d’exécution Visual Basic</span><span class="sxs-lookup"><span data-stu-id="e440d-108">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e440d-109">Retourne un entier indiquant le numéro de ligne de la dernière instruction exécutée.</span><span class="sxs-lookup"><span data-stu-id="e440d-109">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="e440d-110">Lecture seule.</span><span class="sxs-lookup"><span data-stu-id="e440d-110">Read-only.</span></span></summary>
        <returns><span data-ttu-id="e440d-111">Retourne un entier indiquant le numéro de ligne de la dernière instruction exécutée.</span><span class="sxs-lookup"><span data-stu-id="e440d-111">Returns an integer indicating the line number of the last executed statement.</span></span> <span data-ttu-id="e440d-112">Lecture seule.</span><span class="sxs-lookup"><span data-stu-id="e440d-112">Read-only.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-113">Si Visual Basic ne rencontre aucun numéro de ligne, elle retourne 0.</span><span class="sxs-lookup"><span data-stu-id="e440d-113">If Visual Basic encounters no line numbers, it returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-114">Cet exemple utilise le `Erl` propriété pour indiquer le numéro de ligne.</span><span class="sxs-lookup"><span data-stu-id="e440d-114">This example uses the `Erl` property to indicate the line number.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e440d-115">Contient des informations relatives aux erreurs d’exécution.</span><span class="sxs-lookup"><span data-stu-id="e440d-115">Contains information about run-time errors.</span></span></summary>
        <returns><span data-ttu-id="e440d-116">Contient des informations relatives aux erreurs d’exécution.</span><span class="sxs-lookup"><span data-stu-id="e440d-116">Contains information about run-time errors.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-117">Les propriétés de la `Err` objet sont définies par le Générateur d’une erreur - Visual Basic, un objet ou le programmeur.</span><span class="sxs-lookup"><span data-stu-id="e440d-117">The properties of the `Err` object are set by the generator of an error - Visual Basic, an object, or the programmer.</span></span>  
  
 <span data-ttu-id="e440d-118">Lorsqu’une erreur d’exécution se produit, les propriétés de la `Err` sont remplis avec les informations qui identifient l’erreur de l’objet et que vous pouvez utiliser pour gérer l’erreur.</span><span class="sxs-lookup"><span data-stu-id="e440d-118">When a run-time error occurs, the properties of the `Err` object are filled with information that uniquely identifies the error and that you can use to handle the error.</span></span> <span data-ttu-id="e440d-119">Pour générer une erreur d’exécution dans votre code, utilisez le `Raise` (méthode).</span><span class="sxs-lookup"><span data-stu-id="e440d-119">To generate a run-time error in your code, use the `Raise` method.</span></span>  
  
 <span data-ttu-id="e440d-120">Le `Err` des propriétés de l’objet sont rétablies à zéro ou des chaînes de longueur nulle (« ») après un `Exit Sub`, `Exit Function`, `Exit Property`, ou `Resume Next` instruction dans une routine de gestion des erreurs.</span><span class="sxs-lookup"><span data-stu-id="e440d-120">The `Err` object's properties are reset to zero or zero-length strings ("") after an `Exit Sub`, `Exit Function`, `Exit Property`, or `Resume Next` statement within an error-handling routine.</span></span> <span data-ttu-id="e440d-121">À l’aide de n’importe quel écran de la `Resume` instruction en dehors d’une routine de gestion des erreurs ne réinitialise pas le `Err` propriétés de l’objet.</span><span class="sxs-lookup"><span data-stu-id="e440d-121">Using any form of the `Resume` statement outside of an error-handling routine will not reset the `Err` object's properties.</span></span> <span data-ttu-id="e440d-122">Vous pouvez utiliser la `Clear` méthode pour réinitialiser explicitement `Err`.</span><span class="sxs-lookup"><span data-stu-id="e440d-122">You can use the `Clear` method to explicitly reset `Err`.</span></span>  
  
 <span data-ttu-id="e440d-123">Utilisez le `Raise` méthode plutôt que la `Error` instruction à générer des erreurs d’exécution pour les erreurs système et des modules de classe.</span><span class="sxs-lookup"><span data-stu-id="e440d-123">Use the `Raise` method rather than the `Error` statement to generate run-time errors for system errors and class modules.</span></span> <span data-ttu-id="e440d-124">Décider s’il faut utiliser le `Raise` méthode dans un autre code dépend de la richesse des informations que vous souhaitez retourner.</span><span class="sxs-lookup"><span data-stu-id="e440d-124">Your decision about whether to use the `Raise` method in other code depends on the richness of the information you want to return.</span></span>  
  
 <span data-ttu-id="e440d-125">Le `Err` objet est un objet intrinsèque avec une portée globale.</span><span class="sxs-lookup"><span data-stu-id="e440d-125">The `Err` object is an intrinsic object with global scope.</span></span> <span data-ttu-id="e440d-126">Par conséquent, il est inutile créer une instance de celui-ci dans votre code.</span><span class="sxs-lookup"><span data-stu-id="e440d-126">Therefore, you do not need to create an instance of it in your code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-127">Cet exemple utilise les propriétés de la `Err` objet lors de la construction d’une boîte de dialogue de message d’erreur.</span><span class="sxs-lookup"><span data-stu-id="e440d-127">This example uses the properties of the `Err` object in constructing an error-message dialog box.</span></span> <span data-ttu-id="e440d-128">Notez que si vous utilisez le `Clear` méthode tout d’abord, lorsque vous générez une erreur Visual Basic avec le `Raise` (méthode), les valeurs par défaut de Visual Basic deviennent les propriétés de la `Err` objet.</span><span class="sxs-lookup"><span data-stu-id="e440d-128">Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.</span></span>  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md"><span data-ttu-id="e440d-129">Error, instruction</span><span class="sxs-lookup"><span data-stu-id="e440d-129">Error Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md"><span data-ttu-id="e440d-130">On Error, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-130">On Error Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md"><span data-ttu-id="e440d-131">Exit, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-131">Exit Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md"><span data-ttu-id="e440d-132">Resume, instruction</span><span class="sxs-lookup"><span data-stu-id="e440d-132">Resume Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md"><span data-ttu-id="e440d-133">Messages d'erreur (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-133">Error Messages (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md"><span data-ttu-id="e440d-134">Try...Catch...Finally, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-134">Try...Catch...Finally Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="e440d-135">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-135">Required.</span></span> <span data-ttu-id="e440d-136"><see langword="Object" /> variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-136"><see langword="Object" /> variable.</span></span></param>
        <summary><span data-ttu-id="e440d-137">Retourne un <see langword="Boolean" /> valeur indiquant si une variable pointe vers un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-137">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></summary>
        <returns><span data-ttu-id="e440d-138">Retourne un <see langword="Boolean" /> valeur indiquant si une variable pointe vers un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-138">Returns a <see langword="Boolean" /> value indicating whether a variable points to an array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-139">`IsArray` Retourne `True` si la variable pointe vers un tableau ; sinon, elle retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="e440d-139">`IsArray` returns `True` if the variable points to an array; otherwise, it returns `False`.</span></span> <span data-ttu-id="e440d-140">`IsArray` est particulièrement utile avec des objets qui peuvent contenir des tableaux.</span><span class="sxs-lookup"><span data-stu-id="e440d-140">`IsArray` is especially useful with objects that might contain arrays.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-141">Cet exemple utilise le `IsArray` (fonction) pour vérifier si plusieurs variables font référence à un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-141">This example uses the `IsArray` function to check if several variables refer to an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md"><span data-ttu-id="e440d-142">Tableaux dans Visual Basic</span><span class="sxs-lookup"><span data-stu-id="e440d-142">Arrays in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e440d-143">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-143">Required.</span></span> <span data-ttu-id="e440d-144"><see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="e440d-144"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="e440d-145">Retourne un <see langword="Boolean" /> valeur indiquant si une expression représente une valide <see langword="Date" /> valeur.</span><span class="sxs-lookup"><span data-stu-id="e440d-145">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></summary>
        <returns><span data-ttu-id="e440d-146">Retourne un <see langword="Boolean" /> valeur indiquant si une expression représente une valide <see langword="Date" /> valeur.</span><span class="sxs-lookup"><span data-stu-id="e440d-146">Returns a <see langword="Boolean" /> value indicating whether an expression represents a valid <see langword="Date" /> value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-147">`IsDate` Retourne `True` si `Expression` est du <xref:System.DateTime> données tapez ou peut être convertie à ce dernier ; sinon, elle retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="e440d-147">`IsDate` returns `True` if `Expression` is of the <xref:System.DateTime> data type or can be converted to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="e440d-148">Le <xref:System.DateTime> type de données contient une valeur de date et une valeur d’heure.</span><span class="sxs-lookup"><span data-stu-id="e440d-148">The <xref:System.DateTime> data type holds both a date value and a time value.</span></span> <span data-ttu-id="e440d-149">`IsDate` Retourne `True` si `Expression` représente une date valide, une heure valide, ou une date valide et une heure.</span><span class="sxs-lookup"><span data-stu-id="e440d-149">`IsDate` returns `True` if `Expression` represents a valid date, a valid time, or a valid date and time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-150">L’exemple suivant utilise le `IsDate` fonction permettant de déterminer si plusieurs variables représentent valide <xref:System.DateTime> valeurs.</span><span class="sxs-lookup"><span data-stu-id="e440d-150">The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.</span></span>  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 <span data-ttu-id="e440d-151">Dans l’exemple précédent, `IsDate` retourne `True` pour les quatre premiers appels et `False` pour le dernier appel.</span><span class="sxs-lookup"><span data-stu-id="e440d-151">In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e440d-152">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-152">Required.</span></span> <span data-ttu-id="e440d-153"><see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="e440d-153"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="e440d-154">Retourne un <see langword="Boolean" /> valeur indiquant si une expression correspond à la <see cref="T:System.DBNull" /> classe.</span><span class="sxs-lookup"><span data-stu-id="e440d-154">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></summary>
        <returns><span data-ttu-id="e440d-155">Retourne un <see langword="Boolean" /> valeur indiquant si une expression correspond à la <see cref="T:System.DBNull" /> classe.</span><span class="sxs-lookup"><span data-stu-id="e440d-155">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-156">`IsDBNull` Retourne `True` si le type de données de `Expression` prend la valeur de la <xref:System.DBNull> type ; sinon, `IsDBNull` retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="e440d-156">`IsDBNull` returns `True` if the data type of `Expression` evaluates to the <xref:System.DBNull> type; otherwise, `IsDBNull` returns `False`.</span></span>  
  
 <span data-ttu-id="e440d-157">Le <xref:System.DBNull?displayProperty=nameWithType> valeur indique que le `Object` représente des données manquantes ou inexistantes.</span><span class="sxs-lookup"><span data-stu-id="e440d-157">The <xref:System.DBNull?displayProperty=nameWithType> value indicates that the `Object` represents missing or nonexistent data.</span></span> <span data-ttu-id="e440d-158">`DBNull` n’est pas identique à `Nothing`, ce qui indique qu’une variable n’a pas encore été initialisée.</span><span class="sxs-lookup"><span data-stu-id="e440d-158">`DBNull` is not the same as `Nothing`, which indicates that a variable has not yet been initialized.</span></span> <span data-ttu-id="e440d-159">`DBNull` n’est également pas identique à une chaîne de longueur nulle (`""`), qui est parfois appelé une chaîne null.</span><span class="sxs-lookup"><span data-stu-id="e440d-159">`DBNull` is also not the same as a zero-length string (`""`), which is sometimes referred to as a null string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-160">Cet exemple utilise le `IsDBNull` fonction permettant de déterminer si une variable a la valeur `DBNull`.</span><span class="sxs-lookup"><span data-stu-id="e440d-160">This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.</span></span>  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e440d-161">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-161">Required.</span></span> <span data-ttu-id="e440d-162"><see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="e440d-162"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="e440d-163">Retourne un <see langword="Boolean" /> valeur indiquant si une expression est un type d’exception.</span><span class="sxs-lookup"><span data-stu-id="e440d-163">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></summary>
        <returns><span data-ttu-id="e440d-164">Retourne un <see langword="Boolean" /> valeur indiquant si une expression est un type d’exception.</span><span class="sxs-lookup"><span data-stu-id="e440d-164">Returns a <see langword="Boolean" /> value indicating whether an expression is an exception type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-165">`IsError` Retourne `True` si l’expression représente un `Object` variable qui dérive de la <xref:System.Exception> classe dans le <xref:System> espace de noms.</span><span class="sxs-lookup"><span data-stu-id="e440d-165">`IsError` returns `True` if the expression represents an `Object` variable that derives from the <xref:System.Exception> class in the <xref:System> namespace.</span></span>  
  
 <span data-ttu-id="e440d-166">Une exception qui dérive de <xref:System.Exception?displayProperty=nameWithType> peut être interceptée par le `Try...Catch...Finally` instructions.</span><span class="sxs-lookup"><span data-stu-id="e440d-166">An exception that derives from <xref:System.Exception?displayProperty=nameWithType> can be caught with the `Try...Catch...Finally` statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-167">L’exemple suivant utilise le `IsError` fonction permettant de vérifier si une expression représente une exception système.</span><span class="sxs-lookup"><span data-stu-id="e440d-167">The following example uses the `IsError` function to check if an expression represents a system exception.</span></span>  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e440d-168">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-168">Required.</span></span> <span data-ttu-id="e440d-169"><see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="e440d-169"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="e440d-170">Retourne un <see langword="Boolean" /> valeur indiquant si une expression n’a aucun objet qui lui est assignée.</span><span class="sxs-lookup"><span data-stu-id="e440d-170">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></summary>
        <returns><span data-ttu-id="e440d-171">Retourne un <see langword="Boolean" /> valeur indiquant si une expression n’a aucun objet qui lui est assignée.</span><span class="sxs-lookup"><span data-stu-id="e440d-171">Returns a <see langword="Boolean" /> value indicating whether an expression has no object assigned to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-172">`IsNothing` Retourne `True` si l’expression représente une variable objet qui n’a actuellement aucun objet assigné à ce dernier ; sinon, elle retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="e440d-172">`IsNothing` returns `True` if the expression represents an object variable that currently has no object assigned to it; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="e440d-173">`IsNothing` est prévu pour fonctionner sur les types référence.</span><span class="sxs-lookup"><span data-stu-id="e440d-173">`IsNothing` is intended to work on reference types.</span></span> <span data-ttu-id="e440d-174">Un type valeur ne peut pas contenir la valeur et revient à sa valeur par défaut si vous affectez `Nothing` à celui-ci.</span><span class="sxs-lookup"><span data-stu-id="e440d-174">A value type cannot hold a value of  and reverts to its default value if you assign `Nothing` to it.</span></span> <span data-ttu-id="e440d-175">Si vous fournissez un type valeur dans `Expression`, `IsNothing` retourne toujours `False`.</span><span class="sxs-lookup"><span data-stu-id="e440d-175">If you supply a value type in `Expression`, `IsNothing` always returns `False`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-176">L’exemple suivant utilise le `IsNothing` fonction permettant de déterminer si une variable objet est associée à une instance d’objet.</span><span class="sxs-lookup"><span data-stu-id="e440d-176">The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.</span></span>  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="e440d-177">Types valeur et types référence</span><span class="sxs-lookup"><span data-stu-id="e440d-177">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e440d-178">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-178">Required.</span></span> <span data-ttu-id="e440d-179"><see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="e440d-179"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="e440d-180">Retourne un <see langword="Boolean" /> valeur indiquant si une expression peut être évaluée en tant que nombre.</span><span class="sxs-lookup"><span data-stu-id="e440d-180">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></summary>
        <returns><span data-ttu-id="e440d-181">Retourne un <see langword="Boolean" /> valeur indiquant si une expression peut être évaluée en tant que nombre.</span><span class="sxs-lookup"><span data-stu-id="e440d-181">Returns a <see langword="Boolean" /> value indicating whether an expression can be evaluated as a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-182">`IsNumeric` Retourne `True` si le type de données de `Expression` est `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, ou `UShort`.</span><span class="sxs-lookup"><span data-stu-id="e440d-182">`IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`.</span></span> <span data-ttu-id="e440d-183">Elle retourne également `True` si `Expression` est un `Char`, `String`, ou `Object` qui peut être converti correctement à un nombre.</span><span class="sxs-lookup"><span data-stu-id="e440d-183">It also returns `True` if `Expression` is a `Char`, `String`, or `Object` that can be successfully converted to a number.</span></span> <span data-ttu-id="e440d-184">`Expression` peut contenir des caractères non numériques.</span><span class="sxs-lookup"><span data-stu-id="e440d-184">`Expression` can contain non-numeric characters.</span></span> <span data-ttu-id="e440d-185">`IsNumeric` Retourne `True` si `Expression` est une chaîne qui contient un nombre hexadécimal ou octal valide.</span><span class="sxs-lookup"><span data-stu-id="e440d-185">`IsNumeric` returns `True` if `Expression` is a string that contains a valid hexadecimal or octal number.</span></span> <span data-ttu-id="e440d-186">`IsNumeric` retourne également `True` si `Expression` contient une expression numérique valide qui commence par un + ou - de caractères ou contient des virgules.</span><span class="sxs-lookup"><span data-stu-id="e440d-186">`IsNumeric` also returns `True` if `Expression` contains a valid numeric expression that begins with a + or - character or contains commas.</span></span>  
  
 <span data-ttu-id="e440d-187">`IsNumeric` Retourne `False` si `Expression` est de type de données `Date`.</span><span class="sxs-lookup"><span data-stu-id="e440d-187">`IsNumeric` returns `False` if `Expression` is of data type `Date`.</span></span> <span data-ttu-id="e440d-188">Elle retourne `False` si `Expression` est un `Char`, `String`, ou `Object` qui ne peut pas être correctement converti en un nombre.</span><span class="sxs-lookup"><span data-stu-id="e440d-188">It returns `False` if `Expression` is a `Char`, `String`, or `Object` that cannot be successfully converted to a number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-189">L’exemple suivant utilise le `IsNumeric` fonction permettant de déterminer si le contenu d’une variable peut être évalué comme un nombre.</span><span class="sxs-lookup"><span data-stu-id="e440d-189">The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.</span></span>  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="e440d-190">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-190">Required.</span></span> <span data-ttu-id="e440d-191"><see langword="Object" /> expression.</span><span class="sxs-lookup"><span data-stu-id="e440d-191"><see langword="Object" /> expression.</span></span></param>
        <summary><span data-ttu-id="e440d-192">Retourne un <see langword="Boolean" /> valeur indiquant si une expression correspond à un type référence.</span><span class="sxs-lookup"><span data-stu-id="e440d-192">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></summary>
        <returns><span data-ttu-id="e440d-193">Retourne un <see langword="Boolean" /> valeur indiquant si une expression correspond à un type référence.</span><span class="sxs-lookup"><span data-stu-id="e440d-193">Returns a <see langword="Boolean" /> value indicating whether an expression evaluates to a reference type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-194">`IsReference` Retourne `True` si `Expression` représente un type de référence, comme une instance de classe, un `String` type, ou un tableau de n’importe quel type ; sinon, elle retourne `False`.</span><span class="sxs-lookup"><span data-stu-id="e440d-194">`IsReference` returns `True` if `Expression` represents a reference type, such as a class instance, a `String` type, or an array of any type; otherwise, it returns `False`.</span></span>  
  
 <span data-ttu-id="e440d-195">Un type référence contient un pointeur vers les données stockées ailleurs en mémoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-195">A reference type contains a pointer to data stored elsewhere in memory.</span></span> <span data-ttu-id="e440d-196">Un type valeur contient ses propres données.</span><span class="sxs-lookup"><span data-stu-id="e440d-196">A value type contains its own data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-197">Cet exemple utilise le `IsReference` (fonction) pour vérifier si plusieurs variables font référence aux types référence.</span><span class="sxs-lookup"><span data-stu-id="e440d-197">This example uses the `IsReference` function to check if several variables refer to reference types.</span></span>  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 <span data-ttu-id="e440d-198">Dans l’exemple précédent, les trois premiers appels à `IsReference` retourner `True`.</span><span class="sxs-lookup"><span data-stu-id="e440d-198">In the preceding example, the first three calls to `IsReference` return `True`.</span></span> <span data-ttu-id="e440d-199">Retourne le dernier appel `False`, car `Integer` est un type valeur, pas un type référence.</span><span class="sxs-lookup"><span data-stu-id="e440d-199">The last call returns `False`, because `Integer` is a value type, not a reference type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md"><span data-ttu-id="e440d-200">Types valeur et types référence</span><span class="sxs-lookup"><span data-stu-id="e440d-200">Value Types and Reference Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="e440d-201">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-201">Required.</span></span> <span data-ttu-id="e440d-202">Tableau de n’importe quel type de données.</span><span class="sxs-lookup"><span data-stu-id="e440d-202">Array of any data type.</span></span> <span data-ttu-id="e440d-203">Tableau dans lequel vous souhaitez rechercher le plus petit indice possible d’une dimension.</span><span class="sxs-lookup"><span data-stu-id="e440d-203">The array in which you want to find the lowest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="e440d-204">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="e440d-204">Optional.</span></span> <span data-ttu-id="e440d-205"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-205"><see langword="Integer" />.</span></span> <span data-ttu-id="e440d-206">La dimension pour laquelle le plus petit indice possible doit être retourné.</span><span class="sxs-lookup"><span data-stu-id="e440d-206">The dimension for which the lowest possible subscript is to be returned.</span></span> <span data-ttu-id="e440d-207">Utilisez 1 pour la première dimension, 2 pour la deuxième et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="e440d-207">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="e440d-208">Si <paramref name="Rank" /> est omis, 1 est pris en compte.</span><span class="sxs-lookup"><span data-stu-id="e440d-208">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="e440d-209">Retourne le plus petit indice disponible pour la dimension indiquée d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-209">Returns the lowest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="e440d-210"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-210"><see langword="Integer" />.</span></span> <span data-ttu-id="e440d-211">La valeur la plus faible que l’indice pour la dimension spécifiée peut contenir.</span><span class="sxs-lookup"><span data-stu-id="e440d-211">The lowest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="e440d-212"><see langword="LBound" /> Retourne toujours 0 à condition que <paramref name="Array" /> a été initialisé, même si elle n’a aucun éléments, par exemple si c’est une chaîne de longueur nulle.</span><span class="sxs-lookup"><span data-stu-id="e440d-212"><see langword="LBound" /> always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string.</span></span> <span data-ttu-id="e440d-213">Si <paramref name="Array" /> est <see langword="Nothing" />, <see langword="LBound" /> lève une <see cref="T:System.ArgumentNullException" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-213">If <paramref name="Array" /> is <see langword="Nothing" />, <see langword="LBound" /> throws an <see cref="T:System.ArgumentNullException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-214">Compte tenu que les indices de tableau commencent à 0, le plus petit indice disponible pour chaque dimension est toujours 0.</span><span class="sxs-lookup"><span data-stu-id="e440d-214">Since array subscripts start at 0, the lowest available subscript for every dimension is always 0.</span></span>  
  
 <span data-ttu-id="e440d-215">Pour un tableau avec les dimensions suivantes, `LBound` retourne les valeurs dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="e440d-215">For an array with the following dimensions, `LBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="e440d-216">Appel à LBound</span><span class="sxs-lookup"><span data-stu-id="e440d-216">Call to LBound</span></span>|<span data-ttu-id="e440d-217">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="e440d-217">Return value</span></span>|  
|--------------------|------------------|  
|`LBound(a, 1)`|<span data-ttu-id="e440d-218">0</span><span class="sxs-lookup"><span data-stu-id="e440d-218">0</span></span>|  
|`LBound(a, 2)`|<span data-ttu-id="e440d-219">0</span><span class="sxs-lookup"><span data-stu-id="e440d-219">0</span></span>|  
|`LBound(a, 3)`|<span data-ttu-id="e440d-220">0</span><span class="sxs-lookup"><span data-stu-id="e440d-220">0</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e440d-221">L’exemple suivant utilise le `LBound` fonction permettant de déterminer le plus petit indice disponible pour la dimension indiquée d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-221">The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e440d-222"><paramref name="Array" /> a la valeur <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-222"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="e440d-223"><paramref name="Rank" /> inférieur à 1, ou <paramref name="Rank" /> est supérieur au rang de <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-223"><paramref name="Rank" /> less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="e440d-224">Dim, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-224">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="e440d-225">ReDim, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-225">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color"><span data-ttu-id="e440d-226">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-226">Required.</span></span> <span data-ttu-id="e440d-227">Nombre entier compris entre 0 et 15.</span><span class="sxs-lookup"><span data-stu-id="e440d-227">A whole number in the range 0-15.</span></span></param>
        <summary><span data-ttu-id="e440d-228">Retourne un <see langword="Integer" /> nombre de couleurs de valeur représentant le code de couleur RVB correspondant à l’élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="e440d-228">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></summary>
        <returns><span data-ttu-id="e440d-229">Retourne un <see langword="Integer" /> nombre de couleurs de valeur représentant le code de couleur RVB correspondant à l’élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="e440d-229">Returns an <see langword="Integer" /> value representing the RGB color code corresponding to the specified color number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-230">À partir de l’octet le moins significatif, la valeur retournée spécifie les valeurs rouges, vert et bleus utilisées pour définir la couleur appropriée dans le système RVB utilisé par le langage Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e440d-230">Starting with the least-significant byte, the returned value specifies the red, green, and blue values used to set the appropriate color in the RGB system used by the Visual Basic language.</span></span>  
  
 <span data-ttu-id="e440d-231">Le `Color` argument possède les paramètres.</span><span class="sxs-lookup"><span data-stu-id="e440d-231">The `Color` argument has these settings.</span></span>  
  
|<span data-ttu-id="e440d-232">nombre</span><span class="sxs-lookup"><span data-stu-id="e440d-232">Number</span></span>|<span data-ttu-id="e440d-233">Color</span><span class="sxs-lookup"><span data-stu-id="e440d-233">Color</span></span>|<span data-ttu-id="e440d-234">nombre</span><span class="sxs-lookup"><span data-stu-id="e440d-234">Number</span></span>|<span data-ttu-id="e440d-235">Color</span><span class="sxs-lookup"><span data-stu-id="e440d-235">Color</span></span>|  
|------------|-----------|------------|-----------|  
|<span data-ttu-id="e440d-236">0</span><span class="sxs-lookup"><span data-stu-id="e440d-236">0</span></span>|<span data-ttu-id="e440d-237">Noir</span><span class="sxs-lookup"><span data-stu-id="e440d-237">Black</span></span>|<span data-ttu-id="e440d-238">8</span><span class="sxs-lookup"><span data-stu-id="e440d-238">8</span></span>|<span data-ttu-id="e440d-239">Gris</span><span class="sxs-lookup"><span data-stu-id="e440d-239">Gray</span></span>|  
|<span data-ttu-id="e440d-240">1</span><span class="sxs-lookup"><span data-stu-id="e440d-240">1</span></span>|<span data-ttu-id="e440d-241">Bleu</span><span class="sxs-lookup"><span data-stu-id="e440d-241">Blue</span></span>|<span data-ttu-id="e440d-242">9</span><span class="sxs-lookup"><span data-stu-id="e440d-242">9</span></span>|<span data-ttu-id="e440d-243">Bleu clair</span><span class="sxs-lookup"><span data-stu-id="e440d-243">Light blue</span></span>|  
|<span data-ttu-id="e440d-244">2</span><span class="sxs-lookup"><span data-stu-id="e440d-244">2</span></span>|<span data-ttu-id="e440d-245">Vert</span><span class="sxs-lookup"><span data-stu-id="e440d-245">Green</span></span>|<span data-ttu-id="e440d-246">10</span><span class="sxs-lookup"><span data-stu-id="e440d-246">10</span></span>|<span data-ttu-id="e440d-247">Vert clair</span><span class="sxs-lookup"><span data-stu-id="e440d-247">Light green</span></span>|  
|<span data-ttu-id="e440d-248">3</span><span class="sxs-lookup"><span data-stu-id="e440d-248">3</span></span>|<span data-ttu-id="e440d-249">Cyan</span><span class="sxs-lookup"><span data-stu-id="e440d-249">Cyan</span></span>|<span data-ttu-id="e440d-250">11</span><span class="sxs-lookup"><span data-stu-id="e440d-250">11</span></span>|<span data-ttu-id="e440d-251">Cyan clair</span><span class="sxs-lookup"><span data-stu-id="e440d-251">Light cyan</span></span>|  
|<span data-ttu-id="e440d-252">4</span><span class="sxs-lookup"><span data-stu-id="e440d-252">4</span></span>|<span data-ttu-id="e440d-253">Rouge</span><span class="sxs-lookup"><span data-stu-id="e440d-253">Red</span></span>|<span data-ttu-id="e440d-254">12</span><span class="sxs-lookup"><span data-stu-id="e440d-254">12</span></span>|<span data-ttu-id="e440d-255">Rouge clair</span><span class="sxs-lookup"><span data-stu-id="e440d-255">Light red</span></span>|  
|<span data-ttu-id="e440d-256">5</span><span class="sxs-lookup"><span data-stu-id="e440d-256">5</span></span>|<span data-ttu-id="e440d-257">Magenta</span><span class="sxs-lookup"><span data-stu-id="e440d-257">Magenta</span></span>|<span data-ttu-id="e440d-258">13</span><span class="sxs-lookup"><span data-stu-id="e440d-258">13</span></span>|<span data-ttu-id="e440d-259">Magenta clair</span><span class="sxs-lookup"><span data-stu-id="e440d-259">Light magenta</span></span>|  
|<span data-ttu-id="e440d-260">6</span><span class="sxs-lookup"><span data-stu-id="e440d-260">6</span></span>|<span data-ttu-id="e440d-261">Jaune</span><span class="sxs-lookup"><span data-stu-id="e440d-261">Yellow</span></span>|<span data-ttu-id="e440d-262">14</span><span class="sxs-lookup"><span data-stu-id="e440d-262">14</span></span>|<span data-ttu-id="e440d-263">Jaune clair</span><span class="sxs-lookup"><span data-stu-id="e440d-263">Light yellow</span></span>|  
|<span data-ttu-id="e440d-264">7</span><span class="sxs-lookup"><span data-stu-id="e440d-264">7</span></span>|<span data-ttu-id="e440d-265">Blanc</span><span class="sxs-lookup"><span data-stu-id="e440d-265">White</span></span>|<span data-ttu-id="e440d-266">15</span><span class="sxs-lookup"><span data-stu-id="e440d-266">15</span></span>|<span data-ttu-id="e440d-267">Blanc brillant</span><span class="sxs-lookup"><span data-stu-id="e440d-267">Bright white</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e440d-268">Cet exemple utilise le `QBColor` fonction permettant de modifier la couleur indiquée par `colorInteger`.</span><span class="sxs-lookup"><span data-stu-id="e440d-268">This example uses the `QBColor` function to change to the color indicated by `colorInteger`.</span></span> <span data-ttu-id="e440d-269">`QBColor` accepte les valeurs de nombre entier compris entre 0 et 15.</span><span class="sxs-lookup"><span data-stu-id="e440d-269">`QBColor` accepts integer values between 0 and 15.</span></span>  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e440d-270"><paramref name="Color" /> est en dehors de la plage 0 et 15 inclus.</span><span class="sxs-lookup"><span data-stu-id="e440d-270"><paramref name="Color" /> is outside of range 0 to 15, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red"><span data-ttu-id="e440d-271">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-271">Required.</span></span> <span data-ttu-id="e440d-272"><see langword="Integer" /> compris entre 0 et 255 inclus, représentant l’intensité de la composante rouge de la couleur.</span><span class="sxs-lookup"><span data-stu-id="e440d-272"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the red component of the color.</span></span></param>
        <param name="Green"><span data-ttu-id="e440d-273">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-273">Required.</span></span> <span data-ttu-id="e440d-274"><see langword="Integer" /> compris entre 0 et 255 inclus, représentant l’intensité de la composante verte de la couleur.</span><span class="sxs-lookup"><span data-stu-id="e440d-274"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the green component of the color.</span></span></param>
        <param name="Blue"><span data-ttu-id="e440d-275">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-275">Required.</span></span> <span data-ttu-id="e440d-276"><see langword="Integer" /> compris entre 0 et 255 inclus, représentant l’intensité de la composante bleue de la couleur.</span><span class="sxs-lookup"><span data-stu-id="e440d-276"><see langword="Integer" /> in the range 0-255, inclusive, that represents the intensity of the blue component of the color.</span></span></param>
        <summary><span data-ttu-id="e440d-277">Retourne un <see langword="Integer" /> valeur représentant une valeur de couleur RVB à partir d’un ensemble de composants de couleur rouge, vert et bleu.</span><span class="sxs-lookup"><span data-stu-id="e440d-277">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></summary>
        <returns><span data-ttu-id="e440d-278">Retourne un <see langword="Integer" /> valeur représentant une valeur de couleur RVB à partir d’un ensemble de composants de couleur rouge, vert et bleu.</span><span class="sxs-lookup"><span data-stu-id="e440d-278">Returns an <see langword="Integer" /> value representing an RGB color value from a set of red, green and blue color components.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-279">Méthodes de l’application et les propriétés qui acceptent une spécification attendent doit être un nombre représentant un RVB de couleur.</span><span class="sxs-lookup"><span data-stu-id="e440d-279">Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value.</span></span> <span data-ttu-id="e440d-280">Une valeur de couleur RVB Spécifie l’intensité relative de rouge, vert et bleu pour provoquer une couleur spécifique à afficher.</span><span class="sxs-lookup"><span data-stu-id="e440d-280">An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</span></span>  
  
 <span data-ttu-id="e440d-281">Si la valeur d’un argument `RGB` est supérieur à 255, 255 est utilisée.</span><span class="sxs-lookup"><span data-stu-id="e440d-281">If the value for any argument to `RGB` is greater than 255, 255 is used.</span></span>  
  
 <span data-ttu-id="e440d-282">Le tableau suivant répertorie certaines couleurs standards et les valeurs rouges, vert et bleus, qu'elles incluent.</span><span class="sxs-lookup"><span data-stu-id="e440d-282">The following table lists some standard colors and the red, green, and blue values they include.</span></span>  
  
|<span data-ttu-id="e440d-283">Color</span><span class="sxs-lookup"><span data-stu-id="e440d-283">Color</span></span>|<span data-ttu-id="e440d-284">Valeur rouge</span><span class="sxs-lookup"><span data-stu-id="e440d-284">Red value</span></span>|<span data-ttu-id="e440d-285">Valeur vert</span><span class="sxs-lookup"><span data-stu-id="e440d-285">Green value</span></span>|<span data-ttu-id="e440d-286">Valeur bleu</span><span class="sxs-lookup"><span data-stu-id="e440d-286">Blue value</span></span>|  
|-----------|---------------|-----------------|----------------|  
|<span data-ttu-id="e440d-287">Noir</span><span class="sxs-lookup"><span data-stu-id="e440d-287">Black</span></span>|<span data-ttu-id="e440d-288">0</span><span class="sxs-lookup"><span data-stu-id="e440d-288">0</span></span>|<span data-ttu-id="e440d-289">0</span><span class="sxs-lookup"><span data-stu-id="e440d-289">0</span></span>|<span data-ttu-id="e440d-290">0</span><span class="sxs-lookup"><span data-stu-id="e440d-290">0</span></span>|  
|<span data-ttu-id="e440d-291">Bleu</span><span class="sxs-lookup"><span data-stu-id="e440d-291">Blue</span></span>|<span data-ttu-id="e440d-292">0</span><span class="sxs-lookup"><span data-stu-id="e440d-292">0</span></span>|<span data-ttu-id="e440d-293">0</span><span class="sxs-lookup"><span data-stu-id="e440d-293">0</span></span>|<span data-ttu-id="e440d-294">255</span><span class="sxs-lookup"><span data-stu-id="e440d-294">255</span></span>|  
|<span data-ttu-id="e440d-295">Vert</span><span class="sxs-lookup"><span data-stu-id="e440d-295">Green</span></span>|<span data-ttu-id="e440d-296">0</span><span class="sxs-lookup"><span data-stu-id="e440d-296">0</span></span>|<span data-ttu-id="e440d-297">255</span><span class="sxs-lookup"><span data-stu-id="e440d-297">255</span></span>|<span data-ttu-id="e440d-298">0</span><span class="sxs-lookup"><span data-stu-id="e440d-298">0</span></span>|  
|<span data-ttu-id="e440d-299">Cyan</span><span class="sxs-lookup"><span data-stu-id="e440d-299">Cyan</span></span>|<span data-ttu-id="e440d-300">0</span><span class="sxs-lookup"><span data-stu-id="e440d-300">0</span></span>|<span data-ttu-id="e440d-301">255</span><span class="sxs-lookup"><span data-stu-id="e440d-301">255</span></span>|<span data-ttu-id="e440d-302">255</span><span class="sxs-lookup"><span data-stu-id="e440d-302">255</span></span>|  
|<span data-ttu-id="e440d-303">Rouge</span><span class="sxs-lookup"><span data-stu-id="e440d-303">Red</span></span>|<span data-ttu-id="e440d-304">255</span><span class="sxs-lookup"><span data-stu-id="e440d-304">255</span></span>|<span data-ttu-id="e440d-305">0</span><span class="sxs-lookup"><span data-stu-id="e440d-305">0</span></span>|<span data-ttu-id="e440d-306">0</span><span class="sxs-lookup"><span data-stu-id="e440d-306">0</span></span>|  
|<span data-ttu-id="e440d-307">Magenta</span><span class="sxs-lookup"><span data-stu-id="e440d-307">Magenta</span></span>|<span data-ttu-id="e440d-308">255</span><span class="sxs-lookup"><span data-stu-id="e440d-308">255</span></span>|<span data-ttu-id="e440d-309">0</span><span class="sxs-lookup"><span data-stu-id="e440d-309">0</span></span>|<span data-ttu-id="e440d-310">255</span><span class="sxs-lookup"><span data-stu-id="e440d-310">255</span></span>|  
|<span data-ttu-id="e440d-311">Jaune</span><span class="sxs-lookup"><span data-stu-id="e440d-311">Yellow</span></span>|<span data-ttu-id="e440d-312">255</span><span class="sxs-lookup"><span data-stu-id="e440d-312">255</span></span>|<span data-ttu-id="e440d-313">255</span><span class="sxs-lookup"><span data-stu-id="e440d-313">255</span></span>|<span data-ttu-id="e440d-314">0</span><span class="sxs-lookup"><span data-stu-id="e440d-314">0</span></span>|  
|<span data-ttu-id="e440d-315">Blanc</span><span class="sxs-lookup"><span data-stu-id="e440d-315">White</span></span>|<span data-ttu-id="e440d-316">255</span><span class="sxs-lookup"><span data-stu-id="e440d-316">255</span></span>|<span data-ttu-id="e440d-317">255</span><span class="sxs-lookup"><span data-stu-id="e440d-317">255</span></span>|<span data-ttu-id="e440d-318">255</span><span class="sxs-lookup"><span data-stu-id="e440d-318">255</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e440d-319">Cet exemple montre comment la `RGB` fonction est utilisée pour retourner un nombre entier représentant un `RGB` valeur de couleur.</span><span class="sxs-lookup"><span data-stu-id="e440d-319">This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.</span></span>  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e440d-320"><paramref name="Green" />, <paramref name="Blue" />, ou <paramref name="Red" /> se trouve en dehors de la plage de 0 à 255 inclus.</span><span class="sxs-lookup"><span data-stu-id="e440d-320"><paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> is outside of range 0 to 255, inclusive.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName"><span data-ttu-id="e440d-321">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-321">Required.</span></span> <span data-ttu-id="e440d-322">A <see langword="String" /> variable qui contient un nom de type Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e440d-322">A <see langword="String" /> variable containing a Visual Basic type name.</span></span></param>
        <summary><span data-ttu-id="e440d-323">Retourne un <see langword="String" /> valeur contenant le nom de type de données de système d’une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-323">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="e440d-324">Retourne un <see langword="String" /> valeur contenant le nom de type de données de système d’une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-324">Returns a <see langword="String" /> value containing the system data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-325">`SystemTypeName` Retourne le nom qualifié complet common language runtime (CLR) type correspondant au nom de type Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e440d-325">`SystemTypeName` returns the fully qualified common language runtime (CLR) type name corresponding to the Visual Basic type name.</span></span> <span data-ttu-id="e440d-326">Par exemple, si `VbName` contient « Date », `SystemTypeName` retourne « System.DateTime ».</span><span class="sxs-lookup"><span data-stu-id="e440d-326">For example, if `VbName` contains "Date", `SystemTypeName` returns "System.DateTime".</span></span> <span data-ttu-id="e440d-327">Si `SystemTypeName` ne reconnaît pas la valeur de `VbName`, elle retourne `Nothing` (pas la chaîne « Nothing »).</span><span class="sxs-lookup"><span data-stu-id="e440d-327">If `SystemTypeName` does not recognize the value of `VbName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-328">L’exemple suivant utilise le `SystemTypeName` fonction pour retourner les noms de type de données de plusieurs variables.</span><span class="sxs-lookup"><span data-stu-id="e440d-328">The following example uses the `SystemTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e440d-329">Liste des types de données (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-329">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="e440d-330">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-330">Required.</span></span> <span data-ttu-id="e440d-331"><see langword="Object" /> variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-331"><see langword="Object" /> variable.</span></span> <span data-ttu-id="e440d-332">Si <see langword="Option Strict" /> est <see langword="Off" />, vous pouvez passer une variable de n’importe quel type de données sauf une structure.</span><span class="sxs-lookup"><span data-stu-id="e440d-332">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="e440d-333">Retourne un <see langword="String" /> valeur contenant des informations de type de données sur une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-333">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></summary>
        <returns><span data-ttu-id="e440d-334">Retourne un <see langword="String" /> valeur contenant des informations de type de données sur une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-334">Returns a <see langword="String" /> value containing data-type information about a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-335">Le tableau suivant présente le `String` valeurs retournées par `TypeName` pour différents contenus de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="e440d-335">The following table shows the `String` values returned by `TypeName` for different contents of `VarName`.</span></span>  
  
|<span data-ttu-id="e440d-336">`VarName` Contenu</span><span class="sxs-lookup"><span data-stu-id="e440d-336">`VarName` contents</span></span>|<span data-ttu-id="e440d-337">Chaîne retournée</span><span class="sxs-lookup"><span data-stu-id="e440d-337">String returned</span></span>|  
|------------------------|---------------------|  
|<span data-ttu-id="e440d-338">16 bits `True` ou `False` type valeur</span><span class="sxs-lookup"><span data-stu-id="e440d-338">16-bit `True` or `False` value type</span></span>|<span data-ttu-id="e440d-339">« Boolean »</span><span class="sxs-lookup"><span data-stu-id="e440d-339">"Boolean"</span></span>|  
|<span data-ttu-id="e440d-340">type de valeur binaire 8 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-340">8-bit binary value type</span></span>|<span data-ttu-id="e440d-341">« Byte »</span><span class="sxs-lookup"><span data-stu-id="e440d-341">"Byte"</span></span>|  
|<span data-ttu-id="e440d-342">type de valeur de caractère 16 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-342">16-bit character value type</span></span>|<span data-ttu-id="e440d-343">« Char »</span><span class="sxs-lookup"><span data-stu-id="e440d-343">"Char"</span></span>|  
|<span data-ttu-id="e440d-344">64 bits date et heure de type valeur</span><span class="sxs-lookup"><span data-stu-id="e440d-344">64-bit date and time value type</span></span>|<span data-ttu-id="e440d-345">« Date »</span><span class="sxs-lookup"><span data-stu-id="e440d-345">"Date"</span></span>|  
|<span data-ttu-id="e440d-346">Type de référence indiquant des données manquantes ou inexistantes</span><span class="sxs-lookup"><span data-stu-id="e440d-346">Reference type indicating missing or nonexistent data</span></span>|<span data-ttu-id="e440d-347">"DBNull"</span><span class="sxs-lookup"><span data-stu-id="e440d-347">"DBNull"</span></span>|  
|<span data-ttu-id="e440d-348">type de valeur numérique à virgule fixe de 128 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-348">128-bit fixed-point numeric value type</span></span>|<span data-ttu-id="e440d-349">« Decimal »</span><span class="sxs-lookup"><span data-stu-id="e440d-349">"Decimal"</span></span>|  
|<span data-ttu-id="e440d-350">type de valeur numérique à virgule flottante 64 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-350">64-bit floating-point numeric value type</span></span>|<span data-ttu-id="e440d-351">« Double »</span><span class="sxs-lookup"><span data-stu-id="e440d-351">"Double"</span></span>|  
|<span data-ttu-id="e440d-352">type de valeur d’entier 32 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-352">32-bit integer value type</span></span>|<span data-ttu-id="e440d-353">Le type « integer »</span><span class="sxs-lookup"><span data-stu-id="e440d-353">"Integer"</span></span>|  
|<span data-ttu-id="e440d-354">Type de référence qui pointe vers un objet non spécialisé</span><span class="sxs-lookup"><span data-stu-id="e440d-354">Reference type pointing to an unspecialized object</span></span>|<span data-ttu-id="e440d-355">« Objet »</span><span class="sxs-lookup"><span data-stu-id="e440d-355">"Object"</span></span>|  
|<span data-ttu-id="e440d-356">Type de référence qui pointe vers un objet spécialisé créé à partir de la classe *objectclass*</span><span class="sxs-lookup"><span data-stu-id="e440d-356">Reference type pointing to a specialized object created from class *objectclass*</span></span>|<span data-ttu-id="e440d-357">«*objectclass*»</span><span class="sxs-lookup"><span data-stu-id="e440d-357">"*objectclass*"</span></span>|  
|<span data-ttu-id="e440d-358">type de valeur d’entier 64 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-358">64-bit integer value type</span></span>|<span data-ttu-id="e440d-359">« Long »</span><span class="sxs-lookup"><span data-stu-id="e440d-359">"Long"</span></span>|  
|<span data-ttu-id="e440d-360">Type référence avec aucun objet actuellement assigné</span><span class="sxs-lookup"><span data-stu-id="e440d-360">Reference type with no object currently assigned to it</span></span>|<span data-ttu-id="e440d-361">« Nothing »</span><span class="sxs-lookup"><span data-stu-id="e440d-361">"Nothing"</span></span>|  
|<span data-ttu-id="e440d-362">type de valeur d’entier signé 8 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-362">8-bit signed integer value type</span></span>|<span data-ttu-id="e440d-363">« SByte »</span><span class="sxs-lookup"><span data-stu-id="e440d-363">"SByte"</span></span>|  
|<span data-ttu-id="e440d-364">type de valeur d’entier 16 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-364">16-bit integer value type</span></span>|<span data-ttu-id="e440d-365">« Court »</span><span class="sxs-lookup"><span data-stu-id="e440d-365">"Short"</span></span>|  
|<span data-ttu-id="e440d-366">type de valeur numérique à virgule flottante 32 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-366">32-bit floating-point numeric value type</span></span>|<span data-ttu-id="e440d-367">« Unique »</span><span class="sxs-lookup"><span data-stu-id="e440d-367">"Single"</span></span>|  
|<span data-ttu-id="e440d-368">Type de référence qui pointe vers une chaîne de caractères de 16 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-368">Reference type pointing to a string of 16-bit characters</span></span>|<span data-ttu-id="e440d-369">« Chaîne »</span><span class="sxs-lookup"><span data-stu-id="e440d-369">"String"</span></span>|  
|<span data-ttu-id="e440d-370">type de valeur d’entier non signé 32 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-370">32-bit unsigned integer value type</span></span>|<span data-ttu-id="e440d-371">« UInteger »</span><span class="sxs-lookup"><span data-stu-id="e440d-371">"UInteger"</span></span>|  
|<span data-ttu-id="e440d-372">type de valeur d’entier non signé 64 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-372">64-bit unsigned integer value type</span></span>|<span data-ttu-id="e440d-373">« ULong »</span><span class="sxs-lookup"><span data-stu-id="e440d-373">"ULong"</span></span>|  
|<span data-ttu-id="e440d-374">type de valeur d’entier non signé 16 bits</span><span class="sxs-lookup"><span data-stu-id="e440d-374">16-bit unsigned integer value type</span></span>|<span data-ttu-id="e440d-375">« UShort »</span><span class="sxs-lookup"><span data-stu-id="e440d-375">"UShort"</span></span>|  
  
 <span data-ttu-id="e440d-376">Si `VarName` est un tableau, la chaîne retournée peut être l’une des chaînes dans le tableau précédent avec des parenthèses vides.</span><span class="sxs-lookup"><span data-stu-id="e440d-376">If `VarName` is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended.</span></span> <span data-ttu-id="e440d-377">Par exemple, si `VarName` pointe vers un tableau d’entiers, `TypeName` retourne « Integer() ».</span><span class="sxs-lookup"><span data-stu-id="e440d-377">For example, if `VarName` points to an array of integers, `TypeName` returns "Integer()".</span></span>  
  
 <span data-ttu-id="e440d-378">Lorsque `TypeName` retourne le nom d’un type référence tel qu’une classe, il retourne uniquement le nom lui-même, pas le nom qualifié.</span><span class="sxs-lookup"><span data-stu-id="e440d-378">When `TypeName` returns the name of a reference type such as a class, it returns only the name itself, not the qualified name.</span></span> <span data-ttu-id="e440d-379">Par exemple, si `VarName` pointe vers un objet de classe <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` retourne « PaperSource ».</span><span class="sxs-lookup"><span data-stu-id="e440d-379">For example, if `VarName` points to an object of class <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` returns "PaperSource".</span></span> <span data-ttu-id="e440d-380">Notez que si la variable est déclarée comme étant d’un certain type de classe, mais n’a pas d’un objet qui lui est assigné, `TypeName` renvoie « Nothing ».</span><span class="sxs-lookup"><span data-stu-id="e440d-380">Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, `TypeName` returns "Nothing".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-381">L’exemple suivant utilise le `TypeName` fonction pour retourner des informations de type de données sur plusieurs variables.</span><span class="sxs-lookup"><span data-stu-id="e440d-381">The following example uses the `TypeName` function to return data type information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e440d-382">Liste des types de données (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-382">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array"><span data-ttu-id="e440d-383">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-383">Required.</span></span> <span data-ttu-id="e440d-384">Tableau de n’importe quel type de données.</span><span class="sxs-lookup"><span data-stu-id="e440d-384">Array of any data type.</span></span> <span data-ttu-id="e440d-385">Tableau dans lequel vous souhaitez rechercher le plus grand indice possible d’une dimension.</span><span class="sxs-lookup"><span data-stu-id="e440d-385">The array in which you want to find the highest possible subscript of a dimension.</span></span></param>
        <param name="Rank"><span data-ttu-id="e440d-386">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="e440d-386">Optional.</span></span> <span data-ttu-id="e440d-387"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-387"><see langword="Integer" />.</span></span> <span data-ttu-id="e440d-388">La dimension pour laquelle le plus grand indice possible doit être retourné.</span><span class="sxs-lookup"><span data-stu-id="e440d-388">The dimension for which the highest possible subscript is to be returned.</span></span> <span data-ttu-id="e440d-389">Utilisez 1 pour la première dimension, 2 pour la deuxième et ainsi de suite.</span><span class="sxs-lookup"><span data-stu-id="e440d-389">Use 1 for the first dimension, 2 for the second, and so on.</span></span> <span data-ttu-id="e440d-390">Si <paramref name="Rank" /> est omis, 1 est pris en compte.</span><span class="sxs-lookup"><span data-stu-id="e440d-390">If <paramref name="Rank" /> is omitted, 1 is assumed.</span></span></param>
        <summary><span data-ttu-id="e440d-391">Retourne le plus grand indice disponible pour la dimension indiquée d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-391">Returns the highest available subscript for the indicated dimension of an array.</span></span></summary>
        <returns><span data-ttu-id="e440d-392"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-392"><see langword="Integer" />.</span></span> <span data-ttu-id="e440d-393">La valeur la plus élevée que l’indice pour la dimension spécifiée peut contenir.</span><span class="sxs-lookup"><span data-stu-id="e440d-393">The highest value the subscript for the specified dimension can contain.</span></span> <span data-ttu-id="e440d-394">Si <paramref name="Array" /> n'a qu’un seul élément, <see langword="UBound" /> retourne 0.</span><span class="sxs-lookup"><span data-stu-id="e440d-394">If <paramref name="Array" /> has only one element, <see langword="UBound" /> returns 0.</span></span> <span data-ttu-id="e440d-395">Si <paramref name="Array" /> contient aucun élément, par exemple s’il s’agit d’une chaîne de longueur nulle, <see langword="UBound" /> retourne -1.</span><span class="sxs-lookup"><span data-stu-id="e440d-395">If <paramref name="Array" /> has no elements, for example if it is a zero-length string, <see langword="UBound" /> returns -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-396">Étant donné que les indices de tableau commencent à 0, la longueur d’une dimension est supérieure d’une unité que le plus grand indice disponible pour cette dimension.</span><span class="sxs-lookup"><span data-stu-id="e440d-396">Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.</span></span>  
  
 <span data-ttu-id="e440d-397">Pour un tableau avec les dimensions suivantes, `UBound` retourne les valeurs dans le tableau suivant :</span><span class="sxs-lookup"><span data-stu-id="e440d-397">For an array with the following dimensions, `UBound` returns the values in the following table:</span></span>  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|<span data-ttu-id="e440d-398">Appel à UBound</span><span class="sxs-lookup"><span data-stu-id="e440d-398">Call to UBound</span></span>|<span data-ttu-id="e440d-399">Valeur de retour</span><span class="sxs-lookup"><span data-stu-id="e440d-399">Return value</span></span>|  
|--------------------|------------------|  
|`UBound(a, 1)`|<span data-ttu-id="e440d-400">100</span><span class="sxs-lookup"><span data-stu-id="e440d-400">100</span></span>|  
|`UBound(a, 2)`|<span data-ttu-id="e440d-401">5</span><span class="sxs-lookup"><span data-stu-id="e440d-401">5</span></span>|  
|`UBound(a, 3)`|<span data-ttu-id="e440d-402">4</span><span class="sxs-lookup"><span data-stu-id="e440d-402">4</span></span>|  
  
 <span data-ttu-id="e440d-403">Vous pouvez utiliser `UBound` pour déterminer le total nombre d’éléments dans un tableau, mais vous devez ajuster la valeur de retour au compte du fait que les indices commencent à 0.</span><span class="sxs-lookup"><span data-stu-id="e440d-403">You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0.</span></span> <span data-ttu-id="e440d-404">L’exemple suivant calcule la taille totale du tableau `a` dans l’exemple précédent :</span><span class="sxs-lookup"><span data-stu-id="e440d-404">The following example calculates the total size of the array `a` in the preceding example:</span></span>  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 <span data-ttu-id="e440d-405">La valeur calculée pour `total` est 3030, c'est-à-dire 101 \* 6 \* 5.</span><span class="sxs-lookup"><span data-stu-id="e440d-405">The value calculated for `total` is 3030, which is 101 \* 6 \* 5.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-406">L’exemple suivant utilise le `UBound` fonction permettant de déterminer le plus grand indice disponible pour la dimension indiquée d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="e440d-406">The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.</span></span>  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e440d-407"><paramref name="Array" /> a la valeur <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-407"><paramref name="Array" /> is <see langword="Nothing" />.</span></span></exception>
        <exception cref="T:System.RankException"><span data-ttu-id="e440d-408"><paramref name="Rank" /> est inférieur à 1, ou <paramref name="Rank" /> est supérieur au rang de <paramref name="Array" />.</span><span class="sxs-lookup"><span data-stu-id="e440d-408"><paramref name="Rank" /> is less than 1, or <paramref name="Rank" /> is greater than the rank of <paramref name="Array" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md"><span data-ttu-id="e440d-409">Dim, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-409">Dim Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md"><span data-ttu-id="e440d-410">ReDim, instruction (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-410">ReDim Statement (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName"><span data-ttu-id="e440d-411">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-411">Required.</span></span> <span data-ttu-id="e440d-412"><see langword="Object" /> variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-412"><see langword="Object" /> variable.</span></span> <span data-ttu-id="e440d-413">Si <see langword="Option Strict" /> est <see langword="Off" />, vous pouvez passer une variable de n’importe quel type de données sauf une structure.</span><span class="sxs-lookup"><span data-stu-id="e440d-413">If <see langword="Option Strict" /> is <see langword="Off" />, you can pass a variable of any data type except a structure.</span></span></param>
        <summary><span data-ttu-id="e440d-414">Retourne un <see langword="Integer" /> valeur contenant la classification de type de données d’une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-414">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></summary>
        <returns><span data-ttu-id="e440d-415">Retourne un <see langword="Integer" /> valeur contenant la classification de type de données d’une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-415">Returns an <see langword="Integer" /> value containing the data type classification of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-416">La valeur entière retournée par `VarType` est un membre de la <xref:Microsoft.VisualBasic.VariantType>.</span><span class="sxs-lookup"><span data-stu-id="e440d-416">The integer value returned by `VarType` is a member of the <xref:Microsoft.VisualBasic.VariantType>.</span></span>  
  
 <span data-ttu-id="e440d-417">Le tableau suivant montre les valeurs retournées par `VarType` pour les cas spéciaux de `VarName`.</span><span class="sxs-lookup"><span data-stu-id="e440d-417">The following table shows the values returned by `VarType` for special cases of `VarName`.</span></span>  
  
|<span data-ttu-id="e440d-418">Type de données représenté par `VarName`</span><span class="sxs-lookup"><span data-stu-id="e440d-418">Data type represented by `VarName`</span></span>|<span data-ttu-id="e440d-419">Valeur retournée par `VarType`</span><span class="sxs-lookup"><span data-stu-id="e440d-419">Value returned by `VarType`</span></span>|  
|----------------------------------------|---------------------------------|  
|[<span data-ttu-id="e440d-420">Nothing</span><span class="sxs-lookup"><span data-stu-id="e440d-420">Nothing</span></span>](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|<span data-ttu-id="e440d-421">Énumération</span><span class="sxs-lookup"><span data-stu-id="e440d-421">Enumeration</span></span>|<span data-ttu-id="e440d-422">Type de données sous-jacent (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, ou `ULong`)</span><span class="sxs-lookup"><span data-stu-id="e440d-422">Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)</span></span>|  
|<span data-ttu-id="e440d-423">Tableau</span><span class="sxs-lookup"><span data-stu-id="e440d-423">Array</span></span>|<span data-ttu-id="e440d-424">Opération de bits OR de type d’élément de tableau et `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="e440d-424">Bitwise OR of array element type and `VariantType.Array`</span></span>|  
|<span data-ttu-id="e440d-425">Tableau de tableaux</span><span class="sxs-lookup"><span data-stu-id="e440d-425">Array of arrays</span></span>|<span data-ttu-id="e440d-426">Opération de bit OR `VariantType.Object` et `VariantType.Array`</span><span class="sxs-lookup"><span data-stu-id="e440d-426">Bitwise OR of `VariantType.Object` and `VariantType.Array`</span></span>|  
|<span data-ttu-id="e440d-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="e440d-427">Structure (<xref:System.ValueType?displayProperty=nameWithType>)</span></span>|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|<span data-ttu-id="e440d-428">Inconnu</span><span class="sxs-lookup"><span data-stu-id="e440d-428">Unknown</span></span>|`VariantType.Object`|  
  
   
  
## Examples  
 <span data-ttu-id="e440d-429">L’exemple suivant utilise le `VarType` fonction pour retourner des informations de classification de type de données concernant plusieurs variables.</span><span class="sxs-lookup"><span data-stu-id="e440d-429">The following example uses the `VarType` function to return data type classification information about several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e440d-430">Liste des types de données (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-430">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName"><span data-ttu-id="e440d-431">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="e440d-431">Required.</span></span> <span data-ttu-id="e440d-432"><see langword="String" /> Variable qui contient un nom de type utilisé par le common language runtime.</span><span class="sxs-lookup"><span data-stu-id="e440d-432"><see langword="String" /> variable containing a type name used by the common language runtime.</span></span></param>
        <summary><span data-ttu-id="e440d-433">Retourne un <see langword="String" /> valeur contenant le nom du type de données Visual Basic d’une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-433">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></summary>
        <returns><span data-ttu-id="e440d-434">Retourne un <see langword="String" /> valeur contenant le nom du type de données Visual Basic d’une variable.</span><span class="sxs-lookup"><span data-stu-id="e440d-434">Returns a <see langword="String" /> value containing the Visual Basic data type name of a variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e440d-435">`VbTypeName` Retourne le nom de type Visual Basic correspondant au nom de type du common language runtime.</span><span class="sxs-lookup"><span data-stu-id="e440d-435">`VbTypeName` returns the Visual Basic type name corresponding to the common language runtime type name.</span></span> <span data-ttu-id="e440d-436">Par exemple, si `UrtName` contient « Int32 » ou « System.Int32 », `VbTypeName` retourne « Integer ».</span><span class="sxs-lookup"><span data-stu-id="e440d-436">For example, if `UrtName` contains "Int32" or "System.Int32", `VbTypeName` returns "Integer".</span></span> <span data-ttu-id="e440d-437">Si `VbTypeName` ne reconnaît pas la valeur de `UrtName`, elle retourne `Nothing` (pas la chaîne « Nothing »).</span><span class="sxs-lookup"><span data-stu-id="e440d-437">If `VbTypeName` does not recognize the value of `UrtName`, it returns `Nothing` (not the string "Nothing").</span></span>  
  
 <span data-ttu-id="e440d-438">Le nom de type dans `UrtName` peut être obtenu à partir de diverses sources, par exemple à partir de la <xref:System.Reflection.MemberInfo.Name%2A> propriété dans le <xref:System.Reflection.MemberInfo> tableau de la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="e440d-438">The type name in `UrtName` can be obtained from various sources, for example from the <xref:System.Reflection.MemberInfo.Name%2A> property in the <xref:System.Reflection.MemberInfo> array of the <xref:System.Type> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e440d-439">L’exemple suivant utilise le `VbTypeName` fonction pour retourner les noms de type de données de plusieurs variables.</span><span class="sxs-lookup"><span data-stu-id="e440d-439">The following example uses the `VbTypeName` function to return data type names for several variables.</span></span>  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="e440d-440">Liste des types de données (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="e440d-440">Data Type Summary (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>