<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a6dfed614898ce50b46f729d3a136cd26d01633" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66007047" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Le module <see langword="Information" /> contient les procédures utilisées pour retourner, tester ou vérifier les informations.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce module prend en charge les mots clés du langage Visual Basic et les membres de bibliothèque Runtime qui fournissent des informations d’erreur, valident des données, déterminent les limites du tableau et récupèrent des informations de couleur et le type de données.  
  
   
  
## Examples  
 L’exemple suivant utilise le `VbTypeName` fonction pour retourner les noms de type de données de plusieurs variables.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">Liste des informations et des interactions</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">Liste des déclarations et des constantes</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Mots clés (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Membres de la bibliothèque d’exécution Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un entier indiquant le numéro de ligne de la dernière instruction exécutée. Lecture seule.</summary>
        <returns>Retourne un entier indiquant le numéro de ligne de la dernière instruction exécutée. Lecture seule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si Visual Basic ne rencontre aucun numéro de ligne, elle retourne 0.  
  
   
  
## Examples  
 Cet exemple utilise le `Erl` propriété pour indiquer le numéro de ligne.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contient des informations relatives aux erreurs d’exécution.</summary>
        <returns>Contient des informations relatives aux erreurs d’exécution.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les propriétés de la `Err` objet sont définies par le Générateur d’une erreur - Visual Basic, un objet ou le programmeur.  
  
 Lorsqu’une erreur d’exécution se produit, les propriétés de la `Err` sont remplis avec les informations qui identifient l’erreur de l’objet et que vous pouvez utiliser pour gérer l’erreur. Pour générer une erreur d’exécution dans votre code, utilisez le `Raise` (méthode).  
  
 Le `Err` des propriétés de l’objet sont rétablies à zéro ou des chaînes de longueur nulle (« ») après un `Exit Sub`, `Exit Function`, `Exit Property`, ou `Resume Next` instruction dans une routine de gestion des erreurs. À l’aide de n’importe quel écran de la `Resume` instruction en dehors d’une routine de gestion des erreurs ne réinitialise pas le `Err` propriétés de l’objet. Vous pouvez utiliser la `Clear` méthode pour réinitialiser explicitement `Err`.  
  
 Utilisez le `Raise` méthode plutôt que la `Error` instruction à générer des erreurs d’exécution pour les erreurs système et des modules de classe. Décider s’il faut utiliser le `Raise` méthode dans un autre code dépend de la richesse des informations que vous souhaitez retourner.  
  
 Le `Err` objet est un objet intrinsèque avec une portée globale. Par conséquent, il est inutile créer une instance de celui-ci dans votre code.  
  
   
  
## Examples  
 Cet exemple utilise les propriétés de la `Err` objet lors de la construction d’une boîte de dialogue de message d’erreur. Notez que si vous utilisez le `Clear` méthode tout d’abord, lorsque vous générez une erreur Visual Basic avec le `Raise` (méthode), les valeurs par défaut de Visual Basic deviennent les propriétés de la `Err` objet.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error, instruction</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error, instruction (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit, instruction (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume, instruction</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">Messages d'erreur (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally, instruction (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obligatoire. Variable <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si une variable pointe vers un tableau.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si une variable pointe vers un tableau.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` Retourne `True` si la variable pointe vers un tableau ; sinon, elle retourne `False`. `IsArray` est particulièrement utile avec des objets qui peuvent contenir des tableaux.  
  
   
  
## Examples  
 Cet exemple utilise le `IsArray` (fonction) pour vérifier si plusieurs variables font référence à un tableau.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Tableaux dans Visual Basic</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Expression <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si une expression représente une valeur <see langword="Date" /> valide.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si une expression représente une valeur <see langword="Date" /> valide.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` Retourne `True` si `Expression` est du <xref:System.DateTime> données tapez ou peut être convertie à ce dernier ; sinon, elle retourne `False`.  
  
 Le <xref:System.DateTime> type de données contient une valeur de date et une valeur d’heure. `IsDate` Retourne `True` si `Expression` représente une date valide, une heure valide, ou une date valide et une heure.  
  
   
  
## Examples  
 L’exemple suivant utilise le `IsDate` fonction permettant de déterminer si plusieurs variables représentent valide <xref:System.DateTime> valeurs.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 Dans l’exemple précédent, `IsDate` retourne `True` pour les quatre premiers appels et `False` pour le dernier appel.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Expression <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si une expression correspond à la classe <see cref="T:System.DBNull" />.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si une expression correspond à la classe <see cref="T:System.DBNull" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` Retourne `True` si le type de données de `Expression` prend la valeur de la <xref:System.DBNull> type ; sinon, `IsDBNull` retourne `False`.  
  
 Le <xref:System.DBNull?displayProperty=nameWithType> valeur indique que le `Object` représente des données manquantes ou inexistantes. `DBNull` n’est pas identique à `Nothing`, ce qui indique qu’une variable n’a pas encore été initialisée. `DBNull` n’est également pas identique à une chaîne de longueur nulle (`""`), qui est parfois appelé une chaîne null.  
  
   
  
## Examples  
 Cet exemple utilise le `IsDBNull` fonction permettant de déterminer si une variable a la valeur `DBNull`.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Expression <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si une expression est un type d'exception.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si une expression est un type d'exception.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` Retourne `True` si l’expression représente un `Object` variable qui dérive de la <xref:System.Exception> classe dans le <xref:System> espace de noms.  
  
 Une exception qui dérive de <xref:System.Exception?displayProperty=nameWithType> peut être interceptée par le `Try...Catch...Finally` instructions.  
  
   
  
## Examples  
 L’exemple suivant utilise le `IsError` fonction permettant de vérifier si une expression représente une exception système.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Expression <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si aucun objet n'est assigné à une expression.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si aucun objet n'est assigné à une expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` Retourne `True` si l’expression représente une variable objet qui n’a actuellement aucun objet assigné à ce dernier ; sinon, elle retourne `False`.  
  
 `IsNothing` est prévu pour fonctionner sur les types référence. Un type valeur ne peut pas contenir la valeur [rien](~/docs/visual-basic/language-reference/nothing.md) et revient à sa valeur par défaut si vous affectez `Nothing` à celui-ci. Si vous fournissez un type valeur dans `Expression`, `IsNothing` retourne toujours `False`.  
  
   
  
## Examples  
 L’exemple suivant utilise le `IsNothing` fonction permettant de déterminer si une variable objet est associée à une instance d’objet.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Types valeur et types référence</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Expression <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si une expression peut être évaluée comme un nombre.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si une expression peut être évaluée comme un nombre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` Retourne `True` si le type de données de `Expression` est `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, ou `UShort`. Elle retourne également `True` si `Expression` est un `Char`, `String`, ou `Object` qui peut être converti correctement à un nombre. `Expression` peut contenir des caractères non numériques. `IsNumeric` Retourne `True` si `Expression` est une chaîne qui contient un nombre hexadécimal ou octal valide. `IsNumeric` retourne également `True` si `Expression` contient une expression numérique valide qui commence par un + ou - de caractères ou contient des virgules.  
  
 `IsNumeric` Retourne `False` si `Expression` est de type de données `Date`. Elle retourne `False` si `Expression` est un `Char`, `String`, ou `Object` qui ne peut pas être correctement converti en un nombre.  
  
   
  
## Examples  
 L’exemple suivant utilise le `IsNumeric` fonction permettant de déterminer si le contenu d’une variable peut être évalué comme un nombre.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Obligatoire. Expression <see langword="Object" />.</param>
        <summary>Retourne une valeur <see langword="Boolean" /> indiquant si une expression correspond à un type référence.</summary>
        <returns>Retourne une valeur <see langword="Boolean" /> indiquant si une expression correspond à un type référence.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` Retourne `True` si `Expression` représente un type de référence, comme une instance de classe, un `String` type, ou un tableau de n’importe quel type ; sinon, elle retourne `False`.  
  
 Un type référence contient un pointeur vers les données stockées ailleurs en mémoire. Un type valeur contient ses propres données.  
  
   
  
## Examples  
 Cet exemple utilise le `IsReference` (fonction) pour vérifier si plusieurs variables font référence aux types référence.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 Dans l’exemple précédent, les trois premiers appels à `IsReference` retourner `True`. Retourne le dernier appel `False`, car `Integer` est un type valeur, pas un type référence.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Types valeur et types référence</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Obligatoire. Tableau de tout type de données. Tableau dans lequel vous voulez trouver le plus petit indice possible d'une dimension.</param>
        <param name="Rank">Optionnel. <see langword="Integer" />. Dimension pour laquelle le plus petit indice possible doit être retourné. Utilisez la valeur 1 pour la première dimension, la valeur 2 pour la deuxième, etc. Si <paramref name="Rank" /> cet argument est omis, la position 1 est utilisée par défaut.</param>
        <summary>Retourne le plus petit indice disponible pour la dimension indiquée d'un tableau.</summary>
        <returns><see langword="Integer" />. Valeur la plus basse que l'indice de la dimension spécifiée peut contenir. <see langword="LBound" /> retourne toujours 0 à condition que <paramref name="Array" /> ait été initialisé, même s'il n'a pas d'éléments, par exemple s'il s'agit d'une chaîne de longueur nulle. Si <paramref name="Array" /> est <see langword="Nothing" />, <see langword="LBound" /> lève une <see cref="T:System.ArgumentNullException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compte tenu que les indices de tableau commencent à 0, le plus petit indice disponible pour chaque dimension est toujours 0.  
  
 Pour un tableau avec les dimensions suivantes, `LBound` retourne les valeurs dans le tableau suivant :  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Appel à LBound|Valeur de retour|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 L’exemple suivant utilise le `LBound` fonction permettant de déterminer le plus petit indice disponible pour la dimension indiquée d’un tableau.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> est <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> est inférieur à 1 ou <paramref name="Rank" /> est supérieur au rang de <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim, instruction (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim, instruction (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">Obligatoire. Nombre entier compris entre 0 et 15.</param>
        <summary>Retourne une valeur <see langword="Integer" /> représentant le code couleur RVB correspondant au nombre de couleurs spécifié.</summary>
        <returns>Retourne une valeur <see langword="Integer" /> représentant le code couleur RVB correspondant au nombre de couleurs spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À partir de l’octet le moins significatif, la valeur retournée spécifie les valeurs rouges, vert et bleus utilisées pour définir la couleur appropriée dans le système RVB utilisé par le langage Visual Basic.  
  
 Le `Color` argument possède les paramètres.  
  
|nombre|Color|nombre|Color|  
|------------|-----------|------------|-----------|  
|0|Noir|8|Gris|  
|1|Bleu|9|Bleu clair|  
|2|Vert|10|Vert clair|  
|3|Cyan|11|Cyan clair|  
|4|Rouge|12|Rouge clair|  
|5|Magenta|13|Magenta clair|  
|6|Jaune|14|Jaune clair|  
|7|Blanc|15|Blanc brillant|  
  
   
  
## Examples  
 Cet exemple utilise le `QBColor` fonction permettant de modifier la couleur indiquée par `colorInteger`. `QBColor` accepte les valeurs de nombre entier compris entre 0 et 15.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" /> est en dehors de la plage comprise entre 0 et 15 inclus.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">Obligatoire. <see langword="Integer" /> compris entre 0 et 255 inclus, représentant l’intensité de la composante rouge de la couleur.</param>
        <param name="Green">Obligatoire. <see langword="Integer" /> compris entre 0 et 255 inclus, représentant l’intensité de la composante verte de la couleur.</param>
        <param name="Blue">Obligatoire. <see langword="Integer" /> compris entre 0 et 255 inclus, représentant l’intensité de la composante bleue de la couleur.</param>
        <summary>Retourne une valeur <see langword="Integer" /> représentant une valeur de couleur RVB à partir d'un ensemble de composantes de couleur rouge, vert et bleu.</summary>
        <returns>Retourne une valeur <see langword="Integer" /> représentant une valeur de couleur RVB à partir d'un ensemble de composantes de couleur rouge, vert et bleu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Méthodes de l’application et les propriétés qui acceptent une spécification attendent doit être un nombre représentant un RVB de couleur. Une valeur de couleur RVB Spécifie l’intensité relative de rouge, vert et bleu pour provoquer une couleur spécifique à afficher.  
  
 Si la valeur d’un argument `RGB` est supérieur à 255, 255 est utilisée.  
  
 Le tableau suivant répertorie certaines couleurs standards et les valeurs rouges, vert et bleus, qu'elles incluent.  
  
|Color|Valeur rouge|Valeur vert|Valeur bleu|  
|-----------|---------------|-----------------|----------------|  
|Noir|0|0|0|  
|Bleu|0|0|255|  
|Vert|0|255|0|  
|Cyan|0|255|255|  
|Rouge|255|0|0|  
|Magenta|255|0|255|  
|Jaune|255|255|0|  
|Blanc|255|255|255|  
  
   
  
## Examples  
 Cet exemple montre comment la `RGB` fonction est utilisée pour retourner un nombre entier représentant un `RGB` valeur de couleur.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" /> ou <paramref name="Red" /> est en dehors de la plage comprise entre 0 et 255 inclus.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">Obligatoire. Variable <see langword="String" /> contenant un nom de type Visual Basic.</param>
        <summary>Retourne une valeur <see langword="String" /> contenant le nom du type de données système d'une variable.</summary>
        <returns>Retourne une valeur <see langword="String" /> contenant le nom du type de données système d'une variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` Retourne le nom qualifié complet common language runtime (CLR) type correspondant au nom de type Visual Basic. Par exemple, si `VbName` contient « Date », `SystemTypeName` retourne « System.DateTime ». Si `SystemTypeName` ne reconnaît pas la valeur de `VbName`, elle retourne `Nothing` (pas la chaîne « Nothing »).  
  
   
  
## Examples  
 L’exemple suivant utilise le `SystemTypeName` fonction pour retourner les noms de type de données de plusieurs variables.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obligatoire. Variable <see langword="Object" />. Si <see langword="Option Strict" /> est <see langword="Off" />, vous pouvez passer une variable de tout type de données, à l'exception d'une structure.</param>
        <summary>Retourne une valeur <see langword="String" /> contenant des informations sur le type de données d'une variable.</summary>
        <returns>Retourne une valeur <see langword="String" /> contenant des informations sur le type de données d'une variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le tableau suivant présente le `String` valeurs retournées par `TypeName` pour différents contenus de `VarName`.  
  
|`VarName` Contenu|Chaîne retournée|  
|------------------------|---------------------|  
|16 bits `True` ou `False` type valeur|« Boolean »|  
|type de valeur binaire 8 bits|« Byte »|  
|type de valeur de caractère 16 bits|« Char »|  
|64 bits date et heure de type valeur|« Date »|  
|Type de référence indiquant des données manquantes ou inexistantes|"DBNull"|  
|type de valeur numérique à virgule fixe de 128 bits|« Decimal »|  
|type de valeur numérique à virgule flottante 64 bits|« Double »|  
|type de valeur d’entier 32 bits|Le type « integer »|  
|Type de référence qui pointe vers un objet non spécialisé|« Objet »|  
|Type de référence qui pointe vers un objet spécialisé créé à partir de la classe *objectclass*|«*objectclass*»|  
|type de valeur d’entier 64 bits|« Long »|  
|Type référence avec aucun objet actuellement assigné|« Nothing »|  
|type de valeur d’entier signé 8 bits|« SByte »|  
|type de valeur d’entier 16 bits|« Court »|  
|type de valeur numérique à virgule flottante 32 bits|« Unique »|  
|Type de référence qui pointe vers une chaîne de caractères de 16 bits|« Chaîne »|  
|type de valeur d’entier non signé 32 bits|« UInteger »|  
|type de valeur d’entier non signé 64 bits|« ULong »|  
|type de valeur d’entier non signé 16 bits|« UShort »|  
  
 Si `VarName` est un tableau, la chaîne retournée peut être l’une des chaînes dans le tableau précédent avec des parenthèses vides. Par exemple, si `VarName` pointe vers un tableau d’entiers, `TypeName` retourne « Integer() ».  
  
 Lorsque `TypeName` retourne le nom d’un type référence tel qu’une classe, il retourne uniquement le nom lui-même, pas le nom qualifié. Par exemple, si `VarName` pointe vers un objet de classe <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` retourne « PaperSource ». Notez que si la variable est déclarée comme étant d’un certain type de classe, mais n’a pas d’un objet qui lui est assigné, `TypeName` renvoie « Nothing ».  
  
   
  
## Examples  
 L’exemple suivant utilise le `TypeName` fonction pour retourner des informations de type de données sur plusieurs variables.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">Obligatoire. Tableau de tout type de données. Tableau dans lequel vous voulez trouver le plus grand indice possible d'une dimension.</param>
        <param name="Rank">Optionnel. <see langword="Integer" />. Dimension pour laquelle le plus grand indice possible doit être retourné. Utilisez la valeur 1 pour la première dimension, la valeur 2 pour la deuxième, etc. Si <paramref name="Rank" /> cet argument est omis, la position 1 est utilisée par défaut.</param>
        <summary>Retourne le plus grand indice disponible pour la dimension indiquée d'un tableau.</summary>
        <returns><see langword="Integer" />. Valeur la plus élevée que l'indice pour la dimension spécifiée peut contenir. Si <paramref name="Array" /> a un seul élément, <see langword="UBound" /> retourne 0. Si <paramref name="Array" /> n'a pas d'éléments, par exemple si c'est une chaîne de longueur nulle, <see langword="UBound" /> retourne -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que les indices de tableau commencent à 0, la longueur d’une dimension est supérieure d’une unité que le plus grand indice disponible pour cette dimension.  
  
 Pour un tableau avec les dimensions suivantes, `UBound` retourne les valeurs dans le tableau suivant :  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Appel à UBound|Valeur de retour|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 Vous pouvez utiliser `UBound` pour déterminer le total nombre d’éléments dans un tableau, mais vous devez ajuster la valeur de retour au compte du fait que les indices commencent à 0. L’exemple suivant calcule la taille totale du tableau `a` dans l’exemple précédent :  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 La valeur calculée pour `total` est 3030, c'est-à-dire 101 * 6 * 5.  
  
   
  
## Examples  
 L’exemple suivant utilise le `UBound` fonction permettant de déterminer le plus grand indice disponible pour la dimension indiquée d’un tableau.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" /> est <see langword="Nothing" />.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" /> est inférieur à 1 ou <paramref name="Rank" /> est supérieur au rang de <paramref name="Array" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim, instruction (Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim, instruction (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">Obligatoire. Variable <see langword="Object" />. Si <see langword="Option Strict" /> est <see langword="Off" />, vous pouvez passer une variable de tout type de données, à l'exception d'une structure.</param>
        <summary>Retourne une valeur <see langword="Integer" /> contenant la classification de type de données d'une variable.</summary>
        <returns>Retourne une valeur <see langword="Integer" /> contenant la classification de type de données d'une variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur entière retournée par `VarType` est un membre de la <xref:Microsoft.VisualBasic.VariantType>.  
  
 Le tableau suivant montre les valeurs retournées par `VarType` pour les cas spéciaux de `VarName`.  
  
|Type de données représenté par `VarName`|Valeur retournée par `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|Énumération|Type de données sous-jacent (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, ou `ULong`)|  
|Tableau|Opération de bits OR de type d’élément de tableau et `VariantType.Array`|  
|Tableau de tableaux|Opération de bit OR `VariantType.Object` et `VariantType.Array`|  
|Structure (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|Inconnu|`VariantType.Object`|  
  
   
  
## Examples  
 L’exemple suivant utilise le `VarType` fonction pour retourner des informations de classification de type de données concernant plusieurs variables.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">Obligatoire. Variable <see langword="String" /> contenant un nom de type utilisé par le common language runtime.</param>
        <summary>Retourne une valeur <see langword="String" /> contenant le nom du type de données Visual Basic d'une variable.</summary>
        <returns>Retourne une valeur <see langword="String" /> contenant le nom du type de données Visual Basic d'une variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` Retourne le nom de type Visual Basic correspondant au nom de type du common language runtime. Par exemple, si `UrtName` contient « Int32 » ou « System.Int32 », `VbTypeName` retourne « Integer ». Si `VbTypeName` ne reconnaît pas la valeur de `UrtName`, elle retourne `Nothing` (pas la chaîne « Nothing »).  
  
 Le nom de type dans `UrtName` peut être obtenu à partir de diverses sources, par exemple à partir de la <xref:System.Reflection.MemberInfo.Name%2A> propriété dans le <xref:System.Reflection.MemberInfo> tableau de la <xref:System.Type> classe.  
  
   
  
## Examples  
 L’exemple suivant utilise le `VbTypeName` fonction pour retourner les noms de type de données de plusieurs variables.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">Liste des types de données (Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>