<Type Name="IDictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40ab9b64b0d119d7be7f4670a4a8cef4bd05ca30" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006577" /></Metadata><TypeSignature Language="C#" Value="public interface IDictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDictionary`2&lt;TKey, TValue&gt; implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IDictionary`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDictionary(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue))" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public interface class IDictionary : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;" />
  <TypeSignature Language="F#" Value="type IDictionary&lt;'Key, 'Value&gt; = interface&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="6fcb4-101">Type des clés du dictionnaire.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-101">The type of keys in the dictionary.</span></span></typeparam>
    <typeparam name="TValue"><span data-ttu-id="6fcb4-102">Type des valeurs du dictionnaire.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-102">The type of values in the dictionary.</span></span></typeparam>
    <summary><span data-ttu-id="6fcb4-103">Représente une collection générique de paires clé/valeur.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-103">Represents a generic collection of key/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-104">Le <xref:System.Collections.Generic.IDictionary%602> interface est l’interface de base pour les collections génériques de paires clé/valeur.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-104">The <xref:System.Collections.Generic.IDictionary%602> interface is the base interface for generic collections of key/value pairs.</span></span>  
  
 <span data-ttu-id="6fcb4-105">Chaque élément est une paire clé/valeur stockée dans un <xref:System.Collections.Generic.KeyValuePair%602> objet.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-105">Each element is a key/value pair stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="6fcb4-106">Chaque paire doit avoir une clé unique.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-106">Each pair must have a unique key.</span></span> <span data-ttu-id="6fcb4-107">Les implémentations peuvent varier selon si elles autorisent `key` être `null`.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-107">Implementations can vary in whether they allow `key` to be `null`.</span></span> <span data-ttu-id="6fcb4-108">La valeur peut être `null` et ne doivent pas être uniques.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-108">The value can be `null` and does not have to be unique.</span></span> <span data-ttu-id="6fcb4-109">Le <xref:System.Collections.Generic.IDictionary%602> interface permet les clés et les valeurs à énumérer, mais elle n’implique pas de n’importe quel ordre de tri particulier.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-109">The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</span></span>  
  
 <span data-ttu-id="6fcb4-110">Le `foreach` instruction du langage c# (`For Each` en Visual Basic, `for each` dans C++) retourne un objet du type des éléments dans la collection.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-110">The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="6fcb4-111">Étant donné que chaque élément de la <xref:System.Collections.Generic.IDictionary%602> est une paire clé/valeur, le type d’élément n’est pas le type de la clé ou le type de la valeur.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-111">Since each element of the <xref:System.Collections.Generic.IDictionary%602> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="6fcb4-112">Au lieu de cela, le type d’élément est <xref:System.Collections.Generic.KeyValuePair%602>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-112">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="6fcb4-113">Par exemple :</span><span class="sxs-lookup"><span data-stu-id="6fcb4-113">For example:</span></span>  
  
 [!code-cpp[Generic.IDictionary#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source2.cpp#11)]
 [!code-csharp[Generic.IDictionary#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source2.cs#11)]
 [!code-vb[Generic.IDictionary#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source2.vb#11)]  
  
 <span data-ttu-id="6fcb4-114">La `foreach` instruction est un wrapper autour de l’énumérateur, qui permet la lecture à partir n’écrit ne pas à la collection.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6fcb4-115">Étant donné que les clés peuvent être héritées et leur comportement modifié, leur unicité absolue ne peut pas être garantie par des comparaisons à l’aide de la <xref:System.Type.Equals%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-115">Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-116">L’exemple de code suivant crée un vide <xref:System.Collections.Generic.Dictionary%602> de chaînes, avec des clés de chaîne et y accède via le <xref:System.Collections.Generic.IDictionary%602> interface.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-116">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with string keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span>  
  
 <span data-ttu-id="6fcb4-117">L’exemple de code utilise le <xref:System.Collections.Generic.IDictionary%602.Add%2A> méthode pour ajouter des éléments.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-117">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="6fcb4-118">L’exemple montre que le <xref:System.Collections.Generic.IDictionary%602.Add%2A> méthode lève une exception <xref:System.ArgumentException> lorsque vous tentez d’ajouter une clé dupliquée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-118">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="6fcb4-119">L’exemple utilise le <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété (l’indexeur en c#) pour récupérer des valeurs, ce qui démontre qu’un <xref:System.Collections.Generic.KeyNotFoundException> est levée lorsqu’une clé demandée n’est pas présente et indiquant que la valeur associée à une clé peut être remplacée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-119">The example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="6fcb4-120">L’exemple montre comment utiliser le <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> méthode comme un moyen plus efficace pour récupérer des valeurs si un programme doit souvent essayer des valeurs de clés qui ne sont pas dans le dictionnaire et comment utiliser le <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> méthode pour tester si une clé existe avant d’appeler le <xref:System.Collections.Generic.IDictionary%602.Add%2A>(méthode).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-120">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="6fcb4-121">Enfin, l’exemple montre comment énumérer les clés et valeurs dans le dictionnaire et comment énumérer les valeurs uniquement à l’aide de la <xref:System.Collections.Generic.IDictionary%602.Values%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-121">Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 [!code-cpp[Generic.IDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#1)]
 [!code-csharp[Generic.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="6fcb4-122">La classe d’implémentation doit avoir un moyen de comparer des clés.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-122">The implementing class must have a means to compare keys.</span></span></para></block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit" Usage="iDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6fcb4-123">Objet à utiliser comme clé de l'élément à ajouter.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-123">The object to use as the key of the element to add.</span></span></param>
        <param name="value"><span data-ttu-id="6fcb4-124">Objet à utiliser comme valeur de l'élément à ajouter.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-124">The object to use as the value of the element to add.</span></span></param>
        <summary><span data-ttu-id="6fcb4-125">Ajoute un élément avec la clé et la valeur fournies à <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-125">Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-126">Vous pouvez également utiliser le <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire ; par exemple, `myCollection["myNonexistentKey"] = myValue` en c# (`myCollection("myNonexistentKey") = myValue` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-126">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="6fcb4-127">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, la définition du <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété remplace l’ancienne valeur.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-127">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="6fcb4-128">En revanche, le <xref:System.Collections.Generic.IDictionary%602.Add%2A> méthode ne modifie pas les éléments existants.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-128">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="6fcb4-129">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <xref:System.Collections.Generic.List%601> classe utilise <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, tandis que le <xref:System.Collections.Generic.Dictionary%602> classe permet à l’utilisateur de spécifier le <xref:System.Collections.Generic.IComparer%601> implémentation à utiliser pour comparer des clés.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-129">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="6fcb4-130">Les implémentations peuvent varier selon si elles autorisent `key` être `null`.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-130">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-131">L’exemple de code suivant crée un vide <xref:System.Collections.Generic.Dictionary%602> de chaînes avec des clés de type entier et y accède via le <xref:System.Collections.Generic.IDictionary%602> interface.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-131">The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings, with integer keys, and accesses it through the <xref:System.Collections.Generic.IDictionary%602> interface.</span></span> <span data-ttu-id="6fcb4-132">L’exemple de code utilise le <xref:System.Collections.Generic.IDictionary%602.Add%2A> méthode pour ajouter des éléments.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-132">The code example uses the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="6fcb4-133">L’exemple montre que le <xref:System.Collections.Generic.IDictionary%602.Add%2A> méthode lève un <xref:System.ArgumentException> lorsque vous tentez d’ajouter une clé dupliquée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-133">The example demonstrates that the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="6fcb4-134">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-134">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-135">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-135">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#2)]
 [!code-csharp[Generic.IDictionary#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#2)]
 [!code-vb[Generic.IDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fcb4-136"><paramref name="key" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-136"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6fcb4-137">Un élément possédant la même clé existe déjà dans <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-137">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6fcb4-138"><see cref="T:System.Collections.Generic.IDictionary`2" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-138">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool" Usage="iDictionary.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6fcb4-139">Clé à rechercher dans <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-139">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></param>
        <summary><span data-ttu-id="6fcb4-140">Détermine si <see cref="T:System.Collections.Generic.IDictionary`2" /> contient un élément avec la clé spécifiée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-140">Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="6fcb4-141"><see langword="true" /> si <see cref="T:System.Collections.Generic.IDictionary`2" /> contient un élément avec la clé ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-141"><see langword="true" /> if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-142">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <xref:System.Collections.Generic.List%601> classe utilise <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, tandis que le <xref:System.Collections.Generic.Dictionary%602> classe permet à l’utilisateur de spécifier le <xref:System.Collections.Generic.IComparer%601> implémentation à utiliser pour comparer des clés.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-142">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="6fcb4-143">Les implémentations peuvent varier selon si elles autorisent `key` être `null`.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-143">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-144">L’exemple de code suivant montre comment utiliser le <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> méthode pour tester si une clé existe avant d’appeler le <xref:System.Collections.Generic.IDictionary%602.Add%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-144">The following code example shows how to use the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method.</span></span> <span data-ttu-id="6fcb4-145">Il montre également comment utiliser le <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> (méthode), qui peut être un moyen plus efficace pour récupérer des valeurs si un programme essaie souvent des valeurs de clés qui ne sont pas dans le dictionnaire.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-145">It also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</span></span> <span data-ttu-id="6fcb4-146">Enfin, il montre comment insérer des éléments à l’aide de <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété (l’indexeur en c#).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-146">Finally, it shows how to insert items using <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="6fcb4-147">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-147">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-148">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-148">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#6)]
 [!code-csharp[Generic.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#6)]
 [!code-vb[Generic.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#6)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fcb4-149"><paramref name="key" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-149"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6fcb4-150">Clé de l'élément à obtenir ou définir.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-150">The key of the element to get or set.</span></span></param>
        <summary><span data-ttu-id="6fcb4-151">Obtient ou définit l'élément à l'aide de la clé spécifiée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-151">Gets or sets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="6fcb4-152">Élément correspondant à la clé spécifiée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-152">The element with the specified key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-153">Cette propriété permet d’accéder à un élément spécifique dans la collection à l’aide de la syntaxe suivante : `myCollection[key]` (`myCollection(key)` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-153">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6fcb4-154">Vous pouvez également utiliser le <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété à ajouter de nouveaux éléments en définissant la valeur d’une clé qui n’existe pas dans le dictionnaire ; par exemple, `myCollection["myNonexistentKey"] = myValue` en c# (`myCollection("myNonexistentKey") = myValue` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-154">You can also use the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue` in C# (`myCollection("myNonexistentKey") = myValue` in Visual Basic).</span></span> <span data-ttu-id="6fcb4-155">Toutefois, si la clé spécifiée existe déjà dans le dictionnaire, la définition du <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété remplace l’ancienne valeur.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-155">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="6fcb4-156">En revanche, le <xref:System.Collections.Generic.IDictionary%602.Add%2A> méthode ne modifie pas les éléments existants.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-156">In contrast, the <xref:System.Collections.Generic.IDictionary%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="6fcb4-157">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <xref:System.Collections.Generic.List%601> classe utilise <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, tandis que le <xref:System.Collections.Generic.Dictionary%602> classe permet à l’utilisateur de spécifier le <xref:System.Collections.Generic.IComparer%601> implémentation à utiliser pour comparer des clés.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-157">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
 <span data-ttu-id="6fcb4-158">Le langage c# utilise le [cela](~/docs/csharp/language-reference/keywords/this.md) mot clé pour définir les indexeurs au lieu d’implémenter le <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-158">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span> <span data-ttu-id="6fcb4-159">Visual Basic implémente <xref:System.Collections.Generic.IDictionary%602.Item%2A> comme propriété par défaut, ce qui fournit les mêmes fonctionnalités d'indexation.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-159">Visual Basic implements <xref:System.Collections.Generic.IDictionary%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="6fcb4-160">Les implémentations peuvent varier selon si elles autorisent `key` être `null`.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-160">Implementations can vary in whether they allow `key` to be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-161">Le code suivant exemple utilise le <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété (l’indexeur en c#) pour récupérer des valeurs, ce qui démontre qu’un <xref:System.Collections.Generic.KeyNotFoundException> est levée lorsqu’une clé demandée n’est pas présente et indiquant que la valeur associée à une clé peut être remplacée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-161">The following code example uses the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="6fcb4-162">L’exemple montre également comment utiliser le <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> méthode comme un moyen plus efficace pour récupérer des valeurs si un programme doit souvent essayer des valeurs de clés qui ne sont pas dans le dictionnaire.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-162">The example also shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</span></span>  
  
 <span data-ttu-id="6fcb4-163">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-163">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-164">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-164">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#3)]
 [!code-csharp[Generic.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#3)]
 [!code-vb[Generic.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#3)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
[!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
[!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
[!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fcb4-165"><paramref name="key" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-165"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="6fcb4-166">La propriété est récupérée et <paramref name="key" /> est introuvable.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-166">The property is retrieved and <paramref name="key" /> is not found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6fcb4-167">La propriété est définie et <see cref="T:System.Collections.Generic.IDictionary`2" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-167">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TKey&gt; ^ Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.ICollection&lt;'Key&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fcb4-168">Obtient un <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-168">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="6fcb4-169"><see cref="T:System.Collections.Generic.ICollection`1" /> contenant les clés de l'objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-169">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-170">L’ordre des clés dans retourné <xref:System.Collections.Generic.ICollection%601> n’est pas spécifié, mais il est garanti pour être le même ordre que les valeurs correspondantes dans le <xref:System.Collections.Generic.ICollection%601> retourné par la <xref:System.Collections.Generic.IDictionary%602.Values%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-170">The order of the keys in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-171">L’exemple de code suivant montre comment énumérer les clés autonome à l’aide de la <xref:System.Collections.Generic.IDictionary%602.Keys%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-171">The following code example shows how to enumerate keys alone using the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
 <span data-ttu-id="6fcb4-172">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-172">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-173">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-173">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#9)]
 [!code-csharp[Generic.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#9)]
 [!code-vb[Generic.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool" Usage="iDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6fcb4-174">Clé de l'élément à supprimer.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-174">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="6fcb4-175">Supprime l'élément avec la clé spécifiée d'<see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-175">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <returns><span data-ttu-id="6fcb4-176"><see langword="true" /> si la suppression de l'élément réussit ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-176"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="6fcb4-177">Cette méthode retourne également <see langword="false" /> si <paramref name="key" /> est introuvable dans le <see cref="T:System.Collections.Generic.IDictionary`2" /> d'origine.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-177">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-178">Les implémentations peuvent déterminer l’égalité des objets ; par exemple, le <xref:System.Collections.Generic.List%601> classe utilise <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, tandis que le <xref:System.Collections.Generic.Dictionary%602> classe permet à l’utilisateur de spécifier le <xref:System.Collections.Generic.IComparer%601> implémentation à utiliser pour comparer des clés.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-178">Implementations can vary in how they determine equality of objects; for example, the <xref:System.Collections.Generic.List%601> class uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>, whereas the <xref:System.Collections.Generic.Dictionary%602> class allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-179">L’exemple de code suivant montre comment supprimer une paire clé/valeur à partir d’un dictionnaire à l’aide de la <xref:System.Collections.Generic.IDictionary%602.Remove%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="6fcb4-179">The following code example shows how to remove a key/value pair from a dictionary using the <xref:System.Collections.Generic.IDictionary%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="6fcb4-180">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-180">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-181">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-181">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#10)]
 [!code-csharp[Generic.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#10)]
 [!code-vb[Generic.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fcb4-182"><paramref name="key" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-182"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6fcb4-183"><see cref="T:System.Collections.Generic.IDictionary`2" /> est en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-183">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool" Usage="iDictionary.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="6fcb4-184">Clé dont la valeur doit être obtenue.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-184">The key whose value to get.</span></span></param>
        <param name="value"><span data-ttu-id="6fcb4-185">Lorsque cette méthode est retournée, la valeur associée à la clé spécifiée, si la clé est trouvée ; sinon, la valeur par défaut pour le type du paramètre <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-185">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter.</span></span> <span data-ttu-id="6fcb4-186">Ce paramètre est passé sans être initialisé.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-186">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="6fcb4-187">Obtient la valeur associée à la clé spécifiée.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-187">Gets the value associated with the specified key.</span></span></summary>
        <returns><span data-ttu-id="6fcb4-188"><see langword="true" /> si l’objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" /> contient un élément correspondant à la clé spécifiée ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-188"><see langword="true" /> if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-189">Cette méthode combine les fonctionnalités de la <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> (méthode) et le <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-189">This method combines the functionality of the <xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="6fcb4-190">Si la clé est introuvable, la `value` paramètre Obtient la valeur par défaut appropriée pour le type `TValue`; par exemple, zéro (0) pour les types d’entiers, `false` pour les types booléens et `null` pour les types référence.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-190">If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-191">L’exemple montre comment utiliser le <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> méthode pour récupérer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-191">The example shows how to use the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method to retrieve values.</span></span> <span data-ttu-id="6fcb4-192">Si un programme essaie souvent des valeurs de clés qui ne sont pas dans un dictionnaire, la <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> méthode peut être plus efficace que l’utilisation de la <xref:System.Collections.Generic.IDictionary%602.Item%2A> propriété (l’indexeur en c#), qui lève des exceptions lorsque vous tentez de récupérer les clés qui n’existe pas.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-192">If a program frequently tries key values that are not in a dictionary, the <xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A> method can be more efficient than using the <xref:System.Collections.Generic.IDictionary%602.Item%2A> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="6fcb4-193">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-193">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-194">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-194">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#5)]
 [!code-csharp[Generic.IDictionary#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#5)]
 [!code-vb[Generic.IDictionary#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#5)]  
[!code-cpp[Generic.IDictionary#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#4)]
[!code-csharp[Generic.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6fcb4-195"><paramref name="key" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-195"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.IDictionary`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IDictionary`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::ICollection&lt;TValue&gt; ^ Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.ICollection&lt;'Value&gt;" Usage="System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6fcb4-196">Obtient <see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-196">Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></summary>
        <value><span data-ttu-id="6fcb4-197"><see cref="T:System.Collections.Generic.ICollection`1" /> contenant les valeurs de l'objet qui implémente <see cref="T:System.Collections.Generic.IDictionary`2" />.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-197">An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6fcb4-198">L’ordre des valeurs dans la liste retournée <xref:System.Collections.Generic.ICollection%601> n’est pas spécifié, mais il est garanti pour être le même ordre que les clés correspondantes dans le <xref:System.Collections.Generic.ICollection%601> retourné par la <xref:System.Collections.Generic.IDictionary%602.Keys%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-198">The order of the values in the returned <xref:System.Collections.Generic.ICollection%601> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.Generic.ICollection%601> returned by the <xref:System.Collections.Generic.IDictionary%602.Keys%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6fcb4-199">L’exemple de code suivant montre comment énumérer uniquement à l’aide de valeurs le <xref:System.Collections.Generic.IDictionary%602.Values%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-199">The following code example shows how to enumerate values alone using the <xref:System.Collections.Generic.IDictionary%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="6fcb4-200">Ce code fait partie d’un exemple plus complet qui peut être compilé et exécuté.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-200">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="6fcb4-201">Consultez <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="6fcb4-201">See <xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Generic.IDictionary#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.IDictionary/cpp/source.cpp#8)]
 [!code-csharp[Generic.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.IDictionary/CS/source.cs#8)]
 [!code-vb[Generic.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.IDictionary/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
      </Docs>
    </Member>
  </Members>
</Type>