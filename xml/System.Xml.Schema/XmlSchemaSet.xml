<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="95c84a65dda349c44d2625e4bd881d75ecddf107" /><Meta Name="ms.sourcegitcommit" Value="0de246131f8a87c71d008d055adec7bf72470c4f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/29/2019" /><Meta Name="ms.locfileid" Value="66301811" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contient un cache de schémas en langage XSD (XML Schema Definition).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   N’utilisez pas de schémas à partir de sources inconnues ou non approuvés ou des emplacements. Cela compromettra la sécurité de votre code.  
> -   Schémas XML (y compris les schémas inline) sont par nature vulnérables aux attaques refus de service ; ne les acceptez pas dans les scénarios non fiables.  
> -   Exceptions et messages d’erreur de validation de schéma peuvent exposer des informations sensibles sur le modèle de contenu ou les chemins d’accès de l’URI pour le fichier de schéma. Veillez à ne pas exposer ces informations aux appelants non approuvés.  
> -   Considérations de sécurité supplémentaires sont traitées dans la section « Considérations de sécurité ».  
  
 <xref:System.Xml.Schema.XmlSchemaSet> est un cache ou une bibliothèque où vous pouvez stocker les schémas XML Schema definition language (XSD). <xref:System.Xml.Schema.XmlSchemaSet> améliore les performances en mettant les schémas en cache au lieu d'y accéder à partir d'un fichier ou d'une URL. Chaque schéma est identifié par l’URI d’espace de noms et l’emplacement qui a été spécifié lorsque le schéma a été ajouté au jeu. Vous utilisez le <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> propriété à attribuer le <xref:System.Xml.Schema.XmlSchemaSet> un lecteur XML doit utiliser pour la validation de données de l’objet.  
  
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
  
-   N’utilisez pas de schémas à partir de sources inconnues ou non approuvées. Cela compromettra la sécurité de votre code. Incluent des espaces de noms externes ou les emplacements référencés dans, importation et la redéfinition des éléments d’un schéma sont résolus par rapport à l’URI de base du schéma inclus ou importés. Par exemple, si l’URI de base de l’inclusion ou d’une importation de schéma est vide ou `null`, les emplacements externes sont résolues en ce qui concerne le répertoire actif. Le <xref:System.Xml.XmlUrlResolver> classe est utilisée pour résoudre des schémas externes par défaut. Pour désactiver la résolution d’include, importation et redéfinir les éléments d’un schéma, définissez la <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> propriété `null`.  
  
-   Le <xref:System.Xml.Schema.XmlSchemaSet> classe utilise le <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> classe pour analyser et rechercher des expressions régulières dans un schéma XML. La validation de facettes de modèles avec des expressions régulières dans un schéma XML peut impliquer une utilisation accrue du processeur et doit être évitée dans les scénarios de haute disponibilité.  
  
-   Les exceptions déclenchées à la suite à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet> classe, telle que la <xref:System.Xml.Schema.XmlSchemaException> classe peut-être contenir des informations sensibles qui ne doivent pas être exposées dans des scénarios non fiables. Par exemple, le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété d’un <xref:System.Xml.Schema.XmlSchemaException> retourne le chemin d’accès URI au fichier de schéma qui a provoqué l’exception. Le <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> propriété ne doit pas être exposée dans les scénarios non fiables. Exceptions doivent être gérées correctement afin que ces informations sensibles ne sont pas exposées dans les scénarios non fiables.  
  
   
  
## Examples  
 L'exemple suivant valide un fichier XML à l'aide des schémas stockés dans l'objet <xref:System.Xml.Schema.XmlSchemaSet>. L’espace de noms dans le fichier XML, `urn:bookstore-schema`, identifie le schéma dans l’objet <xref:System.Xml.Schema.XmlSchemaSet> à utiliser pour la validation. Sortie de l’exemple montre que le fichier XML possède deux violations du schéma :

 - La première \<livre > élément contient un \<auteur > élément, mais aucune \<title > ou \<prix > élément.

 - Le \<auteur > élément dans le dernier \<livre > élément est manquant un \<first-name > et \<last-name > élément et à la place n’est pas \<nom > élément.   
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Entrée  
 L'exemple utilise les deux fichiers d'entrée suivants.  
  
 **booksSchemaFail.xml :**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **Books.xsd :**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">L'objet <see cref="T:System.Xml.XmlNameTable" /> à utiliser.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> avec le <see cref="T:System.Xml.XmlNameTable" /> spécifié.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'objet <see cref="T:System.Xml.XmlNameTable" /> passé en tant que paramètre est <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ajoute le schéma en langage XSD (XML Schema Definition) XML donné à <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objet <see cref="T:System.Xml.Schema.XmlSchema" /> à ajouter à <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Ajoute le <see cref="T:System.Xml.Schema.XmlSchema" /> donné à <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objet <see cref="T:System.Xml.Schema.XmlSchema" /> si le schéma est valide. Si le schéma n'est pas valide et que <see cref="T:System.Xml.Schema.ValidationEventHandler" /> est spécifié, <see langword="null" /> est retourné et l'événement de validation approprié est déclenché. Sinon, une exception <see cref="T:System.Xml.Schema.XmlSchemaException" /> est levée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Xml.Schema.XmlSchema> objet existe déjà dans le <xref:System.Xml.Schema.XmlSchemaSet>, le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode ne fait rien.  
  
 La fonctionnalité de cette méthode est identique à celle de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Le schéma n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">L'objet <see cref="T:System.Xml.Schema.XmlSchema" /> passé en tant que paramètre est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Objet <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Ajoute tous les schémas en langage XSD (XML Schema Definition) XML au <see cref="T:System.Xml.Schema.XmlSchemaSet" /> donné au <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant d’un schéma peut être ajouté à un <xref:System.Xml.Schema.XmlSchemaSet>, il doit être prétraité avec succès. Prétraitement effectue les tâches suivantes.  
  
1.  Le schéma est vérifié validité structurelle selon les règles du schéma XML de W3C, mais le schéma n’est pas entièrement validé.  
  
2.  Références aux composants de schéma internes et externes sont résolues. Tous les schémas inclus ou importés sont récupérés avec succès sont également ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>. Les schémas importés sont ajoutés en tant que distinct <xref:System.Xml.Schema.XmlSchema> d’objets et les schémas inclus sont effectuées une partie de la, notamment <xref:System.Xml.Schema.XmlSchema>.  
  
 Si le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété de la <xref:System.Xml.Schema.XmlSchemaSet> à ajouter est `true`, tous les schémas dans le <xref:System.Xml.Schema.XmlSchemaSet> à ajouter sont ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>. Si le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété de la <xref:System.Xml.Schema.XmlSchemaSet> à ajouter est `false`, chaque schéma ajouté est prétraitée avant d’être ajouté. Si aucun des schémas dans récemment ajouté <xref:System.Xml.Schema.XmlSchemaSet> ne parvient pas à être prétraité, aucun schéma n’est ajoutés ; au lieu de cela, un <xref:System.Xml.Schema.XmlSchemaException> est levée. Par conséquent, l’exemple de deux code suivantes ne sont pas équivalents.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Les exemples de deux code précédents ne sont pas équivalents. Dans le premier exemple, si un schéma non valide existe dans `schemaSet1` et son <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété est définie sur `false`, aucun schéma n’est ajoutés à `schemaSet`. Dans le deuxième exemple, un nombre de schémas peut être ajouté à `schemaSet` avant un schéma non valide est rencontré et une exception est levée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’ajout de schémas à un <xref:System.Xml.Schema.XmlSchemaSet>, puis en ajoutant le <xref:System.Xml.Schema.XmlSchemaSet> vers un nouveau <xref:System.Xml.Schema.XmlSchemaSet> à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode).  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Un schéma dans <see cref="T:System.Xml.Schema.XmlSchemaSet" /> n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">L'objet <see cref="T:System.Xml.Schema.XmlSchemaSet" /> passé en tant que paramètre est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">La propriété <paramref name="targetNamespace" /> du schéma, ou <see langword="null" />, pour utiliser le <paramref name="targetNamespace" /> spécifié dans le schéma.</param>
        <param name="schemaUri">URL qui spécifie le schéma à charger.</param>
        <summary>Ajoute le schéma en langage XSD (XML Schema Definition) XML à l'URL spécifiée à <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objet <see cref="T:System.Xml.Schema.XmlSchema" /> si le schéma est valide. Si le schéma n'est pas valide et que <see cref="T:System.Xml.Schema.ValidationEventHandler" /> est spécifié, <see langword="null" /> est retourné et l'événement de validation approprié est déclenché. Sinon, une exception <see cref="T:System.Xml.Schema.XmlSchemaException" /> est levée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant d’un schéma peut être ajouté à un <xref:System.Xml.Schema.XmlSchemaSet>, il doit être prétraité avec succès. Prétraitement effectue les tâches suivantes.  
  
1.  Le schéma est vérifié validité structurelle selon les règles du schéma XML de W3C, mais le schéma n’est pas entièrement validé.  
  
2.  Références aux composants de schéma internes et externes sont résolues. Tous les schémas inclus ou importés sont récupérés avec succès sont également ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>. Les schémas importés sont ajoutés en tant que distinct <xref:System.Xml.Schema.XmlSchema> d’objets et les schémas inclus sont effectuées une partie de la, notamment <xref:System.Xml.Schema.XmlSchema>.  
  
 Les remarques suivantes sont importantes à prendre en compte lorsque vous utilisez le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode).  
  
-   Ajout d’un schéma pour le <xref:System.Xml.Schema.XmlSchemaSet> avec la même cible URL d’emplacement de schéma et d’espace de noms en tant que schéma déjà contenu dans le <xref:System.Xml.Schema.XmlSchemaSet> retourne l’objet de schéma d’origine.  
  
-   Lorsqu’un nouveau schéma est ajouté avec succès à un <xref:System.Xml.Schema.XmlSchemaSet>, le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété de la <xref:System.Xml.Schema.XmlSchemaSet> est défini sur `false`.  
  
-   Tous les éléments include et import trouvés dans un schéma XML sont résolu lorsque la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode est appelée. Échec de résolution include et import des éléments entraîne un avertissement de validation de schéma et si aucun <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> a été spécifiée pour le <xref:System.Xml.Schema.XmlSchemaSet> objet, ces avertissement ne sera pas signalée.  
  
-   Si un schéma avec le même espace de noms cible en tant que schéma qui existe déjà dans le <xref:System.Xml.Schema.XmlSchemaSet> est ajouté à la <xref:System.Xml.Schema.XmlSchemaSet>, les deux schémas sont ajoutés.  
  
    > [!NOTE]
    >  Ce comportement diffère obsolète <xref:System.Xml.Schema.XmlSchemaCollection> objet.  
  
-   Le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode de la <xref:System.Xml.Schema.XmlSchemaSet> a la possibilité d’utiliser l’espace de noms cible défini dans un schéma, plutôt que de requérir que l’espace de noms cible soit spécifié en tant que paramètre lors de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode est appelée. Spécification `null` dans le `targetNamespace` paramètre de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode indique à la <xref:System.Xml.Schema.XmlSchemaSet> d’utiliser l’espace de noms cible défini dans le schéma, comme illustré dans l’exemple de code suivant.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 Dans l’exemple de code ci-dessus, `null` est spécifié comme le `targetNamespace` paramètre à la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode). Par conséquent, le `targetNamespace` défini dans le books.xml fichier est utilisé. Dans ce cas, le résultat de l’appel le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode serait identique si http://www.contoso.com/books avait été spécifié en tant que le `targetNamespace` paramètre.  
  
-   Schéma XML de W3C permet de schémas sans espace de noms cible à inclure dans les schémas avec un espace de noms cible défini. Dans ce cas, le schéma sans espace de noms cible défini est forcé dans l’espace de noms cible du schéma d’inclusion. Le schéma inclus est traité comme s’il avait cet espace de noms cible défini. De même, les schémas sans espace de noms cible peuvent être ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet> et être forcés dans l’espace de noms cible spécifié par le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode), comme illustré dans l’exemple suivant.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Si le schéma ci-dessus est ajouté à la <xref:System.Xml.Schema.XmlSchemaSet> avec l’espace de noms cible http://www.contoso.com/new/targetnamespace (comme indiqué dans le code ci-dessous), il est traité comme si l’espace de noms cible déclaré dans le schéma a été `http://www.contoso.com/new/targetnamespace`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 L’exemple de code suivant ajoute le http://www.contoso.com/books.xsd schéma avec un espace de noms cible http://www.contoso.com/books à la <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 L'exemple prend le fichier `books.xsd` comme entrée.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Le schéma n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">L'URL passée en tant que paramètre est <see langword="null" /> ou <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">La propriété <paramref name="targetNamespace" /> du schéma, ou <see langword="null" />, pour utiliser le <paramref name="targetNamespace" /> spécifié dans le schéma.</param>
        <param name="schemaDocument">Objet <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Ajoute le schéma en langage XSD (XML Schema Definition) XML contenu dans <see cref="T:System.Xml.XmlReader" /> à <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objet <see cref="T:System.Xml.Schema.XmlSchema" /> si le schéma est valide. Si le schéma n'est pas valide et que <see cref="T:System.Xml.Schema.ValidationEventHandler" /> est spécifié, <see langword="null" /> est retourné et l'événement de validation approprié est déclenché. Sinon, une exception <see cref="T:System.Xml.Schema.XmlSchemaException" /> est levée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant d’un schéma peut être ajouté à un <xref:System.Xml.Schema.XmlSchemaSet>, il doit être prétraité avec succès. Prétraitement effectue les tâches suivantes.  
  
1.  Le schéma est vérifié validité structurelle selon les règles du schéma XML de W3C, mais le schéma n’est pas entièrement validé.  
  
2.  Références aux composants de schéma internes et externes sont résolues. Tous les schémas inclus ou importés sont récupérés avec succès sont également ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>. Les schémas importés sont ajoutés en tant que distinct <xref:System.Xml.Schema.XmlSchema> d’objets et les schémas inclus sont effectuées une partie de la, notamment <xref:System.Xml.Schema.XmlSchema>.  
  
 Les remarques suivantes sont importantes à prendre en compte lorsque vous utilisez le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode).  
  
-   Extrait les schémas importés ou inclus par les schémas contenus dans le <xref:System.Xml.XmlReader> sont également ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Si le <xref:System.Xml.XmlReader> n’est pas positionné sur l’élément racine, un <xref:System.Xml.Schema.XmlSchemaException> est levée, sauf si l’élément actuel est un élément. Si l’élément actuel est un `xs:schema` élément, le document de schéma est lu dans le <xref:System.Xml.Schema.XmlSchemaSet>; sinon, un <xref:System.Xml.Schema.XmlSchemaException> est levée, car le schéma n’est pas valide.  
  
-   Si le <xref:System.Xml.XmlReader> est positionné sur une séquence de nœuds XML, seul le premier nœud dans la séquence est ajouté.  
  
-   Si le schéma a été créé à partir d’un <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> appel de méthode, la valeur de la <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> propriété est ignorée, car le traitement de schéma inline n’est pas appliqué pour les documents de schéma XML de W3C.  
  
-   Le <xref:System.Xml.XmlResolver> propriété de la <xref:System.Xml.XmlReader> n’est pas utilisé pour résoudre les références aux espaces de noms ou le schéma des emplacements dans incluent et import des éléments. Au lieu de cela, le <xref:System.Xml.XmlResolver> propriété de la <xref:System.Xml.Schema.XmlSchemaSet> est utilisée.  
  
-   Le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode de la <xref:System.Xml.Schema.XmlSchemaSet> a la possibilité d’utiliser l’espace de noms cible défini dans un schéma, plutôt que de requérir que l’espace de noms cible soit spécifié en tant que paramètre lors de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode est appelée. Spécification `null` ou <xref:System.String.Empty?displayProperty=nameWithType> à la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode indique à la <xref:System.Xml.Schema.XmlSchemaSet> à utiliser l’espace de noms cible défini dans le schéma. Pour obtenir un exemple de ce comportement, consultez la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode).  
  
 Les fonctionnalités restantes de cette méthode sont identique à celle de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant ajoute le schéma books.xsd contenu dans le <xref:System.Xml.XmlTextReader> avec un espace de noms cible http://www.contoso.com/books à la <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Le schéma n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">L'objet <see cref="T:System.Xml.XmlReader" /> passé en tant que paramètre est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> pour <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> pour <see cref="T:System.Xml.Schema.XmlSchemaSet" />. La valeur par défaut est une instance de <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> avec la propriété <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> égale à <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Schema.XmlSchemaCompilationSettings> classe spécifie les options de validation d’Attribution UPA (Unique Particle) pour le <xref:System.Xml.Schema.XmlSchemaSet>. Pour plus d’informations sur l’activation des contrôles de validation UPA, consultez le <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compile les schémas en langage XSD (XML Schema Definition) XML ajoutés au <see cref="T:System.Xml.Schema.XmlSchemaSet" /> dans un schéma logique.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée automatiquement lorsque la validation est nécessaire et la <xref:System.Xml.Schema.XmlSchemaSet> n’a pas été précédemment compilé - par exemple, lorsque un <xref:System.Xml.Schema.XmlSchemaSet> est utilisé en tant qu’entrée pour créer un <xref:System.Xml.XmlReader> de l’objet dans le <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> propriété d’un <xref:System.Xml.XmlReaderSettings> objet. Si le <xref:System.Xml.Schema.XmlSchemaSet> est déjà dans l’état compilé, cette méthode ne recompile pas les schémas. Si cette méthode s’exécute correctement, le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété est définie sur `true`.  
  
 Les schémas qui ont été compilés précédemment par un <xref:System.Xml.Schema.XmlSchemaSet> ne sont pas recompilés. Toutefois, les schémas qui ont été compilés à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> méthode de le <xref:System.Xml.Schema.XmlSchema> seront recompilés.  
  
> [!NOTE]
>  Vous devez appeler la <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> méthode si vous avez modifié un schéma (ou un de ses inclusions/importations) après son ajout à la <xref:System.Xml.Schema.XmlSchemaSet>. Le <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> méthode vérifie la validité structurelle selon les règles du W3C XML Schema du schéma. Toutefois, il n’effectuera pas une vérification de validation complète. Il résout également les références aux composants de schéma internes et externes. Tous les schémas inclus ou importés sont récupérés avec succès sont également ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>. Les schémas importés sont ajoutés en tant que distinct <xref:System.Xml.Schema.XmlSchema> objets alors qu’inclus schémas font partie de la, notamment <xref:System.Xml.Schema.XmlSchema>. Si l’appel à retraiter est réussie, le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété est définie sur false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Une erreur s'est produite lors de la validation et de la compilation des schémas dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indique si un schéma en langage XSD (XML Schema Definition) se trouve dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Propriété <paramref name="targetNamespace" /> du schéma.</param>
        <summary>Indique si un schéma en langage XSD (XML Schema Definition) avec l'URI d'espace de noms cible spécifié se trouve dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see langword="true" /> si un schéma avec l'URI d'espace de noms cible spécifié se trouve <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les schémas sont ajoutés indirectement à la <xref:System.Xml.Schema.XmlSchemaSet> sont détectés par le <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> méthode ; par exemple, les schémas importés. Par conséquent, si un schéma pour le http://www.contoso.com/retail espace de noms qui importe un schéma pour le http://www.contoso.com/books espace de noms est ajoutée à la <xref:System.Xml.Schema.XmlSchemaSet>, l’appel <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> avec `http://www.contoso.com/books` en tant que paramètre, elle retourne `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objet <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Indique si l'objet en langage XSD (XML Schema Definition) <see cref="T:System.Xml.Schema.XmlSchema" /> spécifié se trouve dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see langword="true" /> si l'objet <see cref="T:System.Xml.Schema.XmlSchema" /> et dans le <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> passé en tant que paramètre est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Tableau dans lequel copier les objets.</param>
        <param name="index">Index à partir duquel la copie va commencer dans le tableau.</param>
        <summary>Copie tous les objets <see cref="T:System.Xml.Schema.XmlSchema" /> de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vers le tableau donné, en commençant à l'index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant copie tous les <xref:System.Xml.Schema.XmlSchema> des objets dans le <xref:System.Xml.Schema.XmlSchemaSet> vers un tableau de <xref:System.Xml.Schema.XmlSchema> objets.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de schémas en langage XSD (XML Schema Definition) logiques dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Nombre de schémas logiques dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 S’il existe deux schémas pour l’espace de noms `http://www.contoso.com` dans le <xref:System.Xml.Schema.XmlSchemaSet>, le <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> propriété retournerait 1 car les schémas sont traités comme un seul schéma logique à des fins de validation. Toutefois, si un schéma pour l’espace de noms `http://www.contoso.com/retail` importé un schéma pour le `http://www.contoso.com/books` espace de noms, la valeur de la <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> propriété serait 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les attributs globaux dans tous les schémas en langage XSD (XML Schema Definition) dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Collection d'attributs globaux.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les éléments globaux dans tous les schémas en langage XSD (XML Schema Definition) dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Collection d'éléments globaux.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient tous les types simples et complexes globaux dans tous les schémas en langage XSD (XML Schema Definition) dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Collection de types simples et complexes globaux.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> propriété retourne toujours un type qui représente le `xs:anyType` type complexe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si les schémas en langage XSD (XML Schema Definition) du <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ont été compilés.</summary>
        <value><see langword="true" /> si les schémas dans <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ont été compilés depuis la dernière fois qu'un schéma a été ajouté à ou supprimé de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> n'est pas affectée si les schémas sont modifiés dans l'objet <xref:System.Xml.Schema.XmlSchemaSet>. Le suivi des mises à jour des schémas individuels dans l'objet <xref:System.Xml.Schema.XmlSchemaSet> n'est pas assuré. Par conséquent, la propriété <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> peut être `true`, même si l'un des schémas contenus dans l'objet <xref:System.Xml.Schema.XmlSchemaSet> a été modifié, pour autant qu'aucun schéma n'a été ajouté ou supprimé de l'objet <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Pour obtenir un exemple de la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété, consultez le <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Xml.XmlNameTable" /> par défaut utilisé par <see cref="T:System.Xml.Schema.XmlSchemaSet" /> lors du chargement de nouveaux schémas en langage XSD (XML Schema Definition).</summary>
        <value>Table d'objets de chaînes atomisées.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Objet <see cref="T:System.Xml.Schema.XmlSchema" /> à supprimer de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Supprime le schéma en langage XSD (XML Schema Definition) spécifié du <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>L'objet <see cref="T:System.Xml.Schema.XmlSchema" /> supprimé de <see cref="T:System.Xml.Schema.XmlSchemaSet" /> ou <see langword="null" /> si le schéma n'a pas été trouvé dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Suppression d’un schéma à partir de la <xref:System.Xml.Schema.XmlSchemaSet> définit le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété `false`.  
  
   
  
## Examples  
 L’exemple suivant illustre l’ajout de plusieurs schémas à un <xref:System.Xml.Schema.XmlSchemaSet>, puis supprime l’un des schémas à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> (méthode).  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Le schéma n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" /> passé en tant que paramètre est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Objet <see cref="T:System.Xml.Schema.XmlSchema" /> à supprimer de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Supprime le schéma en langage XSD (XML Schema Definition) spécifié et tous les schémas qu'il importe de <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns><see langword="true" /> si l'objet <see cref="T:System.Xml.Schema.XmlSchema" /> et toutes ses importations ont été supprimés ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> méthode supprime le schéma spécifié et tous les schémas importés à partir de la <xref:System.Xml.Schema.XmlSchemaSet>, tant qu’il n’existe aucune dépendance sur le schéma ou ses schémas importés. S’il existe des dépendances sur le schéma ou ses schémas importés dans le <xref:System.Xml.Schema.XmlSchemaSet>, rien n’est supprimé et <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> retourne `false`. Si `false` est retourné et un <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> est défini, un avertissement est envoyé au gestionnaire d’événements décrivant les dépendances.  
  
 Si le schéma spécifié importe d’autres schémas et le schéma spécifié a été précédemment supprimé avec le <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> (méthode), le <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> méthode ne supprimera pas les schémas importés et retournera `false`. Par exemple, si `parentSchema` importe `childSchema1` et `childSchema2` supprime uniquement le code suivant `parentSchema`, mais pas importé `childSchema1` et `childSchema2` schémas :  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Le code suivant supprime le `parentSchema` et les schémas importés :  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Le <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> méthode n’a aucun effet sur l’état de la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’ajout de plusieurs schémas à un <xref:System.Xml.Schema.XmlSchemaSet>, puis supprime l’un des schémas et tous les schémas importés à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> (méthode).  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" /> passé en tant que paramètre est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Schéma à recycler.</param>
        <summary>Recycle un schéma en langage XSD (XML Schema Definition) qui existe déjà dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Objet <see cref="T:System.Xml.Schema.XmlSchema" /> si le schéma est un schéma valide. Si le schéma n'est pas valide et que <see cref="T:System.Xml.Schema.ValidationEventHandler" /> est spécifié, <see langword="null" /> est retourné et l'événement de validation approprié est déclenché. Sinon, une exception <see cref="T:System.Xml.Schema.XmlSchemaException" /> est levée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retraitement d’un schéma effectue toutes les étapes de prétraitement effectuées sur un schéma lors de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> méthode est appelée. Si l’appel à <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> est réussie, le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété est définie sur `false`.  
  
 La méthode Reprocess doit être utilisée après un schéma dans le <xref:System.Xml.Schema.XmlSchemaSet> a été modifié, une fois que le <xref:System.Xml.Schema.XmlSchemaSet> a effectué la compilation.  
  
> [!NOTE]
>  Vous devez appeler la <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> méthode si vous avez modifié un schéma (ou un de ses inclusions/importations) après son ajout à la <xref:System.Xml.Schema.XmlSchemaSet>. Le <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> méthode vérifie la validité structurelle selon les règles du W3C XML Schema du schéma. Toutefois, il n’effectuera pas une vérification de validation complète. Il résout également les références aux composants de schéma internes et externes. Tous les schémas inclus ou importés sont récupérés avec succès sont également ajoutés à la <xref:System.Xml.Schema.XmlSchemaSet>. Les schémas importés sont ajoutés en tant que distinct <xref:System.Xml.Schema.XmlSchema> objets alors qu’inclus schémas font partie de la, notamment <xref:System.Xml.Schema.XmlSchema>. Si l’appel à retraiter est réussie, le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété est définie sur false.  
  
   
  
## Examples  
 L’exemple suivant illustre le retraitement d’un schéma ajouté à la <xref:System.Xml.Schema.XmlSchemaSet>. Après le <xref:System.Xml.Schema.XmlSchemaSet> est compilé à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> (méthode) et le schéma ajouté à la <xref:System.Xml.Schema.XmlSchemaSet> est modifiée, le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété sera définie `true`, même si un schéma de la <xref:System.Xml.Schema.XmlSchemaSet> a été modifié. Appelant le <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> méthode effectue tout le prétraitement effectué par le <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (méthode) et définit le <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> propriété `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Le schéma n'est pas valide.</exception>
        <exception cref="T:System.ArgumentNullException">L'objet <see cref="T:System.Xml.Schema.XmlSchema" /> passé en tant que paramètre est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L'objet <see cref="T:System.Xml.Schema.XmlSchema" /> passé en tant que paramètre n'existe pas déjà dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une collection de schémas en langage XSD (XML Schema Definition) dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une collection de tous les schémas en langage XSD (XML Schema Definition) dans <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Un objet <see cref="T:System.Collections.ICollection" /> contenant tous les schémas qui ont été ajoutés à <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Si aucun schéma n'a été ajouté au <see cref="T:System.Xml.Schema.XmlSchemaSet" />, un objet <see cref="T:System.Collections.ICollection" /> vide est retourné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne des schémas qui ont été ajoutés indirectement de la <xref:System.Xml.Schema.XmlSchemaSet> , car elles ont été importées.  
  
> [!NOTE]
>  Le <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> méthode est l’équivalent de la <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> méthode obsolète <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 L’exemple suivant montre comment effectuer une itération sur tous les schémas dans le <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Propriété <paramref name="targetNamespace" /> du schéma.</param>
        <summary>Retourne une collection de tous les schémas en langage XSD (XML Schema Definition) dans <see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui appartient à l'espace de noms donné.</summary>
        <returns>Objet <see cref="T:System.Collections.ICollection" /> contenant tous les schémas qui ont été ajoutés au <see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui appartient à l'espace de noms donné. Si aucun schéma n'a été ajouté au <see cref="T:System.Xml.Schema.XmlSchemaSet" />, un objet <see cref="T:System.Collections.ICollection" /> vide est retourné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `targetNamespace` paramètre est `null` ou <xref:System.String.Empty>, tous les schémas sans espace de noms sont retournés.  
  
 Cette méthode retourne des schémas qui ont été ajoutés indirectement de la <xref:System.Xml.Schema.XmlSchemaSet> , car elles ont été importées.  
  
> [!NOTE]
>  Le <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> méthode est l’équivalent de la <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> méthode obsolète <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 L’exemple suivant montre comment effectuer une itération sur tous les schémas dans le http://www.contoso.com/books espace de noms dans le <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Spécifie un gestionnaire d'événements pour recevoir des informations à propos des erreurs de validation du schéma en langage XSD (XML Schema Definition).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définit un gestionnaire d’événements pour recevoir des informations sur les erreurs de validation de schéma lors de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> ou <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> méthodes de la <xref:System.Xml.Schema.XmlSchemaSet> sont appelées.  
  
 Si un gestionnaire d’événements n’est pas défini, un <xref:System.Xml.Schema.XmlSchemaException> est levée sur les erreurs de validation dans lequel le <xref:System.Xml.Schema.XmlSeverityType> est <xref:System.Xml.Schema.XmlSeverityType.Error>. Pas d’exception pour les erreurs de validation avec un <xref:System.Xml.Schema.XmlSeverityType> de <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’ajout d’un <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> pour capturer les erreurs et avertissements lors de la validation d’un document XML par rapport à un schéma.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 L’exemple utilise le fichier books.xml en tant qu’entrée.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 L’exemple utilise le fichier books.xsd comme entrée.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit le <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre les espaces de noms ou les emplacements référencés dans les éléments include et import d'un schéma.</summary>
        <value><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre les espaces de noms ou les emplacements référencés dans les éléments include et import d'un schéma.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.XmlResolver> d’un <xref:System.Xml.Schema.XmlSchemaSet> est utilisé pour résoudre les espaces de noms ou les emplacements référencés dans incluant et importer des éléments d’un schéma, chaque fois qu’un schéma est ajouté à l’aide de la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> ou <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> méthodes.  
  
> [!IMPORTANT]
>  Incluent des espaces de noms externes ou les emplacements référencés dans, importation et la redéfinition des éléments d’un schéma sont résolus par rapport à l’URI de base du schéma inclus ou importés. Par exemple, si l’URI de base de l’inclusion ou d’une importation de schéma est vide ou `null`, les emplacements externes sont résolues en ce qui concerne le répertoire actif. Le <xref:System.Xml.XmlUrlResolver> classe est utilisée pour résoudre des schémas externes par défaut. Pour désactiver la résolution d’include, importation et redéfinir les éléments d’un schéma, définissez la <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> propriété `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>
