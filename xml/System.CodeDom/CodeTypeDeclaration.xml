<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata><Meta Name="ms.openlocfilehash" Value="42248b06ac1fa179439385ec22e10bd4ab4b5a36" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56764793" /></Metadata><TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <TypeSignature Language="F#" Value="type CodeTypeDeclaration = class&#xA;    inherit CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8ad8d-101">Représente une déclaration de type pour une classe, une structure, une interface ou une énumération.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-101">Represents a type declaration for a class, structure, interface, or enumeration.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ad8d-102"><xref:System.CodeDom.CodeTypeDeclaration> peut être utilisé pour représenter le code qui déclare une classe, de structure, interface ou énumération.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="8ad8d-103"><xref:System.CodeDom.CodeTypeDeclaration> peut être utilisé pour déclarer un type imbriqué dans un autre type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="8ad8d-104">Le <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> propriété spécifie le type de base ou les types de base du type déclaré.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="8ad8d-105">Le <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> propriété contient les membres de type, qui peuvent inclure des méthodes, champs, propriétés, commentaires et autres types.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="8ad8d-106">Le <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propriété indique le <xref:System.Reflection.TypeAttributes> valeurs pour la déclaration de type, qui spécifie la catégorie du type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="8ad8d-107">Le <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, et <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> méthodes indiquent si le type est une classe, structure, énumération ou type d’interface, respectivement.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ad8d-108">Certains langages de programmation prennent uniquement en charge la déclaration de types référence, ou des classes.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="8ad8d-109">Pour vérifier un générateur de code CodeDOM spécifique à la langue prise en charge pour déclarer des interfaces, des énumérations ou des types valeur, appelez le <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> méthode à tester pour approprié <xref:System.CodeDom.Compiler.GeneratorSupport> indicateurs.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="8ad8d-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> Indique la prise en charge pour les interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indique la prise en charge des énumérations, et <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indique la prise en charge pour les types valeur tels que les structures.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="8ad8d-111">Vous pouvez créer une classe ou une implémentation de la structure dans une déclaration complète ou étendre l’implémentation sur plusieurs déclarations.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="8ad8d-112">Le <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriété indique si la déclaration de type est complète ou partielle.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="8ad8d-113">Pas tous les générateurs de code prenant en charge les déclarations de type partiel, vous devez tester cette prise en charge en appelant le <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> méthode avec l’indicateur <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ad8d-114">Cet exemple montre comment utiliser un <xref:System.CodeDom.CodeTypeDeclaration> pour déclarer un type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ad8d-115">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ad8d-116">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeTypeDeclaration : string -&gt; System.CodeDom.CodeTypeDeclaration" Usage="new System.CodeDom.CodeTypeDeclaration name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8ad8d-117">Nom du nouveau type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-117">The name for the new type.</span></span></param>
        <summary><span data-ttu-id="8ad8d-118">Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseTypes : System.CodeDom.CodeTypeReferenceCollection" Usage="System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-119">Obtient les types de base du type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-119">Gets the base types of the type.</span></span></summary>
        <value><span data-ttu-id="8ad8d-120">Objet <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui indique les types de base du type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ad8d-121">Pour générer une classe en Visual Basic qui n’hérite pas d’un type de base, mais qui n’implémente pas une ou plusieurs interfaces, vous devez inclure <xref:System.Object> comme premier élément dans le <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ad8d-122">Dans le .NET Framework version 2.0, vous n’avez pas besoin du <xref:System.CodeDom.CodeTypeReference> pour <xref:System.Object> si l’interface que vous implémentez déjà existe et que vous faites référence à ce dernier par type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="8ad8d-123">Par exemple, si vous implémentez le <xref:System.Collections.ICollection> d’interface et l’ajouter à la collection avec la présente déclaration, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, vous n’avez pas besoin de l’exemple précédent `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` instruction.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="8ad8d-124">Le code suivant illustre l’ajout d’un <xref:System.CodeDom.CodeTypeReference> à la collection qui fait référence à <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="8ad8d-125">Le code précédent génère l’équivalent du code Visual Basic suivant.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="8ad8d-126">Toutefois, le code Visual Basic en fait généré est la suivante.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-127">Obtient ou définit une valeur indiquant si le type est une classe ou un type référence.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-127">Gets or sets a value indicating whether the type is a class or reference type.</span></span></summary>
        <value><span data-ttu-id="8ad8d-128"><see langword="true" /> si le type est une classe ou un type référence ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-128"><see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-129">Obtient ou définit une valeur indiquant si le type est une énumération.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-129">Gets or sets a value indicating whether the type is an enumeration.</span></span></summary>
        <value><span data-ttu-id="8ad8d-130"><see langword="true" /> si le type est une énumération ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-130"><see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-131">Obtient ou définit une valeur indiquant si le type est une interface.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-131">Gets or sets a value indicating whether the type is an interface.</span></span></summary>
        <value><span data-ttu-id="8ad8d-132"><see langword="true" /> si le type est une interface ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-132"><see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPartial : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-133">Obtient ou définit une valeur indiquant si la déclaration de type est complète ou partielle.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span></span></summary>
        <value><span data-ttu-id="8ad8d-134"><see langword="true" /> si la déclaration de classe ou de structure est une représentation partielle de l'implémentation ; <see langword="false" /> si la déclaration est une implémentation complète de la classe ou de la structure.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-134"><see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span></span> <span data-ttu-id="8ad8d-135">La valeur par défaut est <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-135">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ad8d-136">Vous pouvez créer une implémentation de classe ou structure dans une déclaration complète ou étendre l’implémentation sur plusieurs déclarations.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="8ad8d-137">Les implémentations sont fournies en général dans la déclaration d’un type complet.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="8ad8d-138">Dans ce cas, définissez la déclaration de type <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriété `false`, ce qui indique que la déclaration de type représente tous les détails de l’implémentation de classe ou structure.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="8ad8d-139">Une déclaration de type partiel facilite la construction des différentes parties d’une implémentation de classe ou structure dans différents modules de votre application.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="8ad8d-140">Les déclarations de type partiel peuvent être stockées dans un fichier source ou réparties sur plusieurs fichiers sources qui peuvent être compilés ensemble pour former l’implémentation de type combinée.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="8ad8d-141">Le langage C# prend en charge les déclarations de type partiel de classes et structures via le `partial` mot clé.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="8ad8d-142">Visual Basic prend en charge les déclarations de type partiel de classes et structures avec le `Partial` mot clé.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="8ad8d-143">Pas tous les générateurs de code prenant en charge les déclarations de type partiel, vous devez tester cette prise en charge en appelant le <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> méthode avec l’indicateur <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ad8d-144">Les déclarations de type partiel sont prises en charge pour les classes et structures.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="8ad8d-145">Si vous spécifiez une déclaration de type partiel pour une énumération ou une interface, le code généré provoque des erreurs du compilateur.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="8ad8d-146">Lorsque vous fournissez une implémentation de classe ou une structure sur plusieurs déclarations, affectez la <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriété `true` pour la déclaration initiale et toutes les déclarations supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="8ad8d-147">La déclaration initiale doit spécifier entièrement le type de signature, notamment les modificateurs d’accès, les types hérités et les interfaces implémentées.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="8ad8d-148">Les déclarations de respect n’avez pas besoin de spécifier à nouveau la signature de type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="8ad8d-149">Une erreur du compilateur se produit généralement si vous redéfinissez la signature de type dans une déclaration supplémentaire.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="8ad8d-150">Visual Studio 2005 utilise des types partiels pour séparer le code généré par l’utilisateur à partir de code du concepteur.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="8ad8d-151">Dans les projets d’Application Windows de Visual Basic, le code utilisateur est placé dans une classe partielle qui n’est pas qualifiée par le `Partial` mot clé ; fourni par le Concepteur de code apparaît dans la classe partielle qui a le `Partial` mot clé.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="8ad8d-152">En C#, le code utilisateur et le code du concepteur apparaissent dans des classes partielles identifiés par le `partial` mot clé.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ad8d-153">Cet exemple montre comment utiliser un <xref:System.CodeDom.CodeTypeDeclaration> pour fournir une implémentation de classe sur plusieurs déclarations.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="8ad8d-154">L’exemple génère l’instruction de déclaration de classe initiale et définit le <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="8ad8d-155">Une autre méthode dans l’exemple étend l’implémentation de classe.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="8ad8d-156">Cette méthode génère une nouvelle instruction de déclaration de type pour la classe existante et affecte le <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> propriété `true`.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="8ad8d-157">Le compilateur combine les deux déclarations de type partiel pour l’implémentation de classe complète.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsStruct : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-158">Obtient ou définit une valeur indiquant si le type est un type valeur (structure).</span><span class="sxs-lookup"><span data-stu-id="8ad8d-158">Gets or sets a value indicating whether the type is a value type (struct).</span></span></summary>
        <value><span data-ttu-id="8ad8d-159"><see langword="true" /> si le type est un type valeur ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-159"><see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Members : System.CodeDom.CodeTypeMemberCollection" Usage="System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-160">Obtient la collection des membres de classe pour le type représenté.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-160">Gets the collection of class members for the represented type.</span></span></summary>
        <value><span data-ttu-id="8ad8d-161">Objet <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> qui indique les membres de la classe.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberSignature Language="F#" Value="member this.PopulateBaseTypes : EventHandler " Usage="member this.PopulateBaseTypes : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-162">Se produit lors du premier accès à la collection <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberSignature Language="F#" Value="member this.PopulateMembers : EventHandler " Usage="member this.PopulateMembers : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-163">Se produit lors du premier accès à la collection <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberSignature Language="F#" Value="member this.TypeAttributes : System.Reflection.TypeAttributes with get, set" Usage="System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-164">Obtient ou définit les attributs du type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-164">Gets or sets the attributes of the type.</span></span></summary>
        <value><span data-ttu-id="8ad8d-165">Objet <see cref="T:System.Reflection.TypeAttributes" /> qui indique les attributs du type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ad8d-166">Le <xref:System.Reflection.TypeAttributes> propriété contient le même type de valeurs utilisées par <xref:System.Reflection> lors de la vérification d’un type au moment de l’exécution.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="8ad8d-167">Nombre de ces indicateurs ne correspondent pas à la syntaxe de déclaration de type pour certaines langues.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="8ad8d-168">Par conséquent, seuls les indicateurs suivants sont significatifs jusqu'à <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, et <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ad8d-169">Certains des indicateurs comme <xref:System.Reflection.TypeAttributes.Abstract> se chevauchent avec la signification des indicateurs dans le <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propriété de <xref:System.CodeDom.CodeTypeDeclaration> qui est hérité de <xref:System.CodeDom.CodeTypeMember>.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="8ad8d-170">Le <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propriété est un effet secondaire de la <xref:System.CodeDom.CodeTypeDeclaration> classe héritant de <xref:System.CodeDom.CodeTypeMember> afin que les classes peuvent être imbriquées.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="8ad8d-171">Les indicateurs dans le <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propriété doit être utilisée au lieu des indicateurs dans le <xref:System.CodeDom.CodeTypeMember.Attributes%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ad8d-172">Le modèle de définition des indicateurs de visibilité (indicateurs qui contiennent les mots `Public` ou `Nested`) consiste à masquer visibilité de tous les indicateurs à l’aide de la <xref:System.Reflection.TypeAttributes.VisibilityMask> puis définissez l’indicateur de visibilité souhaité.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="8ad8d-173">Par exemple, la code instruction C# pour identifier le <xref:System.CodeDom.CodeTypeDeclaration> (nommé `cd`) comme une classe interne est `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="8ad8d-174">Le code permettant de définir la même valeur en Visual Basic est `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="8ad8d-175">Définition de la <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> propriété directement vers un indicateur de visibilité (`cd.TypeAttributes = TypeAttributes.NotPublic;`) efface tous les autres indicateurs qui peuvent être définies.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeParameters : System.CodeDom.CodeTypeParameterCollection" Usage="System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ad8d-176">Obtient les paramètres de type pour la déclaration de type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-176">Gets the type parameters for the type declaration.</span></span></summary>
        <value><span data-ttu-id="8ad8d-177"><see cref="T:System.CodeDom.CodeTypeParameterCollection" /> qui contient les paramètres de type pour la déclaration de type.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ad8d-178">Une déclaration de type générique contient un ou plusieurs types connus comme paramètres non spécifiés.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="8ad8d-179">Un nom de paramètre de type représente le type dans le corps de la déclaration générique.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="8ad8d-180">Par exemple, la déclaration générique pour le <xref:System.Collections.Generic.List%601> classe contient le paramètre de type `T`.</span><span class="sxs-lookup"><span data-stu-id="8ad8d-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="8ad8d-181">Pour plus d’informations sur les types génériques, consultez [génériques dans la bibliothèque de classes .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span><span class="sxs-lookup"><span data-stu-id="8ad8d-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>