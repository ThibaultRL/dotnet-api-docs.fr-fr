<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="245b0dbe550b6d8c9da469b38d25afbd8040fa21" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996807" /></Metadata><TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente une collection de spécifique à l’application <see cref="T:System.IO.Packaging.Package" /> instances utilisés en association avec <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IO.Packaging.PackageStore> définit une collection de référence de package qui est ouverts et actifs dans l’application.  Les packages ajoutés à la <xref:System.IO.Packaging.PackageStore> sont accessibles par leur valeur URI de clé.  Le <xref:System.IO.Packaging.PackageStore> prend en charge trois utilisations courantes :  
  
1.  L’accès à <xref:System.IO.Packaging.PackagePart> données via <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  L’application obtenant une instance d’un <xref:System.IO.Packaging.Package> étant donné l’URI du package.  
  
3.  Accès aux packages qui sont créées et stockées dans un <xref:System.IO.MemoryStream>.  
  
 Pour améliorer les performances et de minimiser la charge des opérations répétées de fichier ouvert/fermé, le <xref:System.IO.Packaging.PackageStore> est utilisé pour gérer des instances de packages accédés par <xref:System.IO.Packaging.PackWebRequest> et directement par l’application.  Lors de l’accès aux données dans un package, le <xref:System.IO.Packaging.Package> adresse d’une demande <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> est d’abord vérifiée pour voir si le package est déjà défini et ouvert dans le <xref:System.IO.Packaging.PackageStore>.  Si le package est défini comme étant ouvert dans le <xref:System.IO.Packaging.PackageStore>, demandé parties sont accessibles directement sans ouverture et fermeture le package pour chaque demande à plusieurs reprises.  
  
 Si votre application ouvre un package avec <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> peut être appelée pour ajouter le package à le <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> doit ensuite être appelée pour supprimer le package à partir de la <xref:System.IO.Packaging.PackageStore> avant d’appeler <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Packages XPS est ouvert avec un <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructeur sont automatiquement ajoutés et supprimés à partir de la <xref:System.IO.Packaging.PackageStore> lorsque le document est créé et supprimé.  (Vous n’avez pas besoin d’appeler <xref:System.IO.Packaging.PackageStore.AddPackage%2A> ou <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> séparément pour les packages XPS ouverts avec <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructeurs.)  
  
 Les autorisations d’e/s de fichier d’un package accédé via la <xref:System.IO.Packaging.PackageStore> restent les mêmes que les autorisations d’e/s sur le package lorsqu’il est ouvert.  Le <xref:System.IO.Packaging.PackageStore> fournit seulement des références aux packages qui ont été ajoutés au magasin.  C’est à l’application pour ouvrir, de mettre à jour et de fermer chaque package correctement.  
  
 Les packages ajoutés à la <xref:System.IO.Packaging.PackageStore> sont accessibles dans les environnements multithreads lorsqu’ils sont utilisés en association avec un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] analyseur comme <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Lors du fonctionnement dans un environnement multithread, l’application doit verrouiller le package avant d’accès.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">La clé [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] de la <paramref name="package" /> à comparer dans un <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">Le package à ajouter au magasin.</param>
        <summary>Ajoute un <see cref="T:System.IO.Packaging.Package" /> dans le magasin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` définit l’URI qui est comparé lorsque vous appelez de la clé du package <xref:System.IO.Packaging.PackWebRequest>.  
  
 Si le `packageUri` correspond à la <xref:System.IO.Packaging.PackagePart.Uri%2A> pour un <xref:System.IO.Packaging.PackagePart> dans un <xref:System.IO.Packaging.PackWebRequest> appeler, le package défini dans le <xref:System.IO.Packaging.PackageStore> est utilisé pour accéder au composant demandé.  
  
 Si le `packageUri` ne correspond pas à la <xref:System.IO.Packaging.PackagePart.Uri%2A> pour un <xref:System.IO.Packaging.PackagePart> dans un <xref:System.IO.Packaging.PackWebRequest> appel, le package avec l’URI spécifié est ouvert pour accéder au composant demandé.  
  
 **Note de sécurité** cette méthode exige <xref:System.Security.Permissions.EnvironmentPermission> pour l’installation personnalisée de tous les <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) types.  
  
   
  
## Examples  
 L'exemple suivant illustre l'utilisation de la méthode <xref:System.IO.Packaging.PackageStore.AddPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="package" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> est un package non valide [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <exception cref="T:System.InvalidOperationException">Un package avec la valeur <paramref name="packageUri" /> est déjà dans le magasin.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Le [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] du package à retourner.</param>
        <summary>Retourne le <see cref="T:System.IO.Packaging.Package" /> avec un [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] à partir du magasin.</summary>
        <returns>Le package avec un <paramref name="packageUri" />; ou <see langword="null" />, si un package avec la valeur <paramref name="packageUri" /> n’est pas dans le magasin.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` ne correspond à l’URI spécifié dans le <xref:System.IO.Packaging.PackageStore.AddPackage%2A> appel de méthode.  
  
 **Note de sécurité** cette méthode exige <xref:System.Security.Permissions.EnvironmentPermission> pour l’installation personnalisée de tous les <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) types.  
  
   
  
## Examples  
 L'exemple suivant illustre l'utilisation de la méthode <xref:System.IO.Packaging.PackageStore.GetPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> est un package non valide [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Le [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] du package à supprimer.</param>
        <summary>Supprime le <see cref="T:System.IO.Packaging.Package" /> avec un [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] à partir du magasin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` ne correspond à l’URI spécifié dans le <xref:System.IO.Packaging.PackageStore.AddPackage%2A> appel de méthode.  
  
 **Note de sécurité** cette méthode exige <xref:System.Security.Permissions.EnvironmentPermission> pour l’installation personnalisée de tous les <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) types.  
  
   
  
## Examples  
 L'exemple suivant illustre l'utilisation de la méthode <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="packageUri" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="packageUri" /> est un package non valide [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>