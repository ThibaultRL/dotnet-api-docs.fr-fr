<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf62fb82c2065e506a1cdde9519dcfdd4051504" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006691" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a9988-101">Autorise l’utilisateur à définir un comportement personnalisé lors de l’écriture de code JSON en utilisant le <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="a9988-101">Allows the user to define custom behavior when writing JSON using the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a9988-102">Par défaut, le JSON est écrit sans mise en retrait ou espace blanc superflu.</span><span class="sxs-lookup"><span data-stu-id="a9988-102">By default, the JSON is written without any indentation or extra white space.</span></span> <span data-ttu-id="a9988-103">En outre, <xref:System.Text.Json.Utf8JsonWriter> lève une exception si l’utilisateur tente d’écrire le JSON structurellement non valide.</span><span class="sxs-lookup"><span data-stu-id="a9988-103">Also, <xref:System.Text.Json.Utf8JsonWriter> throws an exception if the user attempts to write structurally invalid JSON.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9988-104">Obtient ou définit une valeur qui indique si le <see cref="T:System.Text.Json.Utf8JsonWriter" /> doit mettre en forme la sortie JSON, qui inclut la mise en retrait des jetons JSON imbriqués, l’ajout de nouvelles lignes et l’ajout d’espaces blancs entre les noms et les valeur de propriété.</span><span class="sxs-lookup"><span data-stu-id="a9988-104">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.</span></span></summary>
        <value><span data-ttu-id="a9988-105"><see langword="true" /> Pour mettre en forme la sortie ; JSON <see langword="false" /> écrire sans espace blanc supplémentaire.</span><span class="sxs-lookup"><span data-stu-id="a9988-105"><see langword="true" /> to format the JSON output; <see langword="false" /> to write without any extra white space.</span></span> <span data-ttu-id="a9988-106">La valeur par défaut est <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a9988-106">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a9988-107">Obtient ou définit une valeur qui indique si le <see cref="T:System.Text.Json.Utf8JsonWriter" /> doit ignorer la validation structurelle et autoriser l’utilisateur à écrire du code JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="a9988-107">Gets or sets a value that indicates whether the <see cref="T:System.Text.Json.Utf8JsonWriter" /> should skip structural validation and allow the user to write invalid JSON.</span></span></summary>
        <value><span data-ttu-id="a9988-108"><see langword="true" /> pour ignorer la validation structurelle et autoriser JSON non valide ; <see langword="false" /> pour lever une <see cref="T:System.InvalidOperationException" /> sur les tentatives d’écriture JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="a9988-108"><see langword="true" /> to skip structural validation and allow invalid JSON; <see langword="false" /> to throw an <see cref="T:System.InvalidOperationException" /> on any attempt to write invalid JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="a9988-109">Si le code JSON en cours d’écriture est connu pour être correct, puis ignorer la validation (en définissant cette propriété sur `true`) peut améliorer les performances.</span><span class="sxs-lookup"><span data-stu-id="a9988-109">If the JSON being written is known to be correct, then skipping validation (by setting this property to `true`) could improve performance.</span></span>
<span data-ttu-id="a9988-110">Un exemple de JSON non valide lève où l’enregistreur (lorsque `SkipValidation` a la valeur `false`) est lorsque vous écrivez une valeur dans un objet JSON sans un nom de propriété.</span><span class="sxs-lookup"><span data-stu-id="a9988-110">An example of invalid JSON where the writer will throw (when `SkipValidation` is set to `false`) is when you write a value within a JSON object without a property name.</span></span> 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>