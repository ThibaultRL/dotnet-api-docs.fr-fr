<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cfe620a074fff1eeb0f7eccb868308146b5c66e4" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006717" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="41a09-101">Fournit une API hautes performances pour un accès en transfert seul et en lecture seule au texte JSON encodé en UTF-8.</span><span class="sxs-lookup"><span data-stu-id="41a09-101">Provides a high-performance API for forward-only, read-only access to the UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-102">`Utf8JsonReader` le texte de façon séquentielle avec aucune mise en cache et, par défaut respecte strictement à des processus la [JSON RFC](https://tools.ietf.org/html/rfc8259).</span><span class="sxs-lookup"><span data-stu-id="41a09-102">`Utf8JsonReader` processes the text sequentially with no caching and by default adheres strictly to the [JSON RFC](https://tools.ietf.org/html/rfc8259).</span></span>

<span data-ttu-id="41a09-103">Lorsque `Utf8JsonReader` rencontre JSON non valide, elle lève une <xref:System.Text.Json.JsonReaderException> avec les informations d’erreur de base comme numéro et octet la position de la ligne.</span><span class="sxs-lookup"><span data-stu-id="41a09-103">When `Utf8JsonReader` encounters invalid JSON, it throws a <xref:System.Text.Json.JsonReaderException>  with basic error information like line number and byte position on the line.</span></span>
<span data-ttu-id="41a09-104">Dans la mesure où ce type est un struct ref, il ne prend directement en charge async.</span><span class="sxs-lookup"><span data-stu-id="41a09-104">Since this type is a ref struct, it doesn't directly support async.</span></span> <span data-ttu-id="41a09-105">Toutefois, il ne prend en charge la réentrance pour lire des données incomplètes et poursuivez la lecture une fois plus de données sont présentées.</span><span class="sxs-lookup"><span data-stu-id="41a09-105">However, it does provide support for reentrancy to read incomplete data and to continue reading once more data is presented.</span></span>
<span data-ttu-id="41a09-106">Pour être en mesure de définir la profondeur maximale lors de la lecture ou autoriser ignorant les commentaires, créez une instance de <xref:System.Text.Json.JsonReaderState> et passez-le au lecteur.</span><span class="sxs-lookup"><span data-stu-id="41a09-106">To be able to set max depth while reading OR allow skipping comments, create an instance of <xref:System.Text.Json.JsonReaderState> and pass it to the reader.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ref System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor([in]valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt;&amp; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte}@,System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ByRef jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; % jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader :  * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" RefType="ref">
          <Attributes>
            <Attribute>
              <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="41a09-107">Texte JSON encodé en UTF-8 à traiter.</span><span class="sxs-lookup"><span data-stu-id="41a09-107">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="41a09-108"><see langword="true" /> quand la séquence d’entrée contient la totalité des données à traiter.</span><span class="sxs-lookup"><span data-stu-id="41a09-108"><see langword="true" /> when the input sequence contains the entire data to process.</span></span> <span data-ttu-id="41a09-109"><see langword="false" /> seulement s’il est connu que l’étendue d’entrée contient des données partielles avec plus de données à suivre.</span><span class="sxs-lookup"><span data-stu-id="41a09-109"><see langword="false" /> only if it's known that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="41a09-110">Si c’est le premier appel au constructeur, passez à un état par défaut.</span><span class="sxs-lookup"><span data-stu-id="41a09-110">If this is the first call to the constructor, pass in a default state.</span></span> <span data-ttu-id="41a09-111">Sinon, capturez l’état de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonReader" /> et repassez-le.</span><span class="sxs-lookup"><span data-stu-id="41a09-111">Otherwise, capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="41a09-112">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonReader" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-112">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-113">Dans la mesure où ce type est un struct ref, c’est un type de pile uniquement et lui appliquent toutes les limitations de structs par référence.</span><span class="sxs-lookup"><span data-stu-id="41a09-113">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="41a09-114">C’est la raison pourquoi le constructeur accepte un <xref:System.Text.Json.JsonReaderState>.</span><span class="sxs-lookup"><span data-stu-id="41a09-114">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="41a09-115">Texte JSON encodé en UTF-8 à traiter.</span><span class="sxs-lookup"><span data-stu-id="41a09-115">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="41a09-116"><see langword="true" /> quand l’étendue d’entrée contient la totalité des données à traiter.</span><span class="sxs-lookup"><span data-stu-id="41a09-116"><see langword="true" /> when the input span contains the entire data to process.</span></span> <span data-ttu-id="41a09-117"><see langword="false" /> seulement s’il est connu que l’étendue d’entrée contient des données partielles avec plus de données à suivre.</span><span class="sxs-lookup"><span data-stu-id="41a09-117"><see langword="false" /> only if it's known that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="41a09-118">Struct qui contient l’état du lecteur.</span><span class="sxs-lookup"><span data-stu-id="41a09-118">A struct that contains the reader state.</span></span> <span data-ttu-id="41a09-119">Lors du premier appel au constructeur, il doit refléter un état par défaut ; sinon, il doit capturer l’état de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonReader" /> et le repasser.</span><span class="sxs-lookup"><span data-stu-id="41a09-119">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="41a09-120">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonReader" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-120">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-121">Dans la mesure où ce type est un struct ref, c’est un type de pile uniquement et lui appliquent toutes les limitations de structs par référence.</span><span class="sxs-lookup"><span data-stu-id="41a09-121">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="41a09-122">C’est la raison pourquoi le constructeur accepte un <xref:System.Text.Json.JsonReaderState>.</span><span class="sxs-lookup"><span data-stu-id="41a09-122">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-123">Obtient le nombre total d’octets consommés par le <see cref="T:System.Text.Json.Utf8JsonReader" /> jusqu’ici pour l’instance actuelle du <see cref="T:System.Text.Json.Utf8JsonReader" /> avec le texte d’entrée encodé en UTF-8 donné.</span><span class="sxs-lookup"><span data-stu-id="41a09-123">Gets the total number of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> with the given UTF-8 encoded input text.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-124">Obtient la profondeur du jeton actuel.</span><span class="sxs-lookup"><span data-stu-id="41a09-124">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="41a09-125">La profondeur du jeton en cours.</span><span class="sxs-lookup"><span data-stu-id="41a09-125">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-126">Le `CurrentDepth` propriété effectue le suivi de la profondeur récursive des objets imbriqués / tableaux dans le texte JSON traité jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="41a09-126">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text processed so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-127">Obtient l’instantané actuel de l’état du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui doit être capturé par l’appelant et repassé au constructeur <see cref="T:System.Text.Json.Utf8JsonReader" /> avec davantage de données.</span><span class="sxs-lookup"><span data-stu-id="41a09-127">Gets the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonReader" /> state that must  be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonReader" /> constructor with more data.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-128">Contrairement à la <xref:System.Text.Json.Utf8JsonReader>, qui est un struct par référence, l’état peut survivre au-delà des limites d’async/await, et par conséquent, ce type est nécessaire pour prendre en charge pour la lecture dans plus de données de façon asynchrone avant de continuer avec une nouvelle instance de la <xref:System.Text.Json.Utf8JsonReader>.</span><span class="sxs-lookup"><span data-stu-id="41a09-128">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-129">Lit la prochaine valeur du jeton JSON de la source comme <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-129">Reads the next JSON token value from the source as a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-130"><see langword="true" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.True" /> ; <see langword="false" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.False" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-130"><see langword="true" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.False" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-131">La valeur du jeton JSON n’est pas une valeur booléenne (autrement dit, <see cref="F:System.Text.Json.JsonTokenType.True" /> ou <see cref="F:System.Text.Json.JsonTokenType.False" />).</span><span class="sxs-lookup"><span data-stu-id="41a09-131">The value of the JSON token is not a boolean value (that is, <see cref="F:System.Text.Json.JsonTokenType.True" /> or <see cref="F:System.Text.Json.JsonTokenType.False" />).</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-132">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-132">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-133">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-133">The UTF-8 encoded token value parsed to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-134">Le `GetDecimal` méthode lève une exception si l’entier ne peut pas de valeur du jeton encodé en UTF-8 être analysées dans un <xref:System.Decimal> valeur.</span><span class="sxs-lookup"><span data-stu-id="41a09-134">The `GetDecimal` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Decimal> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-135">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-135">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-136">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-136">The JSON token value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-137">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-137">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-138">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-138">The UTF-8 encoded token value parsed to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-139">Le `GetDouble` méthode lève une exception si l’entier ne peut pas de valeur du jeton encodé en UTF-8 être analysées dans un <xref:System.Double> valeur.</span><span class="sxs-lookup"><span data-stu-id="41a09-139">The `GetDouble` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Double> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-140">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-140">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-141">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-141">The JSON token value represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-142">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-142">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-143">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-143">The UTF-8 encoded token value parsed to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-144">Le `GetInt32` méthode lève une exception si l’entier ne peut pas de valeur du jeton encodé en UTF-8 être analysées dans un <xref:System.Int32> valeur.</span><span class="sxs-lookup"><span data-stu-id="41a09-144">The `GetInt32` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int32> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-145">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-145">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-146">La valeur du jeton JSON est dans un format numérique incorrect.</span><span class="sxs-lookup"><span data-stu-id="41a09-146">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="41a09-147">Par exemple, si elle contient un nombre décimal ou est écrite en notation scientifique.</span><span class="sxs-lookup"><span data-stu-id="41a09-147">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="41a09-148">- ou-</span><span class="sxs-lookup"><span data-stu-id="41a09-148">- or-</span></span>

<span data-ttu-id="41a09-149">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-149">The JSON token value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-150">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-150">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-151">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-151">The UTF-8 encoded token value parsed to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-152">Le `GetInt64` méthode lève une exception si l’entier ne peut pas de valeur du jeton encodé en UTF-8 être analysées dans un <xref:System.Int64> valeur.</span><span class="sxs-lookup"><span data-stu-id="41a09-152">The `GetInt64` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Int64> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-153">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-153">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-154">La valeur du jeton JSON est dans un format numérique incorrect.</span><span class="sxs-lookup"><span data-stu-id="41a09-154">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="41a09-155">Par exemple, si elle contient un nombre décimal ou est écrite en notation scientifique.</span><span class="sxs-lookup"><span data-stu-id="41a09-155">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="41a09-156">- ou-</span><span class="sxs-lookup"><span data-stu-id="41a09-156">- or-</span></span>

<span data-ttu-id="41a09-157">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-157">The JSON token value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-158">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-158">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-159">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-159">The UTF-8 encoded token value parsed to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-160">Le `GetSingle` méthode lève une exception si l’entier ne peut pas de valeur du jeton encodé en UTF-8 être analysées dans un <xref:System.Single> valeur.</span><span class="sxs-lookup"><span data-stu-id="41a09-160">The `GetSingle` method throws an exception if the entire UTF-8 encoded token value cannnot be parsed to a <xref:System.Single> value.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-161">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-161">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-162">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-162">The JSON token value represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-163">Lit la prochaine valeur du jeton JSON de la source, non échappée et transcodée, comme <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-163">Reads the next JSON token value from the source, unescaped, and transcoded as a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-164">Valeur du jeton analysée pour obtenir une valeur <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-164">The token value parsed to a <see cref="T:System.String" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-165">La valeur du jeton JSON n’est pas une chaîne (autrement dit, ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span><span class="sxs-lookup"><span data-stu-id="41a09-165">The JSON token value isn't a string (that is, not a <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span>

<span data-ttu-id="41a09-166">ou</span><span class="sxs-lookup"><span data-stu-id="41a09-166">-or-</span></span>

<span data-ttu-id="41a09-167">La chaîne JSON contient des octets UTF-8 non valides ou les substituts UTF-16 non valide.</span><span class="sxs-lookup"><span data-stu-id="41a09-167">The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-168">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-168">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-169">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-169">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-170">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-170">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-171">La valeur du jeton JSON est dans un format numérique incorrect.</span><span class="sxs-lookup"><span data-stu-id="41a09-171">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="41a09-172">Par exemple, si elle contient un nombre décimal ou est écrite en notation scientifique.</span><span class="sxs-lookup"><span data-stu-id="41a09-172">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="41a09-173">- ou-</span><span class="sxs-lookup"><span data-stu-id="41a09-173">- or-</span></span>

<span data-ttu-id="41a09-174">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-174">The JSON token value represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-175">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-175">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-176">Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-176">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-177">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-177">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="41a09-178">La valeur du jeton JSON est dans un format numérique incorrect.</span><span class="sxs-lookup"><span data-stu-id="41a09-178">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="41a09-179">Par exemple, si elle contient un nombre décimal ou est écrite en notation scientifique.</span><span class="sxs-lookup"><span data-stu-id="41a09-179">For example, if it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="41a09-180">- ou-</span><span class="sxs-lookup"><span data-stu-id="41a09-180">- or-</span></span>

<span data-ttu-id="41a09-181">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-181">The JSON token value represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-182">Obtient une valeur qui indique quelle propriété <c>Value</c> utiliser pour obtenir la valeur du jeton.</span><span class="sxs-lookup"><span data-stu-id="41a09-182">Gets a value that indicates which <c>Value</c> property to use to get the token value.</span></span></summary>
        <value><span data-ttu-id="41a09-183"><see langword="true" /> Si <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> doit être utilisé pour obtenir la valeur du jeton.</span><span class="sxs-lookup"><span data-stu-id="41a09-183"><see langword="true" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> should be used to get the token value.</span></span> <span data-ttu-id="41a09-184"><see langword="false" /> Si <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> doit être utilisé à la place.</span><span class="sxs-lookup"><span data-stu-id="41a09-184"><see langword="false" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> should be used instead.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-185">Si `HasValueSequence` est `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> est vide.</span><span class="sxs-lookup"><span data-stu-id="41a09-185">If `HasValueSequence` is `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> is empty.</span></span> <span data-ttu-id="41a09-186">Par conséquent, lire la valeur du jeton à l’aide de la <xref:System.Text.Json.Utf8JsonReader.ValueSpan> propriété.</span><span class="sxs-lookup"><span data-stu-id="41a09-186">Therefore, read the token value using the <xref:System.Text.Json.Utf8JsonReader.ValueSpan> property.</span></span>

<span data-ttu-id="41a09-187">Pour les données d’entrée au sein d’un `ReadOnlySpan<byte>`, cette retourne toujours `false`.</span><span class="sxs-lookup"><span data-stu-id="41a09-187">For input data within a `ReadOnlySpan<byte>`, this always returns `false`.</span></span> <span data-ttu-id="41a09-188">Pour les données d’entrée au sein d’un `ReadOnlySequence<byte>`, cela renvoie uniquement les `true` si la valeur du jeton chevauche plus qu’un seul segment et par conséquent, ne peut pas être représentée comme un intervalle.</span><span class="sxs-lookup"><span data-stu-id="41a09-188">For input data within a `ReadOnlySequence<byte>`, this only returns `true` if the token value straddles more than a single segment and hence can't be represented as a span.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-189">Obtient la <see cref="T:System.SequencePosition" /> actuelle dans la ReadOnlySequence&lt;byte&gt; de l’entrée encodée en UTF-8 fournie ou la <see cref="T:System.SequencePosition" /> par défaut si le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> a été construit avec un ReadOnlySpan&lt;byte&gt;.</span><span class="sxs-lookup"><span data-stu-id="41a09-189">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></summary>
        <value><span data-ttu-id="41a09-190">Actuel <see cref="T:System.SequencePosition" /> au sein de la fourni encodé UTF-8 d’entrée ReadOnlySequence&lt;octets&gt; ou une valeur par défaut <see cref="T:System.SequencePosition" /> si le <see cref="T:System.Text.Json.Utf8JsonReader" /> struct a été construit avec un ReadOnlySpan&lt;octets&gt;.</span><span class="sxs-lookup"><span data-stu-id="41a09-190">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="41a09-191">Lit le prochain jeton JSON de la source d’entrée.</span><span class="sxs-lookup"><span data-stu-id="41a09-191">Read the next JSON token from the input source.</span></span></summary>
        <returns><span data-ttu-id="41a09-192"><see langword="true" /> si le jeton a été correctement lu ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-192"><see langword="true" /> if the token was read successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonReaderException"><span data-ttu-id="41a09-193">Un jeton JSON non valide a été trouvé.</span><span class="sxs-lookup"><span data-stu-id="41a09-193">An invalid JSON token is encountered.</span></span>
            
<span data-ttu-id="41a09-194">ou</span><span class="sxs-lookup"><span data-stu-id="41a09-194">-or-</span></span>

<span data-ttu-id="41a09-195">La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</span><span class="sxs-lookup"><span data-stu-id="41a09-195">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TextEquals">
      <MemberSignature Language="C#" Value="public bool TextEquals (ReadOnlySpan&lt;byte&gt; otherUtf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; otherUtf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function TextEquals (otherUtf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TextEquals(ReadOnlySpan&lt;System::Byte&gt; otherUtf8Text);" />
      <MemberSignature Language="F#" Value="member this.TextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.TextEquals otherUtf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherUtf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="otherUtf8Text">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextEquals">
      <MemberSignature Language="C#" Value="public bool TextEquals (ReadOnlySpan&lt;char&gt; otherText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; otherText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function TextEquals (otherText As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TextEquals(ReadOnlySpan&lt;char&gt; otherText);" />
      <MemberSignature Language="F#" Value="member this.TextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.TextEquals otherText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherText" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="otherText">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-196">Obtient le type du dernier jeton JSON traité dans le texte JSON encodé en UTF-8.</span><span class="sxs-lookup"><span data-stu-id="41a09-196">Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.</span></span></summary>
        <value><span data-ttu-id="41a09-197">Le type du dernier jeton JSON traité.</span><span class="sxs-lookup"><span data-stu-id="41a09-197">The type of the last processed JSON token.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset :  -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal :  -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-198">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-198">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-199">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-199">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-200"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Decimal" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-200"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-201">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-201">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble :  -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-202">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-202">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-203">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-203">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-204"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Double" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-204"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-205">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-205">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid :  -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-206">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-206">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-207">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-207">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-208"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int32" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-208"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-209">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-209">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-210">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-210">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-211">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-211">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-212"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int64" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-212"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-213">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-213">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle :  -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-214">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-214">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-215">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-215">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-216"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Single" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-216"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Single" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-217">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-217">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-218">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-218">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-219">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-219">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-220"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt32" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-220"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-221">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-221">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 :  -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="41a09-222">Quand cette méthode est retournée, contient la valeur analysée.</span><span class="sxs-lookup"><span data-stu-id="41a09-222">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="41a09-223">Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-223">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="41a09-224"><see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt64" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-224"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="41a09-225">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span><span class="sxs-lookup"><span data-stu-id="41a09-225">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-226">Obtient la valeur du dernier jeton traité comme section ReadOnlySpan&lt;byte&gt; de la charge utile de l’entrée.</span><span class="sxs-lookup"><span data-stu-id="41a09-226">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="41a09-227">Si le texte JSON est fourni dans une ReadOnlySequence&lt;byte&gt; et que la section qui représente la valeur du jeton rentre dans un seul segment, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contient la valeur sectionnée dans la mesure où il peut être représenté comme étendue.</span><span class="sxs-lookup"><span data-stu-id="41a09-227">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span>
<span data-ttu-id="41a09-228">Sinon, la <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contient la valeur du jeton.</span><span class="sxs-lookup"><span data-stu-id="41a09-228">Otherwise, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks


<span data-ttu-id="41a09-229">Si <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> est `false`, `ValueSequence` est vide.</span><span class="sxs-lookup"><span data-stu-id="41a09-229">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`, `ValueSequence` is empty.</span></span> <span data-ttu-id="41a09-230">Par conséquent, accéder uniquement aux `ValueSequence` si <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> est `true`.</span><span class="sxs-lookup"><span data-stu-id="41a09-230">Therefore, only access `ValueSequence` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`.</span></span>
<span data-ttu-id="41a09-231">Sinon, la valeur du jeton doit être accessible à partir de <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span><span class="sxs-lookup"><span data-stu-id="41a09-231">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="41a09-232">Obtient la valeur du dernier jeton traité comme section ReadOnlySpan&lt;byte&gt; de la charge utile de l’entrée.</span><span class="sxs-lookup"><span data-stu-id="41a09-232">Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload.</span></span> <span data-ttu-id="41a09-233">Si le texte JSON est fourni dans une ReadOnlySequence&lt;byte&gt; et que la section qui représente la valeur du jeton rentre dans un seul segment, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contient la valeur sectionnée dans la mesure où il peut être représenté comme étendue.</span><span class="sxs-lookup"><span data-stu-id="41a09-233">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> contains the sliced value since it can be represented as a span.</span></span>
<span data-ttu-id="41a09-234">Sinon, la <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contient la valeur du jeton.</span><span class="sxs-lookup"><span data-stu-id="41a09-234">Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> contains the token value.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="41a09-235">Si <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> est `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> est vide.</span><span class="sxs-lookup"><span data-stu-id="41a09-235">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`, <xref:System.Text.Json.Utf8JsonReader.ValueSpan> is empty.</span></span> <span data-ttu-id="41a09-236">Par conséquent, accéder uniquement aux `ValueSpan` si <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> est `false`.</span><span class="sxs-lookup"><span data-stu-id="41a09-236">Therefore, only access `ValueSpan` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`.</span></span>
<span data-ttu-id="41a09-237">Sinon, la valeur du jeton doit être accessible à partir de <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span><span class="sxs-lookup"><span data-stu-id="41a09-237">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>