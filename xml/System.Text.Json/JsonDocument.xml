<Type Name="JsonDocument" FullName="System.Text.Json.JsonDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7cb6573dc8ebcc99bc57891401b7523f4130c8d6" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66458004" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonDocument : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonDocument extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonDocument&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonDocument sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type JsonDocument = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fournit un mécanisme permettant d’examiner le contenu structurel d’une valeur JSON sans instancier automatiquement des valeurs de données.</summary>
    <remarks>
      <format><![CDATA[
      
Cette classe utilise les ressources à partir de la mémoire en pool pour minimiser l’impact du garbage collector (GC) dans les scénarios d’utilisation élevée. Échec de supprimer correctement cet objet entraînera la mémoire ne pas retournée au pool, afin d’augmente l’impact du GC entre les différentes parties du framework.
              
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="jsonDocument.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.Buffers.ReadOnlySequence&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlySequence(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Texte JSON à analyser.</param>
        <param name="readerOptions">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
        <summary>Analyse une séquence sous forme de texte encodé en UTF-8 qui représente une valeur de type octet JSON unique dans un JsonDocument.</summary>
        <returns>Représentation JsonDocument de la valeur JSON.</returns>
        <remarks>
          <format><![CDATA[
          
Le <xref:System.Buffers.ReadOnlySequence%601> peut être utilisé pour toute la durée de vie de l’objet JsonDocument, et l’appelant doit garantir que les données qui y sont inchangées pendant la durée de vie d’objet.
               
Étant donné que l’entrée est considérée comme texte, une marque d’ordre d’octet UTF-8 (BOM) ne doivent pas être présents.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> contient des options non prises en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As Stream, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : System.IO.Stream * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Données JSON à analyser.</param>
        <param name="readerOptions">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
        <summary>Analyse un <see cref="T:System.IO.Stream" /> sous forme de données encodées en UTF-8 qui représente une valeur JSON unique dans un JsonDocument. Le flux est lu dans son intégralité.</summary>
        <returns>Représentation JsonDocument de la valeur JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> contient des options non prises en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;byte&gt; utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (utf8Json As ReadOnlyMemory(Of Byte), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (utf8Json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Texte JSON à analyser.</param>
        <param name="readerOptions">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
        <summary>Analyse la mémoire sous forme de texte encodé en UTF-8 qui représente une valeur de type octet JSON unique dans un JsonDocument.</summary>
        <returns>Représentation JsonDocument de la valeur JSON.</returns>
        <remarks>
          <format><![CDATA[

Le <xref:System.ReadOnlyMemory%601> valeur sera utilisée pour toute la durée de vie de l’objet JsonDocument, et l’appelant doit garantir que les données qui y sont inchangées pendant la durée de vie d’objet.

Étant donné que l’entrée est considérée comme texte, une marque d’ordre d’octet UTF-8 (BOM) ne doivent pas être présents.
                 
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> contient des options non prises en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (ReadOnlyMemory&lt;char&gt; json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(valuetype System.ReadOnlyMemory`1&lt;char&gt; json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As ReadOnlyMemory(Of Char), Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlyMemory&lt;char&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Texte JSON à analyser.</param>
        <param name="readerOptions">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
        <summary>Analyse du texte qui représente une valeur de caractère JSON unique dans un JsonDocument.</summary>
        <returns>Représentation JsonDocument de la valeur JSON.</returns>
        <remarks>
          <format><![CDATA[
          
Le <xref:System.ReadOnlyMemory%601> valeur peut être utilisée pour toute la durée de vie de l’objet JsonDocument, et l’appelant doit garantir que les données qui y sont inchangées pendant la durée de vie d’objet.

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> ne représente pas une valeur JSON unique valide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> contient des options non prises en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument Parse (string json, System.Text.Json.JsonReaderOptions readerOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument Parse(string json, valuetype System.Text.Json.JsonReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (json As String, Optional readerOptions As JsonReaderOptions = null) As JsonDocument" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.Parse (json, readerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="json">Texte JSON à analyser.</param>
        <param name="readerOptions">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
        <summary>Analyse du texte qui représente une valeur de chaîne JSON unique dans un JsonDocument.</summary>
        <returns>Représentation JsonDocument de la valeur JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="json" /> ne représente pas une valeur JSON unique valide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> contient des options non prises en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt; ParseAsync (System.IO.Stream utf8Json, System.Text.Json.JsonReaderOptions readerOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Text.Json.JsonDocument&gt; ParseAsync(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonReaderOptions readerOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member ParseAsync : System.IO.Stream * System.Text.Json.JsonReaderOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;" Usage="System.Text.Json.JsonDocument.ParseAsync (utf8Json, readerOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Text.Json.JsonDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="readerOptions" Type="System.Text.Json.JsonReaderOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json">Données JSON à analyser.</param>
        <param name="readerOptions">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
        <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
        <summary>Analyse un <see cref="T:System.IO.Stream" /> sous forme de données encodées en UTF-8 qui représente une valeur JSON unique dans un JsonDocument. Le flux est lu dans son intégralité.</summary>
        <returns>Tâche destinée à produire une représentation JsonDocument de la valeur JSON.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="readerOptions" /> contient des options non prises en charge.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public static System.Text.Json.JsonDocument ParseValue (ref System.Text.Json.Utf8JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.Json.JsonDocument ParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseValue (ByRef reader As Utf8JsonReader) As JsonDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::Json::JsonDocument ^ ParseValue(System::Text::Json::Utf8JsonReader % reader);" />
      <MemberSignature Language="F#" Value="static member ParseValue :  -&gt; System.Text.Json.JsonDocument" Usage="System.Text.Json.JsonDocument.ParseValue reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="reader">Lecteur à partir duquel effectuer la lecture.</param>
        <summary>Analyse une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni.</summary>
        <returns>Un JsonDocument représentant la valeur (et les valeurs imbriquées) lues par le lecteur.</returns>
        <remarks>
          <format><![CDATA[

Si le <xref:System.Text.Json.Utf8JsonReader.TokenType> propriété du `reader` est <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> ou <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, le lecteur passera par un appel à <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> pour déterminer le début de la valeur.
               
À l’achèvement de cette méthode, `reader` est positionné sur le dernier jeton dans la valeur JSON. Si une exception est levée, le lecteur est réinitialisé à l’état qu'où il se trouvait lorsque la méthode a été appelée.
               
Cette méthode ne permet une copie des données du lecteur de l’action, donc il n’est pas nécessaire de l’appelant pour maintenir l’intégrité des données au-delà du retour de cette méthode.

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> contient des options non prises en charge.</exception>
        <exception cref="T:System.Text.Json.JsonException">Une valeur n’a pas pu être lue par le lecteur.</exception>
      </Docs>
    </Member>
    <Member MemberName="RootElement">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonElement RootElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonElement RootElement" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonDocument.RootElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootElement As JsonElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonElement RootElement { System::Text::Json::JsonElement get(); };" />
      <MemberSignature Language="F#" Value="member this.RootElement : System.Text.Json.JsonElement" Usage="System.Text.Json.JsonDocument.RootElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’élément racine de ce document JSON.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseValue">
      <MemberSignature Language="C#" Value="public static bool TryParseValue (ref System.Text.Json.Utf8JsonReader reader, out System.Text.Json.JsonDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseValue(valuetype System.Text.Json.Utf8JsonReader&amp; reader, [out] class System.Text.Json.JsonDocument&amp; document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseValue (ByRef reader As Utf8JsonReader, ByRef document As JsonDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseValue(System::Text::Json::Utf8JsonReader % reader, [Runtime::InteropServices::Out] System::Text::Json::JsonDocument ^ % document);" />
      <MemberSignature Language="F#" Value="static member TryParseValue :  *  -&gt; bool" Usage="System.Text.Json.JsonDocument.TryParseValue (reader, document)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="document" Type="System.Text.Json.JsonDocument" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">Lecteur à partir duquel effectuer la lecture.</param>
        <param name="document">Quand la méthode retourne une valeur, contient le document analysé.</param>
        <summary>Tente d’analyser une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni.</summary>
        <returns><see langword="true" /> si une valeur a été lue et analysée dans un JsonDocument ; <see langword="false" /> si le lecteur a manqué de données lors de l’analyse. Toutes les autres situations entraînent la levée d’une exception.</returns>
        <remarks>
          <format><![CDATA[
          
Si le <xref:System.Text.Json.Utf8JsonReader.TokenType> propriété du `reader` est <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> ou <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, le lecteur passera par un appel à <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> pour déterminer le début de la valeur.
               
À l’achèvement de cette méthode, `reader` est positionné sur le dernier jeton dans la valeur JSON. Si une exception est levée ou `false` est retourné, le lecteur est réinitialisé à l’état où il se trouvait lorsque la méthode a été appelée.
               
Cette méthode ne permet une copie des données du lecteur de l’action, donc il n’est pas nécessaire de l’appelant pour maintenir l’intégrité des données au-delà du retour de cette méthode.
                 
               ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="reader" /> contient des options non prises en charge.</exception>
        <exception cref="T:System.Text.Json.JsonException">Une valeur n’a pas pu être lue par le lecteur.</exception>
      </Docs>
    </Member>
  </Members>
</Type>