<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="034cf5e0f42e28ed370f3808a6f6cc66720c30a5" /><Meta Name="ms.sourcegitcommit" Value="ef1f0c8985003a14413f66c3de381b8f3b6e4436" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/30/2019" /><Meta Name="ms.locfileid" Value="66381206" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e4fcb-101">Fournit une API hautes performances pour l’écriture en transfert seul et non mise en cache de texte JSON encodé en UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e4fcb-102">`Utf8JsonWriter` écrit le texte de façon séquentielle avec aucune mise en cache et, par défaut respecte la [JSON RFC](https://tools.ietf.org/html/rfc8259), à l’exception de l’écriture des commentaires.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="e4fcb-103">Une méthode qui tente d’écrire le JSON non valide lorsque la validation est activée lève un <xref:System.InvalidOperationException> avec un message d’erreur spécifique au contexte.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="e4fcb-104">Dans la mesure où ce type est un struct ref, elle ne gère pas directement async.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="e4fcb-105">Toutefois, il ne prend en charge la réentrance pour écrire des données partielles et continuer à écrire dans des segments.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>

<span data-ttu-id="e4fcb-106">Pour pouvoir mettre en forme la sortie avec la mise en retrait et l’espace blanc ou d’ignorer la validation, créez une instance de <xref:System.Text.Json.JsonWriterOptions> et la transmettre à l’enregistreur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="e4fcb-107">Destination du texte JSON écrit.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-107">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="e4fcb-108">Définit le comportement personnalisé de <see cref="T:System.Text.Json.Utf8JsonWriter" />. Par défaut, il écrit le texte JSON au format réduit (aucun espace blanc) et vérifie que le texte JSON en cours d’écriture est structurellement valide, conformément à la RFC JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-108">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="e4fcb-109">Construit une nouvelle instance de <see cref="T:System.Text.Json.Utf8JsonWriter" /> avec un <see cref="T:System.Buffers.IBufferWriter&lt;System.Byte&gt;" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-109">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <see cref="T:System.Buffers.IBufferWriter&lt;System.Byte&gt;" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4fcb-110"><paramref name="bufferWriter" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-110"><paramref name="bufferWriter" />  is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="e4fcb-111">Destination du texte JSON écrit.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-111">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="e4fcb-112">Définit le comportement personnalisé de <see cref="T:System.Text.Json.Utf8JsonWriter" />. Par défaut, il écrit le texte JSON au format réduit (aucun espace blanc) et vérifie que le texte JSON en cours d’écriture est structurellement valide, conformément à la RFC JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-112">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> By default, it writes minimized JSON (with no extra whitespace) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="e4fcb-113">Construit une nouvelle instance de <see cref="T:System.Text.Json.Utf8JsonWriter" /> avec un <paramref name="utf8Json" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-113">Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> instance with a specified <paramref name="utf8Json" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4fcb-114"><paramref name="utf8Json" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-114"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4fcb-115">Obtient le nombre total d’octets validés dans la sortie par l’instance actuelle jusqu’ici.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-115">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="e4fcb-116">Le nombre total d’octets validés dans la sortie par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-117">Dans le cas d’un <xref:System.Buffers.IBufferWriter%601>, cette propriété indique combien l’IBufferWriter a avancé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-117">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="e4fcb-118">Dans le cas d’un <xref:System.IO.Stream>, cette propriété indique la quantité de données a été écrit dans le flux.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-118">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4fcb-119">Obtient le nombre d’octets écrits par <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’ici qui n’ont pas encore été vidés dans la sortie ni validés.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-119">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4fcb-120">Obtient la profondeur du jeton actuel.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="e4fcb-121">La profondeur du jeton en cours.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e4fcb-122">Le `CurrentDepth` propriété effectue le suivi de la profondeur récursive des objets imbriqués / tableaux dans le texte JSON écrit jusque-là.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-123">Valide tout texte JSON restant qui n’a pas encore été vidé et libère toutes les ressources utilisées par l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-123">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-124">Dans le cas IBufferWriter, il avance sous-jacent <xref:System.Buffers.IBufferWriter`1> selon ce qui a été écrit jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-124">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="e4fcb-125">Dans le cas de Stream, il écrit les données dans le flux et la vide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-125">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-126">Valide de manière asynchrone tout texte JSON restant qui n’a pas encore été vidé et libère toutes les ressources utilisées par l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-126">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-127">Dans le cas IBufferWriter, il avance sous-jacent <xref:System.Buffers.IBufferWriter`1> selon ce qui a été écrit jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-127">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="e4fcb-128">Dans le cas de Stream, il écrit les données dans le flux et la vide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-128">In the case of Stream, this writes the data to the stream and flushes it.</span></span>
            
            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-129">Valide le texte JSON écrit jusqu’ici, ce qui le rend visible pour la destination de sortie.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-129">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-130">Dans le cas IBufferWriter, il avance sous-jacent <xref:System.Buffers.IBufferWriter`1> selon ce qui a été écrit jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-130">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="e4fcb-131">Dans le cas de <xref:System.IO.Stream>, il écrit les données dans le flux et la vide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-131">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e4fcb-132">L’instance a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-132">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary><span data-ttu-id="e4fcb-133">Valide de manière asynchrone le texte JSON écrit jusqu’ici, ce qui le rend visible pour la destination de sortie.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-133">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-134">Dans le cas IBufferWriter, il avance sous-jacent <xref:System.Buffers.IBufferWriter`1> selon ce qui a été écrit jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-134">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="e4fcb-135">Dans le cas de <xref:System.IO.Stream>, cela écrit les données dans le flux de données et vidages de façon asynchrone, lors de la surveillance des demandes d’annulation.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-135">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e4fcb-136">L’instance a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-136">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e4fcb-137">Obtient le comportement personnalisé lors de l’écriture de texte JSON à l’aide de cette instance. Indique s’il faut mettre en forme la sortie lors de l’écriture et s’il faut ignorer la validation structurelle du texte JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-137">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing and whether to skip structural JSON validation.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-138">Réinitialise l’état interne de cette instance en vue de sa réutilisation.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-138">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-139">Le <xref:System.Text.Json.Utf8JsonWriter> continueront d’utiliser les options d’enregistreur d’origine et la sortie d’origine (soit <xref:System.Buffers.IBufferWriter`1> ou <xref:System.IO.Stream>) comme destination.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-139">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e4fcb-140">L’instance a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-140">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="e4fcb-141">Destination du texte JSON écrit.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-141">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="e4fcb-142">Réinitialise l’état interne de cette instance en vue de sa réutilisation avec une nouvelle instance de <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-142">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-143">Le <xref:System.Text.Json.Utf8JsonWriter> continueront d’utiliser les options d’enregistreur d’origine, mais désormais écrit dans `bufferWriter` en tant que la nouvelle destination.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-143">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4fcb-144"><paramref name="bufferWriter" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-144"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e4fcb-145">L’instance a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-145">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="e4fcb-146">Destination du texte JSON écrit.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-146">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="e4fcb-147">Réinitialise l’état interne de cette instance en vue de sa réutilisation avec une nouvelle instance de <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-147">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-148">Le <xref:System.Text.Json.Utf8JsonWriter> continueront à utiliser les options d’enregistreur d’origine, mais maintenant écrire dans `utf8Json` en tant que la nouvelle destination.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-148">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now write to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e4fcb-149"><paramref name="utf8Json" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-149"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e4fcb-150">L’instance a été supprimée.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-150">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-151">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-151">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-152">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-152">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-153">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-153">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-154">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-154">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-155">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-155">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-156">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-156">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-157">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-157">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-158">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-158">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-159">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-159">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-160">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-160">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-161">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-161">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-162">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-162">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-163">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-163">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-164">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-164">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-165">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-165">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-166">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-166">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-167">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-167">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-168">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-168">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-169">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-169">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-170">Écrit une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-170">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-171">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-171">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="e4fcb-172">Valeur encodée au format UTF-8 à écrire sous la forme d’un commentaire JSON dans /*..*/.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-172">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="e4fcb-173">Écrit une valeur texte UTF-8 sous la forme d’un commentaire JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-173">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-174">La valeur de commentaire n’est pas échappée avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-174">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-175">La valeur spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-175">The specified value is too large.</span></span>
        
<span data-ttu-id="e4fcb-176">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-176">-or-</span></span>

<span data-ttu-id="e4fcb-177"><paramref name="utf8Value" /> contient un délimiteur de commentaire (c.-à-d. \*/).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-177"><paramref name="utf8Value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-178">Valeur encodée au format UTF-16 à écrire sous la forme d’un commentaire JSON transcodé au format UTF-8 dans /*..*/.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-178">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="e4fcb-179">Écrit une valeur texte UTF-16 sous la forme d’un commentaire JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-179">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-180">La valeur de commentaire n’est pas échappée avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-180">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-181">La valeur spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-181">The specified value is too large OR.</span></span>
        
<span data-ttu-id="e4fcb-182">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-182">-or-</span></span>

<span data-ttu-id="e4fcb-183"><paramref name="value" /> contient un délimiteur de commentaire (c.-à-d. \*/).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-183"><paramref name="value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-184">Valeur encodée au format UTF-16 à écrire sous la forme d’un commentaire JSON transcodé au format UTF-8 dans /*..*/.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-184">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within /*..*/.</span></span></param>
        <summary><span data-ttu-id="e4fcb-185">Écrit la valeur texte de chaîne sous la forme d’un commentaire JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-185">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-186">La valeur de commentaire n’est pas échappée avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-186">The comment value is not escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-187">La valeur spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-187">The specified value is too large.</span></span>
        
<span data-ttu-id="e4fcb-188">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-188">-or-</span></span>

<span data-ttu-id="e4fcb-189"><paramref name="value" /> contient un délimiteur de commentaire (c.-à-d. \*/).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-189"><paramref name="value" /> contains a comment delimiter (i.e. \*/).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-190">Écrit la fin d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-190">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-191">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-191">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-192">Écrit la fin d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-192">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-193">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-193">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-194">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-194">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="e4fcb-195">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et le littéral « null » JSON dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-195">Writes a property name specified as a read-only span of bytes and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-196">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-196">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-197">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-197">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-198">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-198">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-199">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-199">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e4fcb-200">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et le littéral JSON « null » dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-200">Writes a property name specified as a read-only character span and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-201">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-201">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-202">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-202">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-203">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-203">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-204">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-204">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e4fcb-205">Écrit un nom de propriété spécifié sous la forme d’une chaîne et le littéral JSON « null » dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-205">Writes a property name specified as a string and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-206">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-206">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-207">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-207">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-208">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-208">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-209">Écrit le littéral JSON « null » comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-209">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-210">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-210">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-211">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-211">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-212">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-212">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-213">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-213">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-214">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-214">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-215">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-215">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-216">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-216">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-217">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-217">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-218">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-218">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-219">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-219">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-220">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-220">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-221">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-221">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-222">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-222">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-223">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-223">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-224">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-224">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-225">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-225">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-226">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-226">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-227">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-227">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-228">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-228">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-229">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-229">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-230">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-230">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-231">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-231">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-232">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-232">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-233">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-233">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-234">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-234">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-235">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-235">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-236">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-236">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-237">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-237">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-238">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-238">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-239">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-239">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-240">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-240">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-241">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-241">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-242">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-242">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-243">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-243">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-244">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-244">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-245">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-245">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-246">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-246">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-247">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-247">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-248">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-248">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-249">Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-249">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-250">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-250">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-251">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-251">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-252">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-252">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-253">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-253">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-254">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-254">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-255">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-255">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-256">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-256">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-257">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-257">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-258">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-258">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-259">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-259">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-260">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-260">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-261">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-261">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[
          
<span data-ttu-id="e4fcb-262">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-262">The property name is escaped before writing.</span></span>
          
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-263">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-264">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-265">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-266">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-267">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-267">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-268">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-268">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-269">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-269">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-270">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-270">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-271">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-271">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-272">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-272">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-273">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-273">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-274">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-274">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-275">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-275">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-276">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-276">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-277">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-277">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-278">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-278">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-279">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-279">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-280">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-280">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-281">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-281">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-282">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-282">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-283">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-283">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-284">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-284">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-285">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-285">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-286">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-286">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-287">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-287">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-288">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-288">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-289">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-289">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-290">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-290">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-291">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-291">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-292">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-292">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-293">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-293">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-294">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-294">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-295">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-295">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-296">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-296">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-297">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-297">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-298">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-298">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-299">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-299">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-300">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-300">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-301">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-301">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-302">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-302">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-303">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-303">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-304">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-304">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-305">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-305">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-306">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-306">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-307">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-307">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-308">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-308">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-309">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-309">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-310">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-310">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-311">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-311">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-312">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-312">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-313">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-313">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-314">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-314">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-315">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-315">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-316">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-316">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-317">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-317">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-318">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-318">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-319">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-319">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-320">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-320">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-321">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-321">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-322">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-322">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-323">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-323">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-324">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-324">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-325">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-326">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-327">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-327">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-328">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-328">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-329">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-329">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-330">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-330">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-331">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-331">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-332">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-332">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-333">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-333">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-334">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-334">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-335">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-335">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-336">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-336">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-337">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-337">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-338">Écrit une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-338">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-339">Cette méthode écrit le <see cref="T:System.Decimal" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-339">This method writes the <see cref="T:System.Decimal" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-340">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-340">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-341">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-341">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-342">Écrit une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-342">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-343">Cette méthode écrit le <see cref="T:System.Double" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-343">This method writes the <see cref="T:System.Double" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-344">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-344">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-345">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-345">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-346">Écrit une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-346">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-347">Cette méthode écrit le <see cref="T:System.Int32" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-347">This method writes the <see cref="T:System.Int32" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e4fcb-348">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-349">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-349">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-350">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-350">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-351">Écrit une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-351">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-352">Cette méthode écrit le <see cref="T:System.Int64" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-352">This method writes the <see cref="T:System.Int64" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e4fcb-353">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-353">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-354">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-354">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-355">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-355">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-356">Écrit une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-356">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-357">Cette méthode écrit le <see cref="T:System.Single" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-357">This method writes the <see cref="T:System.Single" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-358">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-358">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-359">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-359">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-360">Écrit une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-360">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-361">Cette méthode écrit le <see cref="T:System.UInt32" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-361">This method writes the <see cref="T:System.UInt32" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e4fcb-362">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-362">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-363">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-363">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-364">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-364">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-365">Écrit une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-365">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-366">Cette méthode écrit le <see cref="T:System.UInt64" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="e4fcb-366">This method writes the <see cref="T:System.UInt64" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="e4fcb-367">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-367">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-368">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-368">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-369">Écrit le début d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-369">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-370">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-370">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="e4fcb-371">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-371">-or-</span></span>

<span data-ttu-id="e4fcb-372">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-372">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-373">Nom de propriété encodé en UTF-8 du tableau JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-373">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="e4fcb-374">Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets comme clé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-374">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-375">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-375">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-376">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-376">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-377">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-377">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="e4fcb-378">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-378">-or-</span></span> 
<span data-ttu-id="e4fcb-379">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-379">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-380">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-380">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e4fcb-381">Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule comme clé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-381">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-382">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-382">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-383">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-383">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-384">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-384">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="e4fcb-385">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-385">-or-</span></span> 
<span data-ttu-id="e4fcb-386">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-386">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-387">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-387">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e4fcb-388">Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une chaîne comme clé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-388">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-389">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-389">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-390">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-390">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-391">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-391">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="e4fcb-392">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-392">-or-</span></span> 
<span data-ttu-id="e4fcb-393">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-393">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e4fcb-394">Écrit le début d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-394">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-395">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-395">The depth of the JSON exceeds the maximum depth of 1000.</span></span>

<span data-ttu-id="e4fcb-396">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-396">-or-</span></span>

<span data-ttu-id="e4fcb-397">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-397">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-398">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-398">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="e4fcb-399">Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets comme clé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-399">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-400">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-400">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-401">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-401">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-402">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-402">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="e4fcb-403">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-403">-or-</span></span> 
<span data-ttu-id="e4fcb-404">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-404">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-405">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-405">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e4fcb-406">Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule comme clé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-406">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-407">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-407">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-408">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-408">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-409">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-409">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="e4fcb-410">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-410">-or-</span></span> 
<span data-ttu-id="e4fcb-411">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-411">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-412">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-412">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="e4fcb-413">Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une chaîne comme clé.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-413">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-414">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-414">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-415">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-415">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-416">La profondeur du JSON dépasse la profondeur maximale de 1000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-416">The depth of the JSON exceeds the maximum depth of 1000.</span></span> 

<span data-ttu-id="e4fcb-417">ou</span><span class="sxs-lookup"><span data-stu-id="e4fcb-417">-or-</span></span> 
<span data-ttu-id="e4fcb-418">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-418">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-419">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-419">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-420">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-420">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-421">Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-421">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-422">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-422">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-423">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-423">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-424">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-424">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-425">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-425">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-426">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-426">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-427">Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-427">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-428">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-428">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-429">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-429">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-430">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-430">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-431">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-431">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-432">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-432">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-433">Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-433">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-434">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-434">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-435">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-435">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-436">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-436">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-437">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-437">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e4fcb-438">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-438">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-439">Écrit un nom de propriété UTF-8 et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-439">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-440">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-440">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-441">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-441">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-442">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-442">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-443">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-443">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-444">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-444">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-445">Écrit un nom de propriété UTF-8 et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-445">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-446">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-446">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-447">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-447">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-448">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-448">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="e4fcb-449">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-449">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-450">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-450">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-451">Écrit un nom de propriété UTF-8 et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-451">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-452">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-452">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-453">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-453">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-454">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-454">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-455">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-455">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-456">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-456">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-457">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-457">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-458">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-458">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-459">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-459">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-460">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-460">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-461">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-461">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-462">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-462">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-463">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-463">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-464">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-464">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-465">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-465">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-466">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-466">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-467">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-467">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-468">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-468">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-469">Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-469">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-470">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-470">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-471">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-471">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-472">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-472">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-473">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-473">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e4fcb-474">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-474">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-475">Écrit un nom de propriété UTF-16 et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-475">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-476">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-476">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-477">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-477">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-478">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-478">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-479">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-479">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-480">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-480">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-481">Écrit un nom de propriété UTF-16 et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-481">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-482">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-482">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-483">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-483">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-484">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-484">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-485">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-485">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-486">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-486">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-487">Écrit un nom de propriété UTF-16 et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-487">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-488">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-488">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-489">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-489">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-490">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-490">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-491">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-491">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-492">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-492">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-493">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-493">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-494">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-494">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-495">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-495">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-496">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-496">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-497">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-497">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-498">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-498">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-499">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-499">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-500">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-500">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-501">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-501">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-502">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-502">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-503">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-503">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-504">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-504">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-505">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-505">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-506">Le nom de propriété est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-506">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-507">Le nom de la propriété spécifiée est trop grand.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-507">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-508">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-508">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-509">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-509">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="e4fcb-510">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-510">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-511">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-511">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-512">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-512">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-513">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-513">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-514">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-514">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-515">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-515">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-516">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-516">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-517">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-517">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-518">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-518">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-519">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-519">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-520">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-520">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="e4fcb-521">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="e4fcb-522">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-522">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="e4fcb-523">Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-523">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-524">Le nom de propriété et la valeur est ignoré avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-524">The property name and value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-525">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-525">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-526">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-526">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-527">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-527">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-528">Écrit une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-528">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-529">Cette méthode écrit le <see cref="T:System.DateTime" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-529">This method writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="e4fcb-530">Par exemple, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-530">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-531">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-531">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-532">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-532">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-533">Écrit une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-533">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-534">Cette méthode écrit le <see cref="T:System.DateTimeOffset" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-534">This method writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="e4fcb-535">Par exemple, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-535">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-536">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-536">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-537">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-537">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-538">Écrit une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-538">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="e4fcb-539">Cette méthode écrit le <see cref="T:System.Guid" /> valeur à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, avait »), que le formulaire : nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-539">This method writes the <see cref="T:System.Guid" /> value using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-540">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-540">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="e4fcb-541">Valeur encodée en UTF-8 à écrire sous la forme d’un élément de chaîne JSON d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-541">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-542">Écrit une valeur texte UTF-8 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-542">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-543">La valeur est ignorée avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-543">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-544">La valeur spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-544">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-545">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-545">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-546">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-547">Écrit une valeur texte UTF-16 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-547">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-548">La valeur est ignorée avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-548">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-549">La valeur spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-549">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-550">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-550">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="e4fcb-551">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-551">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="e4fcb-552">Écrit une valeur texte de chaîne (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-552">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

<span data-ttu-id="e4fcb-553">La valeur est ignorée avant l’écriture.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-553">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e4fcb-554">La valeur spécifiée est trop grande.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-554">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e4fcb-555">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</span><span class="sxs-lookup"><span data-stu-id="e4fcb-555">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>