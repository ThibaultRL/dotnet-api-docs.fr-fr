<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996702" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente un univers fermé d’objets de Type chargés pour inspection uniquement à des fins. Chaque MetadataLoadContext peut avoir ses propres règles de liaison et est isolée de toutes les autres MetadataLoadContexts.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

Un `MetadataLoadContext` sert un dictionnaire qui lie les noms d’assemblys à <xref:System.Reflection.Assembly> instances qui ont été précédemment chargées dans le contexte ou de devoir être chargé.

Assemblys sont traités strictement en tant que métadonnées. Il n’existe aucune restriction sur le chargement des assemblys en fonction de la plateforme cible, architecture d’UC ou la taille du pointeur. Il n’existe aucune restriction sur l’assembly désigné en tant que l’assembly de base (**mscorlib**).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">Instance de <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</param>
        <param name="coreAssemblyName">Le nom de l’assembly qui contient les types principaux tels que <see cref="T:System.Object" />. En règle générale, il s’agit de « mscorlib ».</param>
        <summary>Crée un objet <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’assembly qui désigne le « assembly système » qui héberge des types connus tels que <see cref="T:System.Int32" />.</summary>
        <value>Instance de <see cref="T:System.Reflection.Assembly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

L’assembly principal est traité différemment des autres assemblys, car les références à ces types connus n’incluent pas la référence d’assembly, contrairement aux types normaux.
            
En règle générale, cet assembly est nommé « mscorlib » ou « netstandard ». Si l’assembly principal est introuvable, la valeur sera `null`, et de nombreuses autres méthodes de réflexion, y compris ceux qui analysent les signatures de méthode, lève une exception.
            
Le `CoreAssembly` est déterminée en passant le `coreAssemblyName` paramètre passé à la <xref:System.Reflection.MetadataAssemblyResolver> constructeur pour le <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> (méthode).

Si aucun `coreAssemblyName` argument a été spécifié dans le constructeur de <xref:System.Reflection.MetadataLoadContext>, les valeurs par défaut sont utilisés, y compris « mscorlib », « System.Runtime » et « netstandard ».
            
Le principal désigné assembly doit-elle pas contenir directement des types fondamentaux. Il peut taper les transférer à d’autres assemblys. Par conséquent, il est parfaitement admissible à utiliser la façade mscorlib que l’assembly désigné core.
            
Notez que <xref:System.Runtime> n’est pas un assembly de core idéale, car elle exclut certains types d’attributs interop pseudo-aléatoire personnalisé tel que <xref:System.Runtime.InteropServices.DllImportAttribute>. Toutefois, il peut utiliser si vous ne disposez d’aucun intérêt dans ces attributs. L’API CustomAttributes ignore ces attributs si le principal assembly n’inclut pas les types nécessaires.
            
Le principal assembly n’est pas chargé tant que nécessaire. Les API suivantes ne déclenchent pas la recherche de l’assembly de base :

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
Si un assembly principal est introuvable ou si l’assembly de base n’a pas de types, cela affectera le comportement de la <xref:System.Reflection.MetadataLoadContext> comme suit :
            
* Les API dont avez besoin pour analyser des signatures ou typespecs et retourner les résultats sous forme <xref:System.Type> objets lèvera une exception. Exemple :

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* API que vous doivent comparer des types connus core types pas lève une exception, et la comparaison a la valeur `false`. Par exemple, si vous ne spécifiez pas un assembly de base, <xref:System.Type.IsPrimitive> retournera `false` pour tout, même les types nommés <xref:System.Int32>. De même, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> retournera <xref:System.TypeCode.Object> pour tous les éléments.
            
* Si une entité de métadonnées définit les indicateurs qui apparaîtront comme attribut personnalisé pseudo-aléatoire, et l’assembly principal ne contient pas le type d’attribut pseudo-aléatoire personnalisé, le constructeur nécessaire ou l’un des types de paramètres du constructeur, le <xref:System.Reflection.MetadataLoadContext> ne lèvera pas. Elle omet l’attribut pseudo-aléatoire personnalisé dans la liste des attributs retournés.
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources natives (telles que les verrous de fichiers sur les fichiers d’assembly).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Après la suppression, il est déconseillé d’utiliser une <xref:System.Reflection.Assembly> objets délivrés par le <xref:System.Reflection.MetadataLoadContext> ou tous les objets réflexion délivrés par ceux <xref:System.Reflection.Assembly> objets.

Bien que les objets fournis par le <xref:System.Reflection.MetadataLoadContext> s’efforcent de lever un <xref:System.ObjectDisposedException>, cela n’est pas garanti.

Certaines API peuvent retourner fixe ou précédemment mis en cache de données. L’accès aux objets *pendant* un <xref:System.Reflection.MetadataLoadContext.Dispose%2A> appel de méthode peut entraîner une violation d’accès non managé et le failfast.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un instantané atomique des assemblys qui ont été chargés dans le <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <returns>Collection énumérable de <see xref="T:System.Reflection.Assembly" /> objets.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Instance de <see cref="T:System.Reflection.AssemblyName" />.</param>
        <summary>Résout le nom de l’assembly fourni à un assembly. Si un assembly a été précédemment lié à ce nom, cet assembly est retourné. Sinon, le <see cref="T:System.Reflection.MetadataLoadContext" /> appelle spécifié <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns>Instance de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Notez que le comportement de cette méthode correspond au comportement de la <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> de résoudre l’événement, mais ne correspond pas au comportement de <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>. (Ce dernier abandonne sans déclencher son événement resolve.)
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Le programme de résolution retourne <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Un <see cref="T:System.String" /> représentant le nom de l’assembly.</param>
        <summary>Résout le nom de l’assembly fourni à un assembly. Si un assembly a été précédemment lié à ce nom, cet assembly est retourné. Sinon, le <see cref="T:System.Reflection.MetadataLoadContext" /> appelle spécifié <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns>Instance de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Notez que le comportement de cette méthode correspond au comportement de <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> de résoudre l’événement, mais ne correspond pas au comportement de < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType >. (Ce dernier abandonne sans déclencher son événement resolve.)
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Le programme de résolution retourne <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">Un <see cref="T:System.String" /> représentant le chemin d’accès à l’assembly.</param>
        <summary>Charge un assembly à partir d’un chemin spécifique sur le disque et lie son nom d’assembly à celle-ci dans le <see cref="T:System.Reflection.MetadataLoadContext" />. Si un assembly préalable portant le même nom a déjà été chargé dans le <see cref="T:System.Reflection.MetadataLoadContext" />, l’assembly précédent sera retourné.</summary>
        <returns>Instance de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Les deux assemblys n’ont pas le même Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">Un <see cref="T:System.Byte[]" /> contenant un assembly.</param>
        <summary>Charge un assembly à partir d’un tableau d’octets et lie son nom d’assembly à celle-ci dans le <see cref="T:System.Reflection.MetadataLoadContext" />. Si un assembly préalable portant le même nom a déjà été chargé dans le <see cref="T:System.Reflection.MetadataLoadContext" />, l’assembly précédent sera retourné.</summary>
        <returns>Instance de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Les deux assemblys n’ont pas le même Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">Un <see cref="T:System.IO.Stream" /> contenant un assembly.</param>
        <summary>Charge un assembly à partir d’un flux de données et lie son nom d’assembly à celle-ci dans le <see cref="T:System.Reflection.MetadataLoadContext" />. Si un assembly préalable portant le même nom a déjà été chargé dans le <see cref="T:System.Reflection.MetadataLoadContext" />, l’assembly précédent sera retourné.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> Le <xref:System.Reflection.MetadataLoadContext> s’approprie le <xref:System.IO.Stream> passé dans cette méthode. Le propriétaire d’origine ne doit pas muter sa position, supprimer le <xref:System.IO.Stream>, ou supposer que sa position restera inchangée.

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">Les deux assemblys n’ont pas le même Mvid.</exception>
      </Docs>
    </Member>
  </Members>
</Type>