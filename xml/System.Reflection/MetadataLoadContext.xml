<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996702" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1d172-101">Représente un univers fermé d’objets de Type chargés pour inspection uniquement à des fins.</span><span class="sxs-lookup"><span data-stu-id="1d172-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="1d172-102">Chaque MetadataLoadContext peut avoir ses propres règles de liaison et est isolée de toutes les autres MetadataLoadContexts.</span><span class="sxs-lookup"><span data-stu-id="1d172-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="1d172-103">Un `MetadataLoadContext` sert un dictionnaire qui lie les noms d’assemblys à <xref:System.Reflection.Assembly> instances qui ont été précédemment chargées dans le contexte ou de devoir être chargé.</span><span class="sxs-lookup"><span data-stu-id="1d172-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="1d172-104">Assemblys sont traités strictement en tant que métadonnées.</span><span class="sxs-lookup"><span data-stu-id="1d172-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="1d172-105">Il n’existe aucune restriction sur le chargement des assemblys en fonction de la plateforme cible, architecture d’UC ou la taille du pointeur.</span><span class="sxs-lookup"><span data-stu-id="1d172-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="1d172-106">Il n’existe aucune restriction sur l’assembly désigné en tant que l’assembly de base (**mscorlib**).</span><span class="sxs-lookup"><span data-stu-id="1d172-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="1d172-107">Instance de <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-107">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="1d172-108">Le nom de l’assembly qui contient les types principaux tels que <see cref="T:System.Object" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-108">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="1d172-109">En règle générale, il s’agit de « mscorlib ».</span><span class="sxs-lookup"><span data-stu-id="1d172-109">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="1d172-110">Crée un objet <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-110">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1d172-111">Obtient ou définit l’assembly qui désigne le « assembly système » qui héberge des types connus tels que <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-111">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="1d172-112">Instance de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-112">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="1d172-113">L’assembly principal est traité différemment des autres assemblys, car les références à ces types connus n’incluent pas la référence d’assembly, contrairement aux types normaux.</span><span class="sxs-lookup"><span data-stu-id="1d172-113">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>
            
<span data-ttu-id="1d172-114">En règle générale, cet assembly est nommé « mscorlib » ou « netstandard ».</span><span class="sxs-lookup"><span data-stu-id="1d172-114">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="1d172-115">Si l’assembly principal est introuvable, la valeur sera `null`, et de nombreuses autres méthodes de réflexion, y compris ceux qui analysent les signatures de méthode, lève une exception.</span><span class="sxs-lookup"><span data-stu-id="1d172-115">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>
            
<span data-ttu-id="1d172-116">Le `CoreAssembly` est déterminée en passant le `coreAssemblyName` paramètre passé à la <xref:System.Reflection.MetadataAssemblyResolver> constructeur pour le <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="1d172-116">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="1d172-117">Si aucun `coreAssemblyName` argument a été spécifié dans le constructeur de <xref:System.Reflection.MetadataLoadContext>, les valeurs par défaut sont utilisés, y compris « mscorlib », « System.Runtime » et « netstandard ».</span><span class="sxs-lookup"><span data-stu-id="1d172-117">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>
            
<span data-ttu-id="1d172-118">Le principal désigné assembly doit-elle pas contenir directement des types fondamentaux.</span><span class="sxs-lookup"><span data-stu-id="1d172-118">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="1d172-119">Il peut taper les transférer à d’autres assemblys.</span><span class="sxs-lookup"><span data-stu-id="1d172-119">It can type forward them to other assemblies.</span></span> <span data-ttu-id="1d172-120">Par conséquent, il est parfaitement admissible à utiliser la façade mscorlib que l’assembly désigné core.</span><span class="sxs-lookup"><span data-stu-id="1d172-120">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>
            
<span data-ttu-id="1d172-121">Notez que <xref:System.Runtime> n’est pas un assembly de core idéale, car elle exclut certains types d’attributs interop pseudo-aléatoire personnalisé tel que <xref:System.Runtime.InteropServices.DllImportAttribute>.</span><span class="sxs-lookup"><span data-stu-id="1d172-121">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="1d172-122">Toutefois, il peut utiliser si vous ne disposez d’aucun intérêt dans ces attributs.</span><span class="sxs-lookup"><span data-stu-id="1d172-122">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="1d172-123">L’API CustomAttributes ignore ces attributs si le principal assembly n’inclut pas les types nécessaires.</span><span class="sxs-lookup"><span data-stu-id="1d172-123">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>
            
<span data-ttu-id="1d172-124">Le principal assembly n’est pas chargé tant que nécessaire.</span><span class="sxs-lookup"><span data-stu-id="1d172-124">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="1d172-125">Les API suivantes ne déclenchent pas la recherche de l’assembly de base :</span><span class="sxs-lookup"><span data-stu-id="1d172-125">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <span data-ttu-id="1d172-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-126"><System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-127"><System.Reflection.Assembly.FullName?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-128"><System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-129"><System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-130"><System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-131"><System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-132"><System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType></span></span>
* <span data-ttu-id="1d172-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-133"><System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType></span></span>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
<span data-ttu-id="1d172-134">Si un assembly principal est introuvable ou si l’assembly de base n’a pas de types, cela affectera le comportement de la <xref:System.Reflection.MetadataLoadContext> comme suit :</span><span class="sxs-lookup"><span data-stu-id="1d172-134">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>
            
* <span data-ttu-id="1d172-135">Les API dont avez besoin pour analyser des signatures ou typespecs et retourner les résultats sous forme <xref:System.Type> objets lèvera une exception.</span><span class="sxs-lookup"><span data-stu-id="1d172-135">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="1d172-136">Exemple :</span><span class="sxs-lookup"><span data-stu-id="1d172-136">For example:</span></span>

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * <span data-ttu-id="1d172-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="1d172-137">System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType></span></span>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* <span data-ttu-id="1d172-138">API que vous doivent comparer des types connus core types pas lève une exception, et la comparaison a la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="1d172-138">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="1d172-139">Par exemple, si vous ne spécifiez pas un assembly de base, <xref:System.Type.IsPrimitive> retournera `false` pour tout, même les types nommés <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="1d172-139">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="1d172-140">De même, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> retournera <xref:System.TypeCode.Object> pour tous les éléments.</span><span class="sxs-lookup"><span data-stu-id="1d172-140">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>
            
* <span data-ttu-id="1d172-141">Si une entité de métadonnées définit les indicateurs qui apparaîtront comme attribut personnalisé pseudo-aléatoire, et l’assembly principal ne contient pas le type d’attribut pseudo-aléatoire personnalisé, le constructeur nécessaire ou l’un des types de paramètres du constructeur, le <xref:System.Reflection.MetadataLoadContext> ne lèvera pas.</span><span class="sxs-lookup"><span data-stu-id="1d172-141">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="1d172-142">Elle omet l’attribut pseudo-aléatoire personnalisé dans la liste des attributs retournés.</span><span class="sxs-lookup"><span data-stu-id="1d172-142">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d172-143">Libère les ressources natives (telles que les verrous de fichiers sur les fichiers d’assembly).</span><span class="sxs-lookup"><span data-stu-id="1d172-143">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="1d172-144">Après la suppression, il est déconseillé d’utiliser une <xref:System.Reflection.Assembly> objets délivrés par le <xref:System.Reflection.MetadataLoadContext> ou tous les objets réflexion délivrés par ceux <xref:System.Reflection.Assembly> objets.</span><span class="sxs-lookup"><span data-stu-id="1d172-144">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="1d172-145">Bien que les objets fournis par le <xref:System.Reflection.MetadataLoadContext> s’efforcent de lever un <xref:System.ObjectDisposedException>, cela n’est pas garanti.</span><span class="sxs-lookup"><span data-stu-id="1d172-145">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="1d172-146">Certaines API peuvent retourner fixe ou précédemment mis en cache de données.</span><span class="sxs-lookup"><span data-stu-id="1d172-146">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="1d172-147">L’accès aux objets *pendant* un <xref:System.Reflection.MetadataLoadContext.Dispose%2A> appel de méthode peut entraîner une violation d’accès non managé et le failfast.</span><span class="sxs-lookup"><span data-stu-id="1d172-147">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1d172-148">Retourne un instantané atomique des assemblys qui ont été chargés dans le <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-148">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="1d172-149">Collection énumérable de <see xref="T:System.Reflection.Assembly" /> objets.</span><span class="sxs-lookup"><span data-stu-id="1d172-149">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="1d172-150">Instance de <see cref="T:System.Reflection.AssemblyName" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-150">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="1d172-151">Résout le nom de l’assembly fourni à un assembly.</span><span class="sxs-lookup"><span data-stu-id="1d172-151">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="1d172-152">Si un assembly a été précédemment lié à ce nom, cet assembly est retourné.</span><span class="sxs-lookup"><span data-stu-id="1d172-152">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="1d172-153">Sinon, le <see cref="T:System.Reflection.MetadataLoadContext" /> appelle spécifié <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-153">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="1d172-154">Instance de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-154">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="1d172-155">Notez que le comportement de cette méthode correspond au comportement de la <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> de résoudre l’événement, mais ne correspond pas au comportement de <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1d172-155">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1d172-156">(Ce dernier abandonne sans déclencher son événement resolve.)</span><span class="sxs-lookup"><span data-stu-id="1d172-156">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="1d172-157">Le programme de résolution retourne <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-157">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="1d172-158">Un <see cref="T:System.String" /> représentant le nom de l’assembly.</span><span class="sxs-lookup"><span data-stu-id="1d172-158">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="1d172-159">Résout le nom de l’assembly fourni à un assembly.</span><span class="sxs-lookup"><span data-stu-id="1d172-159">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="1d172-160">Si un assembly a été précédemment lié à ce nom, cet assembly est retourné.</span><span class="sxs-lookup"><span data-stu-id="1d172-160">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="1d172-161">Sinon, le <see cref="T:System.Reflection.MetadataLoadContext" /> appelle spécifié <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-161">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="1d172-162">Instance de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-162">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="1d172-163">Notez que le comportement de cette méthode correspond au comportement de <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> de résoudre l’événement, mais ne correspond pas au comportement de < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType >.</span><span class="sxs-lookup"><span data-stu-id="1d172-163">Note that the behavior of this method matches the behavior of <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1d172-164">(Ce dernier abandonne sans déclencher son événement resolve.)</span><span class="sxs-lookup"><span data-stu-id="1d172-164">(The latter gives up without raising its resolve event.)</span></span>
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="1d172-165">Le programme de résolution retourne <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-165">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="1d172-166">Un <see cref="T:System.String" /> représentant le chemin d’accès à l’assembly.</span><span class="sxs-lookup"><span data-stu-id="1d172-166">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="1d172-167">Charge un assembly à partir d’un chemin spécifique sur le disque et lie son nom d’assembly à celle-ci dans le <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-167">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="1d172-168">Si un assembly préalable portant le même nom a déjà été chargé dans le <see cref="T:System.Reflection.MetadataLoadContext" />, l’assembly précédent sera retourné.</span><span class="sxs-lookup"><span data-stu-id="1d172-168">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="1d172-169">Instance de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-169">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="1d172-170">Les deux assemblys n’ont pas le même Mvid.</span><span class="sxs-lookup"><span data-stu-id="1d172-170">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="1d172-171">Un <see cref="T:System.Byte[]" /> contenant un assembly.</span><span class="sxs-lookup"><span data-stu-id="1d172-171">A <see cref="T:System.Byte[]" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="1d172-172">Charge un assembly à partir d’un tableau d’octets et lie son nom d’assembly à celle-ci dans le <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-172">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="1d172-173">Si un assembly préalable portant le même nom a déjà été chargé dans le <see cref="T:System.Reflection.MetadataLoadContext" />, l’assembly précédent sera retourné.</span><span class="sxs-lookup"><span data-stu-id="1d172-173">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="1d172-174">Instance de <see cref="T:System.Reflection.Assembly" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-174">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="1d172-175">Les deux assemblys n’ont pas le même Mvid.</span><span class="sxs-lookup"><span data-stu-id="1d172-175">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="1d172-176">Un <see cref="T:System.IO.Stream" /> contenant un assembly.</span><span class="sxs-lookup"><span data-stu-id="1d172-176">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="1d172-177">Charge un assembly à partir d’un flux de données et lie son nom d’assembly à celle-ci dans le <see cref="T:System.Reflection.MetadataLoadContext" />.</span><span class="sxs-lookup"><span data-stu-id="1d172-177">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="1d172-178">Si un assembly préalable portant le même nom a déjà été chargé dans le <see cref="T:System.Reflection.MetadataLoadContext" />, l’assembly précédent sera retourné.</span><span class="sxs-lookup"><span data-stu-id="1d172-178">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="1d172-179">Le <xref:System.Reflection.MetadataLoadContext> s’approprie le <xref:System.IO.Stream> passé dans cette méthode.</span><span class="sxs-lookup"><span data-stu-id="1d172-179">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="1d172-180">Le propriétaire d’origine ne doit pas muter sa position, supprimer le <xref:System.IO.Stream>, ou supposer que sa position restera inchangée.</span><span class="sxs-lookup"><span data-stu-id="1d172-180">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="1d172-181">Les deux assemblys n’ont pas le même Mvid.</span><span class="sxs-lookup"><span data-stu-id="1d172-181">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>