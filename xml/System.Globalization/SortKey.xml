<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97a018440b3927aabd0772df0854ef55e076bc2a" /><Meta Name="ms.sourcegitcommit" Value="9a6da88bd5455e8274257ca7ad259b42f1de114f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/22/2019" /><Meta Name="ms.locfileid" Value="66006435" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente le résultat du mappage d'une chaîne à sa clé de tri.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une comparaison dépendante de la culture de deux chaînes dépend de chaque caractère dans les chaînes de différentes catégories de pondérations de tri, y compris le script, alphabétique, les pondérations de casse et diacritiques. Une clé de tri sert de référentiel de ces pondérations pour une chaîne particulière.  
  
 Le <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> méthode retourne une instance de la <xref:System.Globalization.SortKey> classe qui représente le mappage de la culture de caractères dans une chaîne spécifiée. La valeur d’un <xref:System.Globalization.SortKey> objet est ses données clés, ce qui sont retournées par la <xref:System.Globalization.SortKey.KeyData%2A> propriété. Ces données clées se composent d’une série d’octets qui codent la chaîne, les règles de tri spécifiques à la culture et les options de comparaison spécifié par l’utilisateur. Une comparaison à l’aide de clés de tri se compose d’une comparaison au niveau du bit de données clées correspondantes dans chaque clé de tri.  Par exemple, si vous créez une clé de tri en appelant le <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> méthode avec la valeur <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>, une opération de comparaison de chaînes qui utilise la clé de tri respecte la casse.  
  
 Après avoir créé une clé de tri pour une chaîne, comparer des clés de tri en appelant la méthode statique <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> (méthode). Cette méthode effectue une simple comparaison octet par octet, par conséquent, il est beaucoup plus rapide que le <xref:System.String.Compare%2A?displayProperty=nameWithType> ou <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> (méthode).  

> [!NOTE]
> Vous pouvez télécharger le [tri des Tables de poids](https://www.microsoft.com/download/details.aspx?id=10921), un ensemble de fichiers texte qui contiennent des informations sur les poids de caractère utilisé dans les opérations de tri et de comparaison pour les systèmes d’exploitation Windows, le [Unicode par défaut Table d’élément de classement](https://www.unicode.org/Public/UCA/latest/allkeys.txt), la table de pondération de tri pour Linux et macOS.

## <a name="performance-considerations"></a>Considérations sur les performances  
 Lorsque vous effectuez une comparaison de chaînes, la <xref:System.Globalization.SortKey.Compare%2A> et <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> méthodes génèrent les mêmes résultats, mais elles ciblent des scénarios différents.  
  
 À un niveau élevé, le <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> méthode génère la clé de tri pour chaque chaîne, effectue la comparaison, puis ignore la clé de tri et retourne le résultat de la comparaison. Toutefois, le <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> méthode réellement ne génère pas de clé de tri entière pour effectuer la comparaison. Au lieu de cela, la méthode génère les données clés pour chaque élément de texte (autrement dit, caractère de base, paire de substitution ou la séquence de caractères d’association) dans chaque chaîne. La méthode compare ensuite les données de clé pour les éléments de texte correspondante. L’opération se termine dès que le résultat final de la comparaison est déterminé. Les informations de clé de tri sont calculées, mais aucune <xref:System.Globalization.SortKey> objet est créé. Cette stratégie est économique en termes de performances si les deux chaînes sont comparées à une seule fois, mais devient plus coûteuse si les mêmes chaînes sont comparées plusieurs fois.  
  
 Le <xref:System.Globalization.SortKey.Compare%2A> méthode requiert la génération d’un <xref:System.Globalization.SortKey> objet pour chaque chaîne avant d’effectuer la comparaison. Cette stratégie est coûteuse en termes de performances pour la première comparaison en raison de l’heure et la quantité de mémoire investis pour générer le <xref:System.Globalization.SortKey> objets. Cependant, il devient économique si les mêmes clés de tri sont comparées plusieurs fois.  
  
 Par exemple, supposons que vous écrivez une application qui recherche une table de base de données pour la ligne dans laquelle la colonne d’index basé sur chaîne correspond à une chaîne de recherche spécifié. La table contient des milliers de lignes et comparer la chaîne de recherche à l’index de chaque ligne prendra un certain temps. Par conséquent, lorsque l’application stocke une ligne et sa colonne d’index, il également génère et stocke la clé de tri pour l’index dans une colonne à l’amélioration des performances de recherche. Lorsque l’application recherche une ligne cible, il compare la clé de tri pour la chaîne de recherche à la clé de tri pour la chaîne d’index, au lieu de comparer la chaîne de recherche à la chaîne d’index.  
  
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Le <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> méthode retourne un <xref:System.Globalization.SortKey> objet avec la valeur basée sur une chaîne spécifiée et <xref:System.Globalization.CompareOptions> valeur et la culture associée sous-jacent <xref:System.Globalization.CompareInfo> objet. Si une décision de sécurité dépend d’une comparaison de chaînes ou de changement de casse, vous devez utiliser le <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> méthode de la culture dite indifférente pour vous assurer que le comportement de l’opération est cohérent, indépendamment des paramètres de culture du système d’exploitation.  
  
 Pour obtenir une clé de tri, utilisez les étapes suivantes :  
  
1.  Récupérer la culture dite indifférente à partir de la <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> propriété.  
  
2.  Récupérer un <xref:System.Globalization.CompareInfo> objet pour la culture dite indifférente à partir de la <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> propriété.  
  
3.  Appelez la méthode <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>.  
  
 Travailler avec la valeur d’un <xref:System.Globalization.SortKey> objet équivaut à l’appel de la Windows `LCMapString` méthode avec la valeur LCMAP_SORTKEY spécifiée. Toutefois, pour le <xref:System.Globalization.SortKey> de l’objet, les clés de tri pour les caractères anglais précèdent les clés de tri pour les caractères coréens.  
  
 <xref:System.Globalization.SortKey> objets peuvent être sérialisées, mais uniquement afin qu’ils peuvent traverser <xref:System.AppDomain> objets. Si une application sérialise un <xref:System.Globalization.SortKey> de l’objet, l’application doit régénérer les clés de tri lorsqu’une nouvelle version du .NET Framework.  
  
 Pour plus d’informations sur les clés de tri, consultez Unicode Technical Standard #10, « Unicode Collation Algorithm » sur le [site Web du Unicode Consortium](https://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 L’exemple suivant compare la chaîne « à leur » à l’aide de « en-US » et « es-ES » cultures et les cultures traditionnels « en-US » et « es-ES ».  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 L’exemple suivant montre comment vous pouvez utiliser la <xref:System.Globalization.SortKey> classe pour améliorer les performances dans une application qui repose largement sur le tri et la recherche d’un grand tableau. L’exemple crée un tableau non trié de noms, qui dans ce cas a 13 éléments. Il stocke ensuite la clé de tri de chaque nom dans un tableau parallèle, qu’il passe à la <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> (méthode). Le résultat est un tableau trié. L’exemple recherche ensuite dans le tableau de trois chaînes. Pour chaque chaîne de recherche, il appelle le <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> méthode pour récupérer la chaîne clé de tri, puis appelle la <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> méthode pour récupérer l’index de cette clé de tri dans le tableau des clés de tri. Étant donné que les tableaux de clé de nom et de tri sont parallèles, l’index retourné est également l’index du nom dans la `names` tableau.  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">Première clé de tri à comparer.</param>
        <param name="sortkey2">Deuxième clé de tri à comparer.</param>
        <summary>Compare deux clés de tri.</summary>
        <returns>Entier signé qui indique la relation entre <paramref name="sortkey1" /> et <paramref name="sortkey2" />.  
  
 <list type="table"><listheader><term> Value 
 </term><description> Condition 
 </description></listheader><item><term> Inférieure à zéro 
 </term><description><paramref name="sortkey1" /> est inférieur à <paramref name="sortkey2" />.  
  
 </description></item><item><term> Zéro 
 </term><description><paramref name="sortkey1" /> est égal à <paramref name="sortkey2" />.  
  
 </description></item><item><term> Supérieure à zéro 
 </term><description><paramref name="sortkey1" /> est supérieur à <paramref name="sortkey2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.SortKey.Compare%2A> méthode compare la <xref:System.Globalization.SortKey.KeyData%2A> propriétés de la `sortkey1` et `sortkey2` paramètres. La méthode génère les mêmes résultats que la <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> (méthode).  
  
 Pour plus d’informations sur la <xref:System.Globalization.SortKey.Compare%2A> méthode et la comparaison de clés de tri, consultez la <xref:System.Globalization.SortKey> rubrique de la classe.  
  
   
  
## Examples  
 L’exemple de code suivant compare deux chaînes à l’aide de la <xref:System.Globalization.SortKey.Compare%2A> (méthode) et l’équivalent <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> (méthode).  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" /> ou <paramref name="sortkey2" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer à l'objet <see cref="T:System.Globalization.SortKey" /> actuel.</param>
        <summary>Détermine si l'objet spécifié est identique à l'objet <see cref="T:System.Globalization.SortKey" /> actuel.</summary>
        <returns><see langword="true" /> si le paramètre <paramref name="value" /> est égal à l'objet <see cref="T:System.Globalization.SortKey" /> actuel ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deux <xref:System.Globalization.SortKey> objets sont considérées comme égales si leurs <xref:System.Globalization.SortKey.KeyData%2A> propriétés sont égales.  
  
 Cette méthode se substitue à <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple de code suivant montre les résultats de <xref:System.Globalization.SortKey.Equals%2A> par rapport à différents <xref:System.Globalization.SortKey> objets.  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> est <see langword="null" />.</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Est utilisé comme fonction de hachage pour l’objet <see cref="T:System.Globalization.SortKey" /> actuel et convient aux algorithmes de hachage et aux structures de données, comme une table de hachage.</summary>
        <returns>Code de hachage pour l’objet <see cref="T:System.Globalization.SortKey" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode génère le même code de hachage pour deux objets qui sont égaux selon la méthode <xref:System.Globalization.SortKey.Equals%2A>.  
  
 Cette méthode se substitue à <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le tableau d’octets qui représente l’objet <see cref="T:System.Globalization.SortKey" /> actuel.</summary>
        <value>Tableau d'octets qui représente l'objet <see cref="T:System.Globalization.SortKey" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur l’utilisation des données retournées par le <xref:System.Globalization.SortKey.KeyData%2A> propriété dans la comparaison de chaînes, consultez le <xref:System.Globalization.SortKey> rubrique de la classe.  
  
   
  
## Examples  
 L’exemple de code suivant affiche une chaîne d’origine et la chaîne équivalente et les données de clé pour une clé de tri respectant la casse et une clé de tri respectant la casse.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la chaîne d’origine utilisée pour créer l’objet <see cref="T:System.Globalization.SortKey" /> actuel.</summary>
        <value>Chaîne d'origine utilisée pour créer l'objet <see cref="T:System.Globalization.SortKey" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant affiche une chaîne d’origine et la chaîne équivalente et les données de clé pour une clé de tri respectant la casse et une clé de tri respectant la casse.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente l'objet <see cref="T:System.Globalization.SortKey" /> actuel.</summary>
        <returns>Chaîne qui représente l'objet <see cref="T:System.Globalization.SortKey" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour est la concaténation de la chaîne « SortKey - », l’identificateur de culture et les options de comparaison d’actuel <xref:System.Globalization.SortKey> objet et la valeur de la <xref:System.Globalization.SortKey.OriginalString%2A> propriété.  
  
 Cette méthode se substitue à <xref:System.Object.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple de code suivant affiche une chaîne d’origine, les chaînes produites par la <xref:System.Globalization.SortKey.ToString%2A> méthode pour les clés de tri respectant la casse et non-respect de la casse et les données de clé pour les clés de tri respectant la casse et non-respect de la casse.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>