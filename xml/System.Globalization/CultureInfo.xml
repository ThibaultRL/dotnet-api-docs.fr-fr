<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5196546e73251da2eabb69b4bb1e4387408c6fb" /><Meta Name="ms.sourcegitcommit" Value="75eca440f8f4d595506405f48961f38649e160d7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="06/01/2019" /><Meta Name="ms.locfileid" Value="66458088" /></Metadata><TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des informations sur une culture spécifique (appelée *paramètres régionaux* pour le développement de code non managé). Ces informations incluent les noms de la culture, le système d’écriture, le calendrier utilisé, l’ordre de tri des chaînes, ainsi que le format des dates et des nombres.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.CultureInfo> classe fournit des informations spécifiques à la culture, telles que la langue, sous-langue, le pays/région, calendrier et conventions associées à une culture particulière. Cette classe fournit également l’accès à des instances spécifiques à la culture de la <xref:System.Globalization.DateTimeFormatInfo>, <xref:System.Globalization.NumberFormatInfo>, <xref:System.Globalization.CompareInfo>, et <xref:System.Globalization.TextInfo> objets. Ces objets contiennent les informations requises pour les opérations spécifiques à la culture, telles que la mise en majuscules, de mise en forme des dates et des nombres et de comparaison des chaînes. Le <xref:System.Globalization.CultureInfo> classe est utilisée directement ou indirectement par les classes qui mettre en forme, analyser ou manipulent des données spécifiques à la culture, tels que <xref:System.String>, <xref:System.DateTime>, <xref:System.DateTimeOffset>et les types numériques.  
  
 Dans cette section :  
  
 [Identificateurs et noms de cultures](#CultureNames)   
 [Cultures invariants, neutres et spécifiques](#Invariant)   
 [Cultures personnalisées](#Custom)   
 [Données de culture dynamiques](#Dynamic)   
 [CultureInfo et données culturelles](#cultureinfo-and-cultural-data) [la culture actuelle et la culture d’interface utilisateur actuelle](#Current)   
 [Obtention de toutes les cultures](#GetAll)   
 [Culture et des threads](#Threads)   
 [Domaines d’application et de culture](#AppDomain)   
 [Culture et opérations asynchrones basées sur des tâches](#Async)   
 [Sérialisation d’un objet CultureInfo](#Serialization)   
 [Remplace le panneau de configuration](#CPanel)   
 [Ordres de tri secondaires](#AlternateSort)   
 [Applications Windows et de culture](#Windows)  

<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>Identificateurs et noms de cultures  
 Le <xref:System.Globalization.CultureInfo> classe spécifie un nom unique pour chaque culture, en fonction de la norme RFC 4646. Le nom est une combinaison d’un code de culture en minuscules à deux lettres ISO 639 associé à une langue et un code de sous-culture à deux lettres majuscules ISO 3166 associé à un pays ou une région. En outre, pour les applications qui ciblent [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ou version ultérieure et sont en cours d’exécution sous Windows 10 ou version ultérieure, les noms de cultures qui correspondent à la langue BCP-47 valide balises sont prises en charge.  
  
> [!NOTE]
>  Quand un nom de culture est passé à une méthode ou un constructeur de classe, par exemple <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ou <xref:System.Globalization.CultureInfo>, sa casse n’est pas significatif.  
  
 Le format du nom de culture selon la norme RFC 4646 est *code_langue2*>-*code_pays/Région2*, où *code_langue2* est le code de langue à deux lettres et *code_pays/Région2* est le code de sous-culture à deux lettres. Exemples incluent ja-JP pour le japonais (Japon) et en-US pour l’anglais (États-Unis). Dans les cas où un code de langue à deux lettres n’est pas disponible, un code à trois lettres dérivé d’ISO 639-2 est utilisé.  
  
 Notez que certains noms de cultures spécifient également un script ISO 15924. Par exemple, Cyrl Spécifie le script cyrillique et Latn Spécifie le script Latin. Un nom de culture qui inclut un script utilise le modèle *code_langue2*-*scripttag*-*code_pays/Région2*. Un exemple de ce type de nom de culture est uz-Cyrl-UZ pour l’ouszbek (Ouzbékistan, cyrillique). Sur les systèmes d’exploitation de Windows avant Windows Vista, un nom de culture qui inclut un script utilise le modèle *code_langue2*-*code_pays/Région2* -  *scripttag*, par exemple, uz-UZ-Cyrl pour ouszbek (cyrillique, Ouzbékistan).  
  
 Une culture neutre est spécifiée par le code de langue à deux lettres minuscules uniquement. Par exemple, fr spécifie la culture neutre pour le Français et Allemagne spécifie la culture neutre pour l’allemand.  
  
> [!NOTE]
>  Il existe deux noms de cultures qui contredisent cette règle. Les cultures chinois (simplifié), nommé zh-Hans et chinois (traditionnel), nommé zh-Hant, sont des cultures neutres. Les noms de cultures représentent la norme actuelle et doivent être utilisés, sauf si vous avez une raison pour l’utilisation la plus anciens noms zh-CHS et zh-CHT.  
  
 Un identificateur de culture est une abréviation numérique internationale standard et a les composants nécessaires pour identifier de façon unique une des cultures installées. Votre application peut utiliser des identificateurs de cultures prédéfinis ou définir des identificateurs personnalisés.  
  
 Certains noms de cultures et prédéfinis identificateurs sont utilisés par cette classe et autres classes dans le <xref:System.Globalization?displayProperty=nameWithType> espace de noms. Informations de culture détaillées s’affichent dans le [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement.  
  
 N’oubliez pas que les noms de culture et les identificateurs représentent uniquement un sous-ensemble des cultures qui se trouve sur un ordinateur particulier. Les versions de Windows ou des service packs peuvent modifier les cultures disponibles. Cultures personnalisées à l’aide aux applications d’ajouter le <xref:System.Globalization.CultureAndRegionInfoBuilder> classe. Les utilisateurs ajouter leurs propres cultures personnalisées à l’aide de l’outil Microsoft Locale Builder. Microsoft Locale Builder est écrit en code managé en utilisant la `CultureAndRegionInfoBuilder` classe.  
  
 Plusieurs noms distincts sont étroitement associées à une culture, notamment les noms associés avec les membres de classe suivants :  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>Cultures invariants, neutres et spécifiques  
 Les cultures sont généralement regroupées en trois ensembles : culture dite indifférente, les cultures neutres et les cultures spécifiques.  
  
 Une culture dite indifférente est indépendante de la culture. Votre application spécifie la culture dite indifférente par son nom à l’aide d’une chaîne vide (" ») ou par son identificateur. <xref:System.Globalization.CultureInfo.InvariantCulture%2A> définit une instance de la culture dite indifférente. Il est associé avec la langue anglaise, mais pas avec n’importe quel pays/région. Elle est utilisée dans presque n’importe quelle méthode dans le `Globalization` espace de noms qui requiert une culture.  
  
 Une culture neutre est une culture qui est associée avec un langage mais pas avec un pays/région. Une culture spécifique est une culture qui est associée à une langue et un pays/région. Par exemple, fr est le nom neutre pour la culture Français et fr-FR est le nom de la culture Français (France) spécifique. Notez que chinois (simplifié) et chinois (traditionnel) sont également considérés comme des cultures neutres.  
  
 Création d’une instance d’un <xref:System.Globalization.CompareInfo> classe pour une culture neutre n’est pas recommandée, car les données qu’il contient sont arbitraires. Pour afficher et trier les données, spécifiez la langue et la région. En outre, le <xref:System.Globalization.CompareInfo.Name%2A> propriété d’un <xref:System.Globalization.CompareInfo> objet créé pour une culture neutre retourne uniquement le pays et n’inclut pas de la région.  
  
 Les cultures définies ont une hiérarchie dans laquelle le parent d’une culture spécifique est une culture neutre et le parent d’une culture neutre est la culture dite indifférente. Le <xref:System.Globalization.CultureInfo.Parent%2A> propriété contient la culture neutre associée à une culture spécifique. Cultures personnalisées doivent définir le <xref:System.Globalization.CultureInfo.Parent%2A> propriété en conformité avec ce modèle.  
  
 Si les ressources pour une culture spécifique ne sont pas disponibles dans le système d’exploitation, les ressources de la culture neutre associée sont utilisés. Si les ressources de la culture neutre ne sont pas disponibles, les ressources incorporées dans l’assembly principal sont utilisés. Pour plus d’informations sur le processus de secours, consultez [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
 La liste des paramètres régionaux dans l’API Windows est légèrement différente de la liste des cultures prises en charge par le .NET Framework. Si l’interopérabilité avec Windows est nécessaire, par exemple, via le mécanisme p/invoke, l’application doit utiliser une culture spécifique qui est définie pour le système d’exploitation. Utilisation de la culture spécifique garantit la cohérence avec les paramètres régionaux Windows équivalent, sont identifié avec un identificateur de paramètres régionaux qui est identique à <xref:System.Globalization.CultureInfo.LCID%2A>.  
  
 Un <xref:System.Globalization.DateTimeFormatInfo> ou un <xref:System.Globalization.NumberFormatInfo> peuvent être créés uniquement pour la culture dite indifférente ou pour des cultures spécifiques, mais pas pour les cultures neutres.  
  
 Si <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> est la <xref:System.Globalization.TaiwanCalendar> mais le <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> n’est pas défini sur zh-TW, puis <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType>, et <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> retourne une chaîne vide (« »).  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>Cultures personnalisées  
 Outre les cultures prédéfinies prises en charge par le système d’exploitation Windows et .NET Framework, le .NET Framework prend en charge trois types de cultures personnalisées :  
  
-   Nouvelles cultures qui complètent les cultures disponibles dans Windows ou le .NET Framework. Par exemple, une application peut installer un <xref:System.Globalization.CultureInfo> objet que représente le fj-FJ (ou Fijan (Fidji)) de culture sur un système.  
  
-   Cultures de remplacement dont les propriétés sont différentes des propriétés des cultures standards pris en charge par Windows et .NET Framework.  
  
-   Cultures standard avec les substitutions d’utilisateur. L’utilisateur peut utiliser le **région et langue** dans **le panneau de configuration** pour personnaliser les valeurs de propriété d’une culture existante.  
  
> [!NOTE]
>  Vous pouvez utiliser la <xref:System.Globalization.CultureAndRegionInfoBuilder> classe pour définir, enregistrer et inscrire les cultures personnalisées qui complément ou remplacent les cultures existants. Le <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType> méthode crée un fichier de paramètres régionaux Data Markup Language (LDML) qui peut être utilisé pour installer une culture personnalisée sur les systèmes cibles. Pour l’étape par étape plus d’informations sur l’utilisation de la <xref:System.Globalization.CultureAndRegionInfoBuilder> classe pour créer un ou la culture de remplacement, consultez le <xref:System.Globalization.CultureAndRegionInfoBuilder> rubrique de la classe.  
  
 Étant donné que le .NET Framework prend en charge les cultures personnalisées, vous devez envisager les éléments suivants lorsque vous travaillez avec les données spécifiques à la culture :  
  
-   Cultures personnalisées peuvent avoir des valeurs qui dépassent les plages des cultures prédéfinis. Par exemple, certaines cultures ont des noms de mois inhabituellement longue, de date inattendue ou de formats d’heure ou d’autres données inhabituelles.  
  
-   Lorsque vous affichez les données spécifiques à la culture de l’interface utilisateur, veillez à respecter les personnalisations de l’utilisateur ; par exemple, l’utilisateur peut souhaiter une horloge de 24 heures ou un format de date AAAAMMJJ.  
  
-   N’oubliez pas que les cultures personnalisées remplacent les valeurs par défaut. Par conséquent, vous ne peut pas prendre en compte les données culture stables. Noms de pays, les formats de nombre et date, orthographes et peuvent changer à l’avenir. Si vous souhaitez sérialiser les données de la culture tels que les chaînes de date et l’heure à passer à la date et l’heure de fonctions d’analyse, vous devez utiliser la culture dite indifférente ou un spécifique.  
  
 Le <xref:System.Globalization.CultureInfo.CultureTypes%2A> inclut de la valeur de propriété de cultures personnalisées installé sur un système le <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> indicateur et les cultures personnalisées sont affectés un <xref:System.Globalization.CultureInfo.LCID%2A> valeur de propriété de `LOCALE_CUSTOM_UNSPECIFIED` (0 x 1000 ou 4096). Notez que, à compter de Windows 10, cette valeur est également assignée à cultures définies par le système qui ne disposent pas de données culturelles terminées.  

## <a name="cultureinfo-and-cultural-data"></a>CultureInfo et données culturelles

.NET dérive ses données culturelles de le des diverses sources, selon l’implémentation, la plateforme et version :

- Dans .NET Framework 3.5 et versions antérieures, les données de culturels sont fournies par le système d’exploitation Windows et .NET Framework.

- Dans .NET Framework 4 et versions ultérieures, les données culturelles sont fournies par le système d’exploitation Windows.

- Dans toutes les versions de .NET Core s’exécutant sur Windows, les données culturelles sont fournies par le système d’exploitation Windows.

- Dans toutes les versions de .NET Core en cours d’exécution sur les plateformes Unix, données culturelles sont fournies par le [International Components for Unicode (ICU) bibliothèque](http://site.icu-project.org/). La version spécifique de la bibliothèque ICU varie selon le système d’exploitation individuel.

Pour cette raison, une culture disponible sur une implémentation, une plateforme ou une version .NET particulier n’est peut-être pas disponible sur une implémentation, une plateforme ou une version .NET différents.

Certains `CultureInfo` objets diffèrent selon la plateforme sous-jacente. En particulier, « zh-CN », ou chinois (simplifié, Chine) et zh-TW ou chinois traditionnel (Taïwan), sont des cultures disponibles sur les systèmes Windows, mais ils sont des cultures un alias sur les systèmes Unix. « zh-CN » est un alias pour la culture « zh-Hans-CN » et « zh-TW » est un alias pour la culture « zh-Hant-TW ». Un alias cultures ne sont pas retournés par les appels à la <xref:System.Globalization.CultureInfo.GetCultures%2A> (méthode) et peut avoir différentes valeurs de propriété, y compris les différents <xref:System.Globalization.CultureInfo.Parent> cultures, que leurs homologues Windows. Pour les cultures zh-CN et zh-TW, ces differenes sont les suivants :

- Sur les systèmes Windows, la culture parente de la culture « zh-CN » est « zh-Hans » et la culture parente de la culture « zh-TW » est « zh-Hant ». La culture parente de ces deux cultures est « zh ». Sur les systèmes Unix, les parents de ces deux cultures sont « zh ». Cela signifie que, si vous ne fournissez pas les ressources spécifiques à la culture pour les cultures « zh-CN » ou « zh-TW », mais fournissez une ressource pour la culture de « zh-Hant » ou un « zh-Hans « neutres, votre application chargera ainsi les ressources de la culture neutre sur Windows, mais pas sur Unix . Sur les systèmes Unix, vous devez définir explicitement le thread <xref:System.Globalization.CultureInfo.CurrentUICulture> à « zh-Hans » ou « zh-Hant ». 

- Sur les systèmes Windows, l’appel <xref:System.Globalization.CultureInfo.Equals%2A?displayProperty=nameWithType> sur une instance qui représente la culture « zh-CN » et en lui passant une instance de « zh-Hans-CN » retourne `true`. Sur les systèmes Unix, l’appel de méthode retourne `false`. Ce comportement s’applique également à l’appel <xref:System.Globalization.CultureInfo.Equals%2A> sur un « zh-TW » <xref:System.Globalization.CultureInfo> instance et en lui passant une instance de « zh-Hant-Tw ».

<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>Données de culture dynamiques  
 À l’exception de la culture dite indifférente, les données de la culture sont dynamiques. Cela est vrai même pour les cultures prédéfinies. Par exemple, les pays ou régions adoptent de nouvelles devises, modifier leur orthographe des mots ou modifier leur calendrier par défaut, et modifier des définitions de culture pour effectuer ce suivi.  Cultures personnalisées sont susceptibles de changer sans préavis et n’importe quelle culture spécifique peut être substituée par une culture de remplacement personnalisé. En outre, comme indiqué ci-dessous, un utilisateur individuel peut substituer des préférences culturelles. Les applications doivent toujours obtenir les données de la culture en cours d’exécution.  
  
> [!CAUTION]
>  Lors de l’enregistrement de données, votre application doit utiliser la culture dite indifférente, un format binaire ou un format indépendant de la culture spécifique. Données enregistrées en fonction des valeurs actuelles associées à une culture particulière, autre que la culture dite indifférente, peuvent devenir illisibles ou changent de signification si cette culture change.  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>La culture actuelle et la culture d’interface utilisateur actuelle  
 Chaque thread dans une application .NET a une culture actuelle et une culture d’interface utilisateur actuelle. La culture actuelle détermine les conventions de mise en forme pour les dates, heures, nombres et les valeurs de devise, l’ordre de tri de texte, les conventions de casse et les façons dont les chaînes sont comparées. La culture d’interface utilisateur actuelle est utilisée pour récupérer des ressources spécifiques à la culture lors de l’exécution.  
  
> [!NOTE]
>  Pour plus d’informations sur la détermination de la culture d’interface utilisateur actuelle et en cours sur un thread par thread, consultez la [Culture et les threads](#Threads) section. Pour plus d’informations sur la détermination de la culture d’interface utilisateur actuelle et en cours sur les threads de l’exécution dans un domaine d’application et sur les threads qui traversent les limites du domaine d’application, consultez le [Culture et les domaines d’application](#AppDomain) section. Pour plus d’informations sur la détermination de l’actuel et en cours sur les threads effectuant des opérations asynchrones basées sur des tâches, consultez le [Culture et opérations asynchrones basées sur les tâches](#Async) section.  
  
 Pour plus d’informations sur la culture actuelle, consultez le <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> rubrique de la propriété. Pour plus d’informations sur la culture d’interface utilisateur actuelle, consultez le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> rubrique de la propriété.  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>Récupérer les cultures d’interface utilisateur actuelles et en cours  
 Vous pouvez obtenir un <xref:System.Globalization.CultureInfo> objet qui représente la culture actuelle de deux manières :  
  
-   En récupérant la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété.  
  
-   En récupérant la valeur de la [Thread.CurrentThread.CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) propriété.  
  
 L’exemple suivant récupère les deux valeurs de propriété, les compare pour montrer qu’ils sont égaux et affiche le nom de la culture actuelle.  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 Vous pouvez obtenir un <xref:System.Globalization.CultureInfo> objet qui représente la culture d’interface utilisateur actuelle de deux manières :  
  
-   En récupérant la valeur de la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété.  
  
-   En récupérant la valeur de la [Thread.CurrentThread.CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) propriété.  
  
 L’exemple suivant récupère les deux valeurs de propriété, les compare pour montrer qu’ils sont égaux et affiche le nom de la culture d’interface utilisateur actuelle.  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>Définir les cultures d’interface utilisateur actuelles et en cours  
 Pour modifier la culture et la culture d’interface utilisateur d’un thread, procédez comme suit :  
  
1.  Instancier un <xref:System.Globalization.CultureInfo> objet qui représente cette culture en appelant un <xref:System.Globalization.CultureInfo> classe constructeur et en lui passant le nom de la culture. Le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructeur instancie un <xref:System.Globalization.CultureInfo> objet qui reflète l’utilisateur remplace si la nouvelle culture est identique à la culture actuelle de Windows.   Le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructeur vous permet de spécifier si nouvellement instancié <xref:System.Globalization.CultureInfo> objet reflète les remplacements d’utilisateur si la nouvelle culture est identique à la culture actuelle de Windows.  
  
2.  Affecter le <xref:System.Globalization.CultureInfo> de l’objet à la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> ou <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété sur .NET Core et .NET Framework 4.6 et versions ultérieures. (Sur .NET Framework 4.5.2 et versions antérieures, youc une attribuer le `CultureInfo` de l’objet à la <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> ou <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriété.)   
  
 L’exemple suivant récupère la culture actuelle. Si elle n’est pas la culture Français (France), il remplace la culture actuelle par Français (France). Sinon, il remplace la culture actuelle par Français (Luxembourg).  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 L’exemple suivant récupère la culture actuelle. S’il s’agit de toute autre la culture slovène (Slovénie), il remplace la culture actuelle par slovène (Slovénie). Sinon, il remplace la culture actuelle par croate (Croatie).  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>Obtention de toutes les cultures  
 Vous pouvez récupérer un tableau des catégories spécifiques de cultures ou de toutes les cultures disponibles sur l’ordinateur local en appelant le <xref:System.Globalization.CultureInfo.GetCultures%2A> (méthode). Par exemple, vous pouvez récupérer des cultures personnalisées, des cultures spécifiques ou des cultures neutres seul ou conjointement.  
  
 L’exemple suivant appelle la <xref:System.Globalization.CultureInfo.GetCultures%2A> méthode deux fois, le premier avec le <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> membre d’énumération pour récupérer toutes les cultures personnalisées, puis avec le <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> membre d’énumération pour récupérer toutes les cultures de remplacement.  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>Culture et des threads  
 Lorsqu’un nouveau thread de l’application est démarré, sa culture actuelle et la culture d’interface utilisateur actuelle sont définies par la culture système actuelle et non par la culture du thread actuel. L'exemple suivant illustre la différence. Il définit la culture actuelle et la culture d’interface utilisateur actuelle d’un thread d’application pour la culture Français (France) (fr-FR). Si la culture actuelle est déjà fr-FR, l’exemple lui affecte à la culture anglais (États-Unis) (en-US). Il affiche trois nombres aléatoires en tant que valeurs de devise et crée ensuite un nouveau thread, ce qui, à son tour, affiche les trois nombres plus aléatoires en tant que valeurs de devise. Mais, comme le montre le résultat de l’exemple, les valeurs de devise affichées par le nouveau thread ne reflètent pas les conventions de mise en forme de la culture Français (France), contrairement à la sortie à partir du thread principal de l’application.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 Dans les versions du .NET Framework avant le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le plus commun pour vous assurer que le thread principal de l’application partage la même culture avec tous les autres threads de travail consiste à passer le nom de la culture de l’application ou un <xref:System.Globalization.CultureInfo> de l’objet qui représente la culture de l’application à un <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> déléguer. L’exemple suivant utilise cette approche pour vous assurer que les valeurs de devise affichées par deux threads reflètent les conventions de mise en forme de la même culture.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 Vous pouvez définir la culture et la culture d’interface utilisateur du thread du pool de threads de la même manière en appelant le <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> (méthode).  
  
 En commençant par le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], vous pouvez définir la culture et la culture d’interface utilisateur de tous les threads dans un domaine d’application plus directement en assignant un <xref:System.Globalization.CultureInfo> objet qui représente cette culture pour le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés. L’exemple suivant utilise ces propriétés pour vous assurer que tous les threads dans le domaine d’application par défaut partagent la même culture.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  Bien que le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés sont des membres statiques, ils définissent la culture par défaut et la culture d’interface utilisateur par défaut uniquement pour le domaine d’application au moment où ces valeurs de propriété sont définies. Pour plus d’informations, consultez la section suivante, [Culture et les domaines d’application](#AppDomain).  
  
 Lorsque vous assignez des valeurs à la <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés, la culture et la culture d’interface utilisateur des threads dans le domaine d’application également changer si leur n'a pas explicitement été attribué une culture. Toutefois, ces threads reflètent les nouveaux paramètres de culture uniquement en lors de leur exécution dans le domaine d’application actuel. Si ces threads s’exécutent dans un autre domaine d’application, leur culture devient la culture par défaut définie pour ce domaine d’application. Par conséquent, nous vous recommandons de toujours définir la culture du thread principal de l’application et de s’appuient pas sur le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés pour le modifier.  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>Domaines d’application et de culture  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> sont des propriétés statiques qui définissent explicitement une culture par défaut uniquement pour le domaine d’application qui est actif lorsque la valeur de propriété est définie ou récupérée. L’exemple suivant définit la culture par défaut et la culture d’interface utilisateur par défaut dans le domaine d’application par défaut pour le Français (France) et utilise ensuite le <xref:System.AppDomainSetup> classe et le <xref:System.AppDomainInitializer> délégué pour définir la culture par défaut et la culture d’interface utilisateur dans un nouveau domaine d’application pour Russe (Russie). Un seul thread exécute ensuite les deux méthodes dans chaque domaine d’application. Notez que culture et la culture d’interface utilisateur du thread ne sont pas définis explicitement ; ils sont dérivés de la culture par défaut et la culture d’interface utilisateur du domaine d’application dans lequel le thread s’exécute. Notez également que le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés retournent la valeur par défaut <xref:System.Globalization.CultureInfo> valeurs du domaine d’application qui est active lors de l’appel de méthode est effectué.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 Pour plus d’informations sur les domaines d’application et cultures, consultez la section « Domaines d’Application et Threads » dans le [domaines d’Application](~/docs/framework/app-domains/application-domains.md) rubrique.  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>Culture et opérations asynchrones basées sur des tâches  
 Le [modèle de programmation asynchrone basé sur des tâches](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) utilise <xref:System.Threading.Tasks.Task> et <xref:System.Threading.Tasks.Task%601> objets pour exécuter des délégués de façon asynchrone sur des threads du pool de threads. Le thread spécifique sur lequel s’exécute une tâche particulière n’est pas connu d’avance, mais est déterminé uniquement lors de l’exécution.  
  
 Pour les applications qui ciblent le [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou versions ultérieures, la culture fait partie du contexte de l’une opération asynchrone. En d’autres termes, à partir des applications qui ciblent le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], les opérations asynchrones par défaut héritent des valeurs de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriétés du thread à partir de laquelle elles sont lancées. Si la culture actuelle ou la culture d’interface utilisateur actuelle est différente de la culture du système, la culture actuelle dépasse les limites de thread et devient la culture actuelle du thread du pool qui exécute une opération asynchrone.  
  
 L'exemple suivant illustre cette situation de façon simple. Il utilise le <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribut à cibler le [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. L’exemple définit un <xref:System.Func%601> déléguer, `formatDelegate`, qui retourne des nombres mis en forme en tant que valeurs de devise. L’exemple modifie la culture système actuelle à soit Français (France) ou, si Français (France) est déjà la culture actuelle, anglais (États-Unis). Il puis :  
  
-   Appelle le délégué directement afin qu’il exécute de façon synchrone sur le thread d’application principale.  
  
-   Crée une tâche qui exécute le délégué de manière asynchrone sur un thread de pool de threads.  
  
-   Crée une tâche qui exécute le délégué de manière synchrone sur le thread d’application principale en appelant le <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> (méthode).  
  
 Comme le montre la sortie de l’exemple, quand la culture actuelle est passée à Français (France), la culture actuelle du thread à partir de laquelle les tâches sont appelées en mode asynchrone devient la culture actuelle pour cette opération asynchrone.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 Pour les applications qui ciblent des versions du .NET Framework antérieures à la [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ou pour les applications qui ne ciblent pas une version particulière du .NET Framework, la culture du thread appelant ne fait pas partie du contexte d’une tâche. Au lieu de cela, sauf si celle-ci est explicitement définie, la culture de nouveaux threads par défaut est la culture du système. L’exemple suivant, qui est identique à l’exemple précédent, sauf qu’il lui manque le <xref:System.Runtime.Versioning.TargetFrameworkAttribute> attribut, illustre ce comportement. Étant donné que la culture du système du système sur lequel exécuter l’exemple a été anglais (États-Unis), la culture de la tâche qui exécute de façon asynchrone sur un thread de pool de threads est en-US, plutôt que fr-FR.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 Pour les applications qui ciblent des versions du .NET Framework à partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)] et ultérieurement, mais avant le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], vous pouvez utiliser la <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés pour vous assurer que la culture du thread appelant est utilisée dans asynchrone vos tâches exécuter sur les threads du pool. L’exemple suivant est identique à l’exemple précédent, sauf qu’elle utilise le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété pour garantir ce thread du pool de threads ont la même culture que le thread d’application principale.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> est des propriétés de domaine ; par application, autrement dit, qu’il établit une culture par défaut pour tous les threads affectés ne sont pas explicitement une culture dans un domaine d’application spécifique. Toutefois, pour les applications qui ciblent le [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou version ultérieure, la culture du thread appelant fait partie intégrante du contexte d’une tâche asynchrone même si la tâche dépasse les limites du domaine d’application.  
  
 L’exemple suivant montre que culture du thread appelant reste la culture actuelle d’une opération asynchrone basé sur des tâches, même si la méthode en cours d’exécution de la tâche dépasse les limites du domaine d’application. Il définit une classe, `DataRetriever`, avec une méthode unique, `GetFormattedNumber`, qui retourne un nombre à virgule flottante double précision aléatoire compris entre 1 et 1 000 sous formaté de valeur monétaire. Une première tâche est exécutée qui instancie simplement un `DataRetriever` instance et appelle son `GetFormattedNumber` (méthode). Une deuxième tâche signale son domaine d’application actuel, crée un nouveau domaine d’application, instancie une `DataRetriever` instance dans le nouveau domaine d’application et appelle son `GetFormattedNumber` (méthode). Comme le montre la sortie de l’exemple, la culture actuelle reste la même dans le thread appelant, la première tâche et la deuxième tâche à la fois quand elle exécutait dans le domaine d’application principal et le deuxième domaine d’application.  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>  
## <a name="cultureinfo-object-serialization"></a>Sérialisation d’un objet CultureInfo  
 Quand un <xref:System.Globalization.CultureInfo> objet est sérialisé, tout ce qui est réellement stocké est <xref:System.Globalization.CultureInfo.Name%2A> et <xref:System.Globalization.CultureInfo.UseUserOverride%2A>. Il est désérialisé avec succès uniquement dans un environnement où qui <xref:System.Globalization.CultureInfo.Name%2A> a la même signification. Les trois exemples suivants montrent pourquoi cela n’est pas toujours le cas :  
  
- Si le <xref:System.Globalization.CultureInfo.CultureTypes%2A> valeur de propriété est <xref:System.Globalization.CultureTypes.InstalledWin32Cultures?displayProperty=nameWithType>, et si cette culture a été introduite dans une version particulière du système d’exploitation Windows, il n’est pas possible de le désérialiser sur une version antérieure de Windows. Par exemple, si une culture a été introduite dans Windows 10, il ne peut pas être désérialisé sur Windows 8.  
  
-   Si le <xref:System.Globalization.CultureInfo.CultureTypes%2A> valeur est <xref:System.Globalization.CultureTypes.UserCustomCulture?displayProperty=nameWithType>et l’ordinateur sur lequel il est désérialisé n’a pas de cette culture personnalisée utilisateur installée, il n’est pas possible de le désérialiser.  
  
-   Si le <xref:System.Globalization.CultureInfo.CultureTypes%2A> valeur est <xref:System.Globalization.CultureTypes.ReplacementCultures?displayProperty=nameWithType>et l’ordinateur sur lequel il est désérialisé ne dispose pas de cette culture de remplacement, il désérialise pour le même nom, mais pas toutes les mêmes caractéristiques. Par exemple, si en-US est une culture de remplacement sur l’ordinateur A, mais pas sur l’ordinateur B et si un <xref:System.Globalization.CultureInfo> objet faisant référence à cette culture est sérialisé sur l’ordinateur A et désérialisé sur l’ordinateur B, aucune des caractéristiques personnalisées de la culture sont transmis. La culture désérialise avec succès, mais avec une signification différente.  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>Remplace le panneau de configuration  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture. En règle générale, vos applications doivent respecter ces substitutions par l’utilisateur.  
  
 Si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true` et la culture spécifiée correspond à la culture actuelle de Windows, le <xref:System.Globalization.CultureInfo> utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété, et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>Ordres de tri secondaires  
 Certaines cultures prennent en charge plus d’un ordre de tri. Par exemple :  
  
-   La culture Espagnol (Espagne) a deux ordres de tri : l’ordre de tri international par défaut et l’ordre de tri traditionnel. Lorsque vous instanciez un <xref:System.Globalization.CultureInfo> de l’objet portant le nom de culture es-ES, l’ordre de tri international est utilisé. Lorsque vous instanciez un <xref:System.Globalization.CultureInfo> de l’objet avec le nom de culture de es-ES-tradnl, l’ordre de tri traditionnel est utilisé.  
  
-   La culture zh-CN (chinois (simplifié, RPC)) prend en charge les deux ordres de tri : selon la prononciation (par défaut) et par nombre de traits. Lorsque vous instanciez un <xref:System.Globalization.CultureInfo> de l’objet portant le nom de culture zh-CN, l’ordre de tri par défaut est utilisé. Lorsque vous instanciez un <xref:System.Globalization.CultureInfo> de l’objet avec un identificateur local de 0 x 00020804, les chaînes sont triées par nombre de traits.  
  
 Le tableau suivant répertorie les cultures qui prennent en charge des ordres de tri secondaires et les identificateurs pour les ordres de tri secondaires et par défaut.  
  
|Nom de culture|culture|Identificateur et le nom de tri par défaut|Identificateur et le nom de tri secondaire|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|Espagnol (Espagne)|International : 0x00000C0A|Traditionnel : 0x0000040A|  
|zh-TW|Chinois (Taïwan)|Nombre de traits : 0x00000404|Bopomofo : 0x00030404|  
|zh-CN|Chinois (République populaire de Chine)|Prononciation : 0x00000804|Nombre de traits : 0x00020804|  
|zh-HK|Chinois (Hong Kong (r.a.s.))|Nombre de traits : 0x00000c04|Nombre de traits : 0x00020c04|  
|zh-SG|Chinois (Singapour)|Prononciation : 0x00001004|Nombre de traits : 0x00021004|  
|zh-MO|Chinois (Macao R.A.S.)|Prononciation : 0x00001404|Nombre de traits : 0x00021404|  
|ja-JP|Japonais (Japon)|Par défaut : 0x00000411|Unicode : 0x00010411|  
|ko-KR|Coréen (Corée)|Par défaut : 0x00000412|Coréen Xwansung - Unicode : 0x00010412|  
|de-DE|Allemand (Allemagne)|Dictionnaire : 0x00000407|Tri de l’annuaire téléphonique DIN : 0x00010407|  
|hu-HU|Hongrois (Hongrie)|Par défaut : 0x0000040e|Tri technique : 0x0001040e|  
|ka-GE|Géorgien (Géorgie)|Traditionnel : 0x00000437|Moderne : 0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>La culture actuelle et les applications UWP  
 Dans les applications Universal Windows Platform (UWP), le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriétés sont en lecture-écriture, tout comme ils se trouvent dans des applications .NET Framework et .NET Core. Toutefois, les applications UWP reconnaissent une culture unique. Le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mappage de propriétés de la première valeur dans le [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) collection.  

Dans les applications .NET Framework et .NET Core, la culture actuelle est un paramètre par thread et le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriétés reflètent la culture et la culture d’interface utilisateur du thread actuel uniquement. Dans les applications UWP, la culture actuelle correspond à la [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) collection, qui est un paramètre global. Définition de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> ou <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriété change la culture de l’application entière ; la culture ne peut pas être définie sur une base par thread.
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Globalization.CultureInfo> objet pour l’espagnol (Espagne) avec le tri international et l’autre <xref:System.Globalization.CultureInfo> objet avec le tri traditionnel.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
    <related type="Article" href="/globalization/index">Accédez au centre de développement</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Globalization.CultureInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Identificateur <see cref="T:System.Globalization.CultureInfo" /> prédéfini, propriété <see cref="P:System.Globalization.CultureInfo.LCID" /> d'un objet <see cref="T:System.Globalization.CultureInfo" /> existant ou identificateur de culture propre à Windows.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Globalization.CultureInfo" /> en fonction de la culture spécifiée par l'identificateur de culture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificateurs de cultures prédéfinis sont répertoriés dans le [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement.  
  
 Dans la plupart des cas, le `culture` paramètre est mappé à l’identificateur de paramètres régionaux de prise en charge NLS (National Language) correspondant. La valeur de la `culture` paramètre devient la valeur de la <xref:System.Globalization.CultureInfo.LCID%2A> propriété du nouveau <xref:System.Globalization.CultureInfo>.  
  
 Nous vous recommandons d’appeler le constructeur de nom des paramètres régionaux <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, car les noms de paramètres régionaux sont préférables aux LCID. Pour les paramètres régionaux personnalisés, un nom de paramètres régionaux est obligatoire.  
  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture. Si l’identificateur de culture spécifié correspond à l’identificateur de culture de la culture actuelle de Windows, ce constructeur crée un <xref:System.Globalization.CultureInfo> qui utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par le <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo> (par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Si l’identificateur de culture spécifié ne correspond pas à l’identificateur de la culture actuelle de Windows, ce constructeur crée un <xref:System.Globalization.CultureInfo> qui utilise les valeurs par défaut pour la culture spécifiée.  
  
 Le <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriété est toujours définie sur `true`.  
  
 Par exemple, supposons que l’arabe (Arabie Saoudite) est la culture actuelle de Windows et l’utilisateur a modifié le calendrier Hijri par le calendrier grégorien.  
  
-   Avec `CultureInfo("0x0401")` (nom de culture ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.GregorianCalendar> (qui est le paramètre utilisateur) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
-   Avec `CultureInfo("0x041E")` (culture nom th-TH), <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.ThaiBuddhistCalendar> (qui est le calendrier par défaut pour th-TH) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
 Pour les cultures qui utilisent l’euro, le .NET Framework et Windows XP définissent la par défaut comme devise euro. Toutefois, les versions antérieures de Windows ne peuvent pas. Par conséquent, si l’utilisateur d’une version antérieure de Windows n’a pas changé le paramètre de devise via la partie des options régionales et linguistiques du Panneau de configuration, la devise peut être incorrecte. Pour utiliser le paramètre par défaut de .NET Framework pour la devise, l’application doit utiliser un <xref:System.Globalization.CultureInfo> surcharge de constructeur qui accepte un `useUserOverride` paramètre et définissez-le sur `false`.  
  
> [!NOTE]
>  Pour descendante compatibilité, une culture construite à l’aide un `culture` paramètre de 0 x 0004 ou 0x7c04 aura une <xref:System.Globalization.CultureInfo.Name%2A> propriété de zh-CHS ou zh-CHT, respectivement. Au lieu de cela, vous devez préférer pour construire la culture en utilisant les noms de culture standard actuel de zh-Hans ou zh-Hant, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> est inférieur à zéro.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> n’est pas un identificateur de culture valide. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="culture" /> n’est pas un identificateur de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ce constructeur lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="culture" /> du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture, le méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" /> exception.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de <see cref="T:System.Globalization.CultureInfo" /> prédéfini, élément <see cref="P:System.Globalization.CultureInfo.Name" /> d'un élément <see cref="T:System.Globalization.CultureInfo" /> existant ou nom de culture propre à Windows. <paramref name="name" /> ne respecte pas la casse.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Globalization.CultureInfo" /> en fonction de la culture spécifiée par nom.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la liste des noms de cultures prédéfinis, consultez la [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement. En outre, en commençant par Windows 10, `name` peut être n’importe quelle balise de langue BCP-47 valide.  
  
 Si `name` est <xref:System.String.Empty?displayProperty=nameWithType>, le constructeur crée une instance de la culture dite indifférente ; cela est équivalent à la récupération de la valeur de la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.  
  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture. Si l’identificateur de culture associé `name` correspond à l’identificateur de culture de la culture actuelle de Windows, ce constructeur crée un <xref:System.Globalization.CultureInfo> objet qui utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo>instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Si l’identificateur de culture associé `name` ne correspond pas à l’identificateur de culture de la culture actuelle de Windows, ce constructeur crée un <xref:System.Globalization.CultureInfo> objet qui utilise les valeurs par défaut pour la culture spécifiée.  
  
 Le <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriété est toujours définie sur `true`.  
  
 Par exemple, supposons que l’arabe (Arabie Saoudite) est la culture actuelle de Windows et l’utilisateur a modifié le calendrier Hijri par le calendrier grégorien.  
  
-   Avec `CultureInfo("ar-SA")`, <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.GregorianCalendar> (qui est le paramètre utilisateur) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
-   Avec `CultureInfo("th-TH")`, <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.ThaiBuddhistCalendar> (qui est le calendrier par défaut pour th-TH) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
 Le <xref:System.Globalization.CultureInfo.LCID%2A> propriété du nouveau <xref:System.Globalization.CultureInfo> est définie sur l’identificateur de culture associé au nom spécifié.  
  
 Pour les cultures qui utilisent l’euro, le .NET Framework et Windows XP définissent la par défaut comme devise euro. Toutefois, les versions antérieures de Windows ne le faites pas. Par conséquent, si l’utilisateur d’une version antérieure de Windows n’a pas changé le paramètre de devise via la partie des options régionales et linguistiques du Panneau de configuration, la devise peut être incorrecte. Pour utiliser le paramètre par défaut de .NET Framework pour la devise, l’application doit utiliser un <xref:System.Globalization.CultureInfo> surcharge de constructeur qui accepte un `useUserOverride` paramètre et définissez-le sur `false`.  
  
   
  
## Examples  
 L’exemple suivant récupère la culture actuelle. Si elle n’est pas la culture Français (France), il appelle le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructeur pour instancier un <xref:System.Globalization.CultureInfo> objet qui représente la culture Français (France) et le rend la culture du thread actuel. Sinon, il instancie un <xref:System.Globalization.CultureInfo> objet qui représente la culture Français (Luxembourg) et le rend la culture actuelle.  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> n’est pas un nom de culture valide. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="name" /> n’est pas un nom de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ce constructeur lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="name" /> à partir du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture et si <paramref name="name" /> n’est pas le nom d’une culture supplémentaire ou de remplacement, la méthode lève une exception une <see cref="T:System.Globalization.CultureNotFoundException" /> exception.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Identificateur <see cref="T:System.Globalization.CultureInfo" /> prédéfini, propriété <see cref="P:System.Globalization.CultureInfo.LCID" /> d'un objet <see cref="T:System.Globalization.CultureInfo" /> existant ou identificateur de culture propre à Windows.</param>
        <param name="useUserOverride">Valeur booléenne indiquant s'il faut utiliser les paramètres de culture sélectionnés par l'utilisateur (<see langword="true" />) ou les paramètres de culture par défaut (<see langword="false" />).</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Globalization.CultureInfo" /> en fonction de la culture spécifiée par l'identificateur de culture et de la valeur booléenne spécifiant si les paramètres de culture sélectionnés par l'utilisateur sur le système doivent être utilisés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificateurs de cultures prédéfinis sont répertoriés dans le [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement.  
  
 Dans la plupart des cas, le `culture` paramètre est mappé à l’identificateur de paramètres régionaux de prise en charge NLS (National Language) correspondant. La valeur de la `culture` paramètre devient la valeur de la <xref:System.Globalization.CultureInfo.LCID%2A> propriété du nouveau <xref:System.Globalization.CultureInfo>.  
  
 Nous vous recommandons d’appeler le constructeur de nom des paramètres régionaux <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType>, car les noms de paramètres régionaux sont préférables aux LCID. Pour les paramètres régionaux personnalisés, un nom de paramètres régionaux est obligatoire.  
  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Applications doivent en général pas interdire les substitutions d’utilisateur. Notez que rejet de substitutions ne garantit pas la stabilité des données ; consultez le billet de blog [les données de Culture ne doit pas être considéré comme stables (à l’exception d’Invariant)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Si le <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriété est définie sur `true` et l’identificateur de culture spécifié correspond à l’identificateur de la culture actuelle de Windows, ce constructeur crée un <xref:System.Globalization.CultureInfo> qui utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Sinon, ce constructeur crée un <xref:System.Globalization.CultureInfo> qui utilise les valeurs par défaut pour la culture spécifiée.  
  
 La valeur de la `useUserOverride` paramètre devient la valeur de la <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriété.  
  
 Par exemple, supposons que l’arabe (Arabie Saoudite) est la culture actuelle de Windows et l’utilisateur a modifié le calendrier Hijri par le calendrier grégorien.  
  
-   Avec `CultureInfo("0x0401", true)` (nom de culture ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.GregorianCalendar> (qui est le paramètre utilisateur) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
-   Avec `CultureInfo("0x0401", false)` (nom de culture ar-SA), <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.HijriCalendar> (qui est le calendrier par défaut pour ar-SA) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `false`.  
  
-   Avec `CultureInfo("0x041E", true)` (culture nom th-TH), <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.ThaiBuddhistCalendar> (qui est le calendrier par défaut pour th-TH) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
-   Avec `CultureInfo("0x041E", false)` (culture nom th-TH), <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.ThaiBuddhistCalendar> (qui est le calendrier par défaut pour th-TH) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `false`.  
  
 Pour les cultures qui utilisent l’euro, le .NET Framework et Windows XP définissent la par défaut comme devise euro. Toutefois, les versions antérieures de Windows ne peuvent pas. Par conséquent, si l’utilisateur d’une version antérieure de Windows n’a pas changé le paramètre de devise via la partie des options régionales et linguistiques du Panneau de configuration, la devise peut être incorrecte. Pour utiliser le paramètre par défaut de .NET Framework pour la devise, l’application doit définir le `useUserOverride` paramètre `false`.  
  
> [!NOTE]
>  Pour descendante compatibilité, une culture construite à l’aide un `culture` paramètre de 0 x 0004 ou 0x7c04 aura une <xref:System.Globalization.CultureInfo.Name%2A> propriété de zh-CHS ou zh-CHT, respectivement. Au lieu de cela, vous devez préférer pour construire la culture en utilisant les noms de culture standard actuel de zh-Hans ou zh-Hant, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> est inférieur à zéro.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> n’est pas un identificateur de culture valide. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="culture" /> n’est pas un identificateur de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ce constructeur lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="culture" /> du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture, le méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" /> exception.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom de <see cref="T:System.Globalization.CultureInfo" /> prédéfini, élément <see cref="P:System.Globalization.CultureInfo.Name" /> d'un élément <see cref="T:System.Globalization.CultureInfo" /> existant ou nom de culture propre à Windows. <paramref name="name" /> ne respecte pas la casse.</param>
        <param name="useUserOverride">Valeur booléenne indiquant s'il faut utiliser les paramètres de culture sélectionnés par l'utilisateur (<see langword="true" />) ou les paramètres de culture par défaut (<see langword="false" />).</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Globalization.CultureInfo" /> en fonction de la culture spécifiée par le nom et de la valeur booléenne spécifiant s'il faut utiliser les paramètres de culture sélectionnés par l'utilisateur sur le système.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la liste des noms de cultures prédéfinis, consultez la [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement. En outre, en commençant par Windows 10, `name` peut être n’importe quelle balise de langue BCP-47 valide.  
  
 Si `name` est <xref:System.String.Empty?displayProperty=nameWithType>, le constructeur crée une instance de la culture dite indifférente ; cela est équivalent à la récupération de la valeur de la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.  
  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Applications doivent en général pas interdire les substitutions d’utilisateur. Notez que rejet de substitutions ne garantit pas la stabilité des données ; consultez le billet de blog [les données de Culture ne doit pas être considéré comme stables (à l’exception d’Invariant)](https://go.microsoft.com/fwlink/?LinkId=156850).  
  
 Si le <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriété est définie sur `true` et l’identificateur de culture associé au nom de culture spécifié correspond à l’identificateur de culture de la culture actuelle de Windows, ce constructeur crée un <xref:System.Globalization.CultureInfo> qui utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Sinon, ce constructeur crée un <xref:System.Globalization.CultureInfo> qui utilise les valeurs par défaut pour la culture spécifiée.  
  
 La valeur de la `useUserOverride` paramètre devient la valeur de la <xref:System.Globalization.CultureInfo.UseUserOverride%2A> propriété.  
  
 Par exemple, supposons que l’arabe (Arabie Saoudite) est la culture actuelle de Windows et l’utilisateur a modifié le calendrier Hijri par le calendrier grégorien.  
  
-   Avec `CultureInfo("ar-SA", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.GregorianCalendar> (qui est le paramètre utilisateur) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
-   Avec `CultureInfo("ar-SA", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.HijriCalendar> (qui est le calendrier par défaut pour ar-SA) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `false`.  
  
-   Avec `CultureInfo("th-TH", true)`, <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.ThaiBuddhistCalendar> (qui est le calendrier par défaut pour th-TH) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `true`.  
  
-   Avec `CultureInfo("th-TH", false)`, <xref:System.Globalization.CultureInfo.Calendar%2A> a la valeur <xref:System.Globalization.ThaiBuddhistCalendar> (qui est le calendrier par défaut pour th-TH) et <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est défini sur `false`.  
  
 Le <xref:System.Globalization.CultureInfo.LCID%2A> propriété du nouveau <xref:System.Globalization.CultureInfo> est définie sur l’identificateur de culture associé au nom spécifié.  
  
 Pour les cultures qui utilisent l’euro, le .NET Framework et Windows XP définissent la par défaut comme devise euro. Toutefois, les versions antérieures de Windows ne le faites pas. Par conséquent, si l’utilisateur d’une version antérieure de Windows n’a pas changé le paramètre de devise via la partie des options régionales et linguistiques du Panneau de configuration, la devise peut être incorrecte. Pour utiliser le paramètre par défaut de .NET Framework pour la devise, l’application doit définir le `useUserOverride` paramètre `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> n’est pas un nom de culture valide. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="name" /> n’est pas un nom de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], ce constructeur lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="name" /> à partir du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture et si <paramref name="name" /> n’est pas le nom d’une culture supplémentaire ou de remplacement, la méthode lève une exception une <see cref="T:System.Globalization.CultureNotFoundException" /> exception.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le calendrier par défaut utilisé par la culture.</summary>
        <value><see cref="T:System.Globalization.Calendar" /> qui représente le calendrier par défaut utilisé par la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true` et la culture spécifiée correspond à la culture actuelle de Windows, le <xref:System.Globalization.CultureInfo> utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété, et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Par conséquent, si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true`, la valeur de cette propriété peut être différente du calendrier par défaut utilisé par la culture.  
  
 Votre application modifie le calendrier utilisé par l’actuel <xref:System.Globalization.CultureInfo> en définissant le <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> propriété du <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, qui est une instance de la <xref:System.Globalization.DateTimeFormatInfo> classe. Le nouveau calendrier doit être un des calendriers répertoriés dans <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> inclut également d’autres propriétés qui personnalisent le format de date et heure associées qui <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actualise les informations sur la culture mises en cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Plus d’informations, telles que les motifs de culture et le format par défaut, est mis en cache la première fois, qu'il est demandé. Que peuvent être modifiées pendant la durée de vie de la <xref:System.AppDomain>, par exemple, lorsque l’utilisateur modifie la partie des options régionales et linguistiques du Panneau de configuration. Toutefois, la <xref:System.Globalization.CultureInfo> classe ne détecte pas automatiquement les modifications dans les paramètres système.  
  
 Le <xref:System.Globalization.CultureInfo.ClearCachedData%2A> méthode efface le cache de <xref:System.Globalization.CultureInfo> objets créés par <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> et actualise les informations contenues dans le <xref:System.Globalization.CultureInfo.CurrentCulture%2A>, <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>, et <xref:System.Globalization.RegionInfo.CurrentRegion%2A> propriétés, selon les paramètres système actuels.  
  
 Le <xref:System.Globalization.CultureInfo.ClearCachedData%2A> méthode n’actualise pas les informations contenues dans le <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propriété pour les threads existants. Toutefois, les threads futurs auront les nouvelles <xref:System.Globalization.CultureInfo> valeurs de propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie de l'élément <see cref="T:System.Globalization.CultureInfo" /> actuel.</summary>
        <returns>Une copie de l'élément <see cref="T:System.Globalization.CultureInfo" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le clone est accessible en écriture même si la version d’origine <xref:System.Globalization.CultureInfo> est en lecture seule. Par conséquent, les propriétés du clone peuvent être modifiées.  
  
 Une copie superficielle d’un objet est une copie de l’objet uniquement. Si l’objet contient des références à d’autres objets, la copie superficielle ne crée pas de copie les objets référencés. Il fait référence aux objets d’origine à la place. En revanche, une copie complète d’un objet crée une copie de l’objet et une copie de tous les éléments référencés directement ou indirectement par cet objet.  
  
 Le <xref:System.Globalization.CultureInfo.Clone%2A> méthode crée une copie superficielle améliorée. Les objets retournés par le <xref:System.Globalization.CultureInfo.NumberFormat%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.TextInfo%2A>, et <xref:System.Globalization.CultureInfo.Calendar%2A> également les propriétés sont copiées. Par conséquent, le clonage du <xref:System.Globalization.CultureInfo> objet peut modifier ses propriétés copiées sans affecter l’original <xref:System.Globalization.CultureInfo> objet.  
  
   
  
## Examples  
 L’exemple de code suivant montre que CultureInfo.Clone clone également le <xref:System.Globalization.DateTimeFormatInfo> et <xref:System.Globalization.NumberFormatInfo> instances associées à la <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'élément <see cref="T:System.Globalization.CompareInfo" /> qui définit le mode de comparaison des chaînes pour la culture.</summary>
        <value>Élément <see cref="T:System.Globalization.CompareInfo" /> qui définit le mode de comparaison des chaînes pour la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.CultureInfo.CompareInfo%2A> propriété retourne un <xref:System.Globalization.CompareInfo> objet qui fournit des informations spécifiques à la culture utilisées dans les opérations de comparaison de chaîne et de tri dépendantes de la culture.  
  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true` et la culture spécifiée correspond à la culture actuelle de Windows, le <xref:System.Globalization.CultureInfo> utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété, et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un <xref:System.Globalization.CultureInfo> pour l’espagnol (Espagne) avec le tri international et l’autre <xref:System.Globalization.CultureInfo> avec le tri traditionnel.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Un nom de <see cref="T:System.Globalization.CultureInfo" /> prédéfini ou le nom d'un objet <see cref="T:System.Globalization.CultureInfo" /> existant. <paramref name="name" /> ne respecte pas la casse.</param>
        <summary>Crée un élément <see cref="T:System.Globalization.CultureInfo" /> qui représente la culture spécifique associée au nom spécifié.</summary>
        <returns>Un objet <see cref="T:System.Globalization.CultureInfo" /> qui représente : 
La culture Invariant, si <paramref name="name" /> est une chaîne vide ("").  
  
ou 
La culture spécifique associée à <paramref name="name" />, si <paramref name="name" /> est une culture neutre.  
  
ou 
La culture spécifiée par <paramref name="name" />, si <paramref name="name" /> est déjà une culture spécifique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> méthode encapsule un appel à la <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructeur.  
  
> [!NOTE]
>  Pour obtenir la liste des noms de cultures prédéfinis, consultez la [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement. En outre, en commençant par Windows 10, `name` peut être n’importe quelle balise de langue BCP-47 valide.  
  
 Cultures sont regroupées en trois jeux : la culture dite indifférente, les cultures neutres et les cultures spécifiques. Pour plus d’informations, consultez la description de la <xref:System.Globalization.CultureInfo> classe.  
  
 Si l’identificateur de culture de la culture spécifique retournée par cette méthode correspond à l’identificateur de culture de la culture actuelle de Windows, cette méthode crée un <xref:System.Globalization.CultureInfo> substitue de l’objet qui utilise la culture de Windows. Les substitutions incluent des paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et la <xref:System.Globalization.NumberFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Pour instancier un <xref:System.Globalization.CultureInfo> de l’objet que valeur par défaut des paramètres de culture plutôt que les remplacements de l’utilisateur, appellent le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructeur avec une valeur de `false` pour le `useUserOverride` argument.  
  
 Bien que le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> nom de la méthode inclut le terme « Spécifique », n’oubliez pas que les données de la culture peuvent changer entre les versions, ou en raison de cultures personnalisées ou en raison des substitutions d’utilisateur. Utiliser la culture dite indifférente ou binaire ou fixe pour l’enregistrement des données.  
  
   
  
## Examples  
 L’exemple suivant récupère un tableau de <xref:System.Globalization.CultureInfo> objets qui représentent les cultures neutres à partir de la <xref:System.Globalization.CultureInfo.GetCultures%2A> méthode et trie le tableau. Lorsqu’il itère les éléments dans le tableau, il passe le nom de chaque culture neutre à le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> (méthode) et affiche le nom de la culture spécifique retourné par la méthode.  
  
> [!NOTE]
>  L’exemple utilise les noms de culture zh-CHS et zh-CHT. Toutefois, les applications qui ciblent Windows Vista et doivent utiliser ultérieurement zh-Hans au lieu de zh-CHS et zh-Hant au lieu de zh-CHT. zh-Hans et zh-Hant représentent la norme actuelle et doivent être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
>   
>  Notez également que les résultats de l’exemple peuvent être différentes sur une installation de Windows taïwanais, où l’entrée d’une culture neutre (traditionnelle) chinois (zh, zh-CHT ou zh-Hant) retourne zh-TW.  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> n’est pas un nom de culture valide.  
  
ou 
La culture spécifiée par <paramref name="name" /> n’est pas associée à une culture spécifique.</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="name" /> a la valeur null.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="name" /> n’est pas un nom de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], cette méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les types de cultures appartenant à l'objet <see cref="T:System.Globalization.CultureInfo" /> actuel.</summary>
        <value>Combinaison au niveau du bit d'une ou plusieurs valeurs de <see cref="T:System.Globalization.CultureTypes" />. Il n'y a pas de valeur par défaut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre le <xref:System.Globalization.CultureTypes> énumération et la <xref:System.Globalization.CultureInfo.CultureTypes%2A> propriété.  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Globalization.CultureInfo" /> qui représente la culture utilisée par le thread actif.</summary>
        <value>Objet qui représente la culture utilisée par le thread actif.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.CultureInfo> objet qui est retourné par cette propriété et ses objets associés déterminent le format par défaut pour les dates, heures, nombres, les valeurs de devise, l’ordre de tri du texte, conventions de casse et les comparaisons de chaînes.  
  
 La culture actuelle est une propriété du thread en cours d’exécution. Récupérant la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété équivaut à une plus performante de récupérer le <xref:System.Globalization.CultureInfo> objet retourné par la `Thread.CurrentThread.CurrentCulture` propriété.
  
> [!NOTE]
>  Dans le .NET Framework 4.5.2 et versions antérieures, le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété est en lecture seule ;  Autrement dit, vous pouvez récupérer la valeur de propriété, mais vous ne pouvez pas la définir. Pour modifier la culture actuelle, vous assignez le <xref:System.Globalization.CultureInfo> objet qui représente la nouvelle culture pour le `Thread.CurrentThread.CurrentCulture` propriété. En commençant par le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété est en lecture-écriture ; vous pouvez définir et extraire la valeur de propriété. Si vous définissez la valeur de propriété un <xref:System.Globalization.CultureInfo> objet qui représente une nouvelle culture, la valeur de la `Thread.CurrentThread.CurrentCulture` propriété change également.  
  
 Dans cette section :  
  
 [Détermination de la Culture du Thread](#ThreadCulture)   
 [Obtention de la Culture actuelle](#Getting)   
 [Définir explicitement la propriété CurrentCulture](#ExplicitSetting)   
 [La Culture actuelle et les remplacements de l’utilisateur](#Overrides)   
 [Culture et les applications Windows](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>Détermination de la Culture du Thread  
 Quand un thread est démarré, sa culture est initialement déterminée comme suit :  
  
-   En extrayant la culture spécifiée par le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété dans le domaine d’application dans lequel le thread s’exécute, si la valeur de propriété n’est pas `null`.  
  
-   Si le thread est un thread de pool de thread qui exécute une opération asynchrone basé sur des tâches et l’application cible le [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou une version ultérieure du .NET Framework, sa culture est déterminée par la culture du thread appelant.  L’exemple suivant modifie la culture actuelle en portugais (Brésil) et lance des six tâches, chacun d’eux affiche son ID de thread, de son ID de tâche et de la culture actuelle. Chacune des tâches (et les threads) a hérité de la culture du thread appelant.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     Pour plus d’informations, consultez la section « Culture et opérations asynchrones basées sur une tâche » dans le <xref:System.Globalization.CultureInfo> rubrique.  
  
-   En appelant le Windows `GetUserDefaultLocaleName` (fonction).  
  
 Notez que si vous définissez une culture spécifique qui est différente de la culture système installé ou la culture par défaut, et votre application démarre plusieurs threads, la culture actuelle de ces threads est la culture qui est retournée par la `GetUserDefaultLocaleName` fonction, sauf si vous attribuez une culture à le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété dans le domaine d’application dans lequel le thread s’exécute.  
  
 Pour plus d’informations sur la manière dont est déterminée la culture d’un thread, consultez la section « Culture et threads » dans le <xref:System.Globalization.CultureInfo> page de référence.  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>Obtention de la Culture actuelle  
 Le <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété est un paramètre par thread ; autrement dit, chaque thread peut avoir sa propre culture. Vous obtenez la culture du thread actuel en récupérant la valeur de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété, comme dans l’exemple suivant illustre.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 Vous pouvez également récupérer la valeur de culture du thread actuel à partir de la <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> propriété.  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>Définir explicitement la propriété CurrentCulture  
 Commencer par le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], pour modifier la culture utilisée par un thread existant, vous définissez le <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété à la nouvelle culture. Si vous modifiez explicitement la culture du thread de cette façon, qui changent persiste si le thread traverse les limites du domaine d’application. L’exemple suivant modifie la culture du thread actuel néerlandais (pays-bas). Il montre également que, quand le thread actuel dépasse les limites du domaine d’application, sa culture actuelle reste modifiée.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  Modification de la culture à l’aide de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété requiert une <xref:System.Security.Permissions.SecurityPermission> autorisation avec le <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> a valeur. La manipulation des threads est dangereuse en raison de l’état de sécurité associé aux threads. Par conséquent, cette autorisation doit être accordée uniquement au code digne de confiance et puis lorsque c’est nécessaire. Vous ne pouvez pas modifier la culture du thread dans le code de confiance partiel.  
  
 En commençant par le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], vous pouvez modifier explicitement la culture du thread actuel pour une culture spécifique (par exemple, Français (Canada)) ou une culture neutre (par exemple, Français). Quand un <xref:System.Globalization.CultureInfo> objet représente une culture neutre, les valeurs de <xref:System.Globalization.CultureInfo> propriétés, telles que <xref:System.Globalization.CultureInfo.Calendar%2A>, <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, <xref:System.Globalization.CultureInfo.NumberFormat%2A>, et <xref:System.Globalization.CultureInfo.TextInfo%2A> reflète la culture spécifique qui est associée à la culture neutre. Par exemple, la culture dominante pour la culture neutre est anglais (États-Unis) ; la culture dominante pour la culture allemande est allemand (Allemagne). L’exemple suivant illustre la différence dans la mise en forme lors de la culture actuelle est définie sur une culture spécifique, Français (Canada) et une culture neutre, Français.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 Vous pouvez également utiliser le <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété avec le <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> propriété à définir le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété d’une application ASP.NET à l’utilisateur de culture par défaut, comme l’illustre l’exemple suivant.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>La Culture actuelle et les remplacements de l’utilisateur  
 Windows permet aux utilisateurs de remplacer les valeurs de propriété standard de la <xref:System.Globalization.CultureInfo> objet et ses objets associés à l’aide de **Options régionales et linguistiques** dans le panneau de configuration. Le <xref:System.Globalization.CultureInfo> objet retourné par la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété reflète ces utilisateur remplace dans les cas suivants :  
  
-   Si la culture du thread actuel est définie implicitement par le Windows `GetUserDefaultLocaleName` (fonction).  
  
-   Si la culture du thread actuel définie par le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété correspond à la culture actuelle du système Windows.  
  
-   Si la culture du thread actuel est définie explicitement à une culture retournée par la <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> (méthode), et que la culture correspond à la culture actuelle du système Windows.  
  
-   Si la culture du thread actuel est définie explicitement à une culture instanciée par le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructeur, et que la culture correspond à la culture actuelle du système Windows.  
  
 Dans certains cas, en particulier pour les applications serveur, définition de la culture actuelle un <xref:System.Globalization.CultureInfo> objet qui reflète les remplacements de l’utilisateur peut être indésirable. Au lieu de cela, vous pouvez définir la culture du thread actuel un <xref:System.Globalization.CultureInfo> remplace d’objet qui ne reflète pas l’utilisateur comme suit :  
  
-   En appelant le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructeur avec une valeur de `false` pour le `useUserOverride` argument.  
  
-   En appelant le <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> (méthode), qui retourne une mise en cache, en lecture seule <xref:System.Globalization.CultureInfo> objet.  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>La culture actuelle et les applications UWP  
 Dans les applications Universal Windows Platform (UWP), le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété est en lecture-écriture, comme il se trouve dans les applications .NET Framework et .NET Core ; vous pouvez l’utiliser pour obtenir et définir la culture actuelle. Toutefois, les applications UWP ne distinguent pas la culture actuelle et la culture d’interface utilisateur actuelle. Le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mappage de propriétés de la première valeur dans le [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) collection.  

Dans les applications .NET Framework et .NET Core, la culture actuelle est un paramètre par thread et le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété reflète la culture du thread actuel uniquement. Dans les applications UWP, la culture actuelle correspond à la [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) propriété, qui est un paramètre global. Définition de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété change la culture de l’application entière ; la culture ne peut pas être définie sur une base par thread.
  
## Examples  
 L’exemple suivant montre comment modifier le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> du thread actuel.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour définir la culture actuelle. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Globalization.CultureInfo" /> qui représente la culture d'interface utilisateur actuelle utilisée par le Gestionnaire de ressources pour rechercher des ressources spécifiques à la culture au moment de l'exécution.</summary>
        <value>Culture actuelle utilisée par le Gestionnaire de ressources pour rechercher des ressources spécifiques à la culture au moment de l'exécution.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La culture d’interface utilisateur actuelle est une propriété par thread. Autrement dit, chaque thread possède sa propre culture d’interface utilisateur actuelle. Cette propriété est équivalente à l’extraction ou, en commençant par le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], ce qui affecte le <xref:System.Globalization.CultureInfo> objet assigné à la `System.Threading.Thread.CurrentThread.CurrentUICulture` propriété. Quand un thread est démarré, sa culture d’interface utilisateur est initialement déterminée comme suit :  
  
-   En extrayant la culture spécifiée par le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété dans le domaine d’application dans lequel le thread s’exécute, si la valeur de propriété n’est pas `null`.  
  
-   Si le thread est un thread de pool de thread qui exécute une opération asynchrone basé sur des tâches et l’application cible le [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ou une version ultérieure du .NET Framework, sa culture d’interface utilisateur est déterminée par la culture d’interface utilisateur du thread appelant.  L’exemple suivant change la culture d’interface utilisateur actuelle pour le portugais (Brésil) et lance des six tâches, chacun d’eux affiche son ID de thread, son ID de tâche et sa culture d’interface utilisateur actuelle. Chacune des tâches (et les threads) a hérité de la culture d’interface utilisateur du thread appelant.  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     Pour plus d’informations, consultez la section « Culture et opérations asynchrones basées sur une tâche » dans le <xref:System.Globalization.CultureInfo> rubrique.  
  
-   En appelant le Windows `GetUserDefaultUILanguage` (fonction).  
  
> [!NOTE]
>  Dans le [!INCLUDE[Compact](~/includes/compact-md.md)], le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriété est en lecture seule. La culture d’interface utilisateur actuelle est déterminée par les paramètres régionaux du système et ne peut pas être modifiée par programmation.  
  
 En commençant par le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], pour modifier la culture d’interface utilisateur utilisé par un thread, définissez le <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriété à la nouvelle culture. Si vous modifiez explicitement la culture d’interface utilisateur d’un thread de cette façon, qui changent persiste si le thread traverse les limites du domaine d’application.  
  
> [!NOTE]
>  Dans le .NET Framework 4.5.2 et versions antérieures, le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriété est en lecture seule ;  Autrement dit, vous pouvez récupérer la valeur de propriété, mais vous ne pouvez pas la définir. Pour changer la culture d’interface utilisateur actuelle, vous affectez le <xref:System.Globalization.CultureInfo> objet qui représente la nouvelle culture d’interface utilisateur pour le `Thread.CurrentThread.CurrentUICulture` propriété. En commençant par le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété est en lecture-écriture ; vous pouvez définir et extraire la valeur de propriété. Si vous définissez la valeur de propriété un <xref:System.Globalization.CultureInfo> objet qui représente une nouvelle culture, la valeur de la `Thread.CurrentThread.CurrentCulture` propriété change également.  
  
 Dans cette section :  
  
 [Obtention de la Culture d’interface utilisateur actuelle](#Getting)   
 [Définir explicitement la Culture d’interface utilisateur actuelle](#Explicit)   
 [Définition implicite de la Culture d’interface utilisateur actuelle](#Implicit)   
 [Considérations sur la sécurité](#Security)   
 [Les applications Windows et de Culture d’interface utilisateur actuelles](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>Obtention de la Culture d’interface utilisateur actuelle  
 Le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété est un paramètre par thread ; autrement dit, chaque thread peut avoir son propre culture d’interface utilisateur. Vous obtenez la culture d’interface utilisateur du thread actuel en récupérant la valeur de la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété, comme dans l’exemple suivant illustre.  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 Vous pouvez également récupérer la valeur de culture d’interface utilisateur du thread actuel à partir de la <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriété.  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>Définir explicitement la Culture d’interface utilisateur actuelle  
 En commençant par le [!INCLUDE[net_v46](~/includes/net-v46-md.md)], vous pouvez modifier la culture d’interface utilisateur actuelle en attribuant un <xref:System.Globalization.CultureInfo> objet qui représente la nouvelle culture pour le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété. La culture d’interface utilisateur actuelle peut être définie soit une culture spécifique (par exemple, en-US ou fr-fr) ou à une culture neutre (par exemple, en ou fr). L’exemple suivant définit la culture d’interface utilisateur actuelle sur fr-FR ou Français (France).  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 Dans une application multithread, vous pouvez définir explicitement la culture d’interface utilisateur de n’importe quel thread en assignant un <xref:System.Globalization.CultureInfo> objet qui représente cette culture pour le thread <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propriété. Si le thread dont vous souhaitez définir la culture est le thread actuel, vous pouvez affecter la nouvelle culture pour le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété. Quand la culture d’interface utilisateur d’un thread est définie explicitement, que thread conserve la même culture même s’il dépasse les limites du domaine d’application et exécute le code dans un autre domaine d’application.  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>Définition implicite de la Culture d’interface utilisateur actuelle  
 Quand un thread, y compris le thread principal de l’application, est d’abord créé, par défaut, que sa culture d’interface utilisateur actuelle est définie comme suit :  
  
-   À l’aide de la culture définie par le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété pour le domaine d’application actuel si la valeur de propriété n’est pas `null`.  
  
-   À l’aide de la culture du système par défaut. Sur les systèmes qui utilisent le système d’exploitation Windows, le common language runtime appelle le Windows `GetUserDefaultUILanguage` fonction permettant de définir la culture d’interface utilisateur actuelle. `GetUserDefaultUILanguage` Retourne la culture d’interface utilisateur par défaut définie par l’utilisateur. Si l’utilisateur n’a pas défini une langue d’interface utilisateur par défaut, elle retourne la culture installée à l’origine sur le système.  
  
 Si le thread traverse les limites de l’application et exécute le code dans un autre domaine d’application, sa culture est déterminée de la même façon que celle d’un thread nouvellement créé.  
  
 Notez que si vous définissez une culture d’interface utilisateur spécifique qui est différente de la culture d’interface utilisateur système installé ou l’utilisateur privilégié du culture d’interface utilisateur et votre application démarre plusieurs threads, la culture d’interface utilisateur en cours de ces threads est la culture retournée par la `GetUserDefaultUILanguage`de fonction, sauf si vous attribuez une culture à le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété dans le domaine d’application dans lequel le thread s’exécute.  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>Considérations relatives à la sécurité  
 Modification de la culture du thread actuel nécessite un <xref:System.Security.Permissions.SecurityPermission> autorisation avec le <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> a valeur.  
  
> [!CAUTION]
>  La manipulation des threads est dangereuse en raison de l’état de sécurité associé aux threads. Par conséquent, cette autorisation doit être accordée uniquement au code digne de confiance et puis lorsque c’est nécessaire. Vous ne pouvez pas modifier la culture du thread dans le code de confiance partiel.  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>La culture d’interface utilisateur actuelle et les applications UWP  
 
Dans les applications Universal Windows Platform (UWP), le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriété est en lecture-écriture, comme il se trouve dans les applications .NET Framework et .NET Core ; vous pouvez l’utiliser pour obtenir et définir la culture actuelle. Toutefois, les applications UWP ne distinguent pas la culture actuelle et la culture d’interface utilisateur actuelle. Le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> mappage de propriétés de la première valeur dans le [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) collection.

Dans les applications .NET Framework et .NET Core, la culture d’interface utilisateur actuelle est un paramètre par thread et le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriété reflète la culture d’interface utilisateur du thread actuel uniquement. Dans les applications UWP, la culture actuelle correspond à la [Windows.ApplicationModel.Resources.Core.ResourceManager.DefaultContext.Languages](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) propriété, qui est un paramètre global. Définition de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A> propriété change la culture de l’application entière ; la culture ne peut pas être définie sur une base par thread.    
  
## Examples  
 L’exemple de code suivant montre comment modifier le <xref:System.Globalization.CultureInfo.CurrentCulture%2A> et <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> du thread actuel.  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propriété a la valeur d’un nom de culture qui ne peut pas être utilisé pour localiser un fichier de ressources. Les noms de fichiers des ressources peuvent inclure uniquement des lettres, des chiffres, des traits d’union ou des traits de soulignement.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour définir la culture d’interface utilisateur actuelle. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un <see cref="T:System.Globalization.DateTimeFormatInfo" /> qui définit le format d'affichage des dates et de l'heure approprié pour la culture.</summary>
        <value><see cref="T:System.Globalization.DateTimeFormatInfo" /> qui définit le format d'affichage des dates et de l'heure approprié pour la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true` et la culture spécifiée correspond à la culture actuelle de Windows, le <xref:System.Globalization.CultureInfo> utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété, et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 La valeur de la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et le <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété n’est pas calculée jusqu'à ce que votre application accède à la propriété. Si l’utilisateur peut modifier la culture actuelle par une nouvelle culture pendant que l’application s’exécute et accède ensuite à l’application le <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ou <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété, l’application récupère les valeurs par défaut pour la nouvelle culture au lieu des remplacements pour le culture d’origine. Pour conserver les substitutions pour la culture actuelle d’origine, l’application doit accéder à la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> et <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriétés avant de modifier la culture actuelle.  
  
   
  
## Examples  
 L’exemple de code suivant montre que CultureInfo.Clone clone également le <xref:System.Globalization.DateTimeFormatInfo> et <xref:System.Globalization.NumberFormatInfo> instances associées à la <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété a la valeur null.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> ou une des propriétés <see cref="T:System.Globalization.DateTimeFormatInfo" /> est définie et <see cref="T:System.Globalization.CultureInfo" /> est en lecture seule.</exception>
        <block subset="none" type="usage"><para>Si <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> est la <see cref="T:System.Globalization.TaiwanCalendar" /> mais le <see cref="P:System.Threading.Thread.CurrentCulture" /> n’est pas définie pour le chinois (Taïwan), appelé zh-TW, puis <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, et <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> retourne une chaîne vide (« »).</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la culture par défaut pour les threads dans le domaine d'application en cours.</summary>
        <value>Culture par défaut pour les threads dans le domaine d'application en cours, ou <see langword="null" /> si la culture système en cours est la culture du thread par défaut dans le domaine d'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] et les versions précédentes, par défaut, la culture de tous les threads est définie sur la culture du système Windows. Pour les applications dont la culture actuelle est différente de la culture du système par défaut, ce comportement n’est souvent pas souhaitable. Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété permet à une application définir la culture par défaut de tous les threads dans un domaine d’application.  
  
> [!IMPORTANT]
>  Si vous n’avez pas explicitement défini à la culture d’existants threads de l’exécution dans un domaine d’application, en définissant le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété modifie également la culture de ces threads. Toutefois, si ces threads s’exécutent dans un autre domaine d’application, leur culture est définie par le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété dans ce domaine d’application ou, si aucune valeur par défaut n’est définie, par la culture du système par défaut. Pour cette raison, nous vous recommandons de toujours définissez explicitement la culture du thread de votre application principale et ne reposent pas sur le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété pour définir la culture du thread principal de l’application.  
  
 Sauf si elle est définie explicitement, la valeur de la <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> propriété est `null`, et la culture de threads dans un domaine d’application qui n’ont pas reçu d’une culture explicite est définie par la culture du système Windows par défaut.  
  
 Pour plus d’informations sur les cultures, les threads et les domaines d’application, consultez la section « Culture et threads » et « Culture et les domaines d’application « sections dans le <xref:System.Globalization.CultureInfo> page de référence.  
  
   
  
## Examples  
 L’exemple suivant illustre le comportement par défaut du .NET Framework dans la définition de la culture actuelle d’un nouveau thread. Au démarrage, l’exemple définit la culture actuelle et la culture d’interface utilisateur actuelle sur Français (France) sur tous les systèmes, à l’exception de celles pour lesquelles la culture du système par défaut est déjà Français (France). Si la culture du système par défaut est déjà Français (France), le code définit la culture actuelle et la culture d’interface utilisateur actuelle sur anglais (États-Unis). Il appelle ensuite la `DisplayRandomNumbers` routine, ce qui génère trois nombres aléatoires et les affiche sous forme de valeurs monétaires. Ensuite, il crée un nouveau thread qui exécute également le `DisplayRandomNumbers` routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 Comme le montre la sortie de l’exemple, lorsque l’exemple est exécuté sur un ordinateur dont la culture système est anglais (États-Unis), le thread principal affiche ses valeurs de devise en respectant les conventions de mise en forme de la culture Français (France). Toutefois, étant donné que la culture du thread de travail est dérivée de la culture actuelle du système Windows plutôt que de culture actuelle de l’application, le thread de travail affiche ses valeurs de devise en respectant les conventions de mise en forme de la culture anglais (États-Unis).  
  
 L’exemple suivant utilise le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés pour définir la culture actuelle et la culture d’interface utilisateur actuelle d’un nouveau thread de l’application. Au démarrage, l’exemple définit la culture actuelle et la culture d’interface utilisateur actuelle sur Français (France) sur tous les systèmes, à l’exception de celles pour lesquelles la culture du système par défaut est déjà Français (France). Si la culture du système par défaut est déjà Français (France), elle définit la culture actuelle et la culture d’interface utilisateur actuelle sur anglais (États-Unis). Il appelle ensuite la `DisplayRandomNumbers` routine, ce qui génère trois nombres aléatoires et les affiche sous forme de valeurs monétaires. Ensuite, il crée un nouveau thread qui exécute également le `DisplayRandomNumbers` routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 Comme le montre la sortie de l’exemple, lorsque l’exemple est exécuté sur un ordinateur dont la culture système est anglais (États-Unis), le thread principal et le thread de travail affichent leurs valeurs de devise en respectant les conventions de mise en forme de la culture Français (France).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la culture de l'interface utilisateur par défaut pour les threads dans le domaine d'application actuel.</summary>
        <value>Culture de l'interface utilisateur par défaut pour les threads dans le domaine d'application actuel, ou <see langword="null" /> si la culture de l'interface utilisateur du système actuelle est la culture de l'interface utilisateur du thread par défaut dans le domaine d'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] et les versions précédentes, par défaut, la culture d’interface utilisateur de tous les threads est définie sur la culture du système Windows. Pour les applications dont la culture actuelle l’interface utilisateur diffère de la culture du système par défaut, ce comportement n’est souvent pas souhaitable. Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété vous permet de définir la culture d’interface utilisateur par défaut de tous les threads dans un domaine d’application.  
  
> [!IMPORTANT]
>  Si vous n’avez pas explicitement défini la culture d’interface utilisateur existants threads de l’exécution dans un domaine d’application, en définissant le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété modifie également la culture de ces threads. Toutefois, si ces threads s’exécutent dans un autre domaine d’application, leur culture est définie par le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété dans ce domaine d’application ou, si aucune valeur par défaut n’est définie, par la culture du système par défaut. Pour cette raison, nous vous recommandons de toujours explicitement définissez la culture de votre thread principal de l’application et ne reposent pas sur le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété pour définir la culture du thread principal de l’application.  
  
 Sauf si elle est définie explicitement, la valeur de la <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriété est `null`, et la culture actuelle de tous les threads dans un domaine d’application qui n’ont pas reçu d’une culture explicite est définie par la culture du système Windows par défaut.  
  
 Pour plus d’informations sur les cultures, les threads et les domaines d’application, consultez la section « Culture et threads » et « Culture et les domaines d’application « sections dans le <xref:System.Globalization.CultureInfo> page de référence.  
  
   
  
## Examples  
 L’exemple suivant illustre le comportement par défaut du .NET Framework dans la définition de la culture actuelle d’un nouveau thread. Il utilise des ressources de langue anglaise et russe. Le fichier texte suivant, nommé GreetingStrings.txt contienne les ressources de langue anglaise :  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 Il est compilé dans un fichier .resources binaire nommé GreetingStrings.resources à l’aide de la [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) avec la commande suivante.  
  
```console  
resgen greetingstrings.txt  
```  
  
 Le fichier texte suivant, nommé GreetingStrings.ru-RU.txt contienne les ressources de langue russe :  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 Il est compilé dans un fichier .resources binaire nommé GreetingStrings.ru-RU.resources à l’aide de la [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) avec la commande suivante.  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 Le code d’application, ce qui est illustré ci-dessous, se trouve dans un fichier nommé Example1.cs ou Example1.vb. Il est compilé à un fichier exécutable à l’aide de la commande suivante pour le compilateur Visual Basic :  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 Pour le compilateur c#, la commande est similaire :  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 Cette opération crée un assembly qui inclut de code exécutable l’exemple avec les ressources de sa culture de secours. Vous pouvez également utiliser le [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) pour créer le fichier de ressources pour la culture Russe (Russie) avec la commande suivante :  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 Au démarrage, l’exemple définit la culture actuelle et la culture d’interface utilisateur actuelle en russe (Russie) sur tous les systèmes, à l’exception de ceux sur lesquels la culture du système par défaut est déjà russe (Russie). Si la culture du système par défaut est déjà russe (Russie), le code définit la culture actuelle et l’interface utilisateur actuelle de culture pour l’anglais (États-Unis). Il appelle ensuite la `ShowGreeting` routine qui affiche une chaîne simple, la première fois qu’elle est appelée et une chaîne légèrement différente sur les appels de méthode suivants. Ensuite, il crée un nouveau thread qui exécute également le `ShowGreeting` routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 Comme le montre la sortie de l’exemple, lorsque l’exemple est exécuté sur un ordinateur dont la culture système est anglais (États-Unis), le thread principal affiche sa chaîne initiale en russe. Toutefois, étant donné que la culture du thread de travail est dérivée de la culture actuelle du système Windows plutôt que de culture actuelle de l’application, le thread de travail affiche sa chaîne en anglais.  
  
 L’exemple suivant utilise le <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> et <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> propriétés pour définir la culture actuelle et la culture d’interface utilisateur actuelle d’un nouveau thread de l’application.  
  
 L’exemple utilise les mêmes fichiers de ressources que l’exemple précédent. Les commandes pour compiler et incorporer les ressources de langue russe localisée dans un assembly satellite sont également identiques, sauf que le nom de l’assembly exécutable change.  
  
 Au démarrage, l’exemple définit la culture actuelle et la culture d’interface utilisateur actuelle en russe (Russie) sur tous les systèmes, à l’exception de ceux sur lesquels la culture du système par défaut est déjà russe (Russie). Si la culture du système par défaut est déjà russe (Russie), il définit la culture actuelle et la culture d’interface utilisateur actuelle sur anglais (États-Unis). Il appelle ensuite la `ShowGreeting` routine qui affiche une chaîne simple, la première fois qu’elle est appelée et une chaîne légèrement différente sur les appels de méthode suivants. Ensuite, il crée un nouveau thread qui exécute également le `ShowGreeting` routine.  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 Comme le montre la sortie de l’exemple, lorsque l’exemple est exécuté sur un ordinateur dont la culture système est anglais (États-Unis), le thread principal et le thread de travail affichent leurs chaînes dans la langue russe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Dans une opération ensembliste, la valeur de propriété <see cref="P:System.Globalization.CultureInfo.Name" /> n’est pas valide.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom localisé complet de la culture.</summary>
        <value>Le nom de culture localisé complet dans le format *nom_complet_langue* [*nom_complet_pays/*], où *nom_complet_langue* est le nom complet de la langue et  *pays/région_complet* est le nom complet du pays/région.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété représente le nom localisé de la <xref:System.Globalization.CultureInfo> objet.  
  
 Noms de cultures peuvent varier en raison de l’écriture de scripts ou les conventions de mise en forme. Vous devez utiliser le nom retourné pour l’affichage et ne tente pas de l’analyser.  
  
 Si une culture personnalisée est créée par le biais de la <xref:System.Globalization.CultureAndRegionInfoBuilder> (classe), le <xref:System.Globalization.CultureInfo.DisplayName%2A> propriété est initialisée à la valeur de la <xref:System.Globalization.CultureInfo.NativeName%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant affiche plusieurs propriétés des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les cultures zh-CHS et zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la culture au format *langue_complète* [*pays/région_complet*] en anglais.</summary>
        <value>Le nom de culture au format *nom_complet_langue* [*nom_complet_pays/*] en anglais, où *nom_complet_langue* est le nom complet de la langue et *pays / région_complet* est le nom complet du pays/région.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par exemple, le <xref:System.Globalization.CultureInfo.EnglishName%2A> pour la culture spécifique en-US du nom est « Anglais (États-Unis) ».  
  
 La valeur de cette propriété est le même, quelle que soit la version linguistique du .NET Framework.  
  
   
  
## Examples  
 L’exemple de code suivant affiche plusieurs propriétés des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les anciens zh-CHS et les noms de culture zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objet à comparer au <see cref="T:System.Globalization.CultureInfo" /> actif.</param>
        <summary>Détermine si la culture de l'objet spécifié est identique à celle du <see cref="T:System.Globalization.CultureInfo" /> en cours.</summary>
        <returns><see langword="true" /> si <paramref name="value" /> est la même culture que celle du <see cref="T:System.Globalization.CultureInfo" /> en cours ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode se substitue à <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Deux <xref:System.Globalization.CultureInfo> objets sont considérées comme égales si leurs <xref:System.Globalization.CultureInfo.Name%2A> et <xref:System.Globalization.CultureInfo.CompareInfo%2A> propriétés sont égales.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient une autre culture de l'interface utilisateur qui convient aux applications console lorsque la culture de l'interface utilisateur graphique par défaut est inappropriée.</summary>
        <returns>Autre culture utilisée pour lire et afficher le texte dans la console.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les langages tels que l’arabe, hébreu, Urdu et SYRIAQUE sont basées sur le texte bidirectionnel. Les applications de Windows, qui ont une interface utilisateur graphique, prennent en charge les langues bidirectionnelles. Toutefois, les applications de console, qui emploient l’interface utilisateur de texte de la console de système d’exploitation, ne fournissent pas de prise en charge bidirectionnelle. Par conséquent, si vous localisez une application console en arabe ou en hébreu, votre application affiche un texte illisible sur l’écran de la console.  
  
 La culture d’interface utilisateur spécifie les ressources d’une application doit prendre en charge l’entrée d’utilisateur et de sortie et par défaut est identique à la culture du système d’exploitation. Par exemple, le <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propriété retourne une culture arabe pour un système d’exploitation arabe. Utilisez le <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> méthode pour récupérer une culture appropriée pour une interface utilisateur d’application console. Une fois que votre application récupère la culture d’interface utilisateur de secours, il doit affecter la culture à la culture d’interface utilisateur actuelle du thread actuel. Pour plus d’informations, consultez la section « Explicitement paramètre l’interface utilisateur Culture actuelle » de la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propriété.  
  
 Cultures prédéfinies qui ont un nom de culture d’interface utilisateur de secours différent du nom de culture prédéfinis sont les suivantes :  
  
|Cultures prédéfinis|Nom de culture|Nom de culture d’interface utilisateur de secours|  
|------------------------|------------------|------------------------------------------|  
|Amharic|am|fr-FR|  
|Amharique (Éthiopie)|h-ET|fr-FR|  
|(arabe neutre)|ar|fr-FR|  
|Arabe (Émirats Arabes Unis)|ar-AE|fr-FR|  
|Arabe (Bahreïn)|ar-BH|fr-FR|  
|Arabe (Algérie)|ar-DZ|fr-FR|  
|Arabe (Égypte)|ar-EG|fr-FR|  
|Arabe (Irak)|ar-IQ|fr-FR|  
|Arabe (Jordanie)|ar-JO|fr-FR|  
|Arabe (Koweït)|ar-KW|fr-FR|  
|Arabe (Liban)|ar-LB|fr-FR|  
|Arabe (Libye)|ar-EP|fr-FR|  
|Arabe (Maroc)|ar-MA|fr-FR|  
|Arabe (Oman)|ar-OM|fr-FR|  
|Arabe (Qatar)|assurance qualité ar|fr-FR|  
|Arabe (Arabie Saoudite)|ar-SA|fr-FR|  
|Arabe (Syrie)|ar-SY|fr-FR|  
|Arabe (Tunisie)|ar-TN|fr-FR|  
|Arabe (Yémen)|ar-YE|fr-FR|  
|Assamese|as|fr-FR|  
|Assamais (Inde)|as-IN|fr-FR|  
|Bangla|bn|fr-FR|  
|Bangla (Bangladesh)|bn-BD|fr-FR|  
|Bengali (Inde)|bn-IN|fr-FR|  
|Tibétain|bo|fr-FR|  
|Tibétain (RPC)|bo-CN|fr-FR|  
|Divehi|dv|fr-FR|  
|Maldivien (Inde)|dv-MV|fr-FR|  
|Perse|fa|fr-FR|  
|Persan (Iran)|fa-IR|fr-FR|  
|Gujarati|gu|fr-FR|  
|Goudjrati (Inde)|gu-IN|fr-FR|  
|Hébreu|he|fr-FR|  
|Hébreu (Israël)|he-IL|fr-FR|  
|Hindi|hi|fr-FR|  
|Hindi (Inde)|hi-IN|fr-FR|  
|YI|ii|fr-FR|  
|YI (RPC)|ii-CN|fr-FR|  
|Inukitut CANADIENNE|iu-Cans|fr-FR|  
|Inukitut canadienne (Canada)|iu-Cans-CA|fr-FR|  
|Khmer|km|fr-FR|  
|KHMER (Cambodge)|km-KH|fr-FR|  
|Kannada|kn|fr-FR|  
|Kannada (Inde)|kN-IN|fr-FR|  
|Konkani|kok|fr-FR|  
|Konkani (Inde)|kok-IN|fr-FR|  
|Lao|LO|fr-FR|  
|Lao (RDP lao)|lo-LA|fr-FR|  
|Malayalam|ml|fr-FR|  
|Malayalam (Inde)|ml-IN|fr-FR|  
|Mohawk|moh|fr-FR|  
|Mohawk (Canada)|moh-CA|fr-FR|  
|Marathi|mr|fr-FR|  
|Marathe (Inde)|mr-IN|fr-FR|  
|Népalais|ne|fr-FR|  
|Népalais (Népal)|Nou-NP|fr-FR|  
|Norvégien|Non|nb-NO|  
|Odiya|ou|fr-FR|  
|Odiya (Inde)|ou-IN|fr-FR|  
|Punjabi|pa|fr-FR|  
|Pendjabi (Inde)|PA-IN|fr-FR|  
|Dari|demandes de tirage|fr-FR|  
|Dari (Afghanistan)|prs-AF|fr-FR|  
|Pachto|ps|fr-FR|  
|Pachtou (Afghanistan)|ps-AF|fr-FR|  
|Sanskrit|sa|fr-FR|  
|Sanskrit (Inde)|sa-IN|fr-FR|  
|Sinhala|si|fr-FR|  
|Cinghalais (Sri Lanka)|si-LK|fr-FR|  
|Syriaque|SYR|fr-FR|  
|SYRIAQUE (Syrie)|SY SYR|fr-FR|  
|Tamoul|ta|fr-FR|  
|Tamoul (Inde)|TA-IN|fr-FR|  
|Télougou|te|fr-FR|  
|TÉLOUGOU (Inde)|te-IN|fr-FR|  
|Thaï|th|fr-FR|  
|Thaï (Thaïlande)|th-Th|fr-FR|  
|OUÏGOUR|groupe d’utilisateurs|fr-FR|  
|Ouïgour (RPC)|ug-CN|fr-FR|  
|Ourdou|votre|fr-FR|  
|Urdu (Pakistan)|votre clé primaire / clé|fr-FR|  
|Vietnamien|vi|fr-FR|  
|Vietnamien (Vietnam)|vi-VN|fr-FR|  
  
 Votre application peut utiliser <xref:System.Globalization.CultureAndRegionInfoBuilder> pour créer un remplacement pour une culture et cette culture peuvent avoir une culture de secours de console de votre choix.  
  
   
  
## Examples  
 L’exemple de code suivant affiche la culture d’interface utilisateur de secours associée à un objet de culture.  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Récupère l'instance mise en cache et en lecture seule d'une culture.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="culture">Identificateur de paramètres régionaux (LCID).</param>
        <summary>Récupère une instance mise en cache et en lecture seule d'une culture à l'aide de l'identificateur de culture spécifié.</summary>
        <returns>Objet <see cref="T:System.Globalization.CultureInfo" /> en lecture seule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nous vous recommandons d’utiliser la surcharge de chaîne de cette méthode (<xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29>), car les noms de paramètres régionaux doivent être utilisées au lieu de LCID. Pour les paramètres régionaux personnalisés, le nom de paramètres régionaux est obligatoire.  
  
 Si `culture` est l’identificateur de paramètres régionaux de la culture actuelle, retournée <xref:System.Globalization.CultureInfo> objet ne reflète pas les substitutions d’utilisateur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> est inférieur à zéro.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> spécifie une culture qui n’est pas prise en charge. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="culture" /> n’est pas un identificateur de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], cette méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="culture" /> du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture, le méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom d'une culture. <paramref name="name" /> ne respecte pas la casse.</param>
        <summary>Récupère l'instance mise en cache et en lecture seule d'une culture à l'aide du nom de culture spécifié.</summary>
        <returns>Objet <see cref="T:System.Globalization.CultureInfo" /> en lecture seule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la liste des noms de cultures prédéfinis, consultez la [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement. En outre, en commençant par Windows 10, `name` peut être n’importe quelle balise de langue BCP-47 valide.  
  
 Le <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> méthode récupère une mise en cache, en lecture seule <xref:System.Globalization.CultureInfo> objet. Il offre de meilleures performances qu’un appel correspondant à la <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> constructeur.  
  
 Si `name` est le nom de la culture actuelle, retourné <xref:System.Globalization.CultureInfo> objet ne reflète pas les substitutions d’utilisateur. Cela rend la méthode appropriée pour les applications de serveur ou des outils qui n’ont pas un compte d’utilisateur réel sur le système et qui doivent charger plusieurs cultures efficacement.  
  
 Si `name` est <xref:System.String.Empty?displayProperty=nameWithType>, la méthode retourne la culture dite indifférente. Cela équivaut à la récupération de la valeur de la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> spécifie une culture qui n’est pas prise en charge. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="name" /> n’est pas un nom de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], cette méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="name" /> à partir du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture et si <paramref name="name" /> n’est pas le nom d’une culture supplémentaire ou de remplacement, la méthode lève une exception une <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="altName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom d'une culture. <paramref name="name" /> ne respecte pas la casse.</param>
        <param name="altName">Nom d'une culture qui fournit les objets <see cref="T:System.Globalization.TextInfo" /> et <see cref="T:System.Globalization.CompareInfo" /> utilisés pour initialiser <paramref name="name" />. <paramref name="altName" /> ne respecte pas la casse.</param>
        <summary>Récupère l'instance mise en cache et en lecture seule d'une culture. Les paramètres spécifient une culture qui est initialisée avec les objets <see cref="T:System.Globalization.TextInfo" /> et <see cref="T:System.Globalization.CompareInfo" /> spécifiés par une autre culture.</summary>
        <returns>Objet <see cref="T:System.Globalization.CultureInfo" /> en lecture seule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la liste des noms de cultures prédéfinis, consultez la [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement. En outre, en commençant par Windows 10, `name` peut être n’importe quelle balise de langue BCP-47 valide.  
  
 Le <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> méthode obtient une mise en cache, en lecture seule <xref:System.Globalization.CultureInfo> objet. Il offre de meilleures performances qu’un appel correspondant à un <xref:System.Globalization.CultureInfo.%23ctor%2A> constructeur. La méthode est utilisée pour créer une culture semblable à celle spécifiée par la `name` paramètre, mais avec le tri et de casse différentes règles.  
  
 Si `name` ou `altName` est le nom de la culture actuelle, les objets retournés ne reflètent pas les substitutions d’utilisateur. Si `name` est <xref:System.String.Empty?displayProperty=nameWithType>, la méthode retourne la culture dite indifférente. Cela équivaut à la récupération de la valeur de la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété. Si `altName` est <xref:System.String.Empty?displayProperty=nameWithType>, la méthode utilise le système d’écriture et de comparaison règles spécifiées par la culture dite indifférente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> ou <paramref name="altName" /> est null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ou <paramref name="altName" /> spécifie une culture qui n’est pas pris en charge. Pour plus d’informations, consultez la section Remarques à l’attention des appelants.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="name" /> ou <paramref name="altName" /> n’est pas un nom de culture valide. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], cette méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" />. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="name" /> à partir du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture et si <paramref name="name" /> n’est pas le nom d’une culture supplémentaire ou de remplacement, la méthode lève une exception une <see cref="T:System.Globalization.CultureNotFoundException" /> exception. À partir des applications qui s’exécutent sous le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ou version ultérieure sur Windows 7 ou version ultérieure, la méthode tente de récupérer un <see cref="T:System.Globalization.CultureInfo" /> objet dont l’identificateur est <paramref name="name" /> à partir du système d’exploitation ; si le système d’exploitation ne prend pas en charge cette culture et si <paramref name="name" /> n’est pas le nom d’une culture supplémentaire ou de remplacement, la méthode lève une exception une <see cref="T:System.Globalization.CultureNotFoundException" /> exception.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom d'une langue tel que spécifié par la norme RFC 4646.</param>
        <summary>Obsolète. Récupère un objet <see cref="T:System.Globalization.CultureInfo" /> en lecture seule ayant des caractéristiques linguistiques identifiées par la balise de langue RFC 4646 spécifiée.</summary>
        <returns>Objet <see cref="T:System.Globalization.CultureInfo" /> en lecture seule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Cette méthode et la <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> propriété sont déconseillés. Au lieu d’utiliser ces éléments, l’application doit utiliser un nouveau <xref:System.Globalization.CultureInfo> objet et les appels à la <xref:System.Globalization.CultureInfo.Name%2A> propriété. Balises de l’IETF et les noms sont identiques.  
  
 La norme RFC 4646 gérée par Internet Engineering Task Force (IETF) définit une balise de langue IETF, ce qui permet d’identifier les langues de manière uniforme. Le format d’une balise de langue IETF est le même que le nom de culture retourné par la <xref:System.Globalization.CultureInfo.Name%2A> propriété, mais n’identifie ne pas une culture de manière unique. Des cultures différentes partagent la même balise de langue IETF si elles ont des caractéristiques linguistiques identiques. Les caractéristiques linguistiques d’une culture sont contenues dans le <xref:System.Globalization.TextInfo> objet associé à un <xref:System.Globalization.CultureInfo> objet.  
  
 Une balise de langue IETF se compose d’un identificateur de langue obligatoire, un identificateur de script facultatif et un identificateur de région facultatif.  
  
 Vos applications doivent utiliser la culture récupérée pour contrôler des tâches spécifiques au langage, telles que la gestion d’un vérificateur d’orthographe ou grammaire. Applications ne doivent pas utiliser la culture récupérée pour contrôler des tâches spécifiques à la culture, telles que le tri de texte ou de mise en forme des heures et dates.  
  
 Pour plus d’informations, consultez la RFC 4646, « balises pour identifier des langages » et la plus récente, Draft-phillips-langtags-05.txt, à [ http://go.microsoft.com/fwlink/?LinkId=100231 ](https://go.microsoft.com/fwlink/?LinkId=100231).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> a la valeur null.</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> ne correspond pas à une culture prise en charge.</exception>
        <block subset="none" type="usage"><para>Le [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] et les versions antérieures lèvent une <see cref="T:System.ArgumentException" /> si <paramref name="name" /> ne correspond pas au nom d’une culture prise en charge. En commençant par le [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], cette méthode lève un <see cref="T:System.Globalization.CultureNotFoundException" />.</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="types">Combinaison d'opérations de bits de valeurs d'énumération qui filtrent les cultures à récupérer.</param>
        <summary>Obtient la liste des cultures prises en charge, filtrées selon le paramètre <see cref="T:System.Globalization.CultureTypes" /> spécifié.</summary>
        <returns>Tableau qui contient les cultures spécifiées par le paramètre <paramref name="types" />. Le tableau de cultures n'est pas trié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.CultureInfo.GetCultures%2A> méthode est généralement appelée avec le `types` paramètre défini sur les valeurs suivantes :  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>, qui retourne toutes les cultures spécifiques.  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>, qui retourne toutes les cultures neutres et la culture dite indifférente.  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>, qui retourne toutes les cultures neutres et spécifiques, les cultures installées dans le système Windows et les cultures personnalisées créées par l’utilisateur.  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>, qui retourne toutes les cultures personnalisées, telles que celles inscrites par le <xref:System.Globalization.CultureAndRegionInfoBuilder> classe. Dans les versions de Windows antérieure à Windows 10, le <xref:System.Globalization.CultureTypes.UserCustomCulture> valeur s’applique à toutes les cultures personnalisées définies par l’utilisateur. À compter de Windows 10, elle s’applique aux cultures système qui ne disposent pas des données culturelles complètes et qui n’ont pas un identificateur local unique, comme indiqué par la <xref:System.Globalization.CultureInfo.LCID%2A> valeur de propriété. Par conséquent, le code suivant retourne des résultats différents lors de l’exécuter sur Windows 10 et sur une version antérieure de Windows.  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 L’exemple de code suivant affiche plusieurs propriétés des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les cultures zh-CHS et zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="types" /> spécifie une combinaison non valide de valeurs <see cref="T:System.Globalization.CultureTypes" />.</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType"><see cref="T:System.Type" /> pour lequel obtenir un objet de mise en forme. Cette méthode prend en charge les types <see cref="T:System.Globalization.NumberFormatInfo" /> et <see cref="T:System.Globalization.DateTimeFormatInfo" /> uniquement.</param>
        <summary>Obtient un objet définissant la mise en forme du type spécifié.</summary>
        <returns>Valeur de la propriété <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> qui est un <see cref="T:System.Globalization.NumberFormatInfo" /> contenant les informations sur le format numérique par défaut pour le <see cref="T:System.Globalization.CultureInfo" /> en cours, si <paramref name="formatType" /> est l'objet <see cref="T:System.Type" /> de la classe <see cref="T:System.Globalization.NumberFormatInfo" />.  
  
ou 
Valeur de la propriété <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> qui est un <see cref="T:System.Globalization.DateTimeFormatInfo" /> contenant les informations sur le format de date et d'heure par défaut pour le <see cref="T:System.Globalization.CultureInfo" /> en cours, si <paramref name="formatType" /> est l'objet <see cref="T:System.Type" /> de la classe <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
ou 
null, si <paramref name="formatType" /> correspond à tout autre objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'objet <xref:System.Globalization.CultureInfo.GetFormat%2A> implémente l'objet <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 `NumberFormatInfo` fournit le format numérique spécifique à la culture utilisé conjointement avec les méthodes de Format dans les types de base de données. `DateTimeFormatInfo` contrôle la façon dont les valeurs de date et d’heure sont mis en forme pour une culture spécifique.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Est utilisé comme fonction de hachage pour le <see cref="T:System.Globalization.CultureInfo" /> en cours et convient aux algorithmes de hachage et aux structures de données, par exemple une table de hachage.</summary>
        <returns>Code de hachage du <see cref="T:System.Globalization.CultureInfo" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode se substitue à <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Cette méthode génère le même code de hachage pour deux objets qui sont égaux selon la méthode <xref:System.Globalization.CultureInfo.Equals%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obsolète. Obtient l'identification d'une langue selon la norme RFC 4646.</summary>
        <value>Chaîne représentant l'identification d'une langue selon la norme RFC 4646.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Cette propriété et la <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A> méthode sont déconseillées. Au lieu de cela, vous devez utiliser une la <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propriété. Balises de l’IETF et les noms sont identiques.  
  
 La norme RFC 4646 gérée par Internet Engineering Task Force (IETF) définit une balise de langue IETF, ce qui permet d’identifier les langues de manière uniforme. Le format d’une balise de langue IETF est semblable au nom de culture retourné par la <xref:System.Globalization.CultureInfo.Name%2A> propriété, mais n’identifie ne pas une culture de manière unique. Autrement dit, des cultures différentes partagent la même balise de langue IETF si elles ont des caractéristiques linguistiques identiques. Les caractéristiques linguistiques d’une culture sont contenues dans le <xref:System.Globalization.TextInfo> objet associé à un <xref:System.Globalization.CultureInfo> objet.  
  
 Une balise de langue IETF se compose d’un identificateur de langue obligatoire, un identificateur de script facultatif et un identificateur de région facultatif.  
  
 Pour plus d’informations, consultez [RFC 5646, « balises pour les langues d’identification](https://go.microsoft.com/fwlink/?LinkId=230876). Pour obtenir la liste de sous-balises, consultez [le Registre de sous-balises de langage IANA](https://go.microsoft.com/fwlink/?LinkId=230877).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Globalization.CultureInfo" /> représentant la culture installée avec le système d'exploitation.</summary>
        <value><see cref="T:System.Globalization.CultureInfo" /> représentant la culture installée avec le système d'exploitation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans un système d’exploitation localisé, par exemple une version japonaise de Windows, cette propriété retourne la culture du système d’exploitation. Cette propriété est l’équivalent de `GetSystemDefaultUILanguage` dans l’API Windows.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet <see cref="T:System.Globalization.CultureInfo" /> indépendant de la culture (indifférent).</summary>
        <value>Obtient qui est indépendant de la culture (indifférent).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La culture dite indifférente est indépendante de la culture ; Il est associé avec la langue anglaise, mais pas avec n’importe quel pays/région. Vous spécifiez la culture dite indifférente par nom à l’aide d’une chaîne vide (« ») dans l’appel à une <xref:System.Globalization.CultureInfo> méthode d’instanciation. <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> récupère également une instance de la culture dite indifférente. Il peut être utilisé dans pratiquement n’importe quelle méthode dans le <xref:System.Globalization> espace de noms qui requiert une culture. Les objets retournés par les propriétés telles que <xref:System.Globalization.CultureInfo.CompareInfo%2A>, <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, et <xref:System.Globalization.CultureInfo.NumberFormat%2A> également refléter la comparaison de chaînes et de mise en forme des conventions de la culture dite indifférente.  
  
 Contrairement aux données de la culture, qui est susceptible d’être modifiée par la personnalisation de l’utilisateur ou par les mises à jour .NET Framework ou le système d’exploitation, les données de la culture dite indifférente sont stables au fil du temps et dans toutes les cultures installées et ne peuvent pas être personnalisées par les utilisateurs. Cela rend la culture dite indifférente particulièrement utile pour les opérations qui requièrent des résultats indépendants de la culture, telles que la mise en forme et les opérations qui persistent d’analyse mis en forme les données, ou de tri et de classement des opérations qui nécessitent que les données affichées dans un ordre fixe, quel que soit la culture.  
  
## <a name="string-operations"></a>Opérations de chaînes  
 Vous pouvez utiliser la culture dite indifférente pour les opérations de chaînes dépendantes de la culture qui ne sont pas affectées par les conventions de la culture du thread actuel et qui sont cohérents dans toutes les cultures. Par exemple, vous souhaiterez données triées pour apparaître dans un ordre fixe ou un ensemble de conventions de casse standard à chaînes indépendamment de la culture du thread actuel. Pour ce faire, vous passez le <xref:System.Globalization.CultureInfo.InvariantCulture%2A> objet à une méthode qui a un <xref:System.Globalization.CultureInfo> paramètre, tel que <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> et <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29>.  
  
## <a name="persisting-data"></a>Conservation des données  
 Le <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propriété peut être utilisée pour conserver les données dans un format indépendant de la culture. Cela fournit un format connu qui ne changent pas et qui peut être utilisé pour sérialiser et désérialiser des données dans toutes les cultures. Une fois que les données sont désérialisées, il peut être formaté correctement selon les conventions culturelles de l’utilisateur actuel.  
  
 Par exemple, si vous choisissez de conserver les données de date et heure sous forme de chaîne, vous pouvez passer le <xref:System.Globalization.CultureInfo.InvariantCulture%2A> de l’objet à la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> méthode pour créer la chaîne et vous pouvez passer le <xref:System.Globalization.CultureInfo.InvariantCulture%2A> de l’objet à la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> ou <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode pour convertir la chaîne à une valeur de date et d’heure. Cette technique garantit que la date sous-jacent et valeurs d’heure ne changent pas lorsque les données sont lues ou écrites par les utilisateurs de cultures différentes.  
  
 L’exemple suivant utilise la culture dite indifférente pour rendre persistant un <xref:System.DateTime> valeur sous forme de chaîne. Il analyse la chaîne et affiche sa valeur en utilisant les conventions de mise en forme du Français (France) et les cultures allemande (Allemagne).  
  
 [!code-csharp[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.InvariantCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb#1)]  
  
## <a name="security-decisions"></a>Décisions de sécurité  
 Si vous apportez une décision de sécurité (par exemple, que ce soit autoriser l’accès à une ressource système) en fonction du résultat d’une comparaison de chaînes ou d’un changement de casse, vous ne devez pas utiliser la culture dite indifférente. Au lieu de cela, vous devez effectuer une comparaison ordinale de la casse ou non en appelant une méthode qui inclut un <xref:System.StringComparison> paramètre et en fournissant une <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> ou <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> en tant qu’argument. Code qui effectue les opérations de chaînes dépendantes de la culture peut entraîner des failles de sécurité si la culture actuelle est modifiée ou si la culture sur l’ordinateur qui exécute le code est différente de la culture qui est utilisée pour tester le code. En revanche, une comparaison ordinale dépend uniquement de la valeur binaire des caractères comparés.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le <see cref="T:System.Globalization.CultureInfo" /> en cours représente une culture neutre.</summary>
        <value><see langword="true" /> si le <see cref="T:System.Globalization.CultureInfo" /> en cours représente une culture neutre ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une culture neutre est une culture qui est associé à une langue, mais pas avec un pays ou une région. Il diffère d’une culture spécifique, ce qui est une culture qui est associée à une langue et un pays ou région. Par exemple, fr est le nom de la culture Français neutre, tandis que fr-FR est le nom de la culture Français en France.  
  
 Si cette propriété retourne `false`, la culture est une culture spécifique ou la culture dite indifférente.  
  
   
  
## Examples  
 L’exemple de code suivant détermine les cultures à l’aide de la langue chinoise sont des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les anciens zh-CHS et les noms de culture zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si le <see cref="T:System.Globalization.CultureInfo" /> en cours est en lecture seule.</summary>
        <value><see langword="true" /> si le <see cref="T:System.Globalization.CultureInfo" /> actuel est en lecture seule ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Globalization.CultureInfo> est en lecture seule, le <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> et <xref:System.Globalization.CultureInfo.NumberFormat%2A> instances sont également en lecture seule.  
  
   
  
## Examples  
 L’exemple de code suivant montre que <xref:System.Globalization.CultureInfo.IsReadOnly%2A> permet également de protéger la <xref:System.Globalization.DateTimeFormatInfo> et <xref:System.Globalization.NumberFormatInfo> instances associées à la <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'identificateur des paramètres régionaux d'entrée actifs.</summary>
        <value>Nombre signé de 32 bits qui spécifie un identificateur de paramètres régionaux d'entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificateur de paramètres régionaux d’entrée était précédemment appelé la disposition du clavier. Un identificateur de paramètres régionaux d’entrée est un concept plus large qu’une disposition du clavier dans la mesure où il peut également indiquer un convertisseur de reconnaissance vocale, un éditeur de méthode d’entrée (IME) ou toute autre forme d’entrée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'identificateur de culture du <see cref="T:System.Globalization.CultureInfo" /> en cours.</summary>
        <value>Identificateur de culture du <see cref="T:System.Globalization.CultureInfo" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans la plupart des cas, l’identificateur de culture est mappé à l’identificateur de paramètres régionaux NLS correspondant.  
  
 Dans les versions de Windows antérieures à Windows 10, l’identificateur de paramètres régionaux `LOCALE_CUSTOM_UNSPECIFIED` (0 x 1000 ou 4096) est affecté à des cultures personnalisées créées par l’utilisateur. À compter de Windows 10, il est affecté à n’importe quelle culture qui n’a pas un identificateur de paramètres régionaux unique et n’a pas de données fournie par le système complet. Par conséquent, le code qui effectue une itération de cultures et extrait celles avec un <xref:System.Globalization.CultureInfo.LCID%2A> valeur `LOCALE_CUSTOM_UNSPECIFIED` retourne un sous-ensemble plus grande de <xref:System.Globalization.CultureInfo> objets si s’exécutent sous Windows 10.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un <xref:System.Globalization.CultureInfo> pour l’espagnol (Espagne) avec l’ordre de tri international et l’autre <xref:System.Globalization.CultureInfo> avec l’ordre de tri traditionnel.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la culture au format *code_langue2*-*code_région/pays2*.</summary>
        <value>Le nom de culture au format *code_langue2*-*code_pays/Région2*. *code_langue2* est un code à deux lettres minuscules dérivé d’ISO 639-1. *code_pays/Région2* est dérivé d’ISO 3166 et se compose généralement de deux lettres majuscules, ou une balise de langue BCP-47.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir la liste des noms de cultures prédéfinis et des identificateurs qui le <xref:System.Globalization.CultureInfo.Name%2A> propriété peut retourner, consultez le [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) au centre de développement. En outre, en commençant par Windows 10, `name` peut être n’importe quelle balise de langue BCP-47 valide. Notez que les noms de culture sont susceptibles d’être modifiées, et qu’ils peuvent également reflètent les noms de cultures personnalisées.  
  
 Le <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propriété suit les normes d’affectation de noms fournis dans le <xref:System.Globalization.CultureInfo> rubrique de la classe. Elle retourne la forme abrégée du nom de culture qui exclut toute indication d’un autre ordre de tri. Par exemple, si vous instanciez un <xref:System.Globalization.CultureInfo> objet à l’aide de la chaîne « de-DE_phoneb » pour refléter l’ordre de tri secondaire, le <xref:System.Globalization.CultureInfo.Name%2A> propriété retourne « de-DE ».  
  
 Pour obtenir le nom complet de la culture, vous devez utiliser le <xref:System.Globalization.CultureInfo.DisplayName%2A>, <xref:System.Globalization.CultureInfo.EnglishName%2A>, ou <xref:System.Globalization.CultureInfo.NativeName%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant affiche plusieurs propriétés des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les anciens zh-CHS et les noms de culture zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la culture, qui est composé de la langue, du pays ou de la région et du script facultatif, pour lesquels la culture est configurée.</summary>
        <value>Nom de la culture composé du nom complet de la langue, du nom complet du pays ou de la région et du script facultatif. Le format est discuté dans la description de la classe <see cref="T:System.Globalization.CultureInfo" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette propriété est le même, quelle que soit la version linguistique du .NET Framework.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un <see cref="T:System.Globalization.NumberFormatInfo" /> qui définit le format d'affichage des nombres, devises et pourcentages approprié pour la culture.</summary>
        <value><see cref="T:System.Globalization.NumberFormatInfo" /> qui définit le format d'affichage des nombres, devises et pourcentages approprié pour la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>Overrides  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true` et la culture spécifiée correspond à la culture actuelle de Windows, le <xref:System.Globalization.CultureInfo> utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété, et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Les valeurs de la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété et le <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété ne sont pas calculées tant que l’utilisateur accède à la propriété. Si l’utilisateur utilise le panneau de configuration pour changer la culture actuelle par une nouvelle culture pendant que l’application est en cours d’exécution et accède ensuite à la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ou <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété, l’application récupère les valeurs par défaut pour la nouvelle culture. pas les substitutions pour la culture d’origine. Pour conserver les substitutions pour la culture actuelle d’origine, l’application doit accéder à la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> et <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriétés avant de modifier la culture actuelle.  
  
   
  
## Examples  
 L’exemple de code suivant montre que CultureInfo.Clone clone également le <xref:System.Globalization.DateTimeFormatInfo> et <xref:System.Globalization.NumberFormatInfo> instances associées à la <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété a la valeur null.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> ou une des propriétés <see cref="T:System.Globalization.NumberFormatInfo" /> est définie et <see cref="T:System.Globalization.CultureInfo" /> est en lecture seule.</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la liste des calendriers pouvant être utilisés par la culture.</summary>
        <value>Tableau de type <see cref="T:System.Globalization.Calendar" /> qui représente les calendriers pouvant être utilisés par la culture représentée par le <see cref="T:System.Globalization.CultureInfo" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Votre application modifie le calendrier utilisé par l’actuel <xref:System.Globalization.CultureInfo> en définissant le <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> propriété du <xref:System.Globalization.CultureInfo.DateTimeFormat%2A>, qui est une instance de la <xref:System.Globalization.DateTimeFormatInfo> classe. Le nouveau calendrier doit être un des calendriers répertoriés dans <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>. <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> inclut également d’autres propriétés qui personnalisent le format de date et heure associées qui <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment déterminer le <xref:System.Globalization.GregorianCalendar> versions prises en charge par la culture.  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Globalization.CultureInfo" /> qui représente la culture parente du <see cref="T:System.Globalization.CultureInfo" /> en cours.</summary>
        <value><see cref="T:System.Globalization.CultureInfo" /> qui représente la culture parente du <see cref="T:System.Globalization.CultureInfo" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les cultures ont une hiérarchie dans laquelle le parent d’une culture spécifique est une culture neutre, le parent d’une culture neutre est le <xref:System.Globalization.CultureInfo.InvariantCulture%2A>et le parent de la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> est la culture dite indifférente lui-même. La culture parente englobe uniquement les informations qui sont communes à ses enfants.  
  
 Si les ressources pour la culture spécifique ne sont pas disponibles dans le système, les ressources de la culture neutre sont utilisés. Si les ressources de la culture neutre ne sont pas disponibles, les ressources incorporées dans l’assembly principal sont utilisés. Pour plus d’informations sur le processus de secours, consultez [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
   
  
## Examples  
 L’exemple de code suivant détermine la culture parente de chaque culture spécifique à l’aide de la langue chinoise.  
  
> [!NOTE]
>  L’exemple affiche les anciens zh-CHS et les noms de culture zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">Objet <see cref="T:System.Globalization.CultureInfo" /> à inclure dans un wrapper.</param>
        <summary>Retourne un wrapper en lecture seule autour de l’objet <see cref="T:System.Globalization.CultureInfo" /> spécifié.</summary>
        <returns>Wrapper <see cref="T:System.Globalization.CultureInfo" /> en lecture seule autour de <paramref name="ci" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce wrapper empêche toute modification de `ci`, ou les objets retournés par le `ci`.<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> et `ci`.<xref:System.Globalization.CultureInfo.NumberFormat%2A> Propriétés.  
  
   
  
## Examples  
 L’exemple suivant montre que le <xref:System.Globalization.CultureInfo.ReadOnly%2A> méthode permet de protéger le <xref:System.Globalization.DateTimeFormatInfo> et <xref:System.Globalization.NumberFormatInfo> instances associées à la <xref:System.Globalization.CultureInfo>.  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ci" /> a la valeur null.</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Globalization.TextInfo" /> définissant le système d'écriture associé à la culture.</summary>
        <value><see cref="T:System.Globalization.TextInfo" /> définissant le système d'écriture associé à la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.CultureInfo.TextInfo%2A> propriété fournit des informations de casse propres à la culture pour les chaînes. Pour effectuer une casse indépendantes de la culture, l’application doit utiliser le <xref:System.Globalization.CultureInfo.TextInfo%2A> propriété du <xref:System.Globalization.CultureInfo.InvariantCulture%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un <xref:System.Globalization.CultureInfo> pour l’espagnol (Espagne) avec l’ordre de tri international et l’autre <xref:System.Globalization.CultureInfo> avec l’ordre de tri traditionnel.  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le code ISO 639-2 de trois lettres correspondant à la langue du <see cref="T:System.Globalization.CultureInfo" /> en cours.</summary>
        <value>Code ISO 639-2 de trois lettres correspondant à la langue du <see cref="T:System.Globalization.CultureInfo" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par exemple, l’abréviation à trois lettres pour l’anglais est « eng ».  
  
> [!NOTE]
>  Lorsque la communication entre processus ou données persistantes, il est généralement préférable d’utiliser la version complète <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. À l’aide de la langue uniquement peut perdre de contexte et des données.  
  
   
  
## Examples  
 L’exemple de code suivant affiche plusieurs propriétés des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les anciens zh-CHS et les noms de culture zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le code de trois lettres correspondant à la langue, tel que défini dans l'API Windows.</summary>
        <value>Code de trois lettres correspondant à la langue, tel que défini dans l'API Windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété retourne la même valeur que la méthode d’API de Windows `GetLocaleInfo` avec la valeur LOCALE_SABBREVLANGNAME. Par exemple, le code de trois lettres pour l’anglais (États-Unis) tel que défini dans l’API Windows est « enu ».  
  
> [!NOTE]
>  Lorsque la communication entre processus ou données persistantes, il est généralement préférable d’utiliser la version complète <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. À l’aide de la langue uniquement peut perdre de contexte et des données.  
  
   
  
## Examples  
 L’exemple de code suivant affiche plusieurs propriétés des cultures neutres.  
  
> [!NOTE]
>  L’exemple affiche les anciens zh-CHS et les noms de culture zh-CHT avec les identificateurs de culture 0 x 0004 et 0x7C04, respectivement. Toutefois, vos applications Windows Vista doivent utiliser le nom zh-Hans au lieu de zh-CHS et le nom zh-Hant au lieu de zh-CHT. Le zh-Hans et zh-Hant noms représentent la norme actuelle et doit être utilisés, sauf si vous avez une raison pour utiliser les noms plus anciens.  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne contenant le nom de l’élément <see cref="T:System.Globalization.CultureInfo" /> actuel au format *code_langue2*-*code_région/pays2*.</summary>
        <returns>Chaîne contenant le nom du <see cref="T:System.Globalization.CultureInfo" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode se substitue à <xref:System.Object.ToString%2A?displayProperty=nameWithType>. Elle retourne une version normalisée d’un nom de culture qui est passé à la <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> ou <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> constructeur ou à la <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ou <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> (méthode). Elle normalise la chaîne de résultat par la conversion de caractères dans *code_langue2* aux caractères en minuscules et de conversion *code_pays/Région2* en majuscules si nécessaire.  
  
 Les noms de cultures prédéfinis sont répertoriés dans le [National Language Support (NLS) API Reference](https://go.microsoft.com/fwlink/?LinkId=200048) page au centre de développement.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le code ISO 639-1 de deux lettres correspondant à la langue du <see cref="T:System.Globalization.CultureInfo" /> en cours.</summary>
        <value>Code ISO 639-1 de deux lettres correspondant à la langue du <see cref="T:System.Globalization.CultureInfo" /> en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Par exemple, l’abréviation à deux lettres pour l’anglais est « en ». Le <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> valeur de propriété pour la culture dite indifférente est « iv ».  
  
> [!NOTE]
>  Lorsque la communication entre processus ou données persistantes, il est généralement préférable d’utiliser la version complète <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>. À l’aide de la langue uniquement peut perdre de contexte et des données.  
  
 Si la norme ISO 639-1 ne définit pas un code de langue à deux lettres pour une culture particulière, le <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> propriété retourne une chaîne qui se compose de trois lettres ou plus. Pour plus d’informations, consultez l’exemple.  
  
   
  
## Examples  
 L’exemple suivant répertorie les cultures dont <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> propriété n’est pas constitué d’un code de langue à deux lettres.  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l’élément <see cref="T:System.Globalization.CultureInfo" /> actuel utilise les paramètres de culture sélectionnés par l’utilisateur.</summary>
        <value><see langword="true" /> si le <see cref="T:System.Globalization.CultureInfo" /> en cours utilise les paramètres de culture sélectionnés par l'utilisateur ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’utilisateur peut choisir de substituer certaines des valeurs associées à la culture actuelle de Windows via la partie des options régionales et linguistiques du Panneau de configuration. Par exemple, l’utilisateur peut choisir pour afficher la date dans un format différent ou à utiliser une devise autre que la valeur par défaut pour la culture.  
  
 Si <xref:System.Globalization.CultureInfo.UseUserOverride%2A> est `true` et la culture spécifiée correspond à la culture actuelle de Windows, le <xref:System.Globalization.CultureInfo> utilise ces substitutions, y compris les paramètres utilisateur pour les propriétés de la <xref:System.Globalization.DateTimeFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété, et les propriétés de la <xref:System.Globalization.NumberFormatInfo> instance retournée par la <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo>, par exemple, si le calendrier sélectionné ne fait pas partie de la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, les résultats des méthodes et les valeurs des propriétés ne sont pas définis.  
  
 Cette propriété est définie lorsque le <xref:System.Globalization.CultureInfo> est créé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>