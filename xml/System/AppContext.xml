<Type Name="AppContext" FullName="System.AppContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49517f88a836082c322517cf3be1d6516656af81" /><Meta Name="ms.sourcegitcommit" Value="7555c040bd7cb677d117ddf03e647aa7bf625bfc" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/08/2019" /><Meta Name="ms.locfileid" Value="65440897" /></Metadata><TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <TypeSignature Language="F#" Value="type AppContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des membres pour définir et récupérer des données sur le contexte d'une application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.AppContext> classe permet aux auteurs de bibliothèque de fournir un mécanisme d’annulations uniforme des nouvelles fonctionnalités pour les utilisateurs. Elle établit un contrat souple entre les composants pour la communication des demandes de désactivation. Cette fonctionnalité est particulièrement importante quand une modification est apportée aux fonctionnalités existantes. À l'inverse, il existe déjà une activation implicite des nouvelles fonctionnalités.  
  
## <a name="appcontext-for-library-developers"></a>AppContext pour les développeurs de bibliothèque  
 Bibliothèques utilisent le <xref:System.AppContext> bascule de classe pour définir et exposer la compatibilité, tandis que les utilisateurs de bibliothèque peuvent définir ces commutateurs pour affecter le comportement de la bibliothèque. Par défaut, les bibliothèques fournissent la nouvelle fonctionnalité et ne peuvent la modifier (c'est-à-dire fournir la version antérieure) que si le commutateur est défini.  Cela permet aux bibliothèques fournir un nouveau comportement pour une API existante tout en continuant à prendre en charge les appelants qui varient selon le comportement précédent.  
  
### <a name="defining-the-switch-name"></a>Définir le nom du commutateur  
 La méthode la plus courante pour permettre aux consommateurs de votre bibliothèque de refuser à un changement de comportement consiste à définir un commutateur nommé.  Son `value` élément est une paire nom/valeur qui se compose du nom d’un commutateur et ses <xref:System.Boolean> valeur.  Par défaut, le commutateur est toujours implicitement `false`, qui fournit le nouveau comportement (et rend le nouveau comportement opt-in par défaut). Définissant le commutateur avec `true` lui permet, qui fournit le comportement hérité. Explicitement en définissant le commutateur avec `false` fournit également le nouveau comportement.  
  
 Il est préférable d’utiliser un format cohérent pour les noms de commutateur, puisqu’il s’agit d’un contrat formel exposé par une bibliothèque. Voici les deux formats évidents.  
  
-   *Commutateur*.*espace de noms*.*nom_commutateur*  
  
-   *Commutateur*.*bibliothèque*.*nom_commutateur*  
  
 Une fois que vous définissez et documentez le commutateur, les appelants peuvent l’utiliser à l’aide du Registre, en ajoutant un [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) élément dans leur fichier de configuration d’application, ou en appelant le <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> méthode par programmation. Consultez le [AppContext pour les consommateurs de la bibliothèque](#ForConsumers) section pour plus d’informations sur la façon dont les appelants utiliser et définir la valeur de <xref:System.AppContext> changements de configuration.  
  
 Lorsque le common language runtime exécute une application, il lit les paramètres de compatibilité du Registre automatiquement et charge le fichier de configuration d’application afin de renseigner l’application <xref:System.AppContext> instance. Étant donné que le <xref:System.AppContext> instance est remplie par programmation à l’appelant ou par le runtime, vous n’avez pas à intervenir, comme l’appel la <xref:System.AppContext.SetSwitch%2A> méthode, pour configurer le <xref:System.AppContext> instance.  
  
### <a name="checking-the-setting"></a>Le paramètre de vérification de la  
 Vous pouvez ensuite vérifier si un consommateur a déclaré la valeur du commutateur et act de manière appropriée en appelant le <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> (méthode). La méthode retourne `true` si le `switchName` argument se trouve, et lorsque la méthode est retournée, ses `isEnabled` argument indique la valeur du commutateur.  Dans le cas contraire, la méthode retourne `false`.  
  
### <a name="an-example"></a>Exemple  
 L’exemple suivant illustre l’utilisation de la <xref:System.AppContext> classe pour permettre au client choisir le comportement d’origine d’une méthode de bibliothèque.   Voici la version 1.0 d’une bibliothèque nommée `StringLibrary`. Il définit un `SubstringStartsAt` méthode qui effectue une comparaison ordinale pour déterminer l’index de départ d’une sous-chaîne dans une chaîne plus grande.  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 L’exemple suivant utilise ensuite la bibliothèque pour rechercher l’index de départ de la sous-chaîne « archæ » dans « L’archaeologist ». Étant donné que la méthode effectue une comparaison ordinale, la sous-chaîne est introuvable.  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 Toutefois, modification de la version 2 de la bibliothèque, le `SubstringStartsAt` méthode à utiliser la comparaison dépendante de la culture.  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 Lorsque l’application est recompilée à exécuter sur la nouvelle version de la bibliothèque, il signale désormais que la sous-chaîne « archæ » située à l’index 4 dans « L’archaeologist ».  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 Cette modification peut être empêchée de s’arrêter les applications qui reposent sur le comportement d’origine en définissant un [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) basculer. Dans ce cas, le commutateur est nommé `StringLibrary.DoNotUseCultureSensitiveComparison`. Sa valeur par défaut, `false`, indique que la bibliothèque doit effectuer sa comparaison dépendante de la culture de version 2.0. `true` Indique que la bibliothèque doit effectuer sa comparaison ordinale version 1.0.  Une légère modification du code précédent permet au consommateur de la bibliothèque définir le commutateur pour déterminer le type de comparaison, que la méthode effectue.  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 Si l’application peut ensuite utiliser le fichier de configuration suivant pour restaurer le comportement de la version 1.0.  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 Lorsque l’application est exécutée avec le fichier de configuration présents, il génère la sortie suivante :  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a>AppContext pour les consommateurs de bibliothèque  
 Si vous êtes le consommateur d’une bibliothèque, le <xref:System.AppContext> classe vous permet de tirer parti d’une bibliothèque ou mécanisme de désactivation de la méthode bibliothèque des nouvelles fonctionnalités.   Les méthodes individuelles de la bibliothèque de classes que vous appelez définissent les commutateurs particuliers qui activent ou désactivent un nouveau comportement. La valeur du commutateur est une valeur booléenne. S’il s’agit `false`, qui est généralement la valeur par défaut, le nouveau comportement est activé ; si elle est `true`, le nouveau comportement est désactivé, et le membre se comporte comme elle le faisait auparavant.  
  
 Vous pouvez définir la valeur d’un commutateur de quatre manières :  
  
-   En appelant le <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> méthode dans votre code.  Le `switchName` argument définit le nom du commutateur et le `isEnabled` propriété définit la valeur du commutateur. Étant donné que <xref:System.AppContext> est une classe statique, il est disponible sur une base par domaine d’application.  
  
     Appel de la <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> a une portée de l’application ; autrement dit, elle affecte uniquement l’application.  
  
-   En ajoutant un `<AppContextSwitchOverrides>` élément à la [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section de votre fichier app.config. Le commutateur a un attribut unique, `value`, dont la valeur est une chaîne qui représente une paire clé/valeur contenant le nom du commutateur et sa valeur.  
  
     Pour définir plusieurs commutateurs, séparez la paire clé/valeur de chaque commutateur dans le [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) l’élément `value` attribut par un point-virgule. Dans ce cas, le `<AppContextSwitchOverrides>` élément a le format suivant :  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     À l’aide de la `<AppContextSwitchOverrides>` élément pour définir un paramètre de configuration a une portée de l’application ; autrement dit, elle affecte uniquement l’application.  

    > [!NOTE]    
    > Pour plus d’informations sur les commutateurs définis par le .NET Framework, consultez le [ \<AppContextSwitchOverrides > élément](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md).

-   En ajoutant une valeur de chaîne dont le nom est le nom du commutateur à la `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` clé dans le Registre. Sa valeur doit être la représentation sous forme de chaîne d’un <xref:System.Boolean> qui peut être analysé par le <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> méthode ; autrement dit, il doit être le « True », « true », « False » ou « false ». Si l’exécution rencontre une autre valeur, il ignore le commutateur.  
  
     À l’aide du Registre pour définir un <xref:System.AppContext> commutateur a la portée de l’ordinateur ; autrement dit, elle affecte toutes les applications en cours d’exécution sur l’ordinateur.  

- Pour les applications ASP.NET, vous ajoutez un [ \<Ajouter >](~/docs/framework/configure-apps/file-schema/appsettings/add-element-for-appsettings.md) élément à la [ \<appSettings >](~/docs/framework/configure-apps/file-schema/appsettings/index.md) section du fichier web.config. Exemple :

   ```xml
   <appSettings>
      <add key="AppContext.SetSwitch:switchName1" value="switchValue1" />
      <add key="AppContext.SetSwitch:switchName2" value="switchValue2" />
   </appSettings>
   ```
   
 Si vous définissez le même commutateur dans plusieurs façons, l’ordre de priorité pour déterminer quel paramètre remplace les autres est :  
  
1.  La définition par programmation.  
  
2.  Le paramètre dans le fichier de configuration d’application ou le fichier web.config.  
  
3.  Le paramètre de Registre.  
  
 Ce qui suit est une application simple qui transmet un URI de fichier pour le <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> (méthode).  Lors de l’exécution sous le .NET Framework 4.6, elle lève une <xref:System.ArgumentException> car `file://` n’est plus une partie d’un chemin de fichier valide.  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 Pour restaurer le comportement précédent de la méthode et empêcher l’exception, vous pouvez ajouter la `Switch.System.IO.UseLegacyPathHandling` basculer vers le fichier de configuration d’application pour l’exemple :  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a>Voir aussi
[Commutateur appcontext la valeur](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/1eb2fae3-de4b-45b6-852f-517c39b751bd">&lt;runtime&gt; élément</related>
    <related type="Article" href="https://msdn.microsoft.com/library/4ce07f47-7ddb-4d91-b067-501bd8b88752">&lt;AppContextSwitchOverrides&gt; élément</related>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppContext.BaseDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de chemin du répertoire de base qu’utilise le service de résolution d’assembly pour détecter les assemblys.</summary>
        <value>Nom de chemin du répertoire de base qu’utilise le service de résolution d’assembly pour détecter les assemblys.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il s’agit d’une par propriété de domaine d’application. Sa valeur correspond à la <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> propriété du domaine d’application actuel.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetData : string -&gt; obj" Usage="System.AppContext.GetData name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l'élément de données.</param>
        <summary>Retourne la valeur de l’élément de données nommé attribué au domaine d’application actuel.</summary>
        <returns>La valeur de <paramref name="name" />, si <paramref name="name" /> identifie une valeur nommée ; sinon <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberSignature Language="F#" Value="static member SetSwitch : string * bool -&gt; unit" Usage="System.AppContext.SetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">Nom du commutateur.</param>
        <param name="isEnabled">Valeur du commutateur.</param>
        <summary>Définit la valeur d’un commutateur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.AppContext> classe permet aux auteurs de bibliothèque de fournir un mécanisme d’annulations uniforme des nouvelles fonctionnalités pour les utilisateurs. Elle établit un contrat souple entre les composants pour la communication des demandes de désactivation. Cette fonctionnalité est particulièrement importante quand une modification est apportée aux fonctionnalités existantes. À l'inverse, il existe déjà une activation implicite des nouvelles fonctionnalités.  
  
 Le <xref:System.AppContext.SetSwitch%2A> méthode est appelée par une application (ou une bibliothèque) pour déclarer la valeur d’un commutateur (qui est toujours un <xref:System.Boolean> valeur) qui définit une bibliothèque dépendante. Le commutateur est toujours implicitement `false`, qui fournit le nouveau comportement. Définissant le commutateur avec `true` lui permet, qui fournit le comportement hérité. Explicitement en définissant le commutateur avec `false` fournit également le nouveau comportement. La bibliothèque dépendante peut vérifier ensuite la valeur du commutateur en appelant le <xref:System.AppContext.TryGetSwitch%2A> (méthode).  
  
> [!NOTE]
> Il est préférable d’utiliser un format cohérent pour les noms de commutateur, puisqu’il s’agit d’un contrat formel exposé par une bibliothèque. Voici les deux formats évidents.  
>   
> -   *Commutateur*.*espace de noms*.*nom_commutateur*  
> -   *Commutateur*.*bibliothèque*.*nom_commutateur*  
  
 Pour les applications exécutées sur le .NET Framework, outre la définition de la valeur d’un commutateur par programme, elle peut également être définie :  
  
-   En ajoutant le nom du commutateur et la valeur pour le [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) élément dans le [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section d’un fichier de configuration d’application. Par exemple, ce qui suit définit un commutateur nommé `Libraries.FPLibrary.UseExactFloatingPointComparison` dont la valeur est `False`.  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   En ajoutant une valeur de chaîne dont le nom est le nom du commutateur à la `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` clé dans le Registre. Sa valeur doit être la représentation sous forme de chaîne d’un <xref:System.Boolean> qui peut être analysé par le <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> méthode ; autrement dit, il doit être le « True », « true », « False » ou « false ».  
  
 Si `switchName` existe déjà, sa valeur est remplacée par la `isEnabled` argument.  Autrement dit, le dernier appel à la <xref:System.AppContext.SetSwitch%2A> méthode remplace la valeur définie dans le Registre, dans un fichier de configuration d’application, ou par les appels précédents à la <xref:System.AppContext.SetSwitch%2A> (méthode).  
 
 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext.SetSwitch et .NET Core

.NET core prend en charge les appels par programmation avec le <xref:System.AppContext.SetSwitch%2A> méthode uniquement. Les commutateurs suivants sont pris en charge :

|Basculer|Valeurs|Description|
|--|--|--|
|`System.Net.Http.SocketsHttpHandler.Http2Support`|`true` ou `false`|Indique si la prise en charge pour le protocole HTTP/2 est activé (`true`) ou désactivé (`false`). La valeur par défaut est désactivé. Le commutateur doit être défini avant la première utilisation de <xref:System.Net.Http.HttpClient>. Disponible à partir de .NET Core 3.0 Preview 4.|
|`System.Net.Http.useSocketsHttpHandler` |`true` ou `false`|Détermine si la vue mise en réseau telles que les API <xref:System.Net.Http.HttpClient> utiliser <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) ou <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).|   
  
## Examples  
 La ligne de code suivante définit un commutateur nommé `Switch.AmazingLib.ThrowOnException` à `true`, ce qui permet un comportement hérité. La bibliothèque peut ensuite vérifier si un consommateur de bibliothèque a défini la valeur du commutateur en appelant le <xref:System.AppContext.TryGetSwitch%2A> (méthode).  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetFrameworkName : string" Usage="System.AppContext.TargetFrameworkName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la version de framework ciblée par l’application actuelle.</summary>
        <value>Le nom de la version de framework ciblée par l’application actuelle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de la version du framework cible correspond à la valeur de la <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> propriété. Pour obtenir la liste des noms de framework cible pour le .NET Framework, consultez le [ &lt;supportedRuntime&gt; élément](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) élément.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberSignature Language="F#" Value="static member TryGetSwitch : string *  -&gt; bool" Usage="System.AppContext.TryGetSwitch (switchName, isEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">Nom du commutateur.</param>
        <param name="isEnabled">Cette méthode la valeur de <paramref name="switchName" /> si <paramref name="switchName" /> a été trouvé, ou <see langword="false" /> si <paramref name="switchName" /> est introuvable. Ce paramètre est passé sans être initialisé.</param>
        <summary>Tente d’obtenir la valeur d’un commutateur.</summary>
        <returns><see langword="true" /> si <paramref name="switchName" /> a été défini et que l’argument <paramref name="isEnabled" /> contient la valeur du commutateur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.AppContext> classe permet aux auteurs de bibliothèque de fournir un mécanisme d’annulations uniforme des nouvelles fonctionnalités pour les utilisateurs. Elle établit un contrat souple entre les composants pour la communication des demandes de désactivation. Cette fonctionnalité est particulièrement importante quand une modification est apportée aux fonctionnalités existantes. À l'inverse, il existe déjà une activation implicite des nouvelles fonctionnalités.  
  
 Le common language runtime remplit automatiquement les commutateurs affectés à un <xref:System.AppContext> instance en lisant le Registre et le fichier de configuration de l’application. La valeur de ces commutateurs peut ensuite être remplacée et ajouté de nouveaux commutateurs, en appelant le <xref:System.AppContext.SetSwitch%2A> (méthode).  
  
 Une bibliothèque appelle le <xref:System.AppContext.TryGetSwitch%2A> méthode pour vérifier si ses consommateurs ont déclaré la valeur du commutateur et ensuite agissent en conséquence.  Par défaut, si le commutateur n’est pas défini, la nouvelle fonctionnalité est activée... Si le commutateur est défini et sa valeur est `false`, la nouvelle fonctionnalité est également activée. Si sa valeur est `true`, le comportement hérité est activé.  
  
   
  
## Examples  
 L’exemple suivant détermine si un consommateur de bibliothèque a défini un commutateur nommé `Switch.AmazingLib.ThrowOnException`.  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="switchName" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="switchName" /> a la valeur <see cref="F:System.String.Empty" />.</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>