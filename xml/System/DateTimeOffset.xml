<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a46ec7b40fa37bf3284716b81b91167081d06951" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996340" /></Metadata><TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un instant précis, généralement exprimé sous la forme d'une date et d'une heure, par rapport au temps universel (UTC, Universal Time Coordinated).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset> structure inclut un <xref:System.DateTime> valeur, avec un <xref:System.DateTimeOffset.Offset%2A> propriété qui définit la différence entre le cours <xref:System.DateTimeOffset> date / heure et temps universel coordonné (UTC) d’instance. Car elle définit précisément une date et une heure par rapport à l’heure UTC, le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` membre, comme le <xref:System.DateTime> est de la structure. Il représente les dates et heures avec des valeurs dont UTC comprise entre 12:00:00 minuit le 1er janvier 0001 Anno onze heures (ère chrétienne), à 11:59:59 P.M., 31 décembre 9999 apr. J.C. (NOTRE ÈRE).  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 Le composant heure d’un <xref:System.DateTimeOffset> valeur est mesurée en unités de 100 nanosecondes appelées graduations, et une date particulière est le nombre de graduations depuis 12:00 minuit, le 1er janvier 0001 apr. J.C. (NOTRE ÈRE) dans le <xref:System.Globalization.GregorianCalendar> calendrier. Un <xref:System.DateTimeOffset> valeur est toujours exprimée dans le contexte d’un texte explicite ou le calendrier par défaut. Les graduations sont attribuables aux secondes intercalaires ne sont pas incluses dans le nombre total de graduations.  
  
 Bien qu’un <xref:System.DateTimeOffset> valeur inclut un décalage, il n’est pas une structure de données entièrement fuseau horaire prenant en charge. Pendant un décalage UTC est une caractéristique d’un fuseau horaire, elle n’identifie pas clairement un fuseau horaire. Non seulement plusieurs fuseaux horaires partagent le même décalage UTC, mais le décalage d’un fuseau horaire unique change si elle respecte l’heure d’été. Cela signifie que, dès qu’un <xref:System.DateTimeOffset> valeur est dissociée de son fuseau horaire, il ne peut plus être clairement reliée à son fuseau horaire d’origine.  
  
 Étant donné que <xref:System.DateTimeOffset> est une structure, un <xref:System.DateTimeOffset> objet qui a été déclaré mais non initialisé contient les valeurs par défaut pour chacun de ses champs de membre. Cela signifie que son <xref:System.DateTimeOffset.DateTime%2A> propriété est définie sur <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> et son <xref:System.DateTimeOffset.Offset%2A> propriété est définie sur <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Vous pouvez créer un nouveau <xref:System.DateTimeOffset> valeur en appelant une des surcharges de son constructeur, qui sont semblables aux constructeurs surchargés pour la <xref:System.DateTime> structure. Vous pouvez également créer un nouveau <xref:System.DateTimeOffset> valeur en lui assignant un <xref:System.DateTime> valeur. Il s’agit d’une conversion implicite ; Il ne pas exiger un opérateur de cast (en c#) ou l’appel à une méthode de conversion (en Visual Basic). Vous pouvez également initialiser un <xref:System.DateTimeOffset> valeur à partir de la représentation sous forme de chaîne de date et heure en appelant un numéro de l’analyse de méthodes, qui incluent des chaînes statiques <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, et <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 Les membres de la <xref:System.DateTimeOffset> structure fournissent des fonctionnalités dans les domaines suivants :  
  
-   Date et heure arithmétique.  
  
     Vous pouvez ajouter ou soustraire des dates ou des intervalles de temps à partir d’un particulier <xref:System.DateTimeOffset> valeur. Opérations arithmétiques avec des <xref:System.DateTimeOffset> valeurs, contrairement à celles avec <xref:System.DateTime> valeurs, ajustent les différences des offsets d’heure en retournant un résultat. Par exemple, le code suivant utilise <xref:System.DateTime> variables à soustraire l’heure locale actuelle à partir de l’heure UTC actuelle. Le code utilise ensuite <xref:System.DateTimeOffset> variables pour effectuer la même opération. La soustraction avec <xref:System.DateTime> valeurs retourne la différence du fuseau horaire local à l’heure UTC, tandis que la soustraction avec <xref:System.DateTimeOffset> retourne des valeurs <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Opérations de conversion de type.  
  
     Vous pouvez convertir <xref:System.DateTimeOffset> valeurs <xref:System.DateTimeOffset.DateTime%2A> valeurs et vice versa.  
  
-   Opérations de manipulation et d’extraction des temps.  
  
     Vous pouvez extraire la date ou l’heure d’un <xref:System.DateTimeOffset> valeur. Vous pouvez également récupérer la valeur d’un particulier <xref:System.DateTimeOffset> composant, telles que son année ou son mois.  

   > [!NOTE]
   >  Si vous travaillez avec une valeur de graduations que vous souhaitez convertir en un autre intervalle de temps, telles que les minutes ou secondes, vous devez utiliser le <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, ou <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> (constante) pour effectuer la conversion. Par exemple, pour ajouter le nombre de secondes représenté par un nombre spécifié de graduations à la <xref:System.DateTimeOffset.Second%2A> composant d’un <xref:System.DateTimeOffset> valeur, vous pouvez utiliser l’expression `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  

-   Conversion de date et d’heure.  
  
     Vous pouvez convertir tout <xref:System.DateTimeOffset> valeur vers une autre <xref:System.DateTimeOffset> valeur qui représente le même point dans le temps dans un autre fuseau horaire. Toutefois, les règles d’ajustement d’un fuseau horaire sont appliquées uniquement dans le cas de la <xref:System.DateTimeOffset.ToLocalTime%2A> (méthode), qui convertit un <xref:System.DateTimeOffset> valeur à la date et l’heure dans la zone du système local.  
  
-   Comparaison de date et d’heure.  
  
     Vous pouvez déterminer si une particulier <xref:System.DateTimeOffset> valeur est antérieure, identique ou ultérieure à une autre <xref:System.DateTimeOffset> valeur. Avant la comparaison est effectuée, toutes les valeurs sont converties au format UTC.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Choisir entre DateTime, DateTimeOffset, TimeSpan et TimeZoneInfo</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemple : utilitaire de mise en forme .NET Framework 4</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" /> en utilisant la valeur <see cref="T:System.DateTime" /> spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comportement de ce constructeur dépend de la valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de le `dateTime` paramètre :  
  
-   Si la valeur de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, le <xref:System.DateTimeOffset.DateTime%2A> propriété de la nouvelle instance est égale à `dateTime`et le <xref:System.DateTimeOffset.Offset%2A> propriété est égale à <xref:System.TimeSpan.Zero>.  
  
-   Si la valeur de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, le <xref:System.DateTimeOffset.DateTime%2A> propriété de la nouvelle instance est égale à `dateTime`et le <xref:System.DateTimeOffset.Offset%2A> propriété est définie comme égale au décalage de fuseau horaire du système local.  
  
   
  
## Examples  
 L’exemple suivant illustre comment la valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de le `dateTime` paramètre affecte la valeur de date et d’heure retournée par ce constructeur.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure en temps universel coordonné (UTC) qui résultent de l’application du décalage sont antérieures à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La date et l’heure UTC qui résultent de l’application du décalage sont postérieures à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanciation d'un objet DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">Date et heure.</param>
        <param name="offset">Décalage d'heure à partir du temps universel.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" /> en utilisant la valeur <see cref="T:System.DateTime" /> et le décalage spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Comportement de ce constructeur dépend en partie de la valeur de la <xref:System.DateTime.Kind%2A> propriété de le `dateTime` paramètre :  
  
-   Si la valeur de <xref:System.DateTime.Kind%2A> est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, la valeur de la `offset` paramètre doit être 0 ou un <xref:System.ArgumentException> est levée.  
  
-   Si la valeur de <xref:System.DateTime.Kind%2A> est <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, la valeur de la `offset` paramètre doit être égal au décalage du fuseau horaire local par rapport au temps universel coordonné (UTC) pour cette date particulière ou un <xref:System.ArgumentException> est levée.  
  
-   Si la valeur de <xref:System.DateTime.Kind%2A> est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, le `offset` paramètre peut avoir n’importe quelle valeur valide.  
  
   
  
## Examples  
 L’exemple suivant montre comment initialiser un <xref:System.DateTimeOffset> objet avec une date et l’heure et le décalage du fuseau horaire local lorsque ce fuseau horaire n’est pas connu à l’avance.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime.Kind" /> a la valeur <see cref="F:System.DateTimeKind.Utc" /> et <paramref name="offset" /> est différent de zéro.  
  
ou 
 <paramref name="dateTime.Kind" /> est égal à <see cref="F:System.DateTimeKind.Local" /> et <paramref name="offset" /> est différent du décalage du fuseau horaire local du système.  
  
ou 
 <paramref name="offset" /> n’est pas spécifié en minutes entières.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="offset" /> est inférieure à -14 heures ou supérieure à 14 heures.  
  
ou 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> est inférieur à <see cref="F:System.DateTimeOffset.MinValue" /> ou supérieur à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanciation d'un objet DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">Date et heure exprimées sous la forme d'un nombre d'intervalles de 100 nanosecondes écoulés depuis le 1er janvier 0001, à 12:00:00 (minuit).</param>
        <param name="offset">Décalage d'heure à partir du temps universel.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" /> à l’aide de l’offset et du nombre de graduations spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, essayez d’appeler le <xref:System.DateTimeOffset.%23ctor%2A> constructeur pour instancier un <xref:System.DateTimeOffset> valeur avec une heure locale et un offset autre que que de l’heure locale zone lève une <xref:System.ArgumentException>. Vous pouvez utiliser cette surcharge de la <xref:System.DateTimeOffset> constructeur pour contourner cette limitation. L’exemple suivant utilise le nombre de l’heure locale de graduations pour instancier un <xref:System.DateTimeOffset> valeur dont l’offset ne représente pas nécessairement celui de l’heure locale :  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 L’exemple suivant initialise un <xref:System.DateTimeOffset> objet en utilisant le nombre de graduations d’une date arbitraire (dans ce cas, le 16 juillet 2007, à 13:32) avec un décalage de -5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> n’est pas spécifié en minutes entières.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété <see cref="P:System.DateTimeOffset.UtcDateTime" /> est antérieure à <see cref="F:System.DateTimeOffset.MinValue" /> ou postérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
ou 
 <paramref name="ticks" /> est inférieur à <see langword="DateTimeOffset.MinValue.Ticks" /> ou supérieur à <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
ou 
 La valeur de <paramref name="Offset" /> est inférieure à-14 heures ou supérieure à 14 heures.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanciation d'un objet DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <paramref name="month" />).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="offset">Décalage d'heure à partir du temps universel.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" /> en utilisant l’année, le mois, le jour, l’heure, la minute, la seconde et le décalage spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur interprète `year`, `month`, et `day` comme une année, le mois et le jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTimeOffset> valeur à l’aide de l’année, le mois et le jour dans un autre calendrier, appelez le <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructeur.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.DateTimeOffset> objet à l’aide de la <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> surcharge de constructeur.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> ne représente pas des minutes entières.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> est inférieur à 1 ou supérieur à 9 999.  
  
ou 
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
ou 
 La valeur de <paramref name="day" /> est inférieure à un ou supérieure au nombre de jours indiqué dans <paramref name="month" />.  
  
ou 
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
ou 
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
ou 
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
ou 
 La valeur de <paramref name="offset" /> est inférieure à -14 heures ou supérieure à 14 heures.  
  
ou 
La propriété <see cref="P:System.DateTimeOffset.UtcDateTime" /> est antérieure à <see cref="F:System.DateTimeOffset.MinValue" /> ou postérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanciation d'un objet DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">Année (1 à 9999).</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <paramref name="month" />).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="millisecond">Millisecondes (0 à 999).</param>
        <param name="offset">Décalage d'heure à partir du temps universel.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" /> en utilisant l’année, le mois, le jour, l’heure, la minute, la seconde, la milliseconde et le décalage spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur interprète `year`, `month`, et `day` comme une année, le mois et le jour dans le calendrier grégorien. Pour instancier un <xref:System.DateTimeOffset> valeur à l’aide de l’année, le mois et le jour dans un autre calendrier, appelez le <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructeur.  
  
   
  
## Examples  
 L’exemple suivant instancie un <xref:System.DateTimeOffset> objet à l’aide de la <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> surcharge de constructeur.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> ne représente pas des minutes entières.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> est inférieur à 1 ou supérieur à 9 999.  
  
ou 
 <paramref name="month" /> est inférieur à 1 ou supérieur à 12.  
  
ou 
 La valeur de <paramref name="day" /> est inférieure à un ou supérieure au nombre de jours indiqué dans <paramref name="month" />.  
  
ou 
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
ou 
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
ou 
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
ou 
 <paramref name="millisecond" /> est inférieur à 0 ou supérieur à 999.  
  
ou 
 <paramref name="offset" /> est inférieur à -14 ou supérieur à 14.  
  
ou 
La propriété <see cref="P:System.DateTimeOffset.UtcDateTime" /> est antérieure à <see cref="F:System.DateTimeOffset.MinValue" /> ou postérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanciation d'un objet DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.TimeSpan" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="year">Année.</param>
        <param name="month">Mois (1 à 12).</param>
        <param name="day">Jour (de 1 au nombre de jours de <paramref name="month" />).</param>
        <param name="hour">Heures (0 à 23).</param>
        <param name="minute">Minutes (0 à 59).</param>
        <param name="second">Secondes (0 à 59).</param>
        <param name="millisecond">Millisecondes (0 à 999).</param>
        <param name="calendar">Calendrier utilisé pour interpréter <paramref name="year" />, <paramref name="month" /> et <paramref name="day" />.</param>
        <param name="offset">Décalage d'heure à partir du temps universel.</param>
        <summary>Initialise une nouvelle instance de la structure <see cref="T:System.DateTimeOffset" /> en utilisant l’année, le mois, le jour, l’heure, la minute, la seconde, la milliseconde et le décalage (offset) spécifiés pour un calendrier spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `year`, `month`, `day`, `hour`, `minute`, `second`, et `millisecond` tous les paramètres de reflètent des valeurs exprimées dans le calendrier spécifié par le `calendar` paramètre. Une exception est levée si ces valeurs forment une date et une heure qui ne peuvent pas être exprimé à l’aide de ce calendrier.  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]   

## Examples  
 L’exemple suivant utilise les instances de la <xref:System.Globalization.HebrewCalendar> classe et le <xref:System.Globalization.HijriCalendar> classe à instancier un <xref:System.DateTimeOffset> valeur. Cette date est ensuite affichée dans la console à l’aide des calendriers respectifs et le calendrier grégorien.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> ne représente pas des minutes entières.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="year" /> est inférieure à la valeur de <see langword="MinSupportedDateTime.Year" /> du paramètre <paramref name="calendar" /> ou supérieure à la valeur de <see langword="MaxSupportedDateTime.Year" />.  
  
ou 
 La valeur de <paramref name="month" /> est inférieure ou supérieure au nombre de mois indiqué dans le paramètre <paramref name="year" /> de <paramref name="calendar" />.  
  
ou 
 La valeur de <paramref name="day" /> est inférieure à un ou supérieure au nombre de jours indiqué dans <paramref name="month" />.  
  
ou 
 <paramref name="hour" /> est inférieur à 0 ou supérieur à 23.  
  
ou 
 <paramref name="minute" /> est inférieur à 0 ou supérieur à 59.  
  
ou 
 <paramref name="second" /> est inférieur à 0 ou supérieur à 59.  
  
ou 
 <paramref name="millisecond" /> est inférieur à 0 ou supérieur à 999.  
  
ou 
 La valeur de <paramref name="offset" /> est inférieure à -14 heures ou supérieure à 14 heures.  
  
ou 
Les paramètres <paramref name="year" />, <paramref name="month" /> et <paramref name="day" /> ne peuvent pas être représentés par une valeur de date et d’heure.  
  
ou 
La propriété <see cref="P:System.DateTimeOffset.UtcDateTime" /> est antérieure à <see cref="F:System.DateTimeOffset.MinValue" /> ou postérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/instantiating-a-datetimeoffset-object.md">Instanciation d'un objet DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">Objet <see cref="T:System.TimeSpan" /> représentant un intervalle de temps positif ou négatif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un intervalle de temps spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actif et de l’intervalle de temps représenté par <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.DateTimeOffset.Add%2A> méthode pour ajouter plusieurs types d’intervalle de temps (jours, heures, minutes, secondes ou millisecondes) en une seule opération. Comportement de cette méthode est identique à l’opérateur d’addition. Le <xref:System.DateTimeOffset> structure prend également en charge les méthodes d’addition spécialisées (telles que <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, et <xref:System.DateTimeOffset.AddMinutes%2A>) pour chaque intervalle de temps.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `timeSpan` à sa date et d’heure.  
  
 Le <xref:System.DateTimeOffset.Add%2A> méthode n’affecte pas la valeur de la <xref:System.DateTimeOffset> l’objet <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.Add%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 Si le `timeSpan` paramètre est `null`, cette méthode retourne la valeur de la version d’origine <xref:System.DateTimeOffset> objet inchangé.  
  
   
  
## Examples  
 L’exemple suivant crée un tableau de <xref:System.TimeSpan> objets qui représentent les heures de vol entre des destinations. Le <xref:System.DateTimeOffset.Add%2A> méthode ajoute ensuite ces périodes pour un <xref:System.DateTimeOffset> objet qui représente l’heure de décollage initiale d’un vol. Le résultat reflète l’heure d’arrivée prévue à chaque emplacement de destination.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">Nombre de jours entiers et partiels. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre spécifié de jours entiers et partiels à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est la somme de la date et l’heure représentées par l’actuel <see cref="T:System.DateTimeOffset" /> objet et le nombre de jours représenté par <paramref name="days" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La partie fractionnaire de la `days` paramètre est la partie fractionnaire d’un jour. Par exemple, 4,5 équivaut à 4 jours, 12 heures, 0 minutes, 0 secondes, 0 milliseconde. Le `days` paramètre est arrondi à la milliseconde.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `days` à sa date et d’heure.  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.AddDays%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 Conversion des intervalles de temps de moins d’une journée à une fraction peut impliquer une perte de précision. Si cela pose problème, vous pouvez utiliser le <xref:System.DateTimeOffset.Add%2A> (méthode), ce qui vous permet de spécifier plusieurs types d’intervalle de temps dans un seul appel de méthode et vous évite de devoir convertir les intervalles de temps en parties fractionnaires d’une journée.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTimeOffset.AddDays%2A> méthode pour répertorier les dates qui se situent le lundi, le début de la semaine de travail, en mars 2008.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">Nombre d'heures entières et partielles. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre spécifié d’heures entières et partielles à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actuel et du nombre d’heures représenté par <paramref name="hours" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La partie fractionnaire de la `hours` paramètre est la partie fractionnaire d’une heure. Par exemple, 4,5 équivaut à 4 heures, 30 minutes, 0 secondes, 0 milliseconde. Le `hours` paramètre est arrondi à la milliseconde.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `hours` à sa date et d’heure.  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.AddHours%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 Conversion des intervalles de temps de moins d’une heure en une fraction peut impliquer une perte de précision. (Par exemple, une minute est 0,01666 heure.) Si cela pose problème, vous pouvez utiliser le <xref:System.DateTimeOffset.Add%2A> (méthode), ce qui vous permet de spécifier plusieurs types d’intervalle de temps dans un seul appel de méthode et vous évite de devoir convertir les intervalles de temps en parties fractionnaires d’une heure.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.AddHours%2A> décale de méthode pour répertorier les heures de début du travail pour une semaine particulière dans un bureau qui a deux équipes de huit heures par jour.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Nombre de millisecondes entières et partielles. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre de millisecondes spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actif et du nombre de millisecondes entières représenté par <paramref name="milliseconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La partie fractionnaire de la `milliseconds` paramètre est la partie fractionnaire d’une milliseconde. Par exemple, 4,5 équivaut à 4 millisecondes et 5000 graduations, où une milliseconde est égale à 10 000 cycles. Toutefois, `milliseconds` est arrondi à la milliseconde ; toutes les valeurs égales ou supérieures à.5 sont arrondies.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `milliseconds` à sa date et d’heure.  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.AddMilliseconds%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">Nombre de minutes entières et partielles. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre spécifié de minutes entières et partielles à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actif et du nombre de minutes représenté par <paramref name="minutes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La partie fractionnaire de la `minutes` paramètre est la partie fractionnaire d’une minute. Par exemple, 4,5 équivaut à 4 minutes, 30 secondes, 0 milliseconde. Le `minutes` paramètre est arrondi à la milliseconde.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `minutes` à sa date et d’heure.  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.AddMinutes%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 Conversion des intervalles de temps de moins d’une minute à une fraction peut impliquer une perte de précision. (Par exemple, une seconde est 0,01666 minute). Si cela pose problème, vous pouvez utiliser le <xref:System.DateTimeOffset.Add%2A> (méthode), ce qui vous permet de spécifier plusieurs types d’intervalle de temps dans un seul appel de méthode et vous évite de devoir convertir les intervalles de temps en parties fractionnaires d’une minute.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Nombre de mois entiers. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre spécifié de mois à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est la somme de la date et l’heure représentées par l’actuel <see cref="T:System.DateTimeOffset" /> objet et le nombre de mois représenté par <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à la plupart des autres méthodes qui ajoutent une unité d’intervalle de temps unique (par exemple, les minutes ou jours) à une valeur de date / heure, <xref:System.DateTimeOffset.AddMonths%2A> ne vous autorise pas à ajouter des parties fractionnaires d’un mois. Pour ajouter une heure qui se compose d’autres unités de temps en plus des mois à un <xref:System.DateTimeOffset> de l’objet, utilisez le <xref:System.DateTimeOffset.Add%2A> (méthode).  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `months` à sa date et d’heure.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTimeOffset.AddMonths%2A> méthode pour afficher la date de début de chaque trimestre de l’année 2007.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">Nombre de secondes entières et partielles. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre spécifié de secondes entières et partielles à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actuel et du nombre de secondes représenté par <paramref name="seconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La partie fractionnaire de la `seconds` paramètre est la partie fractionnaire d’une seconde. La valeur des parties fractionnaires d’une seconde sont affichés dans le tableau suivant.  
  
|Deuxième valeur|Équivalent|  
|------------------|----------------|  
|1 seconde|100 millisecondes|  
|seconde.01|10 millisecondes|  
|seconde.001|1 milliseconde|  
  
 Le `seconds` paramètre est arrondi à la milliseconde.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `minutes` à sa date et d’heure.  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.AddSeconds%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Nombre de graduations de 100 nanosecondes. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre de graduations spécifié à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est égale à la somme de la date et de l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actuel et du nombre de graduations représenté par <paramref name="ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une graduation représente 100 nanosecondes, ou un dix-millionième de seconde. Car un cycle est un intervalle de temps très petites et plus précis, n’importe quel plus grande unité de temps peut être exprimée comme un nombre de graduations sans perte de précision.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `minutes` à sa date et d’heure.  
  
 Le tableau suivant répertorie le nombre de graduations dans un intervalle de temps particulier.  
  
|Intervalle de temps|Nombre de graduations|  
|-------------------|---------------------|  
|Seconde|10,000,000|  
|Minute|600,000,000|  
|Heure|36,000,000,000|  
|Jour|864,000,000,000|  
|Semaine|6,048,000,000,000|  
|Mois|Varie selon le nombre de jours du mois.|  
|Année non bissextile|315,360,000,000,000|  
|Année bissextile|316,224,000,000,000|  
  
 Étant donné qu’un <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.AddTicks%2A> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la date et l’heure arithmétique.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">Nombre d'années. Le nombre peut être négatif ou positif.</param>
        <summary>Retourne un nouvel objet <see cref="T:System.DateTimeOffset" /> qui ajoute un nombre spécifié d’années à la valeur de cette instance.</summary>
        <returns>Objet dont la valeur est la somme de la date et l’heure représentées par l’actuel <see cref="T:System.DateTimeOffset" /> objet et le nombre d’années représenté par <paramref name="years" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contrairement à la plupart des autres méthodes qui ajoutent une unité d’intervalle de temps unique (par exemple, les minutes ou jours) à une valeur de date / heure, <xref:System.DateTimeOffset.AddYears%2A> ne vous autorise pas à ajouter des parties fractionnaires d’une année. Pour ajouter une heure qui se compose d’autres unités de temps en plus des années à un <xref:System.DateTimeOffset> de l’objet, utilisez le <xref:System.DateTimeOffset.Add%2A> (méthode).  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `months` à sa date et d’heure.  
  
   
  
## Examples  
 Aux États-Unis, du pilote ne peut pas être des licences aux personnes moins de 16 ans. L’exemple suivant affiche la date la plus récente possible sur lequel un naissance délivrance conduire un permis de.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Premier objet à comparer.</param>
        <param name="second">Deuxième objet à comparer.</param>
        <summary>Compare deux <see cref="T:System.DateTimeOffset" /> objets et indique si le premier est antérieur à la seconde, égale à la seconde ou ultérieur au second.</summary>
        <returns>Entier signé qui indique si la valeur de la <paramref name="first" /> paramètre est antérieure, ultérieure, ou le même temps que la valeur de la <paramref name="second" /> paramètre, comme le tableau suivant.  
  
 <list type="table"><listheader><term> Valeur de retour 
 </term><description> Signification 
 </description></listheader><item><term> Inférieure à zéro 
 </term><description><paramref name="first" /> est antérieur à <paramref name="second" />.  
  
 </description></item><item><term> Zéro 
 </term><description><paramref name="first" /> est égal à <paramref name="second" />.  
  
 </description></item><item><term> Supérieure à zéro 
 </term><description><paramref name="first" /> est ultérieur à <paramref name="second" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lors de la comparaison, la méthode convertit le `first` et le `second` paramètres en temps universel coordonné (UTC) avant d’effectuer la comparaison. La méthode est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 En d’autres termes, le <xref:System.DateTimeOffset.Compare%2A> méthode détermine si deux <xref:System.DateTimeOffset> objets représentent un point unique dans le temps. Il compare directement les dates et heures ni décalages.  
  
   
  
## Examples  
 L’exemple suivant illustre des appels à la <xref:System.DateTimeOffset.Compare%2A> méthode à comparer <xref:System.DateTimeOffset> objets.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer à l’objet <see cref="T:System.DateTimeOffset" /> actuel.</param>
        <summary>Compare actuel <see cref="T:System.DateTimeOffset" /> objet à une certaine <see cref="T:System.DateTimeOffset" /> de l’objet et indique si l’objet actuel est antérieure, identique ou ultérieure à la seconde <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns>Un entier signé qui indique la relation entre le cours <see cref="T:System.DateTimeOffset" /> objet et <paramref name="other" />, comme illustré dans le tableau suivant.  
  
 <list type="table"><listheader><term> Valeur de retour 
 </term><description> Description 
 </description></listheader><item><term> Inférieure à zéro 
 </term><description> Actuel <see cref="T:System.DateTimeOffset" /> objet est antérieur à <paramref name="other" />.  
  
 </description></item><item><term> Zéro 
 </term><description> Actuel <see cref="T:System.DateTimeOffset" /> objet est identique à <paramref name="other" />.  
  
 </description></item><item><term> Supérieure à zéro.  
  
 </term><description> Actuel <see cref="T:System.DateTimeOffset" /> objet est postérieur à <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode compare <xref:System.DateTimeOffset> les objets en comparant leurs <xref:System.DateTimeOffset.UtcDateTime%2A> égales ; autrement dit, il détermine si les deux objets représentent un point unique dans le temps et indique si l’objet en cours est antérieur, plus tard, ou le même que le `other`paramètre.  
  
   
  
## Examples  
 L’exemple suivant illustre des appels à la <xref:System.DateTimeOffset.CompareTo%2A> méthode à comparer <xref:System.DateTimeOffset> objets.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.DateTime" /> valeur qui représente le composant date d’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Un <see cref="T:System.DateTime" /> valeur qui représente le composant date d’actuel <see cref="T:System.DateTimeOffset" /> objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété supprime toute partie significative du composant de temps à partir d’un <xref:System.DateTimeOffset> de l’objet et retourne uniquement son composant de date significatives. Par exemple, si le <xref:System.DateTimeOffset> objet a une valeur de date et heure de « 1/12/07 4:01 pm + 7:30 », la propriété retourne un <xref:System.DateTime> valeur de « 1/12/07 12:00:00 AM ». Le <xref:System.DateTime> valeur peut ensuite être affichée à l’aide d’un des spécificateurs de format standard ou personnalisés qui affichent uniquement les dates. (Voir la section exemple pour obtenir une illustration.)  
  
 La valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de retourné <xref:System.DateTime> objet est toujours <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Il n’est pas affecté par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Pour afficher une date sans composant d’heure, vous pouvez également utiliser le « D » ou « d » ; les spécificateurs de format Pour obtenir une illustration, consultez la section exemple.  
  
   
  
## Examples  
 L’exemple suivant récupère la valeur de la <xref:System.DateTimeOffset.Date%2A> propriété pour une date spécifique. Il affiche ensuite cette valeur dans la console à l’aide de plusieurs spécificateurs de format de date uniquement standard et personnalisées.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Chaînes de Format DateTime standard</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Chaînes de Format de date/heure personnalisé</related>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur <see cref="T:System.DateTime" /> représentant la date et l’heure de l’objet <see cref="T:System.DateTimeOffset" /> actuel.</summary>
        <value>Date et l’heure de l’objet <see cref="T:System.DateTimeOffset" /> actuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.DateTime%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Cette propriété retourne la date et le composant heure d’un <xref:System.DateTimeOffset> objet, ce qui le rend utile pour effectuer <xref:System.DateTimeOffset> à <xref:System.DateTime> conversion. Par exemple, si le <xref:System.DateTimeOffset> objet a une valeur de date et l’heure de « 1/12/07 4:01 pm + 7:30 », la propriété retourne la date » 1/12/07 4:01 pm ».  
  
 La valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de retourné <xref:System.DateTime> objet est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.DateTimeOffset.DateTime%2A> propriété pour convertir l’heure retournée par la <xref:System.DateTimeOffset.Now%2A> et <xref:System.DateTimeOffset.UtcNow%2A> propriétés à <xref:System.DateTime> valeurs.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
        <related type="Article" href="~/docs/standard/datetime/converting-between-datetime-and-offset.md">Conversion entre DateTime et DateTimeOffset</related>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jour du mois représenté par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le composant « jour » du courant <see cref="T:System.DateTimeOffset" /> objet, exprimé comme une valeur comprise entre 1 et 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Day%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> composant « jour » de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec les spécificateurs de format personnalisé « d » ou « dd ».  
  
   
  
## Examples  
 L’exemple suivant affiche le composant de jour d’un <xref:System.DateTimeOffset> objet de trois façons différentes :  
  
-   En récupérant la valeur de la <xref:System.DateTimeOffset.Day%2A> propriété.  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « d ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « dd ».  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jour de la semaine représenté par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Une des valeurs d’énumération qui indique le jour de la semaine du courant <see cref="T:System.DateTimeOffset" /> objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de l’une des constantes dans le <xref:System.DayOfWeek> allant de l’énumération <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> à <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Si castés en entier, sa valeur est comprise entre zéro (ce qui indique <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) et six (qui indique <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Vous pouvez également afficher le nom du jour de la semaine d’une date particulière à l’aide du spécificateur de format « D » ou le spécificateur de format personnalisé « dddd ». Exemple :  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Notez que la chaîne retournée en appelant le `ToString` méthode de le <xref:System.DayOfWeek> membre d’énumération qui est retourné par cette propriété n’est pas localisé. Pour extraire une chaîne qui contient le nom du jour de la culture actuelle ou d’une culture spécifique, appelez le <xref:System.DateTimeOffset.ToString%2A> méthode avec le spécificateur de format personnalisé « dddd ». Par exemple, le code suivant affiche le nom de jour de la semaine pour une date à l’aide de la `fr-fr` culture.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 L’exemple suivant affiche le nom de jour de la semaine du premier jour de chaque mois de l’année 2008.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le jour de l’année représenté par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le jour de l’année d’actuel <see cref="T:System.DateTimeOffset" /> objet, exprimé comme une valeur comprise entre 1 et 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si deux <see cref="T:System.DateTimeOffset" /> objets sont égaux, ou un <see cref="T:System.DateTimeOffset" /> objet est égal à un objet spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer à l’objet <see cref="T:System.DateTimeOffset" /> actuel.</param>
        <summary>Détermine si l’actuel <see cref="T:System.DateTimeOffset" /> objet représente le même instant précis qu’une certaine <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns><see langword="true" /> Si les deux <see cref="T:System.DateTimeOffset" /> objets ont les mêmes <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de réaliser la comparaison, cette méthode convertit les valeurs des deux <xref:System.DateTimeOffset> objets en temps universel coordonné (UTC). La méthode est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 En d’autres termes, le <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> méthode détermine si deux <xref:System.DateTimeOffset> objets représentent un point unique dans le temps. Il compare directement les dates et heures ni décalages. Pour déterminer si deux <xref:System.DateTimeOffset> objets représentent la même heure et ont la même valeur de décalage, utilisez le <xref:System.DateTimeOffset.EqualsExact%2A> (méthode).  
  
 Un <xref:System.DateTimeOffset> objet qui n’est pas `null` ultérieur (ou supérieur) est considérée comme celle qui est `null`.  
  
 Cette surcharge de la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> méthode implémente la <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> (méthode). Il offre des performances légèrement meilleures que le <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> surcharger, car le `other` paramètre ne devra pas être converti à partir d’un objet.  
  
   
  
## Examples  
 L’exemple suivant illustre des appels à la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> méthode pour tester <xref:System.DateTimeOffset> objets pour l’égalité avec actuel <xref:System.DateTimeOffset> objet.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">L’objet à comparer au actuel <see cref="T:System.DateTimeOffset" /> objet.</param>
        <summary>Détermine si un <see cref="T:System.DateTimeOffset" /> objet représente le même instant précis qu’un objet spécifié.</summary>
        <returns><see langword="true" /> Si le <paramref name="obj" /> paramètre est un <see cref="T:System.DateTimeOffset" /> de l’objet et représente le même instant précis que l’actuel <see cref="T:System.DateTimeOffset" /> objet ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant d’effectuer la comparaison, cette méthode convertit les valeurs de l’analyseur lexical actuel <xref:System.DateTimeOffset> objet et le `obj` paramètre en temps universel coordonné (UTC). La méthode est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 En d’autres termes, le <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> méthode détermine si l’actuel <xref:System.DateTimeOffset> objet et un objet spécifié représentent un point unique dans le temps. Il compare directement les dates et heures ni décalages. Pour déterminer si deux <xref:System.DateTimeOffset> objets représentent la même heure et ont la même valeur de décalage, utilisez le <xref:System.DateTimeOffset.EqualsExact%2A> (méthode).  
  
 Si `obj` est `null`, ou si le type de la durée d’exécution de `obj` n’est pas <xref:System.DateTimeOffset>, la méthode retourne `false`.  
  
   
  
## Examples  
 L’exemple suivant indique si l’actuel <xref:System.DateTimeOffset> objet est égal à plusieurs autres <xref:System.DateTimeOffset> des objets, ainsi qu’à une référence null et a <xref:System.DateTime> objet.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">Premier objet à comparer.</param>
        <param name="second">Deuxième objet à comparer.</param>
        <summary>Détermine si deux spécifiées <see cref="T:System.DateTimeOffset" /> objets représentent le même point dans le temps.</summary>
        <returns><see langword="true" /> Si les deux <see cref="T:System.DateTimeOffset" /> objets ont les mêmes <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Avant de réaliser la comparaison, cette méthode convertit les deux <xref:System.DateTimeOffset> objets en temps universel coordonné (UTC). La méthode est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 En d’autres termes, le <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> méthode détermine si les deux <xref:System.DateTimeOffset> objets représentent un point unique dans le temps. Il compare directement les dates et heures ni décalages. Pour déterminer si deux <xref:System.DateTimeOffset> objets représentent la même heure et ont la même valeur de décalage, utilisez le <xref:System.DateTimeOffset.EqualsExact%2A> (méthode).  
  
   
  
## Examples  
 L’exemple suivant illustre des appels à la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> méthode pour tester différentes paires de <xref:System.DateTimeOffset> objets sont égaux.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">L’objet à comparer au actuel <see cref="T:System.DateTimeOffset" /> objet.</param>
        <summary>Détermine si l’actuel <see cref="T:System.DateTimeOffset" /> objet représente la même heure et a le même offset qu’une certaine <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns><see langword="true" /> Si actuel <see cref="T:System.DateTimeOffset" /> objet et <paramref name="other" /> ont la même valeur de date et l’heure et la même <see cref="P:System.DateTimeOffset.Offset" /> valeur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que plusieurs fuseaux horaires partagent le même offset, une valeur de retour de `true` ne garantit pas que l’actuel et le `other` objet représentent fois dans le même fuseau horaire.  
  
 Contrairement à la <xref:System.DateTimeOffset.EqualsExact%2A> (méthode), les surcharges de la <xref:System.DateTimeOffset.Equals%2A> méthode déterminer uniquement si deux <xref:System.DateTimeOffset> valeurs représentent un point unique dans le temps. Ils n’indiquent pas que deux valeurs ont la même date et heure, ainsi que le même décalage.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.DateTimeOffset.EqualsExact%2A> méthode à comparer similaire <xref:System.DateTimeOffset> objets.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Heure de fichier Windows, exprimée en graduations.</param>
        <summary>Convertit l'heure de fichier Windows spécifiée en heure locale équivalente.</summary>
        <returns>Objet qui représente la date et l’heure de <paramref name="fileTime" /> avec l’offset de valeur de l’offset d’heure locale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une heure de fichier Windows est une valeur 64 bits qui représente le nombre d’intervalles de 100 nanosecondes qui se sont écoulées depuis 12:00 minuit, le 1er janvier 1601 apr. J.C. (NOTRE ÈRE) Temps d’universel coordonné (UTC). Windows utilise une heure de fichier pour enregistrer une application crée, accède ou écrit dans un fichier.  
  
 Une heure de fichier Windows est directement accessible via l’API Windows en appelant le `GetFileTime` (fonction), qui retourne un `FILETIME` structure. Le paramètre de fonction unique est le handle du fichier dont les informations d’heure fichier doit être récupéré. Le handle de fichier est récupéré en appelant le `CreateFile` (fonction). Le `FILETIME` la structure `dwHighDateTime` membre contient les quatre octets de poids fort de l’heure du fichier et son `dwLowDateTime` membre contient les quatre octets de poids faible. L’exemple suivant illustre comment récupérer des valeurs d’heure de fichier de Windows et de les convertir en <xref:System.DateTimeOffset> valeurs.  
  
 Valeurs d’heure de fichier de Windows peuvent également être créés à partir de <xref:System.DateTime> valeurs en appelant le <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> et <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> méthodes et à partir de <xref:System.DateTimeOffset> valeurs en appelant le <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise l’API Windows pour récupérer les heures de fichier Windows pour le fichier exécutable WordPad.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="filetime" /> est inférieur à zéro.  
  
ou 
 <paramref name="filetime" /> est supérieur à <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="milliseconds">Temps Unix, exprimé comme le nombre de millisecondes qui se sont écoulées depuis 1970-01-01T00:00:00Z (1er janvier 1970 à 00h00 UTC). Pour les temps Unix avant cette date, sa valeur est négative.</param>
        <summary>Convertit un temps Unix exprimé comme le nombre de millisecondes qui se sont écoulées depuis 1970-01-01T00:00:00Z en valeur <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Valeur de date et d’heure qui représente le même moment dans le temps que le temps Unix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Offset%2A> valeur de propriété de retourné <xref:System.DateTimeOffset> instance est <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, qui représente le temps universel coordonné. Vous pouvez le convertir en une heure dans un fuseau horaire spécifique en appelant le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="milliseconds" /> est inférieur à 62 135 596 800 000.  
  
ou 
 <paramref name="milliseconds" /> est supérieur à 253 402 300 799 999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="seconds">Temps Unix, exprimé comme le nombre de secondes qui se sont écoulées depuis 1970-01-01T00:00:00Z (1er janvier 1970 à 00h00 UTC). Pour les temps Unix avant cette date, sa valeur est négative.</param>
        <summary>Convertit un temps Unix exprimé comme le nombre de secondes qui se sont écoulées depuis 1970-01-01T00:00:00Z en valeur <see cref="T:System.DateTimeOffset" />.</summary>
        <returns>Valeur de date et d’heure qui représente le même moment dans le temps que le temps Unix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Offset%2A> valeur de propriété de retourné <xref:System.DateTimeOffset> instance est <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, qui représente le temps universel coordonné. Vous pouvez le convertir en une heure dans un fuseau horaire spécifique en appelant le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds" /> est inférieur à 62 135 596 800.  
  
ou 
 <paramref name="seconds" /> est supérieur à 253 402 300 799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage pour l'objet <see cref="T:System.DateTimeOffset" /> actuel.</summary>
        <returns>Code de hachage d'un entier signé 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « heure » de l’heure représentée par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>La composante « heure » actuel <see cref="T:System.DateTimeOffset" /> objet. Cette propriété utilise une horloge de 24 heures ; la valeur est comprise entre 0 et 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Hour%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> composant d’heure de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec « H », ou des spécificateurs de format personnalisé « HH ».  
  
   
  
## Examples  
 L’exemple suivant affiche la composante « heure » un <xref:System.DateTimeOffset> objet de trois façons différentes :  
  
-   En récupérant la valeur de la <xref:System.DateTimeOffset.Hour%2A> propriété.  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « H ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> spécificateur de format de méthode avec « HH ».  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.DateTime" /> valeur qui représente la date et heure locales du courant <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>La date et heure locales du courant <see cref="T:System.DateTimeOffset" /> objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si nécessaire, le <xref:System.DateTimeOffset.LocalDateTime%2A> propriété convertit actuel <xref:System.DateTimeOffset> l’objet date et heure de date et l’heure du système local. La conversion est une opération en deux étapes :  
  
1.  La propriété convertit actuel <xref:System.DateTimeOffset> temps de l’objet en temps universel coordonné (UTC).  
  
2.  La propriété convertit ensuite UTC en heure locale.  
  
 Il n’y a aucune heure non valide et des heures ambiguës sont mappés à l’heure d’hiver du fuseau horaire local. (Toutefois, la conversion peut créer une anomalie : si un <xref:System.DateTimeOffset> valeur dérivée de l’ordinateur local reflète une date et heure ambiguës, que la valeur peut être convertie en heure UTC, puis revient à une heure locale qui diffère de l’heure d’origine.)  La propriété s’applique les règles d’ajustement dans le fuseau horaire local lorsqu’il effectue cette conversion.  
  
 Cette propriété retourne la date et le composant heure d’un <xref:System.DateTimeOffset> objet, ce qui le rend utile pour <xref:System.DateTimeOffset> à <xref:System.DateTime> conversion. En plus d’effectuer toute conversion de temps nécessaire, cette propriété est différente de la <xref:System.DateTimeOffset.DateTime%2A> propriété en définissant la valeur de la <xref:System.DateTime.Kind%2A> propriété de retourné <xref:System.DateTime> objet <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant illustre plusieurs conversions de <xref:System.DateTimeOffset> valeurs à des heures locales aux États-Unis. horaire Pacifique (É.-U.). Notez que la dernière trois fois sont toutes ambiguës ; la propriété mappe toutes les valeurs à une date et heure uniques dans le fuseau horaire Pacifique.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la plus grande valeur possible de <see cref="T:System.DateTimeOffset" />. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 31/12/9999 11:59:59 PM + 00:00.  
  
 Le <xref:System.DateTimeOffset.MaxValue> propriété est utilisée pour déterminer si la valeur d’un nouveau <xref:System.DateTimeOffset> objet ou le <xref:System.DateTimeOffset> valeur retournée par une opération arithmétique est le même ou antérieure à cette valeur de plage maximale. Si elle n’est pas le cas, la méthode lève un <xref:System.ArgumentOutOfRangeException>. N’importe quel <xref:System.DateTimeOffset> valeur est convertie en temps universel coordonné (UTC) avant que la méthode compare avec <xref:System.DateTimeOffset.MaxValue>.  Cela signifie qu’un <xref:System.DateTimeOffset> valeur dont la date et heure sont proches de la plage maximale, mais dont l’offset est négatif, peut lever une exception. Par exemple, la valeur 31/12/9999 11:00 PM -02:00 est hors limites, car il s’agit d’une heure postérieure <xref:System.DateTimeOffset.MaxValue> lorsqu’elle est convertie au format UTC.  
  
 Certains calendriers, tels que le <xref:System.Globalization.UmAlQuraCalendar>, prennent en charge une plage de dates supérieure qui est antérieure à <xref:System.DateTime.MaxValue>. Dans ce cas, essayez d’accéder <xref:System.DateTime.MaxValue> dans les affectations de variables ou de mise en forme et d’opérations d’analyse peut lever un <xref:System.ArgumentOutOfRangeException>. Au lieu de récupérer la valeur de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, vous pouvez récupérer la valeur de la valeur date valide la plus récente de la culture spécifiée à partir de la <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="F:System.DateTime.MaxValue" /> est en dehors de la plage de calendrier par défaut de la culture actuelle ou spécifiée.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « milliseconde » de l’heure représentée par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le composant « milliseconde » de l’actuel <see cref="T:System.DateTimeOffset" /> objet, exprimé sous la forme d’un entier compris entre 0 et 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> composant « milliseconde » de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec le spécificateur de format personnalisé « fff ».  
  
 Si vous utilisez les propriétés telles que <xref:System.DateTimeOffset.Now%2A> ou <xref:System.DateTimeOffset.UtcNow%2A> pour suivre précisément le nombre de millisecondes écoulées, la précision du composant « milliseconde » de l’heure dépend de la résolution de l’horloge système. Sur Windows NT 3.5 et versions ultérieur et les systèmes d’exploitation Windows Vista, la résolution de l’horloge est d’environ 10 à 15 millisecondes.  
  
   
  
## Examples  
 L’exemple suivant affiche le nombre de millisecondes d’un <xref:System.DateTimeOffset> objet à l’aide d’un spécificateur de format personnalisé et en accédant directement à la <xref:System.DateTimeOffset.Millisecond%2A> propriété.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant "minute" de l’heure représentée par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le composant "minute" de l’actuel <see cref="T:System.DateTimeOffset" /> objet, exprimé sous la forme d’un entier compris entre 0 et 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Minute%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> composant « minute » de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec le « m », ou les spécificateurs de format personnalisé « mm ».  
  
   
  
## Examples  
 L’exemple suivant affiche le composant "minute" d’un <xref:System.DateTimeOffset> objet de trois façons différentes :  
  
-   En récupérant la valeur de la <xref:System.DateTimeOffset.Minute%2A> propriété.  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « m ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « mm ».  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Représente la plus proche possible <see cref="T:System.DateTimeOffset" /> valeur. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de cette constante est 1/1/0001 12:00:00 AM + 00:00.  
  
 Le <xref:System.DateTimeOffset.MinValue> propriété est utilisée pour déterminer si la valeur d’un nouveau <xref:System.DateTimeOffset> objet ou le <xref:System.DateTimeOffset> valeur retournée par une opération arithmétique est le même ou ultérieure à cette valeur de plage minimale. Si elle n’est pas le cas, la méthode lève un <xref:System.ArgumentOutOfRangeException>. N’importe quel <xref:System.DateTimeOffset> valeur est convertie en temps universel coordonné (UTC) avant que la méthode effectue la comparaison avec <xref:System.DateTimeOffset.MinValue>.  Cela signifie qu’un <xref:System.DateTimeOffset> valeur dont la date et heure sont proches de la plage minimale, mais dont l’offset est positif, peut lever une exception. Par exemple, la valeur 1/1/0001 1:00:00 AM + 02:00 est hors limites, car il s’agit d’une heure antérieure à <xref:System.DateTimeOffset.MinValue> lorsqu’elle est convertie au format UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « mois » de la date représentée par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le composant « mois » de l’actuel <see cref="T:System.DateTimeOffset" /> objet, exprimé sous la forme d’un entier compris entre 1 et 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Month%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> composant « mois » de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec les spécificateurs de format personnalisé « M » ou « MM ».  
  
   
  
## Examples  
 L’exemple suivant affiche le composant de mois d’un <xref:System.DateTimeOffset> valeur de trois façons différentes :  
  
-   En récupérant la valeur de la <xref:System.DateTimeOffset.Month%2A> propriété.  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « M ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « MM ».  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.DateTimeOffset" /> qui a pour valeur la date et l’heure actuelles de l’ordinateur actif, l’offset étant égal à l’offset de l’heure locale par rapport au temps universel UTC.</summary>
        <value>Objet <see cref="T:System.DateTimeOffset" /> dont la date et l’heure correspondent à l’heure locale actuelle et dont l’offset est égal à l’offset du fuseau horaire local par rapport au temps universel UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La précision du composant « milliseconde » de l’heure locale actuelle dépend de la résolution de l’horloge système. Sur Windows NT 3.5 et versions ultérieur et les systèmes d’exploitation Windows Vista, la résolution de l’horloge est d’environ 10 à 15 millisecondes.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.Now%2A> propriété afin de récupérer la date et heure actuelles et l’affiche à l’aide de chacun de la [chaînes de format de date et heure standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) pris en charge par le <xref:System.DateTimeOffset> type.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.Now%2A> et <xref:System.DateTimeOffset.Millisecond%2A> propriétés pour déterminer la résolution de l’horloge système. Il affiche l’heure uniquement lorsque la valeur de son composant « millisecondes » a changé.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’offset d’heure par rapport au temps universel coordonné (UTC).</summary>
        <value>La différence entre le cours <see cref="T:System.DateTimeOffset" /> valeur d’heure et le temps universel coordonné (UTC) de l’objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.TimeSpan.Hours%2A> propriété de retourné <xref:System.TimeSpan> objet peut varier de-14 heures à 14 heures.  
  
 La valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété est précise à la minute.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.Offset%2A> propriété pour afficher la différence de l’heure locale par rapport au temps universel coordonné (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" FrameworkAlternate="netframework-2.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz + timeSpan" FrameworkAlternate="netframework-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Objet auquel ajouter l'intervalle de temps.</param>
        <param name="dateTimeTz">Objet auquel ajouter l'intervalle de temps.</param>
        <param name="timeSpan">Intervalle de temps à ajouter.</param>
        <summary>Ajoute un intervalle de temps spécifié à un objet <see cref="T:System.DateTimeOffset" /> présentant une date et une heure spécifiées, et produit un objet <see cref="T:System.DateTimeOffset" /> présentant une nouvelle date et une nouvelle heure.</summary>
        <returns>Objet dont la valeur est égale à la somme des valeurs de <paramref name="dateTimeTz" /> et <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_Addition%2A> méthode définit l’opération d’addition pour <xref:System.DateTimeOffset> valeurs. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés et la surcharge d’opérateur peuvent appeler la <xref:System.DateTimeOffset.Add%2A> méthode à la place.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Premier objet à comparer.</param>
        <param name="right">Deuxième objet à comparer.</param>
        <summary>Détermine si deux spécifiées <see cref="T:System.DateTimeOffset" /> objets représentent le même point dans le temps.</summary>
        <returns><see langword="true" /> Si les deux <see cref="T:System.DateTimeOffset" /> objets ont les mêmes <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_Equality%2A> méthode définit l’opération de l’opérateur d’égalité pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Avant d’évaluer la `left` et `right` opérandes d’égalité, l’opérateur convertit les deux valeurs en temps universel coordonné (UTC). L’opération est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 En d’autres termes, le <xref:System.DateTimeOffset.op_Equality%2A> méthode détermine si les deux <xref:System.DateTimeOffset> objets représentent un point unique dans le temps. Il compare directement les dates et heures ni décalages. Pour déterminer si deux <xref:System.DateTimeOffset> objets représentent la même heure et ont la même valeur de décalage, utilisez le <xref:System.DateTimeOffset.EqualsExact%2A> (méthode).  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Premier objet à comparer.</param>
        <param name="right">Deuxième objet à comparer.</param>
        <summary>Détermine si un spécifié <see cref="T:System.DateTimeOffset" /> objet est supérieur à (ou ultérieur) un deuxième <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns><see langword="true" /> Si le <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="left" /> est postérieure à la <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur de <paramref name="right" />; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_GreaterThan%2A> méthode définit l’opération de l’opérateur de supériorité pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.DateTimeOffset.Compare%2A> méthode à la place. Elles peuvent également appeler le <xref:System.DateTimeOffset.op_GreaterThan%2A> méthode directement, comme dans l’exemple suivant montre.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Avant d’évaluer la `left` et `right` opérandes, l’opérateur convertit les deux valeurs en temps universel coordonné (UTC). L’opération est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Premier objet à comparer.</param>
        <param name="right">Deuxième objet à comparer.</param>
        <summary>Détermine si un spécifié <see cref="T:System.DateTimeOffset" /> objet est supérieur ou égal au second spécifié <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns><see langword="true" /> Si le <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="left" /> est identique ou postérieure à la <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="right" />; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_GreaterThan%2A> méthode définit l’opération de supérieur ou égal à l’opérateur pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.DateTimeOffset.Compare%2A> méthode à la place. Certains langages peuvent également appeler le <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> méthode directement, comme dans l’exemple suivant montre.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Avant d’évaluer la `left` et `right` opérandes, l’opérateur convertit les deux valeurs en temps universel coordonné (UTC). L’opération est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Objet à convertir.</param>
        <summary>Définit une conversion implicite d’un <see cref="T:System.DateTime" /> de l’objet à un <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns>Objet converti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_Implicit%2A> méthode permet au compilateur de convertir automatiquement un <xref:System.DateTime> de l’objet à un <xref:System.DateTimeOffset> objet sans opérateur de cast explicite (en c#) ou un appel à une fonction de conversion (en Visual Basic). Il définit une conversion étendue qui n’implique pas de perte de données et ne lève pas une <xref:System.OverflowException>. Le <xref:System.DateTimeOffset.op_Implicit%2A> méthode rend le code tel que :  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Cette méthode est équivalente à la <xref:System.DateTimeOffset.%23ctor%2A> constructeur. Le décalage de résultant <xref:System.DateTimeOffset> objet dépend de la valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété de le `dateTime` paramètre :  
  
-   Si la valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété est <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, la date et l’heure de la <xref:System.DateTimeOffset> objet est défini comme égal à `dateTime`et son <xref:System.DateTimeOffset.Offset%2A> propriété est définie comme égale à 0.  
  
-   Si la valeur de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propriété est <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ou <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, la date et l’heure de la <xref:System.DateTimeOffset> objet est défini comme égal à `dateTime`et son <xref:System.DateTimeOffset.Offset%2A> propriété est définie comme égale au décalage de fuseau horaire du système local.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure en temps universel coordonné (UTC) qui résultent de l’application du décalage sont antérieures à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La date et l’heure UTC qui résultent de l’application du décalage sont postérieures à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Premier objet à comparer.</param>
        <param name="right">Deuxième objet à comparer.</param>
        <summary>Détermine si deux spécifiées <see cref="T:System.DateTimeOffset" /> objets font référence à des moments différents dans le temps.</summary>
        <returns><see langword="true" /> Si <paramref name="left" /> et <paramref name="right" /> n’ont pas le même <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_Inequality%2A> méthode définit l’opération de l’opérateur d’inégalité pour <xref:System.DateTimeOffset> objets. Elle retourne toujours le résultat inverse de <xref:System.DateTimeOffset.op_Equality%2A>. Le <xref:System.DateTimeOffset.op_Inequality%2A> méthode permet de code semblable au suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Avant d’évaluer la `left` et `right` opérandes d’égalité, l’opérateur convertit les deux valeurs en temps universel coordonné (UTC). L’opération est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 En d’autres termes, le <xref:System.DateTimeOffset.op_Inequality%2A> méthode détermine si les deux <xref:System.DateTimeOffset> objets représentent différents points dans le temps. Il compare directement les dates et heures ni décalages.  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.DateTimeOffset.Compare%2A> méthode à la place. En outre, certains langages peuvent également appeler le <xref:System.DateTimeOffset.op_Inequality%2A> méthode directement, comme dans l’exemple suivant montre.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Premier objet à comparer.</param>
        <param name="right">Deuxième objet à comparer.</param>
        <summary>Détermine si un spécifié <see cref="T:System.DateTimeOffset" /> de l’objet est inférieur à une seconde spécifiée <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns><see langword="true" /> Si le <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="left" /> est antérieure à la <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="right" />; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_LessThan%2A> méthode définit l’opération de l’opérateur inférieur à pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Avant d’évaluer la `left` et `right` opérandes, l’opérateur convertit les deux opérandes en temps universel coordonné (UTC). L’opération est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.DateTimeOffset.Compare%2A> méthode à la place. En outre, certains langages peuvent également appeler le <xref:System.DateTimeOffset.op_LessThan%2A> méthode directement, comme dans l’exemple suivant montre.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Premier objet à comparer.</param>
        <param name="right">Deuxième objet à comparer.</param>
        <summary>Détermine si un spécifié <see cref="T:System.DateTimeOffset" /> de l’objet est inférieur à une seconde spécifiée <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <returns><see langword="true" /> Si le <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="left" /> est antérieure à la <see cref="P:System.DateTimeOffset.UtcDateTime" /> valeur <paramref name="right" />; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> méthode définit l’opération d’inférieur ou égal à l’opérateur pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés peuvent appeler la <xref:System.DateTimeOffset.Compare%2A> méthode à la place. Certains langages peuvent également appeler le <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> méthode directement, comme dans l’exemple suivant montre.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Avant d’évaluer la `left` et `right` opérandes, l’opérateur convertit les deux valeurs en temps universel coordonné (UTC). L’opération est équivalente à la suivante :  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Soustrait un <see cref="T:System.DateTimeOffset" /> ou <see cref="T:System.TimeSpan" /> de l’objet à partir d’un <see cref="T:System.DateTimeOffset" /> objet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">Diminuende.</param>
        <param name="right">Diminuteur.</param>
        <summary>Soustrait un objet <see cref="T:System.DateTimeOffset" /> d’un autre objet et produit un intervalle de temps.</summary>
        <returns>Objet qui représente la différence entre <paramref name="left" /> et <paramref name="right" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_Subtraction%2A> méthode définit l’opération de soustraction pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés et la surcharge d’opérateur peuvent appeler la <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> méthode à la place.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" FrameworkAlternate="netframework-2.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeTz, valuetype System.TimeSpan timeSpan) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeTz, TimeSpan timeSpan);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeTz - timeSpan" FrameworkAlternate="netframework-2.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" FrameworkAlternate="netframework-2.0;dotnet-uwp-10.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" Index="1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Objet de date et d'heure auquel appliquer la soustraction.</param>
        <param name="dateTimeTz">Objet de date et d'heure auquel appliquer la soustraction.</param>
        <param name="timeSpan">Intervalle de temps à soustraire.</param>
        <summary>Soustrait un intervalle de temps spécifié d'une date et d'une heure spécifiées et produit une nouvelle date et heure.</summary>
        <returns>Objet qui est égal à la valeur de <paramref name="dateTimeOffset" /> moins <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.op_Subtraction%2A> méthode définit l’opération de soustraction pour <xref:System.DateTimeOffset> objets. Il permet le code suivant :  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Les langages qui ne prennent pas en charge les opérateurs personnalisés et la surcharge d’opérateur peuvent appeler la <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> méthode à la place.  
  
 La méthode équivalente pour cet opérateur est <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" /> ou supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTimeOffset" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d’une date, d’une heure et d’un décalage en <see cref="T:System.DateTimeOffset" /> équivalent.</summary>
        <returns>Objet qui équivaut à la date et à l’heure contenues dans <paramref name="input" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> analyse une chaîne avec trois éléments qui peuvent apparaître dans n’importe quel ordre et sont délimitées par un espace blanc. Ces trois éléments sont comme indiqué dans le tableau suivant.  
  
|Élément|Exemple|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Heure >|« À 13:02:03 »|  
|\<Offset>|"-7:30"|  
  
 Bien que chacun de ces éléments est facultatif, \<décalage > ne peut pas apparaître par lui-même. Elle doit être fournie avec soit \<Date > ou \<heure >. Si \<Date > est manquant, sa valeur par défaut valeur est le jour actuel. Si \<temps > est manquant, sa valeur par défaut la valeur est 12:00:00 AM. Si \<Date > est présent mais que son composant année ne contient que deux chiffres, il est converti en une année dans le calendrier actuel de la culture actuelle en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Si \<Offset > est manquant, sa valeur par défaut valeur est le décalage du fuseau horaire local. \<Décalage > peut représenter une valeur négative ou un décalage positif par rapport au temps universel coordonné (UTC). Dans les deux cas, \<décalage > doit inclure un symbole de signe.  
  
 Le `input` chaîne est analysée en utilisant les informations de mise en forme dans un <xref:System.Globalization.DateTimeFormatInfo> objet est initialisé pour la culture actuelle. Pour analyser une chaîne qui contient la mise en forme désignée qui ne correspond pas nécessairement à la mise en forme de la culture actuelle, utilisez la <xref:System.DateTimeOffset.ParseExact%2A> méthode et fournir un spécificateur de format.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTimeOffset.Parse%28System.String%29> méthode pour analyser plusieurs chaînes de date et d’heure. L’exemple inclut la sortie du 22 mars 2007, sur un système dont la culture est en-us.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
  
ou 
 <paramref name="input" /> contient la représentation sous forme de chaîne d’une valeur de décalage sans date ou heure.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formatProvider">Objet qui fournit des informations de format propres à la culture concernant <paramref name="input" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d’une date et d’une heure en <see cref="T:System.DateTimeOffset" /> équivalent à l’aide des informations de format propres à la culture spécifiées.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans <paramref name="input" />, comme spécifié par <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode analyse une chaîne avec trois éléments qui peuvent apparaître dans n’importe quel ordre et sont délimitées par un espace blanc. Ces trois éléments sont présentés dans le tableau suivant.  
  
|Élément|Exemple|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Heure >|« À 13:02:03 »|  
|\<Offset>|"-7:30"|  
  
 Bien que chacun de ces éléments est facultatif, \<décalage > ne peut pas apparaître par lui-même. Elle doit être fournie avec soit \<Date > ou \<heure >. Si \<Date > est manquant, sa valeur par défaut valeur est le jour actuel. Si \<Date > est présent mais que son composant année ne contient que deux chiffres, il est converti en une année dans le `provider` calendrier actuel du paramètre en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Si \<temps > est manquant, sa valeur par défaut la valeur est 12:00:00 AM. Si \<Offset > est manquant, sa valeur par défaut valeur est le décalage du fuseau horaire local. \<Décalage > peut représenter une valeur négative ou un décalage positif par rapport au temps universel coordonné (UTC). Dans les deux cas, \<décalage > doit inclure un symbole de signe.  
  
 Le format de ces trois éléments est défini par le `formatProvider` paramètre, qui peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture dont la mise en forme est utilisée dans le `input` paramètre. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme utilisée dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le signe positif ou négatif utilisé dans \<décalage > doit avoir la valeur + ou -. Il n’est pas défini par le <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> ou <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriétés de la <xref:System.Globalization.NumberFormatInfo> objet de la `formatProvider` paramètre.  
  
   
  
## Examples  
 L’exemple suivant analyse la date et les chaînes de temps qui sont mis en forme pour la culture fr-fr et les affiche à l’aide du système local par défaut en-us de culture.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
  
ou 
 <paramref name="input" /> contient la représentation sous forme de chaîne d’une valeur de décalage sans date ou heure.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formatProvider">Objet qui fournit des informations de format propres à la culture concernant <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d’une date et d’une heure en <see cref="T:System.DateTimeOffset" /> équivalent à l’aide des informations de format propres à la culture et du style de mise en forme spécifiés.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans <paramref name="input" /> comme spécifié par <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode analyse une chaîne avec trois éléments qui peuvent apparaître dans n’importe quel ordre et sont délimitées par un espace blanc. Ces trois éléments sont présentés dans le tableau suivant.  
  
|Élément|Exemple|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Heure >|« À 13:02:03 »|  
|\<Offset>|"-7:30"|  
  
 Bien que chacun de ces éléments est facultatif, \<décalage > ne peut pas apparaître par lui-même. Elle doit être fournie avec soit \<Date > ou \<heure >. Si \<Date > est manquant, sa valeur par défaut valeur est le jour actuel. Si \<Date > est présent mais que son composant année ne contient que deux chiffres, il est converti en une année dans le `provider` calendrier actuel du paramètre en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Si \<temps > est manquant, sa valeur par défaut la valeur est 12:00:00 AM. Si \<Offset > est manquant, sa valeur par défaut valeur est le décalage du fuseau horaire local, ou <xref:System.TimeSpan.Zero?displayProperty=nameWithType> si le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> ou <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> valeur est spécifiée dans le `styles` paramètre. Si \<Offset > est présent, il peut représenter une valeur négative ou un décalage positif par rapport au temps universel coordonné (UTC). Dans les deux cas, \<décalage > doit inclure un symbole de signe.  
  
 Le format de ces trois éléments est défini par le `formatProvider` paramètre, qui peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture dont la mise en forme est utilisée dans le `input` paramètre. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme utilisée dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Chaque élément peut également être entouré par des espaces blancs de début ou de fin et le \<Date > et \<temps > éléments peuvent inclure des espaces internes (par exemple 6 :   00:00). Uniquement la \<décalage > composant ne peut pas inclure d’espace interne.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le signe positif ou négatif utilisé dans \<décalage > doit avoir la valeur + ou -. Il n’est pas défini par le <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> ou <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriétés de la <xref:System.Globalization.NumberFormatInfo> objet retourné par la `formatProvider` paramètre.  
  
 Le tableau suivant montre les membres de la <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> énumération sont pris en charge.  
  
|Membre DateTimeStyles|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse la chaîne représentée par `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Bien que valide, cette valeur est ignorée. Espace interne est autorisé dans le \<Date > et \<temps > éléments.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Bien que valide, cette valeur est ignorée. Espace blanc de début est autorisé devant chaque composant dans la chaîne analysée.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Bien que valide, cette valeur est ignorée. Espace blanc de fin est autorisé devant chaque composant dans la chaîne analysée.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Il s'agit du comportement par défaut. Il ne peut pas être substitué en fournissant plus restrictif <xref:System.Globalization.DateTimeStyles> valeur d’énumération, telle que <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Indique que, si le `input` ne dispose pas de paramètre un \<Offset > élément, le décalage du fuseau horaire local doit être fourni. Il s’agit du comportement par défaut de la <xref:System.DateTimeOffset.Parse%2A> (méthode).|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Indique que, si le `input` ne dispose pas de paramètre un \<Offset > élément, le décalage UTC (00:00) doit être fourni.|  
|<xref:System.Globalization.DateTimeStyles.None>|Bien que valide, cette valeur est ignorée et n’a aucun effet.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Étant donné que le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété, cette valeur n’a aucun effet.|  
  
 Uniquement la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> valeur n’est pas prise en charge. Un <xref:System.ArgumentException> est levée si cette valeur est incluse dans le `styles` paramètre.  
  
   
  
## Examples  
 L’exemple suivant illustre l’effet de transmettre le <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, et <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> valeurs à la `styles` paramètre de la <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> (méthode).  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.  
  
ou 
 <paramref name="styles" /> n’est pas une valeur de <see cref="T:System.Globalization.DateTimeStyles" /> valide.  
  
ou 
 <paramref name="styles" /> contient une valeur <see cref="T:System.Globalization.DateTimeStyles" /> non prise en charge.  
  
ou 
 <paramref name="styles" /> contient des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui ne peuvent pas être utilisées ensemble.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
  
ou 
 <paramref name="input" /> contient la représentation sous forme de chaîne d’une valeur de décalage sans date ou heure.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTimeOffset" />. Le format de la représentation sous forme de chaîne doit correspondre exactement à un format spécifié.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="format">Spécificateur de format définissant le format attendu de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTimeOffset" /> à l'aide des informations de format propres à la culture et au format spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans <paramref name="input" /> comme spécifié par <paramref name="format" /> et <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> méthode analyse la représentation sous forme de chaîne d’une date, qui doit être au format défini par le `format` paramètre. Elle requiert également que le \<Date >, \<temps >, et \<décalage > éléments de la représentation sous forme de chaîne de date et heure apparaissent dans l’ordre spécifié par `format`. Si le `input` chaîne ne correspond pas à ce `format` paramètre, la méthode lève un <xref:System.FormatException>.  En revanche, le <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date dans l’un des formats reconnus par le fournisseur de format <xref:System.Globalization.DateTimeFormatInfo> objet. <xref:System.DateTimeOffset.Parse%2A> permet également la \<Date >, \<temps >, et \<décalage > éléments de la représentation de chaîne d’une date et une heure pour apparaître dans n’importe quel ordre.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le format requis de le `input` paramètre. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, la méthode lève un <xref:System.FormatException>.  
  
 Si `format` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si `format` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si `format` n’exige pas `input` contienne un offset, résultant <xref:System.DateTimeOffset> objet est assigné le décalage de fuseau horaire du système local.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définies par le `formatProvider` paramètre, ainsi que le format précis de `input` si `format` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> méthode avec les spécificateurs de format standard et personnalisées et la culture dite indifférente pour analyser plusieurs chaînes de date et d’heure.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  

L’exemple suivant analyse un tableau de chaînes qui sont supposé se conformer à [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Comme le montre le résultat de l’exemple, chaînes avec des espaces à gauche ou analyse a échoué avec succès, comme les chaînes contenant des éléments de date et d’heure qui sont hors limites.

[!code-csharp[Parsing an ISO 8601 string](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601.cs)]
[!code-vb[Parsing an ISO 8601 string](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="format" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le <paramref name="input" /> est une chaîne vide ("").  
  
ou 
 <paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
  
ou 
 <paramref name="format" /> est une chaîne vide.  
  
ou 
Le composant heure et l’indicateur AM/PM dans <paramref name="input" /> ne correspondent pas.</exception>
        <block subset="none" type="usage"><para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTimeOffset.ParseExact" /> méthode lève un <see cref="T:System.FormatException" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas dans l’accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Chaînes de format de date et d'heure standard</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Chaînes de format de date et d'heure personnalisées</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">Étendue de caractères qui représente une date et une heure.</param>
        <param name="format">Étendue de caractères qui contient un spécificateur de format définissant le format attendu de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture concernant <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />.</param>
        <summary>Convertit une étendue de caractères qui représente une date et une heure en <see cref="T:System.DateTimeOffset" /> équivalent à l’aide des informations et du style de format propres à la culture spécifiés. Le format de la représentation de la date et de l’heure doit correspondre exactement au format spécifié.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans le paramètre <paramref name="input" />, comme spécifié par les paramètres <paramref name="format" />, <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Cette méthode analyse une plage de caractères qui représente une date, qui doit être au format défini par le `format` paramètre. Elle requiert également que le \<Date >, \<temps >, et \<décalage > éléments de la représentation sous forme de chaîne de date et heure apparaissent dans l’ordre spécifié par `format`. Si `input` ne correspond pas à la `format` modèle, la méthode lève un <xref:System.FormatException>.  En revanche, le <xref:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date dans l’un des formats reconnus par le fournisseur de format <xref:System.Globalization.DateTimeFormatInfo> objet. <xref:System.DateTimeOffset.Parse%2A> permet également la \<Date >, \<temps >, et \<décalage > éléments de la représentation de chaîne d’une date et une heure pour apparaître dans n’importe quel ordre.  
  
 Le `format` paramètre est une plage de caractères qui contient un spécificateur de format standard de caractère unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le format requis de le `input` paramètre. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, la méthode lève un <xref:System.FormatException>.  
  
 Si `format` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si `format` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si `format` n’exige pas `input` contienne un offset, résultant <xref:System.DateTimeOffset> objet est assigné le décalage de fuseau horaire du système local.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définies par le `formatProvider` paramètre, ainsi que le format précis de `input` si `format` est un spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par son <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.  
ou  
Le paramètre <paramref name="styles" /> inclut une valeur non prise en charge.  
ou  
Le paramètre <paramref name="styles" /> contient des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui ne peuvent pas être utilisées ensemble.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> est une étendue de caractères vide.  
 -ou- <paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
 -ou- <paramref name="format" /> est une étendue de caractères vide.  
 ou  
 Le composant heure et l’indicateur AM/PM dans <paramref name="input" /> ne correspondent pas.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">Étendue de caractères contenant une date et une heure à convertir.</param>
        <param name="formats">Tableau des spécificateurs de format qui définissent les formats attendus de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />.</param>
        <summary>Convertit une étendue de caractères qui contient la représentation sous forme de chaîne d’une date et d’une heure en <see cref="T:System.DateTimeOffset" /> à l’aide du style, des informations de format propres à la culture et des formats spécifiés. Le format de la représentation de la date et de l’heure doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans le paramètre <paramref name="input" />, comme spécifié par les paramètres <paramref name="formats" />, <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
Cette méthode analyse une plage de caractères représentant une date qui correspond à l’un des modèles assignés à la `formats` paramètre. Si `input` ne correspond pas à l’un de ces modèles avec des variations définies par le `styles` paramètre, la méthode lève un <xref:System.FormatException>. Outre la comparaison `input` avec plusieurs modèles de mise en forme, cette surcharge se comporte de la même manière que le <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> (méthode).  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments contiennent un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle possible du `input` paramètre. Lorsque la méthode est appelée, `input` doit correspondre à un de ces modèles. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si l’élément correspondant dans `formats` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, la méthode lève un <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  À l’aide de le `formats` paramètre de cette surcharge pour spécifier plusieurs formats peut aider à réduire l’expérience de nombreux utilisateurs lorsqu’ils entrent les dates et heures de frustration. En particulier, la possibilité de définir plusieurs modèles d’entrée permet à une application gérer les représentations de date et d’heure qui peuvent inclure ou ne disposent pas des zéros non significatifs dans les mois, jours, heures, minutes et secondes.
  
 Si l’élément correspondant dans `formats` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si l’élément correspondant dans `formats` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si l’élément correspondant dans `formats` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définis par le `formatProvider` paramètre. Est de même pour le format précis de `input`, si l’élément correspondant de `formats` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si l’espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Valeur par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` à inclure un espace interne non spécifié par `format`. L’espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels (sauf pour l’offset) et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` d’inclure des espaces non spécifiées par `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiées par `formats`. Tous les caractères d’espaces supplémentaires non spécifiés dans l’élément correspondant dans `formats` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans un élément particulier du `formats` pour produire une correspondance. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet car le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.  
-ou- <paramref name="styles" /> inclut une valeur non prise en charge.  
ou  
Le paramètre <paramref name="styles" /> contient des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui ne peuvent pas être utilisées ensemble.</exception>
        <exception cref="T:System.FormatException"><paramref name="input" /> est une étendue de caractères vide.  
-ou- <paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
ou  
Aucun élément de <paramref name="formats" /> ne contient un spécificateur de format valide.  
ou  
Le composant heure et l’indicateur AM/PM dans <paramref name="input" /> ne correspondent pas.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="format">Spécificateur de format définissant le format attendu de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en <see cref="T:System.DateTimeOffset" /> équivalent à l'aide des informations et du style de format propres à la culture spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement au format spécifié.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans le paramètre <paramref name="input" />, comme spécifié par les paramètres <paramref name="format" />, <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date, qui doit être au format défini par le `format` paramètre. Elle requiert également que le \<Date >, \<temps >, et \<décalage > éléments de la représentation sous forme de chaîne de date et heure apparaissent dans l’ordre spécifié par `format`. Si le `input` chaîne ne correspondre pas au modèle de la `format` paramètre, avec les variations définies par le `styles` paramètre, la méthode lève un <xref:System.FormatException>.  En revanche, le <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date dans l’un des formats reconnus par le fournisseur de format <xref:System.Globalization.DateTimeFormatInfo> objet. <xref:System.DateTimeOffset.Parse%2A> permet également la \<Date >, \<temps >, et \<décalage > éléments de la représentation de chaîne d’une date et une heure pour apparaître dans n’importe quel ordre.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle requis de le `input` paramètre. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, la méthode lève un <xref:System.FormatException>.  
  
 Si `format` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si `format` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si `format` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définis par le `formatProvider` paramètre. Est de même pour le format précis de `input`si `format` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si un espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si `format` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Valeur par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si `format` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` à inclure un espace interne non spécifié par `format`. Espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` d’inclure des espaces non spécifiées par `format`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par `format`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiées par `format`. Tous les caractères d’espaces supplémentaires non spécifiés dans `format` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans `format`. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet car le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode avec les spécificateurs de format standard et personnalisés, la culture dite indifférente et les différents <xref:System.Globalization.DateTimeStyles> valeurs pour analyser plusieurs chaînes de date et d’heure.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  

L’exemple suivant utilise une variété de <xref:System.Globalization.DateTimeStyles> valeurs pour analyser un tableau de chaînes qui sont supposé se conformer à [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Comme le montre la sortie de l’exemple, les chaînes qui se trouvent dans le format approprié ne parviennent pas à analyser si :

- ils contiennent un espace blanc et appropriée <xref:System.Globalization.DateTimeStyles> indicateur (tel que <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> n’a pas été fourni dans l’appel de méthode.

- elles contiennent des éléments de date et d’heure qui sont hors limites.

Les chaînes qui ne spécifient pas de décalage UTC sont supposés pour avoir le décalage de fuseau horaire local (dans ce cas, -07:00), sauf si le <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur est fourni dans l’appel de méthode. Dans ce cas, elles sont supposées pour être temps universel coordonné.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/parseexact/parseexact-iso8601-2.vb)]


 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.  
  
ou 
Le paramètre <paramref name="styles" /> inclut une valeur non prise en charge.  
  
ou 
Le paramètre <paramref name="styles" /> contient des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui ne peuvent pas être utilisées ensemble.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="format" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le <paramref name="input" /> est une chaîne vide ("").  
  
ou 
 <paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
  
ou 
 <paramref name="format" /> est une chaîne vide.  
  
ou 
Le composant heure et l’indicateur AM/PM dans <paramref name="input" /> ne correspondent pas.</exception>
        <block subset="none" type="usage"><para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTimeOffset.ParseExact" /> méthode lève un <see cref="T:System.FormatException" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas dans l’accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Chaînes de format de date et d'heure standard</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Chaînes de format de date et d'heure personnalisées</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formats">Tableau des spécificateurs de format qui définissent les formats attendus de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d’une date et d’une heure dans son équivalent <see cref="T:System.DateTimeOffset" /> en utilisant le style, les informations de format propres à la culture et les formats spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns>Objet qui équivaut à la date et à l’heure figurant dans le paramètre <paramref name="input" />, comme spécifié par les paramètres <paramref name="formats" />, <paramref name="formatProvider" /> et <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> méthode analyse la représentation sous forme de chaîne d’une date qui correspond à l’un des modèles assignés à la `formats` paramètre. Si le `input` chaîne ne correspond pas à l’un de ces modèles avec des variations définies par le `styles` paramètre, la méthode lève un <xref:System.FormatException>. Outre la comparaison `input` avec plusieurs modèles de mise en forme, cette surcharge se comporte de la même manière que le <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode).  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments contiennent un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle possible du `input` paramètre. Lorsque la méthode est appelée, `input` doit correspondre à un de ces modèles. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si l’élément correspondant dans `formats` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, la méthode lève un <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  À l’aide de le `formats` paramètre de cette surcharge pour spécifier plusieurs formats peut aider à réduire l’expérience de nombreux utilisateurs lorsqu’ils entrent les dates et heures de frustration. En particulier, la possibilité de définir plusieurs modèles d’entrée permet à une application gérer les représentations de date et d’heure qui peuvent inclure ou ne disposent pas des zéros non significatifs dans les mois, jours, heures, minutes et secondes. L’exemple fournit une illustration.  
  
 Si l’élément correspondant dans `formats` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si l’élément correspondant dans `formats` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si l’élément correspondant dans `formats` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définis par le `formatProvider` paramètre. Est de même pour le format précis de `input`, si l’élément correspondant de `formats` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si l’espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Valeur par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` à inclure un espace interne non spécifié par `format`. L’espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels (sauf pour l’offset) et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` d’inclure des espaces non spécifiées par `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiées par `formats`. Tous les caractères d’espaces supplémentaires non spécifiés dans l’élément correspondant dans `formats` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans un élément particulier du `formats` pour produire une correspondance. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet car le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  
  
   
  
## Examples  
 L’exemple suivant définit plusieurs formats d’entrée pour la représentation sous forme de chaîne d’une date et l’heure et la valeur de décalage, puis passe la chaîne entrée par l’utilisateur à la <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode).  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le décalage est supérieur à 14 heures ou inférieur à -14 heures.  
  
ou 
 <paramref name="styles" /> contient une valeur non prise en charge.  
  
ou 
Le paramètre <paramref name="styles" /> contient des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui ne peuvent pas être utilisées ensemble.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Le <paramref name="input" /> est une chaîne vide ("").  
  
ou 
 <paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et heure.  
  
ou 
Aucun élément de <paramref name="formats" /> ne contient un spécificateur de format valide.  
  
ou 
Le composant heure et l’indicateur AM/PM dans <paramref name="input" /> ne correspondent pas.</exception>
        <block subset="none" type="usage"><para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTimeOffset.ParseExact" /> méthode lève un <see cref="T:System.FormatException" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas dans l’accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Chaînes de format de date et d'heure standard</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Chaînes de format de date et d'heure personnalisées</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le deuxième composant de l’heure représentée par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le deuxième composant de le <see cref="T:System.DateTimeOffset" /> objet, exprimé comme une valeur entière comprise entre 0 et 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Second%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> deuxième composant de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec le « s », ou les spécificateurs de format personnalisé « ss ».  
  
   
  
## Examples  
 L’exemple suivant affiche le deuxième composant d’un <xref:System.DateTimeOffset> objet de trois façons différentes :  
  
-   En récupérant la valeur de la <xref:System.DateTimeOffset.Second%2A> propriété.  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « s ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> spécificateur de format de méthode avec « ss ».  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Soustrait une heure spécifiée ou une durée d’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">Objet qui représente la valeur à soustraire.</param>
        <summary>Soustrait une valeur <see cref="T:System.DateTimeOffset" /> qui représente une date et une heure spécifiques de l’objet <see cref="T:System.DateTimeOffset" /> actuel.</summary>
        <returns>Objet qui spécifie l’intervalle entre les deux objets <see cref="T:System.DateTimeOffset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode convertit les deux <xref:System.DateTimeOffset> objets en temps universel coordonné (UTC) avant de calculer l’intervalle de temps qui les sépare. Cette opération supprime tout effet que les décalages différents par rapport à l’heure UTC peut avoir sur la comparaison.  
  
> [!NOTE]
>  Pour les langues qui prennent en charge des opérateurs personnalisés, vous pouvez également effectuer la soustraction de date et l’heure à l’aide de l’opérateur de soustraction. Pour plus d’informations, consultez le <xref:System.DateTimeOffset.op_Subtraction%2A> (méthode).  
  
 Étant donné que ni actuel <xref:System.DateTimeOffset> objet ni le `value` paramètre représentent la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lors de la soustraction des dates et heures.  
  
   
  
## Examples  
 L’exemple suivant illustre la soustraction qui utilise le <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> (méthode).  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervalle de temps à soustraire.</param>
        <summary>Soustrait un intervalle de temps spécifié de l’objet <see cref="T:System.DateTimeOffset" /> actuel.</summary>
        <returns>Objet égal à la date et à l’heure représentées par l’objet <see cref="T:System.DateTimeOffset" /> actuel, moins l’intervalle de temps représenté par <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.DateTimeOffset.Subtract%2A> méthode à soustraire de plusieurs types d’intervalle de temps (jours, heures, minutes, secondes ou millisecondes) en une seule opération. Son comportement est identique à la <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> (méthode), qui définit l’opérateur de soustraction. Le <xref:System.DateTimeOffset> structure prend également en charge les méthodes d’addition spécialisées (telles que <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, et <xref:System.DateTimeOffset.AddMinutes%2A>) qui vous permettent d’exécuter la soustraction en assignant une valeur négative pour le paramètre de méthode.  
  
> [!NOTE]
>  Cette méthode retourne un nouvel <xref:System.DateTimeOffset> objet. Il ne modifie pas la valeur de l’objet actuel en ajoutant `timeSpan` à sa date et d’heure.  
  
 Le <xref:System.DateTimeOffset.Subtract%2A> méthode n’affecte pas la valeur de la <xref:System.DateTimeOffset> l’objet <xref:System.DateTimeOffset.Offset%2A> propriété. Retourné <xref:System.DateTimeOffset> objet a le même offset que l’objet d’origine.  
  
 Étant donné que l’actuel <xref:System.DateTimeOffset> objet ne représente pas la date et l’heure dans un fuseau horaire spécifique, la <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> méthode ne tient pas compte des règles d’ajustement d’un fuseau horaire particulier lorsqu’elle effectue la soustraction.  
  
   
  
## Examples  
 L’exemple suivant illustre la soustraction qui utilise le <xref:System.DateTimeOffset.Subtract%2A> (méthode).  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La valeur <see cref="T:System.DateTimeOffset" /> obtenue est inférieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
La valeur <see cref="T:System.DateTimeOffset" /> obtenue est supérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Exécution d'opérations arithmétiques avec des dates et heures</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objet à comparer à l'objet <see cref="T:System.DateTimeOffset" /> actuel.</param>
        <summary>Compare la valeur de cours <see cref="T:System.DateTimeOffset" /> objet avec un autre objet du même type.</summary>
        <returns>Un entier signé 32 bits qui indique si l’actuel <see cref="T:System.DateTimeOffset" /> objet est inférieure, égale ou supérieure à <paramref name="obj" />. Les valeurs de retour de la méthode sont interprétées comme suit : 
 <list type="table"><listheader><term> Valeur de retour 
 </term><description> Description 
 </description></listheader><item><term> Inférieure à zéro 
 </term><description> Actuel <see cref="T:System.DateTimeOffset" /> objet est inférieur à (antérieur à) <paramref name="obj" />.  
  
 </description></item><item><term> Zéro 
 </term><description> Actuel <see cref="T:System.DateTimeOffset" /> objet est égal à (même instant précis que) <paramref name="obj" />.  
  
 </description></item><item><term> Supérieure à zéro 
 </term><description> Actuel <see cref="T:System.DateTimeOffset" /> objet est supérieur à (ultérieur à) <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Objet qui a initié le rappel. La fonctionnalité pour ce paramètre n'est pas implémentée actuellement.</param>
        <summary>S'exécute quand la désérialisation d'un objet a été effectuée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Objet à remplir avec des données.</param>
        <param name="context">Destination pour cette sérialisation (consultez <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Remplit un <see cref="T:System.Runtime.Serialization.SerializationInfo" /> objet avec les données nécessaires pour sérialiser actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="info" /> a la valeur <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiert une confiance totale pour l’appelant immédiat. Ce membre ne peut pas être utilisé par le code de confiance partielle ou transparent.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de graduations représentant la date et l’heure de l’actuel <see cref="T:System.DateTimeOffset" /> objet de l’horloge.</summary>
        <value>Le nombre de graduations dans le <see cref="T:System.DateTimeOffset" /> temps horloge de l’objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Ticks%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 La valeur de la <xref:System.DateTimeOffset.Ticks%2A> propriété représente le nombre d’intervalles de 100 nanosecondes qui se sont écoulées depuis 12:00:00 minuit le 1er janvier 0001 (la valeur de <xref:System.DateTimeOffset.MinValue>). Il n’inclut pas de cycles qui seraient ajoutés par les secondes intercalaires. Une nanoseconde est égale à un milliardième de seconde ; Il y a dix millions de graduations dans une seconde. La valeur de la <xref:System.DateTimeOffset.Ticks%2A> allant de la propriété `DateTimeOffset.MinValue.Ticks` à `DateTimeOffset.MaxValue.Ticks`.  
  
 Vous pouvez affecter le nombre de graduations pour un <xref:System.DateTimeOffset> objet à l’aide de la <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> surcharge de constructeur.  
  
   
  
## Examples  
 L’exemple suivant initialise un <xref:System.DateTimeOffset> objet en se rapprochant le nombre de graduations dans la date du 1er juillet 2008 1:23:07. Il affiche ensuite la date et le nombre de graduations représenté par cette date dans la console.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’heure de la journée en cours <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Intervalle de temps de la date actuelle écoulé depuis minuit.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.TimeOfDay%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Le <xref:System.DateTimeOffset.TimeOfDay%2A> propriété retourne le composant heure d’un <xref:System.DateTimeOffset> objet sous la forme d’un <xref:System.TimeSpan> objet. Elle est équivalente à la <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> propriété.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.TimeOfDay%2A> propriété à extraire l’heure et l’afficher dans la console.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTimeOffset" /> actuel en heure de fichier Windows.</summary>
        <returns>La valeur de la <see cref="T:System.DateTimeOffset" /> objet, exprimé sous la forme d’une heure de fichier Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une heure de fichier Windows est une valeur 64 bits qui représente le nombre d’intervalles de 100 nanosecondes qui se sont écoulées depuis 12:00 minuit, le 1er janvier 1601 apr. J.C. (NOTRE ÈRE) Temps d’universel coordonné (UTC). Windows utilise une heure de fichier pour enregistrer une application crée, accède ou écrit dans un fichier.  
  
 Le <xref:System.DateTimeOffset.ToFileTime%2A> méthode convertit actuel <xref:System.DateTimeOffset> date et heure en heure UTC avant d’effectuer la conversion de l’objet. En d’autres termes, en appelant le <xref:System.DateTimeOffset.ToFileTime%2A> méthode est équivalente à l’appel de méthode suivant :  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L’heure du fichier résultante représente une date et une heure antérieures à minuit le 1er janvier 1601 (notre ère) Temps d’universel coordonné (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit en cours <see cref="T:System.DateTimeOffset" /> de l’objet à un <see cref="T:System.DateTimeOffset" /> objet qui représente l’heure locale.</summary>
        <returns>Objet qui représente la date et l’heure d’actuel <see cref="T:System.DateTimeOffset" /> objet converti en heure locale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Effectuer la conversion en heure locale, la méthode convertit d’abord actuel <xref:System.DateTimeOffset> date et heure en temps universel coordonné (UTC) en soustrayant l’offset à partir de l’heure de l’objet. Il convertit ensuite la date et heure UTC en heure locale en ajoutant le décalage de fuseau horaire local. De cette façon, elle tient compte des règles d’ajustement pour le fuseau horaire local.  
  
 Les deux la valeur de la <xref:System.DateTimeOffset> objet et la valeur de la <xref:System.DateTimeOffset> objet retourné par l’appel de méthode représentent le même point dans le temps. Autrement dit, si les deux sont passés à la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> (méthode), la méthode retourne `true`.  
  
 Si la conversion génère une heure qui est hors limites de la <xref:System.DateTimeOffset> type, le <xref:System.DateTimeOffset.ToLocalTime%2A> méthode retourne un <xref:System.DateTimeOffset> objet ayant la date et l’heure définie avec la valeur <xref:System.DateTimeOffset.MaxValue> ou <xref:System.DateTimeOffset.MinValue> et le décalage de la valeur est le décalage de fuseau horaire local.  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.ToLocalTime%2A> méthode pour convertir un <xref:System.DateTimeOffset> valeur en heure locale dans le fuseau horaire Pacifique. Il illustre également la prise en charge de la méthode de règles d’ajustement du fuseau horaire local.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">Offset de conversion le <see cref="T:System.DateTimeOffset" /> valeur.</param>
        <summary>Convertit la valeur de cours <see cref="T:System.DateTimeOffset" /> objet à la date et l’heure spécifiée par une valeur de décalage.</summary>
        <returns>Un objet qui est égal à l’original <see cref="T:System.DateTimeOffset" /> objet (autrement dit, leur <see cref="M:System.DateTimeOffset.ToUniversalTime" /> méthodes retournent des instants identiques) mais dont <see cref="P:System.DateTimeOffset.Offset" /> propriété est définie sur <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.ToOffset%2A> méthode est une alternative à l’appel le <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (méthode). Il peut être utile pour effectuer des conversions simples d’un fuseau horaire à un autre lorsque les offsets des fuseaux horaires par rapport au temps universel coordonné (UTC) sont connus. Toutefois, étant donné que ni l’original <xref:System.DateTimeOffset> objet ni la nouvelle <xref:System.DateTimeOffset> objet retourné par l’appel de méthode sont clairement associés à un fuseau horaire particulier, la méthode ne s’applique pas les règles d’ajustement de fuseau horaire dans la conversion.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.DateTimeOffset.ToOffset%2A> méthode pour convertir un <xref:System.DateTimeOffset> de l’objet à un <xref:System.DateTimeOffset> objet avec un offset différent.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Résultant <see cref="T:System.DateTimeOffset" /> objet possède un <see cref="P:System.DateTimeOffset.DateTime" /> valeur antérieure à <see cref="F:System.DateTimeOffset.MinValue" />.  
  
ou 
Résultant <see cref="T:System.DateTimeOffset" /> objet possède un <see cref="P:System.DateTimeOffset.DateTime" /> valeur postérieure à <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> est inférieur à-14 heures.  
  
ou 
 <paramref name="offset" /> est supérieur à 14 heures.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTimeOffset" /> actif en sa représentation équivalente sous forme de chaîne.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTimeOffset" /> actif en sa représentation équivalente sous forme de chaîne.</summary>
        <returns>Une chaîne représentant un <see cref="T:System.DateTimeOffset" /> objet qui inclut l’offset ajouté à la fin de la chaîne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour de cette méthode est identique à celle de la <xref:System.DateTime.ToString?displayProperty=nameWithType> (méthode), à ceci près qu’il inclut un espace suivi de l’offset ajouté à la fin de la chaîne. En d’autres termes, il formate la sortie à l’aide du modèle de date courte, le modèle d’heure longue et le `zzz` chaîne de format personnalisé, avec chaque élément séparé à partir de l’élément précédent par un espace. Par exemple, si <xref:System.DateTime.ToString?displayProperty=nameWithType> retourne une valeur de 1/12/2008 6:15:50 PM, <xref:System.DateTimeOffset.ToString> retourne une valeur de 1/12/2008 6:15:50 PM -08:00 pendant une durée qui est de huit heures derrière le temps universel coordonné (UTC).  
  
 Cette méthode utilise les informations de mise en forme dérivées de la culture actuelle. Pour plus d'informations, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Autres surcharges de la <xref:System.DateTimeOffset.ToString%2A> méthode permettent de spécifier la culture dont la mise en forme à utiliser et pour définir le modèle de sortie de la <xref:System.DateTimeOffset> valeur.  
  
   
  
## Examples  
 L’exemple suivant illustre des appels à la <xref:System.DateTimeOffset.ToString> (méthode) et affiche sa sortie sur un système dont la culture actuelle est en-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par la culture actuelle.</exception>
        <block subset="none" type="usage"><para>Le <see cref="M:System.DateTimeOffset.ToString" /> méthode retourne la représentation sous forme de chaîne de date et d’heure dans le calendrier utilisé par la culture actuelle. Si la valeur de la <see cref="T:System.DateTimeOffset" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou une version <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.HijriCalendar" /> classe lors de la culture actuelle est arabe (Syrie).  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception2.cs#2)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception2.vb#2)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la valeur de cours <see cref="T:System.DateTimeOffset" /> objet à sa représentation sous forme de chaîne équivalente en utilisant les informations de mise en forme propres à la culture spécifiées.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l’objet <see cref="T:System.DateTimeOffset" /> actuel, telle que spécifiée par <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de retour de cette méthode est identique à celle de la surcharge équivalente de la <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> (méthode), à ceci près qu’il inclut un espace suivi de l’offset ajouté à la fin de la chaîne. En d’autres termes, il formate la sortie à l’aide du modèle de date courte, le modèle d’heure longue et le `zzz` chaîne de format personnalisé, avec chaque élément séparé à partir de l’élément précédent par un espace.  
  
 Le format de ces trois éléments est défini par le `formatProvider` paramètre. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture dont les conventions de mise en forme sont appliquées à la chaîne retournée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme de la chaîne retournée.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet associé à la culture actuelle est utilisé (consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 L’exemple suivant affiche un <xref:System.DateTimeOffset> à l’aide de l’objet <xref:System.Globalization.CultureInfo> objets qui représentent la culture dite indifférente, ainsi que quatre autres cultures.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para>Le <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> méthode retourne la représentation sous forme de chaîne de date et d’heure dans le calendrier utilisé par la culture représentée par le <paramref name="formatProvider" /> paramètre. Son calendrier est défini par le <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propriété. Si la valeur de la <see cref="T:System.DateTimeOffset" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou une version <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception1.cs#1)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format.</param>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTimeOffset" /> actuel en sa représentation sous forme de chaîne équivalente en utilisant le format spécifié.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l’objet <see cref="T:System.DateTimeOffset" /> actuel, telle que spécifiée par <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `format` le paramètre doit contenir un caractère spécificateur de format unique (consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou un modèle de format personnalisé (consultez [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) qui définit le format de la chaîne retournée. Si `format` est une chaîne null ou vide (" »), la <xref:System.DateTimeOffset> valeur est sortie en utilisant le format par défaut.  
  
 Le tableau suivant présente le fonctionnement exact de certains spécificateurs de format utilisé avec <xref:System.DateTimeOffset>, qui diffère de leur comportement lorsqu’il est utilisé avec <xref:System.DateTime>.  
  
|Spécificateur de format existant|Nouveau comportement|  
|-------------------------------|------------------|  
|"K"|Conçu pour effectuer un aller-retour d’une date et une heure. Avec <xref:System.DateTimeOffset>, correspond à « zzz » (l’offset est toujours affiché avec les heures et minutes). Notez que « K » est un spécificateur de format personnalisé ; Il ne peut pas apparaître en tant que caractère dans `format`.|  
|"U"|Non pris en charge.|  
|« r »|Convertit le <xref:System.DateTimeOffset> objet en temps universel coordonné (UTC) et le renvoie à l’aide de la chaîne de format personnalisée `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Convertit le <xref:System.DateTimeOffset> objet au format UTC et l’exporte en utilisant le format `yyyy-MM-dd HH:mm:ssZ`.|  
  
 Restante de date et standard des spécificateurs de format de temps se comportent de la même manière avec la <xref:System.DateTimeOffset.ToString%28System.String%29> méthode comme ils le font avec le <xref:System.DateTime.ToString%2A> (méthode).  
  
 Cette méthode utilise les informations de mise en forme dérivées de la culture actuelle. Pour plus d'informations, consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 L’exemple suivant affiche un <xref:System.DateTimeOffset> objet dans la console à l’aide de chacun des spécificateurs de format d’heure et date standard. La sortie est mise en forme à l’aide de l’en-us de culture.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La longueur de <paramref name="format" /> est égale à un, et ce n’est pas l’un des caractères spécificateurs de format standard définis pour <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
ou 
 <paramref name="format" /> ne contient pas un modèle de format personnalisé valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par la culture actuelle.</exception>
        <block subset="none" type="usage"><para>Le <see cref="M:System.DateTimeOffset.ToString(System.String)" /> méthode retourne la représentation sous forme de chaîne de date et d’heure dans le calendrier utilisé par la culture actuelle. Si la valeur de la <see cref="T:System.DateTimeOffset" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou une version <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.HebrewCalendar" /> classe lors de la culture actuelle est hébreu (Israël).  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception3.cs#3)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception3.vb#3)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Chaînes de format de date et d'heure standard</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Chaînes de format de date et d'heure personnalisées</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Chaîne de format.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture.</param>
        <summary>Convertit la valeur de l'objet <see cref="T:System.DateTimeOffset" /> actuel en sa représentation sous forme de chaîne équivalente à l'aide du format et des informations de format spécifiques à la culture spécifiés.</summary>
        <returns>Représentation sous forme de chaîne de la valeur de l’objet <see cref="T:System.DateTimeOffset" /> actif, tel que spécifié par <paramref name="format" /> et <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `format` le paramètre doit contenir un caractère spécificateur de format unique (consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) ou un modèle de format personnalisé (consultez [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ). Si `format` est une chaîne null ou vide (" »), le <xref:System.DateTimeOffset> est à l’objet de sortie en utilisant le format par défaut.  
  
 Le tableau suivant présente le fonctionnement exact de certains spécificateurs de format utilisé avec <xref:System.DateTimeOffset>, qui diffère de leur comportement lorsqu’il est utilisé avec <xref:System.DateTime>.  
  
|Spécificateur de format existant|Nouveau comportement|  
|-------------------------------|------------------|  
|"K"|Conçu pour effectuer un aller-retour d’une date et une heure. Avec <xref:System.DateTimeOffset>, correspond à « zzz » (l’offset est toujours affiché avec les heures et minutes). Notez que « K » est un spécificateur de format personnalisé ; Il ne peut pas apparaître en tant que caractère dans `format`.|  
|"U"|Non pris en charge.|  
|« r »|Convertit le <xref:System.DateTimeOffset> objet en temps universel coordonné (UTC) et le renvoie à l’aide de la chaîne de format personnalisée `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Convertit le <xref:System.DateTimeOffset> valeur au format UTC et l’exporte en utilisant le format `yyyy-MM-dd HH:mm:ssZ`.|  
  
 Restante de date et standard des spécificateurs de format de temps se comportent de la même manière avec la <xref:System.DateTimeOffset.ToString%28System.String%29> méthode comme ils le font avec le <xref:System.DateTime.ToString%2A> (méthode).  
  
 Le modèle qui correspond aux spécificateurs de format standard, ainsi que les symboles et les noms des composants de date et heure, est défini par le `formatProvider` paramètre. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture dont la mise en forme est utilisée dans `input`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit la mise en forme utilisée dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatProvider` est `null`, le <xref:System.Globalization.DateTimeFormatInfo> objet associé à la culture actuelle est utilisé (consultez <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> méthode pour afficher un <xref:System.DateTimeOffset> de l’objet à l’aide d’une chaîne de format personnalisée pour différentes cultures.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La longueur de <paramref name="format" /> est égale à un, et ce n’est pas l’un des caractères spécificateurs de format standard définis pour <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
ou 
 <paramref name="format" /> ne contient pas un modèle de format personnalisé valide.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La date et l’heure sont en dehors de la plage de dates prise en charge par le calendrier utilisé par <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage"><para>Le <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> méthode retourne la représentation sous forme de chaîne de date et d’heure dans le calendrier utilisé par le <paramref name="formatProvider" /> paramètre. Son calendrier est défini par le <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propriété. Si la valeur de la <see cref="T:System.DateTimeOffset" /> instance est antérieure à <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> ou une version <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, la méthode lève un <see cref="T:System.ArgumentOutOfRangeException" />. L'exemple suivant illustre cette situation. Il tente de mettre en forme une date qui est en dehors de la plage de la <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  
  
[!code-csharp[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/datetimeoffset.tostring.argumentoutofrangeexception4.cs#4)] [!code-vb[System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/vb/datetimeoffset.tostring.argumentoutofrangeexception4.vb#4)]</para></block>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Chaînes de format de date et d'heure standard</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Chaînes de format de date et d'heure personnalisées</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemple : utilitaire de mise en forme .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convertit en cours <see cref="T:System.DateTimeOffset" /> de l’objet à un <see cref="T:System.DateTimeOffset" /> valeur qui représente le temps universel coordonné (UTC).</summary>
        <returns>Objet qui représente la date et l’heure d’actuel <see cref="T:System.DateTimeOffset" /> objet converti en temps universel coordonné (UTC).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne un <xref:System.DateTimeOffset> de l’objet dont la propriété <xref:System.DateTimeOffset.Offset%2A> propriété est définie sur zéro.  
  
 Les deux la valeur de la <xref:System.DateTimeOffset> objet et la valeur de la <xref:System.DateTimeOffset> objet retourné par l’appel de méthode représentent le même point dans le temps. Autrement dit, si les deux sont passés à la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> (méthode), la méthode retourne `true`.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTimeOffset.ToUniversalTime%2A> méthode pour convertir une heure locale et plusieurs autres heures en temps universel coordonné (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le nombre de millisecondes qui se sont écoulées depuis 1970-01-01T00:00:00.000Z.</summary>
        <returns>Nombre de millisecondes qui se sont écoulées depuis 1970-01-01T00:00:00.000Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Temps UNIX représente le nombre de secondes qui se sont écoulées depuis 1970-01-01T00:00:00Z (1er janvier 1970, à 12 h 00 UTC). Il ne prend pas les secondes intercalaires en compte. Cette méthode retourne le nombre de millisecondes en temps Unix.  
  
 Cette méthode convertit d’abord l’instance actuelle au format UTC avant de retourner le nombre de millisecondes dans son temps Unix. Pour les valeurs de date et d’heure antérieure à 1970-01-01T00:00:00Z, cette méthode retourne une valeur négative.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le nombre de secondes qui se sont écoulées depuis 1970-01-01T00:00:00Z.</summary>
        <returns>Nombre de secondes qui se sont écoulées depuis 1970-01-01T00:00:00Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Temps UNIX représente le nombre de secondes qui se sont écoulées depuis 1970-01-01T00:00:00Z (1er janvier 1970, à 12 h 00 UTC). Il ne prend pas les secondes intercalaires en compte.  
  
 Cette méthode convertit d’abord l’instance actuelle au format UTC avant de renvoyer son temps Unix. Pour les valeurs de date et d’heure antérieure à 1970-01-01T00:00:00Z, cette méthode retourne une valeur négative.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> méthode pour retourner l’heure Unix de valeurs sont égales, peu de temps avant et peu de temps après 1970-01-01T00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit une représentation de chaîne spécifiée d’une date et une heure en son <see cref="T:System.DateTimeOffset" /> équivalente.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="result">Quand la méthode se termine, contient le <see cref="T:System.DateTimeOffset" /> équivalent à la date et à l’heure de <paramref name="input" /> si la conversion a réussi, ou <see cref="F:System.DateTimeOffset.MinValue" /> si elle a échoué. La conversion échoue si le paramètre <paramref name="input" /> a la valeur <see langword="null" /> ou ne contient pas de représentation sous forme de chaîne valide d’une date et d’une heure. Ce paramètre est passé sans être initialisé.</param>
        <summary>Essaie de convertir une représentation sous forme de chaîne spécifiée d’une date et d’une heure en son équivalent <see cref="T:System.DateTimeOffset" /> et retourne une valeur indiquant si la conversion a réussi.</summary>
        <returns><see langword="true" /> si la conversion du paramètre <paramref name="input" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> méthode est comparable à la <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue. Il analyse une chaîne avec trois éléments qui peuvent apparaître dans n’importe quel ordre et sont délimitées par un espace blanc. Ces trois éléments sont présentés dans le tableau suivant.  
  
|Élément|Exemple|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Heure >|« À 13:02:03 »|  
|\<Offset>|"-7:30"|  
  
 Bien que chacun de ces éléments est facultatif, \<décalage > ne peut pas apparaître par lui-même. Elle doit être fournie avec soit \<Date > ou \<heure >. Si \<Date > est manquant, sa valeur par défaut valeur est le jour actuel. Si \<Date > est présent mais que son composant année ne contient que deux chiffres, il est converti en une année dans le calendrier actuel de la culture actuelle en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Si \<temps > est manquant, sa valeur par défaut la valeur est 12:00:00 AM. Si \<Offset > est manquant, sa valeur par défaut valeur est le décalage du fuseau horaire local. Si \<Offset > est présent, il peut représenter une valeur négative ou un décalage positif par rapport au temps universel coordonné (UTC). Dans les deux cas, \<décalage > doit inclure un symbole de signe ou la méthode retourne `false`.  
  
 Le `input` chaîne est analysée en utilisant les informations de mise en forme dans un <xref:System.Globalization.DateTimeFormatInfo> objet initialisé pour la culture actuelle. Pour analyser une chaîne qui contient la mise en forme désignée qui ne correspond pas nécessairement à celle de la culture actuelle, utilisez la <xref:System.DateTimeOffset.TryParseExact%2A> méthode et fournir un spécificateur de format.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> méthode pour analyser plusieurs chaînes avec différents formats de date et d’heure.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Exemple : utilitaire de mise en forme .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture concernant <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />.</param>
        <param name="result">Quand la méthode est retournée, contient la valeur <see cref="T:System.DateTimeOffset" /> équivalente à la date et à l’heure de <paramref name="input" /> si la conversion a réussi, ou <see cref="F:System.DateTimeOffset.MinValue" /> si elle a échoué. La conversion échoue si le paramètre <paramref name="input" /> a la valeur <see langword="null" /> ou ne contient pas de représentation sous forme de chaîne valide d’une date et d’une heure. Ce paramètre est passé sans être initialisé.</param>
        <summary>Essaie de convertir une représentation sous forme de chaîne spécifiée d’une date et d’une heure en son <see cref="T:System.DateTimeOffset" /> équivalent, et retourne une valeur indiquant si la conversion a réussi.</summary>
        <returns><see langword="true" /> si la conversion du paramètre <paramref name="input" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> méthode est comparable à la <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode), à ceci près qu’elle ne lève pas d’exception si la conversion échoue. La méthode analyse une chaîne avec trois éléments qui peuvent apparaître dans n’importe quel ordre et sont délimitées par un espace blanc. Ces trois éléments sont présentés dans le tableau suivant.  
  
|Élément|Exemple|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Heure >|« À 13:02:03 »|  
|\<Offset>|"-7:30"|  
  
 Bien que chacun de ces éléments est facultatif, \<décalage > ne peut pas apparaître par lui-même. Elle doit être fournie avec soit \<Date > ou \<heure >. Si \<Date > est manquant, sa valeur par défaut valeur est le jour actuel. Si \<Date > est présent mais que son composant année ne contient que deux chiffres, il est converti en une année dans le `provider` calendrier actuel du paramètre en fonction de la valeur de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propriété. Si \<temps > est manquant, sa valeur par défaut la valeur est 12:00:00 AM. Si \<Offset > est manquant, sa valeur par défaut valeur est le décalage du fuseau horaire local, ou <xref:System.TimeSpan.Zero> si le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> ou <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> valeur est spécifiée dans `styles`. Si \<Offset > est présent, il peut représenter une valeur négative ou un décalage positif par rapport au temps universel coordonné (UTC). Dans les deux cas, \<décalage > doit inclure un symbole de signe ou la méthode retourne `false`.  
  
 Le `input` chaîne est analysée en utilisant les informations de mise en forme propres à la culture dans un <xref:System.Globalization.DateTimeFormatInfo> objet fourni par le `formatProvider` paramètre. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture dont la mise en forme est utilisée dans `input`. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit le format utilisé dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 En outre, chaque élément peut être délimité par des espaces blancs de début ou de fin et le \<Date > et \<temps > composants peuvent inclure un espace blanc interne (par exemple 6 :   00:00). Uniquement la \<décalage > composant ne peut pas inclure d’espace interne.  
  
 Si `provider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le signe positif ou négatif utilisé dans \<décalage > doit avoir la valeur + ou -. Il n’est pas défini par le <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> ou <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriétés de la <xref:System.Globalization.NumberFormatInfo> objet retourné par la `formatprovider` du paramètre <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété.  
  
 Les membres suivants de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge :  
  
|Membre DateTimeStyles|Commentaires|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse la chaîne représentée par `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, avant d’appeler l’objet retourné <xref:System.DateTimeOffset.ToUniversalTime> (méthode).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Bien que valide, cette valeur est ignorée. Espace interne est autorisé dans le \<Date > et \<temps > composants.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Bien que valide, cette valeur est ignorée. Espace blanc de début est autorisé devant chaque composant dans la chaîne analysée.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Bien que valide, cette valeur est ignorée. Espace blanc de fin est autorisé devant chaque composant dans la chaîne analysée.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Il s'agit du comportement par défaut. Il ne peut pas être substitué en fournissant plus restrictif <xref:System.Globalization.DateTimeStyles> valeur d’énumération, telle que <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Indique que, si le `input` ne dispose pas de paramètre un \<Offset > élément, le décalage du fuseau horaire local doit être fourni. Il s’agit du comportement par défaut de la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> (méthode).|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Indique que, si le `input` ne dispose pas de paramètre un \<Offset > élément, le décalage UTC (00:00) doit être fourni.|  
|<xref:System.Globalization.DateTimeStyles.None>|Bien que valide, cette valeur est ignorée et n’a aucun effet.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Étant donné que le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété, cette valeur n’a aucun effet.|  
  
 Uniquement la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> valeur n’est pas prise en charge. Un <xref:System.ArgumentException> est levée si cette valeur est incluse dans le `styles` paramètre.  
  
   
  
## Examples  
 L’exemple suivant appelle la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> méthode avec un large éventail de <xref:System.Globalization.DateTimeStyles> valeurs pour analyser des chaînes avec différents formats de date et d’heure.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclut une valeur <see cref="T:System.Globalization.DateTimeStyles" /> non définie.  
  
ou 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> n'est pas pris en charge.  
  
ou 
 <paramref name="styles" /> inclut des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui s’excluent mutuellement.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en son équivalent <see cref="T:System.DateTimeOffset" />. Le format de la représentation sous forme de chaîne doit correspondre exactement à un format spécifié.</summary>
        <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]        

         ]]></format>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">Étendue de caractères contenant la représentation d’une date et d’une heure à convertir.</param>
        <param name="format">Spécificateur de format définissant le format requis de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <param name="styles">Combinaison d'opérations de bits de valeurs d'énumération qui indique le format autorisé du paramètre <paramref name="input" />. Une valeur typique à spécifier est <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
        <param name="result">Quand la méthode retourne, elle contient le <see cref="T:System.DateTimeOffset" /> équivalent à la date et à l’heure de <paramref name="input" /> si la conversion a réussi, ou <see cref="F:System.DateTimeOffset.MinValue" /> si elle a échoué. La conversion échoue si</param>
        <summary>Convertit la représentation d’une date et d’une heure dans une étendue de caractères en <see cref="System.DateTimeOffset" /> équivalent à l’aide des informations et du style de format propres à la culture spécifiés. Le format de la représentation de la date et de l’heure doit correspondre exactement au format spécifié.</summary>
        <returns><see langword="true" /> si la conversion du paramètre <paramref name="input" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Cette surcharge est comme le <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> (méthode), sauf que cette méthode ne lève pas d’exception si la conversion échoue. Il analyse la représentation sous forme d’une date et d’heure qui doivent correspondre exactement au modèle spécifié par le `format` paramètre. Si `input` ne correspond pas à ce modèle, avec quelques variations possibles des espaces définis par le `styles` paramètre, l’opération d’analyse échoue et la méthode retourne `false`.  
  
Le `format` paramètre est une plage de caractères qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle requis du `input`. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, l’opération d’analyse échoue et la méthode retourne `false`.  
  
Si `format` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si `format` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si `format` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définis par le `formatProvider` paramètre. Vaut également pour le modèle précis de `input` si `format` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et les formats standards autorisés dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si un espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une représentation sous forme de date et heure, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si `format` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si `format` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` pour inclure un espace interne non spécifié par le format. L’espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels, autre que le décalage et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` d’inclure des espaces non spécifiées par `format`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par `format`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiées par `format`. Tous les caractères d’espaces supplémentaires non spécifiés dans `format` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans `format`. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet, car la <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclut une valeur <see cref="T:System.Globalization.DateTimeStyles" /> non définie.  
-ou- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> n’est pas pris en charge.  
-ou- <paramref name="styles" /> inclut des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui s’excluent mutuellement.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks
 
Cette méthode analyse la représentation sous forme de chaîne d’une date qui correspond à l’un des modèles assignés à la `formats` tableau. Si `input` ne correspond pas à l’un de ces modèles avec les variations définies par le `styles` paramètre, l’opération d’analyse échoue et la méthode retourne `false`. Outre la comparaison `input` plusieurs chaînes qui contiennent des spécificateurs de format, cette surcharge se comporte de manière identique à la <xref:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?displayProperty=nameWithType> (méthode).  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments contiennent un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle possible de `input`. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si l’élément correspondant dans `formats` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, l’opération d’analyse échoue et la méthode retourne `false`.  
  
> [!IMPORTANT]
>  À l’aide de le `formats` paramètre de cette surcharge pour spécifier plusieurs formats peut aider à réduire l’expérience de nombreux utilisateurs lorsqu’ils entrent les dates et heures de frustration. En particulier, la possibilité de définir plusieurs modèles d’entrée permet à une application gérer les représentations de date et d’heure qui peuvent inclure ou ne disposent pas des zéros non significatifs dans les mois, jours, heures, minutes et secondes. L’exemple fournit une illustration.  
  
 Si l’élément correspondant dans `formats` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si l’élément correspondant dans `formats` requiert que l’entrée contient une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si l’élément correspondant dans `formats` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
 La date donnée et les symboles de temps utilisés dans `input` sont définis par le `formatProvider` paramètre. Vaut également pour le modèle précis de `input` si l’élément correspondant de `formats` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si l’espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Valeur par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` à inclure un espace interne non spécifié par les éléments dans `formats`. L’espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels (sauf pour le décalage) et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` pour inclure des espaces non spécifiées par les éléments dans `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par les éléments dans `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiés par les éléments dans `formats`. Tous les caractères d’espaces supplémentaires non spécifiés dans l’élément correspondant dans `formats` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans un élément particulier dans `formats` pour produire une correspondance réussie. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet car le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclut une valeur <see cref="T:System.Globalization.DateTimeStyles" /> non définie.  
-ou- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> n’est pas pris en charge.  
-ou- <paramref name="styles" /> inclut des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui s’excluent mutuellement.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="format">Spécificateur de format définissant le format requis de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <param name="styles">Combinaison de bits de valeurs d'énumération qui indique le format autorisé de l'entrée. Une valeur typique à spécifier est <see langword="None" />.</param>
        <param name="result">Quand la méthode se termine, contient le <see cref="T:System.DateTimeOffset" /> équivalent à la date et à l’heure de <paramref name="input" /> si la conversion a réussi, ou <see cref="F:System.DateTimeOffset.MinValue" /> si elle a échoué. La conversion échoue si le paramètre <paramref name="input" /> est <see langword="null" /> ou ne contient aucune représentation sous forme de chaîne valide d’une date et d’une heure au format attendu défini par <paramref name="format" /> et <c>provider</c>. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et d'une heure en <see cref="T:System.DateTimeOffset" /> équivalent à l'aide des informations et du style de format propres à la culture spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement au format spécifié.</summary>
        <returns><see langword="true" /> si la conversion du paramètre <paramref name="input" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette surcharge de la <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> méthode est comparable à la <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode), sauf que cette méthode ne lève pas d’exception si la conversion échoue. Il analyse la représentation sous forme de chaîne d’une date et d’heure qui doivent correspondre exactement au modèle spécifié par le `format` paramètre. Si le `input` chaîne ne correspond pas à ce modèle, avec quelques variations possibles des espaces définis par le `styles` paramètre, l’opération d’analyse échoue et la méthode retourne `false`.  
  
 Le `format` paramètre est une chaîne qui contient un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle requis du `input`. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, l’opération d’analyse échoue et la méthode retourne `false`.  
  
 Si `format` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si `format` requiert que `input` contiennent une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si `format` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définis par le `formatProvider` paramètre. Vaut également pour le modèle précis de `input` si `format` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et les formats standards autorisés dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si un espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si `format` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si `format` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` pour inclure un espace interne non spécifié par le format. L’espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels, autre que le décalage et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` d’inclure des espaces non spécifiées par `format`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par `format`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiées par `format`. Tous les caractères d’espaces supplémentaires non spécifiés dans `format` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans `format`. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet, car la <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  
  
## Examples 

 L’exemple suivant utilise le <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> méthode avec les spécificateurs de format standard et personnalisés, la culture dite indifférente et les différents <xref:System.Globalization.DateTimeStyles> valeurs pour analyser plusieurs chaînes de date et d’heure.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  

L’exemple suivant utilise une variété de <xref:System.Globalization.DateTimeStyles> valeurs pour analyser un tableau de chaînes qui sont supposé se conformer à [ISO 8601](~/docs/standard/base-types/standard-date-and-time-format-strings.md#the-round-trip-o-o-format-specifier). Comme le montre la sortie de l’exemple, les chaînes qui se trouvent dans le format approprié ne parviennent pas à analyser si :

- ils contiennent un espace blanc et appropriée <xref:System.Globalization.DateTimeStyles> indicateur (tel que <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> n’a pas été fourni dans l’appel de méthode.

- elles contiennent des éléments de date et d’heure qui sont hors limites.

Les chaînes qui ne spécifient pas de décalage UTC sont supposés pour avoir le décalage de fuseau horaire local (dans ce cas, -07:00, ce qui reflète le décalage de la zone heure du Pacifique), sauf si le <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> indicateur est fourni dans l’appel de méthode. Dans ce cas, elles sont supposées pour être temps universel coordonné.

[!code-csharp[Parsing ISO 8601 strings](~/samples/snippets/csharp/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.cs)]
[!code-vb[Parsing ISO 8601 strings](~/samples/snippets/visualbasic/api/system/datetimeoffset/tryparseexact/tryparseexacto8601-2.vb)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclut une valeur <see cref="T:System.Globalization.DateTimeStyles" /> non définie.  
  
ou 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> n'est pas pris en charge.  
  
ou 
 <paramref name="styles" /> inclut des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui s’excluent mutuellement.</exception>
        <block subset="none" type="usage"><para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTimeOffset.TryParseExact" /> retourne <see langword="false" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas dans l’accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para></block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne contenant une date et une heure à convertir.</param>
        <param name="formats">Tableau qui définit les formats attendus de <paramref name="input" />.</param>
        <param name="formatProvider">Objet qui fournit des informations de mise en forme propres à la culture sur <paramref name="input" />.</param>
        <param name="styles">Combinaison de bits de valeurs d'énumération qui indique le format autorisé de l'entrée. Une valeur typique à spécifier est <see langword="None" />.</param>
        <param name="result">Quand la méthode se termine, contient le <see cref="T:System.DateTimeOffset" /> équivalent à la date et à l’heure de <paramref name="input" /> si la conversion a réussi, ou <see cref="F:System.DateTimeOffset.MinValue" /> si elle a échoué. La conversion échoue si <paramref name="input" /> ne contient pas de représentation sous forme de chaîne valide d’une date et d’une heure ou si elle ne contient pas la date et l’heure au format attendu défini par <paramref name="format" />, ou si <paramref name="formats" /> a la valeur <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
        <summary>Convertit la représentation sous forme de chaîne spécifiée d'une date et heure en son équivalent <see cref="T:System.DateTimeOffset" /> à l'aide du tableau de formats, des informations et du style de format propres à la culture spécifiés. Le format de la représentation sous forme de chaîne doit correspondre exactement à l'un des formats spécifiés.</summary>
        <returns><see langword="true" /> si la conversion du paramètre <paramref name="input" /> a réussi ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> méthode analyse la représentation sous forme de chaîne d’une date qui correspond à l’un des modèles assignés à la `formats` tableau. Si le `input` chaîne ne correspond pas à l’un de ces modèles avec les variations définies par le `styles` paramètre, l’opération d’analyse échoue et la méthode retourne `false`. Outre la comparaison `input` plusieurs chaînes qui contiennent des spécificateurs de format, cette surcharge se comporte de manière identique à la <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (méthode).  
  
 Le `formats` paramètre est un tableau de chaînes dont les éléments contiennent un spécificateur de format standard unique ou un ou plusieurs spécificateurs de format personnalisé qui définissent le modèle possible de `input`. Pour plus d’informations sur les codes de mise en forme valides, consultez [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) et [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si l’élément correspondant dans `formats` inclut le `z`, `zz`, ou `zzz` spécificateur de format personnalisé pour indiquer qu’un offset doit être présent dans `input`, cet offset doit inclure un signe négatif ou un signe positif. Si le signe est manquant, l’opération d’analyse échoue et la méthode retourne `false`.  
  
> [!IMPORTANT]
>  À l’aide de le `formats` paramètre de cette surcharge pour spécifier plusieurs formats peut aider à réduire l’expérience de nombreux utilisateurs lorsqu’ils entrent les dates et heures de frustration. En particulier, la possibilité de définir plusieurs modèles d’entrée permet à une application gérer les représentations de date et d’heure qui peuvent inclure ou ne disposent pas des zéros non significatifs dans les mois, jours, heures, minutes et secondes. L’exemple fournit une illustration.  
  
 Si l’élément correspondant dans `formats` requiert que `input` contiennent une date sans heure, résultant <xref:System.DateTimeOffset> objet est assigné à minuit (0 : 00:00). Si l’élément correspondant dans `formats` requiert que l’entrée contient une heure mais pas une date, résultant <xref:System.DateTimeOffset> objet est assigné à la date actuelle sur le système local. Si l’élément correspondant dans `formats` n’exige pas `input` contienne un offset, l’offset de la <xref:System.DateTimeOffset> objet dépend de la valeur de la `styles` paramètre. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeLocal>, l’offset de fuseau horaire local est assigné à la <xref:System.DateTimeOffset> objet. Si `styles` inclut <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, l’offset de temps universel coordonné (UTC), ou + 00:00, est assigné à la <xref:System.DateTimeOffset> objet. Si aucune valeur n’est spécifiée, le décalage du fuseau horaire local est utilisé.  
  
 Les date particulière et les symboles de temps et les chaînes utilisées dans `input` sont définis par le `formatProvider` paramètre. Vaut également pour le modèle précis de `input` si l’élément correspondant de `formats` est une chaîne du spécificateur de format standard. Le `formatProvider` paramètre peut être une des opérations suivantes :  
  
-   Un <xref:System.Globalization.CultureInfo> objet qui représente la culture en fonction duquel `input` est interprétée. Le <xref:System.Globalization.DateTimeFormatInfo> objet retourné par la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propriété définit les symboles et la mise en forme dans `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objet qui définit le format des données de date et d’heure.  
  
 Si `formatprovider` est `null`, le <xref:System.Globalization.CultureInfo> objet qui correspond à la culture actuelle est utilisé.  
  
 Le `styles` paramètre définit si l’espace blanc est autorisé dans la chaîne d’entrée, indique la manière dont les chaînes sans composant d’offset explicite sont analysées et prend en charge la conversion UTC dans le cadre de l’opération d’analyse. Tous les membres de la <xref:System.Globalization.DateTimeStyles> énumération sont pris en charge, à l’exception <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. Le tableau suivant répertorie l’effet de chaque membre pris en charge.  
  
|Membre`DateTimeStyles` |Comportement|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analyse `input` et, si nécessaire, le convertit au format UTC. Il est équivalent à l’analyse d’une chaîne, puis en appelant le <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> méthode retourné <xref:System.DateTimeOffset> objet.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage de fuseau horaire local. Valeur par défaut.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si l’élément correspondant dans `formats` n’exige pas `input` contiennent une valeur de décalage retournée <xref:System.DateTimeOffset> objet se voit attribuer le décalage UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permet de `input` à inclure un espace interne non spécifié par les éléments dans `formats`. L’espace supplémentaire peut apparaître entre les composants de date et d’heure et au sein des composants individuels (sauf pour le décalage) et est ignoré lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permet de `input` pour inclure des espaces non spécifiées par les éléments dans `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permet de `input` pour inclure des espaces de fin non spécifiés par les éléments dans `formats`. Ceux-ci sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permet de `input` des espaces de début, fin et internes non spécifiés par les éléments dans `formats`. Tous les caractères d’espaces supplémentaires non spécifiés dans l’élément correspondant dans `formats` sont ignorés lors de l’analyse de la chaîne.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indique que l’espace supplémentaire n’est pas autorisée dans `input`. Espace blanc doit apparaître exactement comme spécifié dans un élément particulier dans `formats` pour produire une correspondance réussie. Il s'agit du comportement par défaut.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|N’a aucun effet car le <xref:System.DateTimeOffset> structure n’inclut pas un `Kind` propriété.|  
  
   
  
## Examples  
 L’exemple suivant définit plusieurs formats d’entrée pour la représentation sous forme de chaîne d’une date et l’heure et la valeur de décalage, puis passe la chaîne entrée par l’utilisateur à la <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> (méthode).  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> inclut une valeur <see cref="T:System.Globalization.DateTimeStyles" /> non définie.  
  
ou 
 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> n'est pas pris en charge.  
  
ou 
 <paramref name="styles" /> inclut des valeurs <see cref="T:System.Globalization.DateTimeStyles" /> qui s’excluent mutuellement.</exception>
        <block subset="none" type="usage"><para>Dans le [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], le <see cref="Overload:System.DateTimeOffset.TryParseExact" /> retourne <see langword="false" /> si la chaîne à analyser contient un composant « heure » et un indicateur AM/PM qui ne sont pas dans l’accord. Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et les versions antérieures, l’indicateur AM/PM est ignoré.</para></block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.DateTime" /> valeur qui représente la date du temps universel coordonné (UTC) et l’heure de l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>La date du temps universel coordonné (UTC) et l’heure de l’actuel <see cref="T:System.DateTimeOffset" /> objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.UtcDateTime%2A> propriété exécute une double conversion :  
  
-   Elle convertit la date et l’heure d’actuel <xref:System.DateTimeOffset> objet en temps universel coordonné (UTC). La conversion est effectuée en soustrayant la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété à partir de la date et l’heure d’actuel <xref:System.DateTimeOffset> objet.  
  
-   Il convertit le <xref:System.DateTimeOffset> valeur un <xref:System.DateTime> valeur.  
  
 Le <xref:System.DateTime.Kind%2A> propriété de retourné <xref:System.DateTimeOffset.DateTime%2A> a la valeur <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Récupération de la valeur de la <xref:System.DateTimeOffset.UtcDateTime%2A> propriété est équivalente à l’appel actuel <xref:System.DateTimeOffset> l’objet `ToUniversalTime.DateTime` propriété, à ceci près que le <xref:System.DateTime.Kind%2A> propriété de ce dernier <xref:System.DateTime> valeur est <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant illustre l’utilisation de la <xref:System.DateTimeOffset.UtcDateTime%2A> propriété pour afficher un <xref:System.DateTimeOffset> valeur et l’heure UTC correspondante.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.DateTimeOffset" /> objet dont la date et heure sont définies à la date du temps universel coordonné (UTC) et l’heure actuelle et dont l’offset est <see cref="F:System.TimeSpan.Zero" />.</summary>
        <value>Un objet dont la date et heure est le temps universel coordonné (UTC) actuel et dont l’offset est <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.UtcNow%2A> propriété calcule le temps universel coordonné (UTC actuel) basé sur l’heure de l’horloge du système local et un offset défini par le fuseau horaire du système local.  
  
 La précision du composant « milliseconde » de l’heure UTC actuelle dépend de la résolution de l’horloge système. Sur Windows NT 3.5 et versions ultérieur et les systèmes d’exploitation Windows Vista, la résolution de l’horloge est d’environ 10 à 15 millisecondes.  
  
   
  
## Examples  
 L’exemple suivant illustre la relation entre le temps universel coordonné (UTC) et l’heure locale.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de graduations représentant la date et l’heure de l’actuel <see cref="T:System.DateTimeOffset" /> objet dans le temps universel coordonné (UTC).</summary>
        <value>Le nombre de graduations dans le <see cref="T:System.DateTimeOffset" /> temps universel coordonné (UTC l’objet).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.DateTimeOffset.UtcTicks%2A> propriété représente le nombre d’intervalles de 100 nanosecondes qui se sont écoulées depuis 12:00:00 minuit le 1er janvier 0001 (la valeur de <xref:System.DateTimeOffset.MinValue>). Il n’inclut pas de cycles qui seraient ajoutés par les secondes intercalaires. Une nanoseconde est égale à un milliardième de seconde ; Il y a dix millions de graduations dans une seconde. La valeur de la <xref:System.DateTimeOffset.UtcTicks%2A> allant de la propriété `DateTimeOffset.MinValue.Ticks` à `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant « année » de la date représentée par l’actuel <see cref="T:System.DateTimeOffset" /> objet.</summary>
        <value>Le composant année d’actuel <see cref="T:System.DateTimeOffset" /> objet, exprimé comme une valeur entière comprise entre 0 et 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.DateTimeOffset.Year%2A> propriété n’est pas affectée par la valeur de la <xref:System.DateTimeOffset.Offset%2A> propriété.  
  
 Vous pouvez également créer une représentation sous forme de chaîne d’un <xref:System.DateTimeOffset> composant « année » de l’objet en appelant le <xref:System.DateTimeOffset.ToString%2A> méthode avec les spécificateurs de format personnalisé « y », « yy » ou « yyyy ».  
  
   
  
## Examples  
 L’exemple suivant affiche le composant « année » d’un <xref:System.DateTimeOffset> valeur de quatre manières différentes :  
  
-   En récupérant la valeur de la <xref:System.DateTimeOffset.Year%2A> propriété.  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « y ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « yy ».  
  
-   En appelant le <xref:System.DateTimeOffset.ToString%28System.String%29> méthode avec le spécificateur de format « aaaa ».  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>