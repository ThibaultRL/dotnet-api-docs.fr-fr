<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e20c8535ae8408809fb2522e536698f6916071dc" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65136250" /></Metadata><TypeSignature Language="C#" Value="public struct Memory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"><span data-ttu-id="c6218-101">Type des éléments dans le <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-101">The type of items in the <see cref="T:System.Memory`1" />.</span></span></typeparam>
    <summary><span data-ttu-id="c6218-102">Représente une zone contiguë de mémoire.</span><span class="sxs-lookup"><span data-stu-id="c6218-102">Represents a contiguous region of memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="c6218-103">Comme <xref:System.Span%601>, `Memory<T>` représente une zone contiguë de mémoire.</span><span class="sxs-lookup"><span data-stu-id="c6218-103">Like <xref:System.Span%601>, `Memory<T>` represents a contiguous region of memory.</span></span> <span data-ttu-id="c6218-104">Contrairement aux <xref:System.Span%601>, toutefois, `Memory<T>` n’est pas un [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span><span class="sxs-lookup"><span data-stu-id="c6218-104">Unlike <xref:System.Span%601>, however, `Memory<T>` is not a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types).</span></span> <span data-ttu-id="c6218-105">Cela signifie que `Memory<T>` peut être placé sur le tas managé, tandis que <xref:System.Span%601> ne peut pas.</span><span class="sxs-lookup"><span data-stu-id="c6218-105">This means that `Memory<T>` can be placed on the managed heap, whereas <xref:System.Span%601> cannot.</span></span> <span data-ttu-id="c6218-106">Par conséquent, le `Memory<T>` structure n’a pas les mêmes restrictions qu’un <xref:System.Span%601> instance.</span><span class="sxs-lookup"><span data-stu-id="c6218-106">As a result, the `Memory<T>` structure does not have the same restrictions as a <xref:System.Span%601> instance.</span></span> <span data-ttu-id="c6218-107">En particulier :</span><span class="sxs-lookup"><span data-stu-id="c6218-107">In particular:</span></span>

- <span data-ttu-id="c6218-108">Il peut être utilisé en tant que champ dans une classe.</span><span class="sxs-lookup"><span data-stu-id="c6218-108">It can be used as a field in a class.</span></span>

- <span data-ttu-id="c6218-109">Elle peut être utilisée pour les `await` et `yield` des limites.</span><span class="sxs-lookup"><span data-stu-id="c6218-109">It can be used across `await` and `yield` boundaries.</span></span>

<span data-ttu-id="c6218-110">En plus de `Memory<T>`, vous pouvez utiliser <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> représentent immuable ou de la mémoire morte.</span><span class="sxs-lookup"><span data-stu-id="c6218-110">In addition to `Memory<T>`, you can use <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> to represent immutable or read-only memory.</span></span>

    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="c6218-111">Tableau à partir duquel créer l’objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-111">The array from which to create the <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="c6218-112">Crée un objet <see cref="T:System.Memory`1" /> sur l’intégralité d’un tableau spécifié.</span><span class="sxs-lookup"><span data-stu-id="c6218-112">Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-113">Si `array` est `null`, ce constructeur retourne un <xref:System.Memory%601> de l’objet avec un `default<T>` valeur.</span><span class="sxs-lookup"><span data-stu-id="c6218-113">If `array` is `null`, this constructor returns a <xref:System.Memory%601> object with a `default<T>` value.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="c6218-114"><paramref name="T" /> est un type référence et <paramref name="array" /> n’est pas un tableau de type <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-114"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span>
        
<span data-ttu-id="c6218-115">ou</span><span class="sxs-lookup"><span data-stu-id="c6218-115">-or-</span></span>

<span data-ttu-id="c6218-116">Le tableau est <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span><span class="sxs-lookup"><span data-stu-id="c6218-116">The array is <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="c6218-117">Le tableau source.</span><span class="sxs-lookup"><span data-stu-id="c6218-117">The source array.</span></span></param>
        <param name="start"><span data-ttu-id="c6218-118">Index du premier élément à inclure dans le nouveau <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-118">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <param name="length"><span data-ttu-id="c6218-119">Nombre d’éléments à inclure dans le nouveau <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-119">The number of elements to include in the new <see cref="T:System.Memory`1" />.</span></span></param>
        <summary><span data-ttu-id="c6218-120">Crée un objet <see cref="T:System.Memory`1" /> qui inclut un nombre spécifié d’élément à partir d’un tableau commençant à l’index spécifié.</span><span class="sxs-lookup"><span data-stu-id="c6218-120">Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-121">Si `array` est `null`, ce constructeur retourne un <xref:System.Memory%601> de l’objet avec un `default<T>` valeur.</span><span class="sxs-lookup"><span data-stu-id="c6218-121">If `array` is `null`, this constructor returns a  <xref:System.Memory%601> object with a `default<T>` value.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c6218-122"><paramref name="array" /> est <see langword="null" />, mais <paramref name="start" /> ou <paramref name="length" /> est différent de zéro.</span><span class="sxs-lookup"><span data-stu-id="c6218-122"><paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span></span>


<span data-ttu-id="c6218-123">ou</span><span class="sxs-lookup"><span data-stu-id="c6218-123">-or-</span></span>

<span data-ttu-id="c6218-124"><paramref name="start" /> est en dehors des limites du tableau.</span><span class="sxs-lookup"><span data-stu-id="c6218-124"><paramref name="start" /> is outside the bounds of the array.</span></span>

<span data-ttu-id="c6218-125">ou</span><span class="sxs-lookup"><span data-stu-id="c6218-125">-or-</span></span>

<span data-ttu-id="c6218-126"><paramref name="start" /> et <paramref name="length" /> dépassent le nombre d’éléments dans le tableau.</span><span class="sxs-lookup"><span data-stu-id="c6218-126"><paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span></span></exception>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="c6218-127"><paramref name="T" /> est un type référence et <paramref name="array" /> n’est pas un tableau de type <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-127"><paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="c6218-128">Objet <see cref="T:System.Memory`1" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="c6218-128">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="c6218-129">Copie le contenu d’un objet <see cref="T:System.Memory`1" /> dans un objet <see cref="T:System.Memory`1" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="c6218-129">Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-130">Cette méthode copie tout le contenu de l’actuel <xref:System.Memory%601> l’instance à `destination` même si le contenu de l’instance actuelle et `destination` se chevauchent.</span><span class="sxs-lookup"><span data-stu-id="c6218-130">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c6218-131">La longueur de <paramref name="destination" /> est inférieure à la longueur de l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-131">The length of <paramref name="destination" /> is less than the length of the current instance.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6218-132">Retourne un vide <see cref="T:System.Memory`1" /> objet.</span><span class="sxs-lookup"><span data-stu-id="c6218-132">Returns an empty <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <value><span data-ttu-id="c6218-133">Un objet vide.</span><span class="sxs-lookup"><span data-stu-id="c6218-133">An empty object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="c6218-134">Objet à comparer à l'instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-134">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="c6218-135">Détermine si l'objet <see cref="T:System.Memory`1" /> spécifié est identique à l'objet actuel.</span><span class="sxs-lookup"><span data-stu-id="c6218-135">Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="c6218-136"><see langword="true" /> si l'instance actuelle et <paramref name="other" /> sont égaux ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-136"><see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-137">Les deux objets sont égaux si :</span><span class="sxs-lookup"><span data-stu-id="c6218-137">The two objects are equal if:</span></span>

   - <span data-ttu-id="c6218-138">`other` est un <xref:System.Memory%601> ou <xref:System.ReadOnlyMemory%601> objet.</span><span class="sxs-lookup"><span data-stu-id="c6218-138">`other` is a <xref:System.Memory%601> or <xref:System.ReadOnlyMemory%601> object.</span></span>
   
   - <span data-ttu-id="c6218-139">Les deux objets pointent vers le même tableau et aient la même longueur.</span><span class="sxs-lookup"><span data-stu-id="c6218-139">Both objects point to the same array and have the same length.</span></span>

<span data-ttu-id="c6218-140">Le `Equals(Memory<T>)` méthode effectue un test de l’égalité des références ; elle ne compare pas les éléments de <xref:System.Memory%601> d’égalité.</span><span class="sxs-lookup"><span data-stu-id="c6218-140">The `Equals(Memory<T>)` method performs a test for reference equality; it does not compare the elements of <xref:System.Memory%601> for equality.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c6218-141">Objet à comparer à l'instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-141">The object to compare with the current instance.</span></span></param>
        <summary><span data-ttu-id="c6218-142">Détermine si l'objet spécifié est identique à l'objet actuel.</span><span class="sxs-lookup"><span data-stu-id="c6218-142">Determines whether the specified object is equal to the current object.</span></span></summary>
        <returns><span data-ttu-id="c6218-143"><see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-143"><see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-144">Deux <xref:System.Memory%601> objets sont égaux si les deux objets pointent vers le même tableau et aient la même longueur.</span><span class="sxs-lookup"><span data-stu-id="c6218-144">Two <xref:System.Memory%601> objects are equal if both objects point to the same array and have the same length.</span></span> <span data-ttu-id="c6218-145">Notez que le test d’égalité ne vérifie pas si le contenu est égaux.</span><span class="sxs-lookup"><span data-stu-id="c6218-145">Note that the test for equality does not check whether the contents are equal.</span></span>
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c6218-146">Retourne le code de hachage de cette instance.</span><span class="sxs-lookup"><span data-stu-id="c6218-146">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="c6218-147">Code de hachage d'un entier signé 32 bits.</span><span class="sxs-lookup"><span data-stu-id="c6218-147">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6218-148">Indique si l'instance actuelle est vide.</span><span class="sxs-lookup"><span data-stu-id="c6218-148">Indicates whether the current instance is empty.</span></span></summary>
        <value><span data-ttu-id="c6218-149"><see langword="true" /> Si l’instance actuelle est vide. Sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-149"><see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks><span data-ttu-id="c6218-150">Un <see cref="T:System.Memory`1" /> objet est vide si sa longueur est 0.</span><span class="sxs-lookup"><span data-stu-id="c6218-150">A <see cref="T:System.Memory`1" /> object is empty if its length is 0.</span></span></remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; this[Range range] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Item(valuetype System.Range)" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Item(System.Range)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(range As Range) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; default[Range] { Memory&lt;T&gt; get(Range range); };" />
      <MemberSignature Language="F#" Value="member this.Item(Range) : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6218-151">Retourne le nombre d'éléments dans l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-151">Gets the number of items in the current instance.</span></span></summary>
        <value><span data-ttu-id="c6218-152">Le nombre d’éléments dans l’instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-152">The number of items in the current instance.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment"><span data-ttu-id="c6218-153">Objet à convertir.</span><span class="sxs-lookup"><span data-stu-id="c6218-153">The object to convert.</span></span></param>
        <summary><span data-ttu-id="c6218-154">Définit une conversion implicite d'un objet <see cref="T:System.ArraySegment`1" /> en objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-154">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6218-155">Converti <see cref="T:System.ArraySegment`1" /> objet.</span><span class="sxs-lookup"><span data-stu-id="c6218-155">The converted <see cref="T:System.ArraySegment`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="c6218-156">Objet à convertir.</span><span class="sxs-lookup"><span data-stu-id="c6218-156">The object to convert.</span></span></param>
        <summary><span data-ttu-id="c6218-157">Définit une conversion implicite d’un <see cref="T:System.Memory`1" /> de l’objet à un <see cref="T:System.ReadOnlyMemory`1" /> objet.</span><span class="sxs-lookup"><span data-stu-id="c6218-157">Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6218-158">Objet converti.</span><span class="sxs-lookup"><span data-stu-id="c6218-158">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="c6218-159">Tableau à convertir.</span><span class="sxs-lookup"><span data-stu-id="c6218-159">The array to convert.</span></span></param>
        <summary><span data-ttu-id="c6218-160">Définit une conversion implicite d’un tableau en objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-160">Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6218-161">Objet converti.</span><span class="sxs-lookup"><span data-stu-id="c6218-161">The converted object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c6218-162">Crée un handle pour l’objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-162">Creates a handle for the <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6218-163">Handle pour l’objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-163">A handle for the <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a><span data-ttu-id="c6218-164">Voir aussi</span><span class="sxs-lookup"><span data-stu-id="c6218-164">See also</span></span>

<span data-ttu-id="c6218-165">Le garbage collector ne déplacera pas la mémoire jusqu'à ce que le texte retourné <xref:System.Buffers.MemoryHandle> objet est supprimé.</span><span class="sxs-lookup"><span data-stu-id="c6218-165">The garbage collector will not move the memory until the returned <xref:System.Buffers.MemoryHandle> object is disposed.</span></span> <span data-ttu-id="c6218-166">Cela vous permet de récupérer et utiliser l’adresse de la mémoire.</span><span class="sxs-lookup"><span data-stu-id="c6218-166">This enables you to retrieve and use the memory's address.</span></span>

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c6218-167">Une instance avec des membres non primitifs (non blittables) ne peut pas être épinglée.</span><span class="sxs-lookup"><span data-stu-id="c6218-167">An instance with non-primitive (non-blittable) members cannot be pinned.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (Index startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(valuetype System.Index startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Index)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (startIndex As Index) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(Index startIndex);" />
      <MemberSignature Language="F#" Value="member this.Slice : Index -&gt; Memory&lt;'T&gt;" Usage="memory.Slice startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Index" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="startIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="c6218-168">Index à partir duquel commence la section.</span><span class="sxs-lookup"><span data-stu-id="c6218-168">The index at which to begin the slice.</span></span></param>
        <summary><span data-ttu-id="c6218-169">Constitue une section en dehors de la mémoire actuelle qui commence à l’index spécifié.</span><span class="sxs-lookup"><span data-stu-id="c6218-169">Forms a slice out of the current memory that begins at a specified index.</span></span></summary>
        <returns><span data-ttu-id="c6218-170">Objet qui contient tous les éléments de l’instance actuelle de <paramref name="start" /> jusqu’à la fin de l’instance.</span><span class="sxs-lookup"><span data-stu-id="c6218-170">An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeExceptionException"><span data-ttu-id="c6218-171"><paramref name="start" /> est inférieur à zéro ou supérieur ou égal à <see cref="P:System.Memory`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-171"><paramref name="start" /> is less than zero or greater than or equal to <see cref="P:System.Memory`1.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (Range range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(valuetype System.Range range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Range)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(Range range);" />
      <MemberSignature Language="F#" Value="member this.Slice : Range -&gt; Memory&lt;'T&gt;" Usage="memory.Slice range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Range" Index="0" FrameworkAlternate="netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="c6218-172">Index à partir duquel commence la section.</span><span class="sxs-lookup"><span data-stu-id="c6218-172">The index at which to begin the slice.</span></span></param>
        <param name="length"><span data-ttu-id="c6218-173">Nombre d’éléments à inclure dans la section.</span><span class="sxs-lookup"><span data-stu-id="c6218-173">The number of elements to include in the slice.</span></span></param>
        <summary><span data-ttu-id="c6218-174">Constitue une section en dehors de la mémoire actuelle qui commence à un index spécifié pour une longueur spécifiée.</span><span class="sxs-lookup"><span data-stu-id="c6218-174">Forms a slice out of the current memory starting at a specified index for a specified length.</span></span></summary>
        <returns><span data-ttu-id="c6218-175">Objet qui contient les éléments <paramref name="length" /> à partir de l’instance actuelle commençant à <paramref name="start" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-175">An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeExceptionException"><span data-ttu-id="c6218-176"><paramref name="start" /> est inférieur à zéro ou supérieur ou égal à <see cref="P:System.Memory`1.Length" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-176"><paramref name="start" /> is less than zero or greater than or equal to <see cref="P:System.Memory`1.Length" />.</span></span>

<span data-ttu-id="c6218-177">ou</span><span class="sxs-lookup"><span data-stu-id="c6218-177">-or-</span></span>

<span data-ttu-id="c6218-178"><paramref name="length" /> est supérieur à <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span><span class="sxs-lookup"><span data-stu-id="c6218-178"><paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6218-179">Renvoie une étendue à partir de l'instance actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-179">Returns a span from the current instance.</span></span></summary>
        <value><span data-ttu-id="c6218-180">Une étendue créée à partir du <see cref="T:System.Memory`1" /> objet.</span><span class="sxs-lookup"><span data-stu-id="c6218-180">A span created from the current <see cref="T:System.Memory`1" /> object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c6218-181">Copie le contenu de la mémoire dans un nouveau tableau.</span><span class="sxs-lookup"><span data-stu-id="c6218-181">Copies the contents from the memory into a new array.</span></span></summary>
        <returns><span data-ttu-id="c6218-182">Tableau contenant les éléments dans la mémoire actuelle.</span><span class="sxs-lookup"><span data-stu-id="c6218-182">An array containing the elements in the current memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-183">Comme un appel à la méthode < xref=System.Memory%601.ToArray%2A > effectue une allocation de tas, il doit généralement être évitée.</span><span class="sxs-lookup"><span data-stu-id="c6218-183">Because a call to the <xref=System.Memory%601.ToArray%2A> method performs a heap allocation, it should generally be avoided.</span></span> <span data-ttu-id="c6218-184">Toutefois, il est parfois nécessaire tirer parti des fonctionnalités qui sont uniquement disponibles pour les tableaux.</span><span class="sxs-lookup"><span data-stu-id="c6218-184">However, it is sometimes necessary to take advantage of functionality that is only available for arrays.</span></span>

<span data-ttu-id="c6218-185">Chaque appel à la `ToArray` méthode retourne un nouveau tableau.</span><span class="sxs-lookup"><span data-stu-id="c6218-185">Each call to the `ToArray` method returns a new array.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c6218-186">Retourne la représentation sous forme de chaîne de cet objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-186">Returns the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="c6218-187">Représentation sous forme de chaîne de cet objet <see cref="T:System.Memory`1" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-187">the string representation of this <see cref="T:System.Memory`1" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-188">Pour un `Memory<Char>`, le `ToString` méthode retourne un <xref:System.String> qui contient les caractères vers laquelle pointés le <xref:System.Memory%601>.</span><span class="sxs-lookup"><span data-stu-id="c6218-188">For a `Memory<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Memory%601>.</span></span> <span data-ttu-id="c6218-189">Sinon, elle retourne un <xref:System.String> avec le nom du type et le nombre d’éléments qui le <xref:System.Memory%601> contient.</span><span class="sxs-lookup"><span data-stu-id="c6218-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Memory%601> contains.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="c6218-190">Objet <see cref="T:System.Memory`1" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="c6218-190">The destination <see cref="T:System.Memory`1" /> object.</span></span></param>
        <summary><span data-ttu-id="c6218-191">Copie le contenu de la mémoire dans une instance <see cref="T:System.Memory`1" /> de destination.</span><span class="sxs-lookup"><span data-stu-id="c6218-191">Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="c6218-192"><see langword="true" /> si l’opération de copie aboutit ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="c6218-192"><see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="c6218-193">Cette méthode copie tout le contenu de l’actuel <xref:System.Memory%601> l’instance à `destination` même si le contenu de l’instance actuelle et `destination` se chevauchent.</span><span class="sxs-lookup"><span data-stu-id="c6218-193">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>