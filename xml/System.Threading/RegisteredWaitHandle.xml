<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad8a8d3384cd323ecf31222d052e3cc35d22a2e7" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014231" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegisteredWaitHandle&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegisteredWaitHandle sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type RegisteredWaitHandle = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un handle qui a été enregistré lors de l’appel <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment utiliser un <xref:System.Threading.RegisteredWaitHandle> pour déterminer pourquoi une méthode de rappel est appelée et comment annuler l’inscription d’une tâche si le rappel s’est produite parce que le handle d’attente a été signalé.  
  
 L’exemple montre également comment utiliser le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode à exécuter une méthode de rappel spécifiée lorsqu’un handle d’attente spécifié est signalé. Dans cet exemple, la méthode de rappel est `WaitProc`, et le handle d’attente est un <xref:System.Threading.AutoResetEvent>.  
  
 L’exemple définit un `TaskInfo` classe pour contenir les informations qui sont passées au rappel lors de l’exécution. L’exemple crée un `TaskInfo` de l’objet et lui assigne des données de chaîne. Le <xref:System.Threading.RegisteredWaitHandle> qui est retourné par la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode est attribuée à la `Handle` champ la `TaskInfo` afin que la méthode de rappel a accès à l’objet le <xref:System.Threading.RegisteredWaitHandle>.  
  
 Outre la spécification `TaskInfo` que l’objet à passer à la méthode de rappel, l’appel à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode spécifie le <xref:System.Threading.AutoResetEvent> qui attend la tâche, un <xref:System.Threading.WaitOrTimerCallback> délégué qui représente le `WaitProc` méthode de rappel, un intervalle du délai d’attente d’une seconde et plusieurs rappels.  
  
 Lorsque le thread principal signale le <xref:System.Threading.AutoResetEvent> en appelant son <xref:System.Threading.EventWaitHandle.Set%2A> (méthode), le <xref:System.Threading.WaitOrTimerCallback> délégué est appelé. Le `WaitProc` méthode tests <xref:System.Threading.RegisteredWaitHandle> pour déterminer si un délai d’attente s’est produite. Si le rappel a été appelé parce que le handle d’attente a été signalé, le `WaitProc` annule l’inscription de la méthode le <xref:System.Threading.RegisteredWaitHandle>, l’arrêt des rappels supplémentaires. Dans le cas d’un délai d’attente, la tâche continue à attendre. Le `WaitProc` méthode se termine en affichant un message à la console.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est thread-safe.</threadsafe>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Le pool de threads managés</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~RegisteredWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!RegisteredWaitHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="registeredWaitHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unregister (waitObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Unregister(System::Threading::WaitHandle ^ waitObject);" />
      <MemberSignature Language="F#" Value="member this.Unregister : System.Threading.WaitHandle -&gt; bool" Usage="registeredWaitHandle.Unregister waitObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">Le <see cref="T:System.Threading.WaitHandle" /> soit signalé.</param>
        <summary>Annule une opération d’attente inscrite émise par le <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> (méthode).</summary>
        <returns><see langword="true" /> Si la fonction aboutit ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `waitObject` est spécifié, il est signalé uniquement si le <xref:System.Threading.RegisteredWaitHandle> n’est pas correctement inscrit. Si une méthode de rappel est en cours lorsque <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> s’exécute, `waitObject` n’est pas signalé jusqu'à ce que la méthode de rappel se termine. En particulier, si une méthode de rappel s’exécute <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, `waitObject` n’est pas signalé jusqu'à ce que cette méthode de rappel se termine.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> méthode pour annuler l’inscription d’une tâche si un rappel s’est produite parce que le handle d’attente a été signalé.  
  
 L’exemple montre également comment utiliser le <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode à exécuter une méthode de rappel spécifiée lorsqu’un handle d’attente spécifié est signalé. Dans cet exemple, la méthode de rappel est `WaitProc`, et le handle d’attente est un <xref:System.Threading.AutoResetEvent>.  
  
 L’exemple définit un `TaskInfo` classe pour contenir les informations qui sont passées au rappel lors de l’exécution. L’exemple crée un `TaskInfo` de l’objet et lui assigne des données de chaîne. Le <xref:System.Threading.RegisteredWaitHandle> qui est retourné par la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode est attribuée à la `Handle` champ la `TaskInfo` afin que la méthode de rappel a accès à l’objet le <xref:System.Threading.RegisteredWaitHandle>.  
  
 Outre la spécification `TaskInfo` que l’objet à passer à la méthode de rappel, l’appel à la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> méthode spécifie le <xref:System.Threading.AutoResetEvent> qui attend la tâche, un <xref:System.Threading.WaitOrTimerCallback> délégué qui représente le `WaitProc` méthode de rappel, un intervalle du délai d’attente d’une seconde et plusieurs rappels.  
  
 Lorsque le thread principal signale le <xref:System.Threading.AutoResetEvent> en appelant son <xref:System.Threading.EventWaitHandle.Set%2A> (méthode), le <xref:System.Threading.WaitOrTimerCallback> délégué est appelé. Le `WaitProc` méthode tests <xref:System.Threading.RegisteredWaitHandle> pour déterminer si un délai d’attente s’est produite. Si le rappel a été appelé parce que le handle d’attente a été signalé, le `WaitProc` annule l’inscription de la méthode le <xref:System.Threading.RegisteredWaitHandle>, l’arrêt des rappels supplémentaires. Dans le cas d’un délai d’attente, la tâche continue à attendre. Le `WaitProc` méthode se termine en affichant un message à la console.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Le pool de threads managés</related>
      </Docs>
    </Member>
  </Members>
</Type>