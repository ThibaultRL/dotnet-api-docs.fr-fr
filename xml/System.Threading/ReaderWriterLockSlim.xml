<Type Name="ReaderWriterLockSlim" FullName="System.Threading.ReaderWriterLockSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ba249b86c9e38696438690262b884a5bac97ef6b" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65155817" /></Metadata><TypeSignature Language="C#" Value="public class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReaderWriterLockSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLockSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class ReaderWriterLockSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReaderWriterLockSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type ReaderWriterLockSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="753a8-101">Représente un verrou utilisé pour gérer l'accès à une ressource, en autorisant plusieurs threads pour la lecture ou un accès exclusif en écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-101">Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-102">Utilisez <xref:System.Threading.ReaderWriterLockSlim> pour protéger une ressource qui est lue par plusieurs threads et écrite par un seul thread à la fois.</span><span class="sxs-lookup"><span data-stu-id="753a8-102">Use <xref:System.Threading.ReaderWriterLockSlim> to protect a resource that is read by multiple threads and written to by one thread at a time.</span></span> <span data-ttu-id="753a8-103"><xref:System.Threading.ReaderWriterLockSlim> permet à plusieurs threads être en mode lecture, un thread d’être en mode écriture avec la propriété exclusive du verrou et autorise un seul thread qui a accès en lecture à être en mode lecture mise à niveau, à partir de laquelle le thread peut mettre à niveau en mode écriture sans devoir annuler il s accès en lecture à la ressource.</span><span class="sxs-lookup"><span data-stu-id="753a8-103"><xref:System.Threading.ReaderWriterLockSlim> allows multiple threads to be in read mode, allows one thread to be in write mode with exclusive ownership of the lock, and allows one thread that has read access to be in upgradeable read mode, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-104"><xref:System.Threading.ReaderWriterLockSlim> est similaire à <xref:System.Threading.ReaderWriterLock>, mais a des règles simplifiées pour la récursivité ainsi que la mise à niveau et la rétrogradation de l’état de verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-104"><xref:System.Threading.ReaderWriterLockSlim> is similar to <xref:System.Threading.ReaderWriterLock>, but it has simplified rules for recursion and for upgrading and downgrading lock state.</span></span> <span data-ttu-id="753a8-105"><xref:System.Threading.ReaderWriterLockSlim> évite de nombreux cas d’interblocage potentiel.</span><span class="sxs-lookup"><span data-stu-id="753a8-105"><xref:System.Threading.ReaderWriterLockSlim> avoids many cases of potential deadlock.</span></span> <span data-ttu-id="753a8-106">En outre, les performances de <xref:System.Threading.ReaderWriterLockSlim> sont considérablement meilleures que celles de <xref:System.Threading.ReaderWriterLock>.</span><span class="sxs-lookup"><span data-stu-id="753a8-106">In addition, the performance of <xref:System.Threading.ReaderWriterLockSlim> is significantly better than <xref:System.Threading.ReaderWriterLock>.</span></span> <span data-ttu-id="753a8-107"><xref:System.Threading.ReaderWriterLockSlim> est recommandé pour tout nouveau développement.</span><span class="sxs-lookup"><span data-stu-id="753a8-107"><xref:System.Threading.ReaderWriterLockSlim> is recommended for all new development.</span></span>  
  
 <span data-ttu-id="753a8-108">Par défaut, les nouvelles instances de <xref:System.Threading.ReaderWriterLockSlim> sont créés avec le <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> indicateur et ne permettent pas de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-108">By default, new instances of <xref:System.Threading.ReaderWriterLockSlim> are created with the <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> flag and do not allow recursion.</span></span> <span data-ttu-id="753a8-109">Cette stratégie par défaut est recommandée pour tout nouveau développement, car la récurrence introduit des complications inutiles et rend votre code risque d’interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-109">This default policy is recommended for all new development, because recursion introduces unnecessary complications and makes your code more prone to deadlocks.</span></span> <span data-ttu-id="753a8-110">Pour simplifier la migration à partir des projets qui utilisent <xref:System.Threading.Monitor> ou <xref:System.Threading.ReaderWriterLock>, vous pouvez utiliser la <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> indicateur permettant de créer des instances de <xref:System.Threading.ReaderWriterLockSlim> qui autorise la récurrence.</span><span class="sxs-lookup"><span data-stu-id="753a8-110">To simplify migration from existing projects that use <xref:System.Threading.Monitor> or <xref:System.Threading.ReaderWriterLock>, you can use the <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> flag to create instances of <xref:System.Threading.ReaderWriterLockSlim> that allow recursion.</span></span>  
  
 <span data-ttu-id="753a8-111">Un thread peut entrer le verrou en trois modes : lecture mode, mode écriture et verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-111">A thread can enter the lock in three modes: read mode, write mode, and upgradeable read mode.</span></span> <span data-ttu-id="753a8-112">(Dans le reste de cette rubrique, « verrou en mode lecture » est appelé « mode de mise à niveau » et de la phrase « entrez `x` mode » est utilisée de préférence l’expression complète « entrer le verrou dans `x` mode ».)</span><span class="sxs-lookup"><span data-stu-id="753a8-112">(In the rest of this topic, "upgradeable read mode" is referred to as "upgradeable mode", and the phrase "enter `x` mode" is used in preference to the longer phrase "enter the lock in `x` mode".)</span></span>  
  
 <span data-ttu-id="753a8-113">Quelle que soit la stratégie de récurrence, un seul thread peut être en mode écriture à tout moment.</span><span class="sxs-lookup"><span data-stu-id="753a8-113">Regardless of recursion policy, only one thread can be in write mode at any time.</span></span> <span data-ttu-id="753a8-114">Lorsqu’un thread est en mode écriture, aucun autre thread ne peut entrer le verrou dans un mode quelconque.</span><span class="sxs-lookup"><span data-stu-id="753a8-114">When a thread is in write mode, no other thread can enter the lock in any mode.</span></span> <span data-ttu-id="753a8-115">Un seul thread peut être en mode de mise à niveau à tout moment.</span><span class="sxs-lookup"><span data-stu-id="753a8-115">Only one thread can be in upgradeable mode at any time.</span></span> <span data-ttu-id="753a8-116">N’importe quel nombre de threads peut être en mode lecture, et il peut y avoir un thread en mode de mise à niveau alors que les autres threads sont en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-116">Any number of threads can be in read mode, and there can be one thread in upgradeable mode while other threads are in read mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="753a8-117">Ce type implémente le <xref:System.IDisposable> interface.</span><span class="sxs-lookup"><span data-stu-id="753a8-117">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="753a8-118">Lorsque vous avez fini d’utiliser le type, vous devez supprimer il directement ou indirectement.</span><span class="sxs-lookup"><span data-stu-id="753a8-118">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="753a8-119">Pour supprimer le type directement, appelez sa <xref:System.IDisposable.Dispose%2A> méthode dans un `try` / `catch` bloc.</span><span class="sxs-lookup"><span data-stu-id="753a8-119">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="753a8-120">Pour supprimer indirectement, utiliser une construction de langage tel que `using` (en c#) ou `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="753a8-120">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="753a8-121">Pour plus d’informations, consultez la section « À l’aide un objet qui implémente IDisposable » dans le <xref:System.IDisposable> rubrique de l’interface.</span><span class="sxs-lookup"><span data-stu-id="753a8-121">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="753a8-122"><xref:System.Threading.ReaderWriterLockSlim> a géré l’affinité de thread ; Autrement dit, chaque <xref:System.Threading.Thread> objet doit appeler sa propre méthode pour entrer et sortir des modes de verrouillage.</span><span class="sxs-lookup"><span data-stu-id="753a8-122"><xref:System.Threading.ReaderWriterLockSlim> has managed thread affinity; that is, each <xref:System.Threading.Thread> object must make its own method calls to enter and exit lock modes.</span></span> <span data-ttu-id="753a8-123">Aucun thread ne peut modifier le mode d’un autre thread.</span><span class="sxs-lookup"><span data-stu-id="753a8-123">No thread can change the mode of another thread.</span></span>  
  
 <span data-ttu-id="753a8-124">Si un <xref:System.Threading.ReaderWriterLockSlim> n’autorise pas la récurrence, un thread qui essaie d’entrer le verrou peut bloquer pour plusieurs raisons :</span><span class="sxs-lookup"><span data-stu-id="753a8-124">If a <xref:System.Threading.ReaderWriterLockSlim> does not allow recursion, a thread that tries to enter the lock can block for several reasons:</span></span>  
  
-   <span data-ttu-id="753a8-125">Un thread qui essaie d’entrer en mode lecture bloque si des threads attendent pour entrer en mode écriture ou si un thread unique est en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-125">A thread that tries to enter read mode blocks if there are threads waiting to enter write mode or if there is a single thread in write mode.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="753a8-126">Bloquer les nouveaux lecteurs writers sont en file d’attente est une stratégie d’équité de verrou qui favorise les écritures.</span><span class="sxs-lookup"><span data-stu-id="753a8-126">Blocking new readers when writers are queued is a lock fairness policy that favors writers.</span></span> <span data-ttu-id="753a8-127">La stratégie d’équité actuelle équilibre équité pour les lecteurs et writers, pour promouvoir le débit dans les scénarios les plus courants.</span><span class="sxs-lookup"><span data-stu-id="753a8-127">The current fairness policy balances fairness to readers and writers, to promote throughput in the most common scenarios.</span></span> <span data-ttu-id="753a8-128">Les versions futures de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] peut introduire de nouvelles stratégies d’équité.</span><span class="sxs-lookup"><span data-stu-id="753a8-128">Future versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] may introduce new fairness policies.</span></span>  
  
-   <span data-ttu-id="753a8-129">Un thread qui essaie d’entrer des blocs de verrou en mode s’il existe déjà un thread en mode de mise à niveau, si des threads attendent pour entrer en mode écriture, ou s’il existe un thread unique en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-129">A thread that tries to enter upgradeable mode blocks if there is already a thread in upgradeable mode, if there are threads waiting to enter write mode, or if there is a single thread in write mode.</span></span>  
  
-   <span data-ttu-id="753a8-130">Un thread qui essaie d’entrer en mode écriture bloque si un autre thread est dans un des trois modes.</span><span class="sxs-lookup"><span data-stu-id="753a8-130">A thread that tries to enter write mode blocks if there is a thread in any of the three modes.</span></span>  
  
## <a name="upgrading-and-downgrading-locks"></a><span data-ttu-id="753a8-131">La mise à niveau et la rétrogradation des verrous</span><span class="sxs-lookup"><span data-stu-id="753a8-131">Upgrading and Downgrading Locks</span></span>  
 <span data-ttu-id="753a8-132">Mode de mise à niveau est destiné aux cas où un thread lit généralement à partir de la ressource protégée, mais vous devrez peut-être écrire dedans si une condition est remplie.</span><span class="sxs-lookup"><span data-stu-id="753a8-132">Upgradeable mode is intended for cases where a thread usually reads from the protected resource, but might need to write to it if some condition is met.</span></span> <span data-ttu-id="753a8-133">Un thread a entré un <xref:System.Threading.ReaderWriterLockSlim> en mode de mise à niveau a un accès en lecture à la ressource protégée et peut mettre à niveau en mode écriture en appelant le <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> ou <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="753a8-133">A thread that has entered a <xref:System.Threading.ReaderWriterLockSlim> in upgradeable mode has read access to the protected resource, and can upgrade to write mode by calling the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> methods.</span></span> <span data-ttu-id="753a8-134">La mise à niveau en mode écriture ne peut pas se bloquer, car il peut y avoir qu’un seul thread en mode de mise à niveau à la fois, lors de la récursivité n’est pas autorisée, qui est la stratégie par défaut.</span><span class="sxs-lookup"><span data-stu-id="753a8-134">Because there can be only one thread in upgradeable mode at a time, upgrading to write mode cannot deadlock when recursion is not allowed, which is the default policy.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="753a8-135">Quelle que soit la stratégie de récurrence, un thread a entré à lire en mode n’est pas autorisé à mettre à niveau vers le verrou en mode ou en mode écriture, car ce modèle crée une forte probabilité de blocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-135">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span> <span data-ttu-id="753a8-136">Par exemple, si deux threads en mode lecture qu'essaient d’entrer en mode écriture, ils se bloqueront.</span><span class="sxs-lookup"><span data-stu-id="753a8-136">For example, if two threads in read mode both try to enter write mode, they will deadlock.</span></span> <span data-ttu-id="753a8-137">Mode de mise à niveau est conçu pour éviter ces blocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-137">Upgradeable mode is designed to avoid such deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-138">S’il existe des autres threads en mode lecture, le thread qui est la mise à niveau des blocs.</span><span class="sxs-lookup"><span data-stu-id="753a8-138">If there are other threads in read mode, the thread that is upgrading blocks.</span></span> <span data-ttu-id="753a8-139">Pendant que le thread est bloqué, les autres threads qui essaient d’entrer en mode lecture sont bloquées.</span><span class="sxs-lookup"><span data-stu-id="753a8-139">While the thread is blocked, other threads that try to enter read mode are blocked.</span></span> <span data-ttu-id="753a8-140">Lorsque tous les threads ont quitté le mode lecture, le thread de mise à niveau bloqué entre en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-140">When all threads have exited from read mode, the blocked upgradeable thread enters write mode.</span></span> <span data-ttu-id="753a8-141">S’il existe d’autres threads qui attendent pour entrer en mode écrivent, qu'ils restent bloqués, car le thread unique qui est en mode de mise à niveau les empêche d’obtenir un accès exclusif à la ressource.</span><span class="sxs-lookup"><span data-stu-id="753a8-141">If there are other threads waiting to enter write mode, they remain blocked, because the single thread that is in upgradeable mode prevents them from gaining exclusive access to the resource.</span></span>  
  
 <span data-ttu-id="753a8-142">Lorsque le thread en mode de mise à niveau quitte le mode écriture, d’autres threads qui attendent pour entrer en mode lecture peuvent le faire, sauf si des threads attendent pour entrer en mode écrivent.</span><span class="sxs-lookup"><span data-stu-id="753a8-142">When the thread in upgradeable mode exits write mode, other threads that are waiting to enter read mode can do so, unless there are threads waiting to enter write mode.</span></span> <span data-ttu-id="753a8-143">Le thread en mode de mise à niveau peut mettre à niveau et rétrograder indéfiniment, tant qu’il est le seul thread qui écrit dans la ressource protégée.</span><span class="sxs-lookup"><span data-stu-id="753a8-143">The thread in upgradeable mode can upgrade and downgrade indefinitely, as long as it is the only thread that writes to the protected resource.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="753a8-144">Si vous permettez à plusieurs threads à entrer mode écriture ou en mode de mise à niveau, que vous ne devez pas autoriser un thread à monopoliser le verrou en mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-144">If you allow multiple threads to enter write mode or upgradeable mode, you must not allow one thread to monopolize upgradeable mode.</span></span> <span data-ttu-id="753a8-145">Sinon, les threads qui essaient d’entrer écrivent mode directement sera bloqué indéfiniment, et pendant qu’ils sont bloqués, les autres threads ne pourront pas entrer en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-145">Otherwise, threads that try to enter write mode directly will be blocked indefinitely, and while they are blocked, other threads will be unable to enter read mode.</span></span>  
  
 <span data-ttu-id="753a8-146">Un thread en mode de mise à niveau peut passer en mode lecture en appelant d’abord la <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> (méthode), puis en appelant le <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="753a8-146">A thread in upgradeable mode can downgrade to read mode by first calling the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method and then calling the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method.</span></span> <span data-ttu-id="753a8-147">Ce modèle de rétrogradation est autorisé pour toutes les stratégies de récurrence du verrou, même <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span><span class="sxs-lookup"><span data-stu-id="753a8-147">This downgrade pattern is allowed for all lock recursion policies, even <xref:System.Threading.LockRecursionPolicy.NoRecursion>.</span></span>  
  
 <span data-ttu-id="753a8-148">Après avoir rétrogradé en mode lecture, un thread ne peut pas entrer de nouveau verrou en mode jusqu'à ce qu’il a quitté le mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-148">After downgrading to read mode, a thread cannot reenter upgradeable mode until it has exited from read mode.</span></span>  
  
## <a name="entering-the-lock-recursively"></a><span data-ttu-id="753a8-149">Entrée récursive du verrou</span><span class="sxs-lookup"><span data-stu-id="753a8-149">Entering the Lock Recursively</span></span>  
 <span data-ttu-id="753a8-150">Vous pouvez créer un <xref:System.Threading.ReaderWriterLockSlim> qui prend en charge l’entrée récursive de verrou à l’aide de la <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructeur qui spécifie la stratégie du verrou et en spécifiant <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="753a8-150">You can create a <xref:System.Threading.ReaderWriterLockSlim> that supports recursive lock entry by using the <xref:System.Threading.ReaderWriterLockSlim.%23ctor%28System.Threading.LockRecursionPolicy%29> constructor that specifies lock policy, and specifying <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-151">L’utilisation de la récursivité n’est pas recommandée pour tout nouveau développement, car elle ajoute des complications inutiles et rend votre code risque d’interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-151">The use of recursion is not recommended for new development, because it introduces unnecessary complications and makes your code more prone to deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-152">Pour un <xref:System.Threading.ReaderWriterLockSlim> qui autorise la récurrence, les éléments suivants peuvent être dites concernant les modes d’un thread peut entrer :</span><span class="sxs-lookup"><span data-stu-id="753a8-152">For a <xref:System.Threading.ReaderWriterLockSlim> that allows recursion, the following can be said about the modes a thread can enter:</span></span>  
  
-   <span data-ttu-id="753a8-153">Un thread en mode lecture permettre entrer en mode lecture de manière récursive, mais ne pouvez pas entrer en mode écriture ou en mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-153">A thread in read mode can enter read mode recursively, but cannot enter write mode or upgradeable mode.</span></span> <span data-ttu-id="753a8-154">Si elle tente de le faire, un <xref:System.Threading.LockRecursionException> est levée.</span><span class="sxs-lookup"><span data-stu-id="753a8-154">If it tries to do this, a <xref:System.Threading.LockRecursionException> is thrown.</span></span> <span data-ttu-id="753a8-155">Saisie de lire le mode, puis en entrant en mode écrivent ou en mode de mise à niveau est un modèle avec une forte probabilité de blocages, donc il n’est pas autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-155">Entering read mode and then entering write mode or upgradeable mode is a pattern with a strong probability of deadlocks, so it is not allowed.</span></span> <span data-ttu-id="753a8-156">Comme indiqué précédemment, le verrou en mode est fourni pour les cas où il est nécessaire de mettre à niveau un verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-156">As discussed earlier, upgradeable mode is provided for cases where it is necessary to upgrade a lock.</span></span>  
  
-   <span data-ttu-id="753a8-157">Un thread en mode de mise à niveau peut entrer en mode écriture et/ou en mode lecture et pouvez entrer les les trois modes de manière récursive.</span><span class="sxs-lookup"><span data-stu-id="753a8-157">A thread in upgradeable mode can enter write mode and/or read mode, and can enter any of the three modes recursively.</span></span> <span data-ttu-id="753a8-158">Toutefois, une tentative d’entrer en mode écriture bloque si d’autres threads sont en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-158">However, an attempt to enter write mode blocks if there are other threads in read mode.</span></span>  
  
-   <span data-ttu-id="753a8-159">Un thread en mode écriture peut entrer en mode lecture et/ou en mode de mise à niveau et pouvez entrer les les trois modes de manière récursive.</span><span class="sxs-lookup"><span data-stu-id="753a8-159">A thread in write mode can enter read mode and/or upgradeable mode, and can enter any of the three modes recursively.</span></span>  
  
-   <span data-ttu-id="753a8-160">Un thread qui n’a pas entré le verrou peut entrer n’importe quel mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-160">A thread that has not entered the lock can enter any mode.</span></span> <span data-ttu-id="753a8-161">Cette tentative peut bloquer pour les mêmes raisons qu’une tentative d’entrer un verrou non récursif.</span><span class="sxs-lookup"><span data-stu-id="753a8-161">This attempt can block for the same reasons as an attempt to enter a non-recursive lock.</span></span>  
  
 <span data-ttu-id="753a8-162">Un thread peut quitter les modes qu'il a entré dans n’importe quel ordre, tant que sa fermeture chaque mode exactement autant de fois qu’elle entrée que le mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-162">A thread can exit the modes it has entered in any order, as long as it exits each mode exactly as many times as it entered that mode.</span></span> <span data-ttu-id="753a8-163">Si un thread essaie de quitter un mode trop de fois, ou pour quitter un mode n’a pas entré, un <xref:System.Threading.SynchronizationLockException> est levée.</span><span class="sxs-lookup"><span data-stu-id="753a8-163">If a thread tries to exit a mode too many times, or to exit a mode it has not entered, a <xref:System.Threading.SynchronizationLockException> is thrown.</span></span>  
  
## <a name="lock-states"></a><span data-ttu-id="753a8-164">États de verrou</span><span class="sxs-lookup"><span data-stu-id="753a8-164">Lock States</span></span>  
 <span data-ttu-id="753a8-165">Il peut s’avérer utile de considérer le verrou en termes de ses États.</span><span class="sxs-lookup"><span data-stu-id="753a8-165">You may find it useful to think of the lock in terms of its states.</span></span> <span data-ttu-id="753a8-166">Un <xref:System.Threading.ReaderWriterLockSlim> peut être l’un des quatre états : ne pas entré, lire, mettre à niveau et écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-166">A <xref:System.Threading.ReaderWriterLockSlim> can be in one of four states: not entered, read, upgrade, and write.</span></span>  
  
-   <span data-ttu-id="753a8-167">Pas d’entrée : Dans cet état, aucun thread n’a entré le verrou (ou tous les threads ont quitté le verrou).</span><span class="sxs-lookup"><span data-stu-id="753a8-167">Not entered: In this state, no threads have entered the lock (or all threads have exited the lock).</span></span>  
  
-   <span data-ttu-id="753a8-168">Lecture : Dans cet état, un ou plusieurs threads ont entré le verrou pour l’accès en lecture à la ressource protégée.</span><span class="sxs-lookup"><span data-stu-id="753a8-168">Read: In this state, one or more threads have entered the lock for read access to the protected resource.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="753a8-169">Un thread peut entrer le verrou en mode lecture à l’aide de la <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> ou <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> méthodes, ou en passant du mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-169">A thread can enter the lock in read mode by using the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> or <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> methods, or by downgrading from upgradeable mode.</span></span>  
  
-   <span data-ttu-id="753a8-170">Mise à niveau : Dans cet état, un thread a entré le verrou pour l’accès en lecture avec l’option de mise à niveau pour l’accès en écriture (autrement dit, en verrou en mode), et zéro ou plusieurs threads ont entré le verrou pour l’accès en lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-170">Upgrade: In this state, one thread has entered the lock for read access with the option to upgrade to write access (that is, in upgradeable mode), and zero or more threads have entered the lock for read access.</span></span> <span data-ttu-id="753a8-171">Pas plus d’un thread à la fois peut entrer le verrou avec l’option de mise à niveau ; autres threads qui essaient d’entrer en mode de mise à niveau sont bloquées.</span><span class="sxs-lookup"><span data-stu-id="753a8-171">No more than one thread at a time can enter the lock with the option to upgrade; additional threads that try to enter upgradeable mode are blocked.</span></span>  
  
-   <span data-ttu-id="753a8-172">Écriture : Dans cet état, un thread a entré le verrou pour l’accès en écriture à la ressource protégée.</span><span class="sxs-lookup"><span data-stu-id="753a8-172">Write: In this state, one thread has entered the lock for write access to the protected resource.</span></span> <span data-ttu-id="753a8-173">Que thread a la propriété exclusive du verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-173">That thread has exclusive possession of the lock.</span></span> <span data-ttu-id="753a8-174">N’importe quel autre thread qui essaie d’entrer le verrou pour une raison quelconque est bloqué.</span><span class="sxs-lookup"><span data-stu-id="753a8-174">Any other thread that tries to enter the lock for any reason is blocked.</span></span>  
  
 <span data-ttu-id="753a8-175">Le tableau suivant décrit les transitions entre États de verrou, pour les verrous qui n’autorisent pas la récurrence, lorsqu’un thread `t` exécute l’action décrite dans la colonne de gauche.</span><span class="sxs-lookup"><span data-stu-id="753a8-175">The following table describes the transitions between lock states, for locks that do not allow recursion, when a thread `t` takes the action described in the leftmost column.</span></span> <span data-ttu-id="753a8-176">Au moment où il effectue l’action, `t` n’a aucun mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-176">At the time it takes the action, `t` has no mode.</span></span> <span data-ttu-id="753a8-177">(Le cas particulier où `t` est en mode de mise à niveau est décrit dans les notes de fin de la table.) La ligne du haut décrit l’état initial du verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-177">(The special case where `t` is in upgradeable mode is described in the table footnotes.) The top row describes the starting state of the lock.</span></span> <span data-ttu-id="753a8-178">Les cellules décrivent ce qui se passe au thread et affichent les modifications apportées à l’état du verrou entre parenthèses.</span><span class="sxs-lookup"><span data-stu-id="753a8-178">The cells describe what happens to the thread, and show changes to the lock state in parentheses.</span></span>  
  
||<span data-ttu-id="753a8-179">Non entré (N)</span><span class="sxs-lookup"><span data-stu-id="753a8-179">Not entered (N)</span></span>|<span data-ttu-id="753a8-180">Read (R)</span><span class="sxs-lookup"><span data-stu-id="753a8-180">Read (R)</span></span>|<span data-ttu-id="753a8-181">Mise à niveau (U)</span><span class="sxs-lookup"><span data-stu-id="753a8-181">Upgrade (U)</span></span>|<span data-ttu-id="753a8-182">Écriture (W)</span><span class="sxs-lookup"><span data-stu-id="753a8-182">Write (W)</span></span>|  
|-|-----------------------|----------------|-------------------|-----------------|  
|<span data-ttu-id="753a8-183">`t` entre en mode lecture</span><span class="sxs-lookup"><span data-stu-id="753a8-183">`t` enters read mode</span></span>|<span data-ttu-id="753a8-184">`t` entre (R).</span><span class="sxs-lookup"><span data-stu-id="753a8-184">`t` enters (R).</span></span>|<span data-ttu-id="753a8-185">`t` bloque si les threads en attente pour mode écriture ; Sinon, `t` passe.</span><span class="sxs-lookup"><span data-stu-id="753a8-185">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.</span></span>|<span data-ttu-id="753a8-186">`t` bloque si les threads en attente pour mode écriture ; Sinon, `t` saisit.<sup> 1</sup></span><span class="sxs-lookup"><span data-stu-id="753a8-186">`t` blocks if threads are waiting for write mode; otherwise, `t` enters.<sup>1</sup></span></span>|<span data-ttu-id="753a8-187">`t` blocs.</span><span class="sxs-lookup"><span data-stu-id="753a8-187">`t` blocks.</span></span>|  
|<span data-ttu-id="753a8-188">`t` passe en mode de mise à niveau</span><span class="sxs-lookup"><span data-stu-id="753a8-188">`t` enters upgradeable mode</span></span>|<span data-ttu-id="753a8-189">`t` entre (U).</span><span class="sxs-lookup"><span data-stu-id="753a8-189">`t` enters (U).</span></span>|<span data-ttu-id="753a8-190">`t` bloque si les threads en attente pour mode écriture ou le mode de mise à niveau ; Sinon, `t` entre (U).</span><span class="sxs-lookup"><span data-stu-id="753a8-190">`t` blocks if threads are waiting for write mode or upgrade mode; otherwise, `t` enters (U).</span></span>|<span data-ttu-id="753a8-191">`t` blocs.</span><span class="sxs-lookup"><span data-stu-id="753a8-191">`t` blocks.</span></span>|<span data-ttu-id="753a8-192">`t` blocs.</span><span class="sxs-lookup"><span data-stu-id="753a8-192">`t` blocks.</span></span>|  
|<span data-ttu-id="753a8-193">`t` entre en mode écriture</span><span class="sxs-lookup"><span data-stu-id="753a8-193">`t` enters write mode</span></span>|<span data-ttu-id="753a8-194">`t` entrée (W).</span><span class="sxs-lookup"><span data-stu-id="753a8-194">`t` enters (W).</span></span>|<span data-ttu-id="753a8-195">`t` blocs.</span><span class="sxs-lookup"><span data-stu-id="753a8-195">`t` blocks.</span></span>|<span data-ttu-id="753a8-196">`t` blocs. <sup>2</sup></span><span class="sxs-lookup"><span data-stu-id="753a8-196">`t` blocks.<sup>2</sup></span></span>|<span data-ttu-id="753a8-197">`t` blocs.</span><span class="sxs-lookup"><span data-stu-id="753a8-197">`t` blocks.</span></span>|  
  
 <span data-ttu-id="753a8-198"><sup>1</sup> si `t` démarre arrière en mode de mise à niveau, il entre en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-198"><sup>1</sup> If `t` starts out in upgradeable mode, it enters read mode.</span></span> <span data-ttu-id="753a8-199">Cette action ne bloque jamais.</span><span class="sxs-lookup"><span data-stu-id="753a8-199">This action never blocks.</span></span> <span data-ttu-id="753a8-200">L’état du verrou ne change pas.</span><span class="sxs-lookup"><span data-stu-id="753a8-200">The lock state does not change.</span></span> <span data-ttu-id="753a8-201">(Le thread peut ensuite terminer une rétrogradation vers le mode lecture en quittant le verrou en mode.)</span><span class="sxs-lookup"><span data-stu-id="753a8-201">(The thread can then complete a downgrade to read mode by exiting upgradeable mode.)</span></span>  
  
 <span data-ttu-id="753a8-202"><sup>2</sup> si `t` démarre en mode de mise à niveau, il bloque s’il existe des threads en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-202"><sup>2</sup> If `t` starts out in upgradeable mode, it blocks if there are threads in read mode.</span></span> <span data-ttu-id="753a8-203">Sinon, il est mis à niveau en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-203">Otherwise it upgrades to write mode.</span></span> <span data-ttu-id="753a8-204">Les modifications d’état de verrou pour écriture (W).</span><span class="sxs-lookup"><span data-stu-id="753a8-204">The lock state changes to Write (W).</span></span> <span data-ttu-id="753a8-205">Si `t` bloque, car il existe des threads en mode lecture, il entre en mode écriture dès que le dernier thread quitte le mode lecture, même si des threads qui attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-205">If `t` blocks because there are threads in read mode, it enters write mode as soon as the last thread exits read mode, even if there are threads waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="753a8-206">Lorsqu’un changement d’état se produit, car un thread quitte le verrou, le thread suivant à être mis en éveil est sélectionné comme suit :</span><span class="sxs-lookup"><span data-stu-id="753a8-206">When a state change occurs because a thread exits the lock, the next thread to be awakened is selected as follows:</span></span>  
  
-   <span data-ttu-id="753a8-207">Tout d’abord, un thread est en attente pour mode écriture et est déjà en mode de mise à niveau (il peut y avoir au plus un tel thread).</span><span class="sxs-lookup"><span data-stu-id="753a8-207">First, a thread that is waiting for write mode and is already in upgradeable mode (there can be at most one such thread).</span></span>  
  
-   <span data-ttu-id="753a8-208">Cas d’échec, un thread est en attente pour mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-208">Failing that, a thread that is waiting for write mode.</span></span>  
  
-   <span data-ttu-id="753a8-209">Cas d’échec, un thread est en attente pour le mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-209">Failing that, a thread that is waiting for upgradeable mode.</span></span>  
  
-   <span data-ttu-id="753a8-210">Cas d’échec, tous les threads qui attendent pour le mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-210">Failing that, all threads that are waiting for read mode.</span></span>  
  
 <span data-ttu-id="753a8-211">L’état suivant du verrou est toujours écriture (W) dans les deux premiers cas et mise à niveau (U) dans le troisième cas, quel que soit l’état du verrou lorsque le thread sortant a déclenché la modification d’état.</span><span class="sxs-lookup"><span data-stu-id="753a8-211">The subsequent state of the lock is always Write (W) in the first two cases and Upgrade (U) in the third case, regardless of the state of the lock when the exiting thread triggered the state change.</span></span> <span data-ttu-id="753a8-212">Dans le dernier cas, l’état du verrou est mise à niveau (U) si un thread en mode de mise à niveau après le changement d’état et Read (R) dans le cas contraire, quel que soit l’état antérieur.</span><span class="sxs-lookup"><span data-stu-id="753a8-212">In the last case, the state of the lock is Upgrade (U) if there is a thread in upgradeable mode after the state change, and Read (R) otherwise, regardless of the prior state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-213">L’exemple suivant montre un cache synchronisé simple qui stocke des chaînes avec des clés de type entier.</span><span class="sxs-lookup"><span data-stu-id="753a8-213">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="753a8-214">Une instance de <xref:System.Threading.ReaderWriterLockSlim> est utilisé pour synchroniser l’accès à la <xref:System.Collections.Generic.Dictionary%602> qui sert de cache interne.</span><span class="sxs-lookup"><span data-stu-id="753a8-214">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span>  
  
 <span data-ttu-id="753a8-215">L’exemple inclut des méthodes simples pour ajouter au cache, supprimer du cache et lire à partir du cache.</span><span class="sxs-lookup"><span data-stu-id="753a8-215">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="753a8-216">Pour illustrer les délais d’attente, l’exemple inclut une méthode qui ajoute au cache uniquement si elle peut le faire dans un délai d’attente spécifié.</span><span class="sxs-lookup"><span data-stu-id="753a8-216">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="753a8-217">Pour démontrer le mode de mise à niveau, l’exemple inclut une méthode qui Récupère la valeur associée à une clé et la compare avec une nouvelle valeur.</span><span class="sxs-lookup"><span data-stu-id="753a8-217">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="753a8-218">Si la valeur est inchangée, la méthode retourne un état qui indique aucune modification.</span><span class="sxs-lookup"><span data-stu-id="753a8-218">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="753a8-219">Si aucune valeur n’est trouvée pour la clé, la paire clé/valeur est insérée.</span><span class="sxs-lookup"><span data-stu-id="753a8-219">If no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="753a8-220">Si la valeur a changé, il est mis à jour.</span><span class="sxs-lookup"><span data-stu-id="753a8-220">If the value has changed, it is updated.</span></span> <span data-ttu-id="753a8-221">Verrou en mode permet au thread de mettre à niveau à partir d’un accès en lecture pour l’accès en écriture en fonction des besoins, sans courir le risque d’interblocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-221">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-222">L’exemple inclut une énumération imbriquée qui spécifie les valeurs de retour pour la méthode qui illustre le mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-222">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-223">L’exemple utilise le constructeur par défaut pour créer le verrou, donc la récurrence n’est pas autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-223">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="753a8-224">Programmation du <xref:System.Threading.ReaderWriterLockSlim> est plus simple et moins sujet aux erreurs lorsque le verrou n’autorise pas de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-224">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="753a8-225">Le code suivant utilise ensuite le `SynchronizedCache` objet à stocker un dictionnaire de noms légumes.</span><span class="sxs-lookup"><span data-stu-id="753a8-225">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="753a8-226">Il crée trois tâches.</span><span class="sxs-lookup"><span data-stu-id="753a8-226">It creates three tasks.</span></span> <span data-ttu-id="753a8-227">La première écrit les noms de légumes stockés dans un tableau à un `SynchronizedCache` instance.</span><span class="sxs-lookup"><span data-stu-id="753a8-227">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="753a8-228">La deuxième et troisième tâche Afficher les noms des légumes, le premier dans l’ordre croissant (à partir de l’index faible à l’index élevé), la seconde dans l’ordre décroissant.</span><span class="sxs-lookup"><span data-stu-id="753a8-228">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="753a8-229">La dernière tâche recherche la chaîne « cucumber » et, lorsqu’il la trouve, appelle le <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> méthode pour remplacer la chaîne « bean vert ».</span><span class="sxs-lookup"><span data-stu-id="753a8-229">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="753a8-230">Ce type est thread-safe.</span><span class="sxs-lookup"><span data-stu-id="753a8-230">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="753a8-231">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-231">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-232">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ReaderWriterLockSlim" /> avec des valeurs de propriété par défaut.</span><span class="sxs-lookup"><span data-stu-id="753a8-232">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-233">Un <xref:System.Threading.ReaderWriterLockSlim> qui est initialisé avec ce constructeur n’autorise pas la récurrence.</span><span class="sxs-lookup"><span data-stu-id="753a8-233">A <xref:System.Threading.ReaderWriterLockSlim> that is initialized with this constructor does not allow recursion.</span></span> <span data-ttu-id="753a8-234">Autrement dit, la propriété <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> retourne <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="753a8-234">That is, the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property returns <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="753a8-235">Pour plus d’informations sur la stratégie de récurrence et ses effets, consultez le <xref:System.Threading.LockRecursionPolicy> énumération et la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-235">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-236">L’exemple suivant montre un cache synchronisé simple qui stocke des chaînes avec des clés de type entier.</span><span class="sxs-lookup"><span data-stu-id="753a8-236">The following example shows a simple synchronized cache that holds strings with integer keys.</span></span> <span data-ttu-id="753a8-237">Une instance de <xref:System.Threading.ReaderWriterLockSlim> est utilisé pour synchroniser l’accès à la <xref:System.Collections.Generic.Dictionary%602> qui sert de cache interne.</span><span class="sxs-lookup"><span data-stu-id="753a8-237">An instance of <xref:System.Threading.ReaderWriterLockSlim> is used to synchronize access to the <xref:System.Collections.Generic.Dictionary%602> that serves as the inner cache.</span></span> <span data-ttu-id="753a8-238">Le constructeur sans paramètre est utilisé pour créer le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-238">The parameterless constructor is used to create the lock.</span></span>  
  
 <span data-ttu-id="753a8-239">L’exemple inclut des méthodes simples pour ajouter au cache, supprimer du cache et lire à partir du cache.</span><span class="sxs-lookup"><span data-stu-id="753a8-239">The example includes simple methods to add to the cache, delete from the cache, and read from the cache.</span></span> <span data-ttu-id="753a8-240">Pour illustrer les délais d’attente, l’exemple inclut une méthode qui ajoute au cache uniquement si elle peut le faire dans un délai d’attente spécifié.</span><span class="sxs-lookup"><span data-stu-id="753a8-240">To demonstrate time-outs, the example includes a method that adds to the cache only if it can do so within a specified time-out.</span></span>  
  
 <span data-ttu-id="753a8-241">Pour démontrer le mode de mise à niveau, l’exemple inclut une méthode qui Récupère la valeur associée à une clé et la compare avec une nouvelle valeur.</span><span class="sxs-lookup"><span data-stu-id="753a8-241">To demonstrate upgradeable mode, the example includes a method that retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="753a8-242">Si la valeur est inchangée, la méthode retourne un état qui indique aucune modification.</span><span class="sxs-lookup"><span data-stu-id="753a8-242">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="753a8-243">Si aucune valeur n’est trouvée pour la clé, la paire clé/valeur est insérée.</span><span class="sxs-lookup"><span data-stu-id="753a8-243">If no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="753a8-244">Si la valeur a changé, il est mis à jour.</span><span class="sxs-lookup"><span data-stu-id="753a8-244">If the value has changed, it is updated.</span></span> <span data-ttu-id="753a8-245">Verrou en mode permet au thread de mettre à niveau à partir d’un accès en lecture pour l’accès en écriture en fonction des besoins, sans courir le risque d’interblocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-245">Upgradeable mode allows the thread to upgrade from read access to write access as needed, without the risk of deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-246">L’exemple inclut une énumération imbriquée qui spécifie les valeurs de retour pour la méthode qui illustre le mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-246">The example includes a nested enumeration that specifies the return values for the method that demonstrates upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-247">L’exemple utilise le constructeur par défaut pour créer le verrou, donc la récurrence n’est pas autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-247">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="753a8-248">Programmation du <xref:System.Threading.ReaderWriterLockSlim> est plus simple et moins sujet aux erreurs lorsque le verrou n’autorise pas de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-248">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#12)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#12)]  
  
 <span data-ttu-id="753a8-249">Le code suivant utilise ensuite le `SynchronizedCache` objet à stocker un dictionnaire de noms légumes.</span><span class="sxs-lookup"><span data-stu-id="753a8-249">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="753a8-250">Il crée trois tâches.</span><span class="sxs-lookup"><span data-stu-id="753a8-250">It creates three tasks.</span></span> <span data-ttu-id="753a8-251">La première écrit les noms de légumes stockés dans un tableau à un `SynchronizedCache` instance.</span><span class="sxs-lookup"><span data-stu-id="753a8-251">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="753a8-252">La deuxième et troisième tâche Afficher les noms des légumes, le premier dans l’ordre croissant (à partir de l’index faible à l’index élevé), la seconde dans l’ordre décroissant.</span><span class="sxs-lookup"><span data-stu-id="753a8-252">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="753a8-253">La dernière tâche recherche la chaîne « cucumber » et, lorsqu’il la trouve, appelle le <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> méthode pour remplacer la chaîne « bean vert ».</span><span class="sxs-lookup"><span data-stu-id="753a8-253">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#11)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#11)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/classexample1.cs#13)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/classexample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLockSlim (System.Threading.LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LockRecursionPolicy recursionPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recursionPolicy As LockRecursionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReaderWriterLockSlim(System::Threading::LockRecursionPolicy recursionPolicy);" />
      <MemberSignature Language="F#" Value="new System.Threading.ReaderWriterLockSlim : System.Threading.LockRecursionPolicy -&gt; System.Threading.ReaderWriterLockSlim" Usage="new System.Threading.ReaderWriterLockSlim recursionPolicy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recursionPolicy" Type="System.Threading.LockRecursionPolicy" />
      </Parameters>
      <Docs>
        <param name="recursionPolicy"><span data-ttu-id="753a8-254">Une des valeurs d'énumération qui spécifie la stratégie de récurrence du verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-254">One of the enumeration values that specifies the lock recursion policy.</span></span></param>
        <summary><span data-ttu-id="753a8-255">Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ReaderWriterLockSlim" />, en spécifiant la stratégie de récurrence du verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-255">Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-256">Stratégie de récurrence détermine les restrictions sur les threads qui permet d’entrer le verrou plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="753a8-256">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="753a8-257">Par exemple, si un verrou a été créé avec <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> et un thread a entré le verrou en mode lecture, <xref:System.Threading.LockRecursionException> est levée si le thread essaie d’entrer à nouveau le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-257">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span> <span data-ttu-id="753a8-258">De même, si un thread a entré le verrou en mode écriture, <xref:System.Threading.LockRecursionException> est levée si le thread essaie d’entrer à nouveau le verrou dans un mode quelconque.</span><span class="sxs-lookup"><span data-stu-id="753a8-258">Similarly, if a thread has entered the lock in write mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in any mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-259">Un thread en mode de mise à niveau peut mettre à niveau en mode écriture ou rétrograder vers le pour mode, quel que soit le paramètre de stratégie de récurrence de verrou de lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-259">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="753a8-260">Quelle que soit la stratégie de récurrence, un thread a entré à lire en mode n’est pas autorisé à mettre à niveau vers le verrou en mode ou en mode écriture, car ce modèle crée une forte probabilité de blocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-260">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-261">Pour plus d’informations sur la stratégie de récurrence et ses effets, consultez le <xref:System.Threading.LockRecursionPolicy> énumération et la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-261">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-262">L’exemple suivant montre deux scénarios d’exception, qui varie selon le <xref:System.Threading.LockRecursionPolicy> paramètre et l’autre pas.</span><span class="sxs-lookup"><span data-stu-id="753a8-262">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="753a8-263">Dans le premier scénario, le thread entre en mode lecture et essaie ensuite d’entrer en mode lecture de manière récursive.</span><span class="sxs-lookup"><span data-stu-id="753a8-263">In the first scenario, the thread enters read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="753a8-264">Si le <xref:System.Threading.ReaderWriterLockSlim> est créé en utilisant le constructeur par défaut, qui définit la stratégie de récurrence sur <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, une exception est levée.</span><span class="sxs-lookup"><span data-stu-id="753a8-264">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType>, an exception is thrown.</span></span> <span data-ttu-id="753a8-265">Si <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> est utilisé pour créer le <xref:System.Threading.ReaderWriterLockSlim>, aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="753a8-265">If <xref:System.Threading.LockRecursionPolicy.SupportsRecursion?displayProperty=nameWithType> is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="753a8-266">Dans le second scénario, le thread entre en mode lecture, et puis essaie d’entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-266">In the second scenario, the thread enters read mode and then tries to enter write mode.</span></span> <span data-ttu-id="753a8-267"><xref:System.Threading.LockRecursionException> est levée indépendamment de la stratégie de récurrence du verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-267"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#12)] 
[!code-vb[System.Threading.LockRecursionPolicy#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#12)]  
  
 <span data-ttu-id="753a8-268">Le code suivant utilise ensuite le `SynchronizedCache` objet à stocker un dictionnaire de noms légumes.</span><span class="sxs-lookup"><span data-stu-id="753a8-268">The following code then uses the `SynchronizedCache` object to store a dictionary of vegetable names.</span></span> <span data-ttu-id="753a8-269">Il crée trois tâches.</span><span class="sxs-lookup"><span data-stu-id="753a8-269">It creates three tasks.</span></span> <span data-ttu-id="753a8-270">La première écrit les noms de légumes stockés dans un tableau à un `SynchronizedCache` instance.</span><span class="sxs-lookup"><span data-stu-id="753a8-270">The first writes the names of vegetables stored in an array to a `SynchronizedCache` instance.</span></span> <span data-ttu-id="753a8-271">La deuxième et troisième tâche Afficher les noms des légumes, le premier dans l’ordre croissant (à partir de l’index faible à l’index élevé), la seconde dans l’ordre décroissant.</span><span class="sxs-lookup"><span data-stu-id="753a8-271">The second and third task display the names of the vegetables, the first in ascending order (from low index to high index), the second in descending order.</span></span> <span data-ttu-id="753a8-272">La dernière tâche recherche la chaîne « cucumber » et, lorsqu’il la trouve, appelle le <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> méthode pour remplacer la chaîne « bean vert ».</span><span class="sxs-lookup"><span data-stu-id="753a8-272">The final task searches for the string "cucumber" and, when it finds it, calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method  to substitute the string "green bean".</span></span>  
  
[!code-csharp[System.Threading.LockRecursionPolicy#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#11)] 
[!code-vb[System.Threading.LockRecursionPolicy#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#11)]   
[!code-csharp[System.Threading.LockRecursionPolicy#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/ClassExample1.cs#13)] 
[!code-vb[System.Threading.LockRecursionPolicy#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/ClassExample1.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionPolicy" />
        <altmember cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="CurrentReadCount">
      <MemberSignature Language="C#" Value="public int CurrentReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.CurrentReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-273">Obtient le nombre total de threads uniques qui ont entré le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-273">Gets the total number of unique threads that have entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="753a8-274">Nombre de threads uniques qui ont entré le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-274">The number of unique threads that have entered the lock in read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-275">Un thread est compté une seule fois, même si le verrou autorise la récurrence et le thread a entré en mode lecture plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="753a8-275">A thread is counted only once, even if the lock allows recursion and the thread has entered read mode multiple times.</span></span>  
  
 <span data-ttu-id="753a8-276">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-276">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-277">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-277">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-278">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-278">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-279">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> propriété pour générer une entrée de journal des événements si le nombre de threads en mode lecture dépasse un seuil.</span><span class="sxs-lookup"><span data-stu-id="753a8-279">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.CurrentReadCount%2A> property to generate an event log entry if the number of threads in read mode exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#2)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#11)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="readerWriterLockSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-280">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Threading.ReaderWriterLockSlim" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-280">Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-281">Appelez la méthode <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.Threading.ReaderWriterLockSlim>.</span><span class="sxs-lookup"><span data-stu-id="753a8-281">Call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> when you are finished using the <xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="753a8-282">La méthode <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> rend le <xref:System.Threading.ReaderWriterLockSlim> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="753a8-282">The <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> method leaves the <xref:System.Threading.ReaderWriterLockSlim> in an unusable state.</span></span> <span data-ttu-id="753a8-283">Après avoir appelé <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.Threading.ReaderWriterLockSlim> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Threading.ReaderWriterLockSlim> occupée.</span><span class="sxs-lookup"><span data-stu-id="753a8-283">After calling <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A>, you must release all references to the <xref:System.Threading.ReaderWriterLockSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ReaderWriterLockSlim> was occupying.</span></span> <span data-ttu-id="753a8-284">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="753a8-284">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-285">Appelez toujours <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> avant de libérer votre dernière référence à la <xref:System.Threading.ReaderWriterLockSlim> objet.</span><span class="sxs-lookup"><span data-stu-id="753a8-285">Always call <xref:System.Threading.ReaderWriterLockSlim.Dispose%2A> before you release your last reference to the <xref:System.Threading.ReaderWriterLockSlim> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="753a8-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> est supérieur à zéro.</span><span class="sxs-lookup"><span data-stu-id="753a8-286"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="753a8-287">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-287">-or-</span></span> 
 <span data-ttu-id="753a8-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> est supérieur à zéro.</span><span class="sxs-lookup"><span data-stu-id="753a8-288"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> is greater than zero.</span></span>  
  
<span data-ttu-id="753a8-289">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-289">-or-</span></span> 
 <span data-ttu-id="753a8-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> est supérieur à zéro.</span><span class="sxs-lookup"><span data-stu-id="753a8-290"><see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> is greater than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterReadLock">
      <MemberSignature Language="C#" Value="public void EnterReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-291">Essaie d'entrer le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-291">Tries to enter the lock in read mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-292">Cette méthode se bloque jusqu'à ce que le thread appelant entre le verrou et par conséquent risque de ne jamais retourne.</span><span class="sxs-lookup"><span data-stu-id="753a8-292">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="753a8-293">Utilisez le <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> méthode pour bloquer pendant un intervalle spécifié, puis retourner si le thread appelant n’a pas entré en mode lecture pendant cet intervalle.</span><span class="sxs-lookup"><span data-stu-id="753a8-293">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered read mode during that interval.</span></span>  
  
 <span data-ttu-id="753a8-294">Plusieurs threads peuvent entrer en mode lecture en même temps.</span><span class="sxs-lookup"><span data-stu-id="753a8-294">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="753a8-295">Si un ou plusieurs threads attendent pour entrer en mode écriture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> méthode s’interrompt jusqu'à ce que ces threads aient expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci.</span><span class="sxs-lookup"><span data-stu-id="753a8-295">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-296">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode lecture peut entrer en mode lecture de manière récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-296">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="753a8-297">Au maximum un seul thread peut être en mode de mise à niveau alors que les autres threads sont en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-297">At most one thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="753a8-298">Si des threads supplémentaires sont en attente pour passer en mode de mise à niveau et aucun thread n’attend pour entrer en mode écriture, les threads qui appellent le <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> méthode entrer en mode lecture immédiatement et ne bloquent pas.</span><span class="sxs-lookup"><span data-stu-id="753a8-298">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-299">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> méthode pour entrer le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-299">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method to enter the lock in read mode.</span></span> <span data-ttu-id="753a8-300">La méthode illustrée dans l’exemple récupère la valeur associée à une clé.</span><span class="sxs-lookup"><span data-stu-id="753a8-300">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="753a8-301">Si la clé est introuvable, l’exception levée par interne <xref:System.Collections.Generic.Dictionary%602> est autorisé à mettre fin à la méthode.</span><span class="sxs-lookup"><span data-stu-id="753a8-301">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="753a8-302">Un `finally` bloc est utilisé pour exécuter le <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> méthode, en garantissant que l’appelant quitte le mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-302">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span>  
  
 <span data-ttu-id="753a8-303">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-303">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-304">La propriété <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, et le thread actuel a tenté d’acquérir le verrou en lecture alors qu’il le détient déjà.</span><span class="sxs-lookup"><span data-stu-id="753a8-304">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the read lock.</span></span>  
  
<span data-ttu-id="753a8-305">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-305">-or-</span></span> 
<span data-ttu-id="753a8-306">La propriété <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, et le thread actuel a tenté d’acquérir le verrou en lecture alors qu’il détient déjà le verrou en écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-306">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, and the current thread has attempted to acquire the read lock when it already holds the write lock.</span></span>  
  
<span data-ttu-id="753a8-307">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-307">-or-</span></span> 
<span data-ttu-id="753a8-308">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-308">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-309">Cette limite est si élevée que les applications ne devraient normalement jamais rencontrer cette exception.</span><span class="sxs-lookup"><span data-stu-id="753a8-309">This limit is so large that applications should never encounter this exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-310">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-310">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void EnterUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.EnterUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-311">Essaie d'entrer le verrou en mode pouvant être mis à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-311">Tries to enter the lock in upgradeable mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-312">Cette méthode se bloque jusqu'à ce que le thread appelant entre le verrou et par conséquent risque de ne jamais retourne.</span><span class="sxs-lookup"><span data-stu-id="753a8-312">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="753a8-313">Utilisez le <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> méthode pour bloquer pendant un intervalle spécifié, puis retourner si le thread appelant n’a pas entré de verrou en mode pendant cet intervalle.</span><span class="sxs-lookup"><span data-stu-id="753a8-313">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method to block for a specified interval, and then return if the calling thread has not entered upgradeable mode during that interval.</span></span>  
  
 <span data-ttu-id="753a8-314">Utilisez le mode de mise à niveau quand un thread accède généralement à la ressource qui est protégée par le <xref:System.Threading.ReaderWriterLockSlim> en mode lecture, mais devrez peut-être entrer en mode écriture si certaines conditions sont remplies.</span><span class="sxs-lookup"><span data-stu-id="753a8-314">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="753a8-315">Un thread en mode de mise à niveau peut rétrograder en mode lecture ou mise à niveau en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-315">A thread in upgradeable mode can downgrade to read mode or upgrade to write mode.</span></span>  
  
 <span data-ttu-id="753a8-316">Qu’un seul thread peut entrer le verrou en mode à un moment donné.</span><span class="sxs-lookup"><span data-stu-id="753a8-316">Only one thread can enter upgradeable mode at any given time.</span></span> <span data-ttu-id="753a8-317">Si un thread est en mode de mise à niveau et aucun thread n’attend pour entrer en mode écriture, n’importe quel nombre d’autres threads permettre entrer en mode lecture, même s’il existe des threads qui attendent pour entrer le verrou en mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-317">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-318">Si un ou plusieurs threads attendent pour entrer en mode écriture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> méthode s’interrompt jusqu'à ce que ces threads aient expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci.</span><span class="sxs-lookup"><span data-stu-id="753a8-318">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-319">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode de mise à niveau peut entrer verrou en mode de manière récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-319">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-320">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> méthode pour entrer le verrou en mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-320">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock%2A> method to enter the lock in upgradeable mode.</span></span> <span data-ttu-id="753a8-321">Un `finally` bloc est utilisé pour exécuter le <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> méthode, en garantissant que l’appelant quitte le mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-321">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-322">La méthode illustrée dans l’exemple récupère la valeur associée à une clé et la compare à une nouvelle valeur.</span><span class="sxs-lookup"><span data-stu-id="753a8-322">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="753a8-323">Si la valeur est inchangée, la méthode retourne un état qui indique aucune modification.</span><span class="sxs-lookup"><span data-stu-id="753a8-323">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="753a8-324">Il aucune valeur n’est trouvée pour la clé, la paire clé/valeur est insérée.</span><span class="sxs-lookup"><span data-stu-id="753a8-324">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="753a8-325">Si la valeur a changé, il est mis à jour.</span><span class="sxs-lookup"><span data-stu-id="753a8-325">If the value has changed, it is updated.</span></span> <span data-ttu-id="753a8-326">Verrou en mode permet au thread de mettre à niveau le verrou en lecture en fonction des besoins, sans risque d’interblocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-326">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-327">L’exemple utilise le constructeur par défaut pour créer le verrou, donc la récurrence n’est pas autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-327">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="753a8-328">Programmation du <xref:System.Threading.ReaderWriterLockSlim> est plus simple et moins sujet aux erreurs lorsque le verrou n’autorise pas de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-328">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="753a8-329">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-329">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-330">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou dans n’importe quel mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-330">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="753a8-331">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-331">-or-</span></span> 
<span data-ttu-id="753a8-332">Le thread actuel a entré en mode lecture, afin de la tentative d’entrer le verrou en mode serait de créer un interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-332">The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="753a8-333">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-333">-or-</span></span> 
<span data-ttu-id="753a8-334">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-334">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-335">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-335">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-336">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-336">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnterWriteLock">
      <MemberSignature Language="C#" Value="public void EnterWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnterWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnterWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnterWriteLock();" />
      <MemberSignature Language="F#" Value="member this.EnterWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.EnterWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-337">Essaie d'entrer le verrou en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-337">Tries to enter the lock in write mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-338">Cette méthode se bloque jusqu'à ce que le thread appelant entre le verrou et par conséquent risque de ne jamais retourne.</span><span class="sxs-lookup"><span data-stu-id="753a8-338">This method blocks until the calling thread enters the lock, and therefore might never return.</span></span> <span data-ttu-id="753a8-339">Utilisez le <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> méthode pour bloquer pendant un intervalle spécifié, puis retourner si le thread appelant n’a pas entré en mode écriture pendant cet intervalle.</span><span class="sxs-lookup"><span data-stu-id="753a8-339">Use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to block for a specified interval, and then return if the calling thread has not entered write mode during that interval.</span></span>  
  
 <span data-ttu-id="753a8-340">Si d’autres threads ont entré le verrou en mode lecture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> méthode s’interrompt jusqu'à ce que ces threads ont quitté le mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-340">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method blocks until those threads have exited read mode.</span></span> <span data-ttu-id="753a8-341">Lorsqu’il existe des threads qui attendent pour entrer en mode écriture, autres threads qui essaient d’entrer en mode lecture ou un verrou en mode bloc jusqu'à ce que tous les threads qui attendent pour entrer en mode écriture aient expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci.</span><span class="sxs-lookup"><span data-stu-id="753a8-341">When there are threads waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-342">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode écriture peut entrer écriture en mode de façon récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-342">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-343">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> méthode pour entrer le verrou en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-343">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method to enter the lock in write mode.</span></span> <span data-ttu-id="753a8-344">La méthode illustrée dans l’exemple ajoute une nouvelle paire clé/valeur au cache synchronisé.</span><span class="sxs-lookup"><span data-stu-id="753a8-344">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="753a8-345">Si la clé est déjà dans le cache, l’exception levée par interne <xref:System.Collections.Generic.Dictionary%602> est autorisé à mettre fin à la méthode.</span><span class="sxs-lookup"><span data-stu-id="753a8-345">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="753a8-346">Un `finally` bloc est utilisé pour exécuter le <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> méthode, en garantissant que l’appelant quitte le mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-346">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span>  
  
 <span data-ttu-id="753a8-347">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-347">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-348">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou dans n’importe quel mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-348">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode.</span></span>  
  
<span data-ttu-id="753a8-349">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-349">-or-</span></span> 
<span data-ttu-id="753a8-350">Le thread actuel est entré en mode lecture et n’a pas de verrou en écriture. Une tentative d’entrer le verrou en mode écriture risquerait donc de créer un interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-350">The current thread has entered read mode and doesn't already own a write lock, so trying to enter the lock in write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="753a8-351">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-351">-or-</span></span> 
<span data-ttu-id="753a8-352">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-352">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-353">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-353">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-354">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-354">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitReadLock">
      <MemberSignature Language="C#" Value="public void ExitReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-355">Réduit le nombre de récurrences pour le mode lecture, et quitte le mode lecture si le nombre résultant est 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="753a8-355">Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-356">Cette méthode n’est pas sensible à la commande de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-356">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="753a8-357">Par exemple, si un thread entre un verrou en mode de mise à niveau puis entre le verrou en mode lecture, l’ordre dans lequel le thread quitte les deux modes n’a pas d’importance.</span><span class="sxs-lookup"><span data-stu-id="753a8-357">For example, if a thread enters a lock in upgradeable mode and then enters the lock in read mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="753a8-358">Si un verrou autorise la récurrence, un thread peut entrer le verrou en mode écriture, puis entrez-le de manière récursive en mode lecture ; l’ordre dans lequel le thread s’arrête en mode lecture et écriture de mode n’a pas d’importance.</span><span class="sxs-lookup"><span data-stu-id="753a8-358">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="753a8-359">Fermeture du verrou peut signaler les autres threads en attente.</span><span class="sxs-lookup"><span data-stu-id="753a8-359">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-360">L’exemple suivant montre comment utiliser un `finally` exécution du bloc le <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> méthode, en garantissant que l’appelant quitte le mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-360">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitReadLock%2A> method, ensuring that the caller exits read mode.</span></span> <span data-ttu-id="753a8-361">La méthode illustrée dans l’exemple récupère la valeur associée à une clé.</span><span class="sxs-lookup"><span data-stu-id="753a8-361">The method shown in the example retrieves the value associated with a key.</span></span> <span data-ttu-id="753a8-362">Si la clé est introuvable, l’exception levée par interne <xref:System.Collections.Generic.Dictionary%602> est autorisé à mettre fin à la méthode.</span><span class="sxs-lookup"><span data-stu-id="753a8-362">If the key is not found, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="753a8-363">Le <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> méthode est utilisée pour entrer en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-363">The <xref:System.Threading.ReaderWriterLockSlim.EnterReadLock%2A> method is used to enter read mode.</span></span>  
  
 <span data-ttu-id="753a8-364">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-364">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="753a8-365">Le thread actuel n’a pas entré le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-365">The current thread has not entered the lock in read mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public void ExitUpgradeableReadLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitUpgradeableReadLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitUpgradeableReadLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitUpgradeableReadLock();" />
      <MemberSignature Language="F#" Value="member this.ExitUpgradeableReadLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitUpgradeableReadLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-366">Réduit le nombre de récurrences pour le mode pouvant être mis à niveau, et quitte le mode pouvant être mis à niveau si le nombre résultant est 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="753a8-366">Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-367">Cette méthode n’est pas sensible à la commande de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-367">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="753a8-368">Par exemple, si un thread entre un verrou en mode de mise à niveau puis entre le verrou en mode écriture, l’ordre dans lequel le thread quitte les deux modes n’a pas d’importance.</span><span class="sxs-lookup"><span data-stu-id="753a8-368">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="753a8-369">Si un verrou autorise la récurrence, un thread peut entrer le verrou en mode écriture, puis entrez-le de manière récursive en mode de mise à niveau ; l’ordre dans lequel le thread quitte le verrou en mode de mode et d’écriture n’a pas d’importance.</span><span class="sxs-lookup"><span data-stu-id="753a8-369">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in upgradeable mode; the order in which the thread exits upgradeable mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="753a8-370">Fermeture du verrou peut signaler les autres threads en attente.</span><span class="sxs-lookup"><span data-stu-id="753a8-370">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-371">L’exemple suivant montre comment utiliser un `finally` exécution du bloc le <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> méthode, en garantissant que l’appelant quitte le mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-371">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock%2A> method, ensuring that the caller exits upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-372">La méthode illustrée dans l’exemple récupère la valeur associée à une clé et la compare à une nouvelle valeur.</span><span class="sxs-lookup"><span data-stu-id="753a8-372">The method shown in the example retrieves the value associated with a key and compares it with a new value.</span></span> <span data-ttu-id="753a8-373">Si la valeur est inchangée, la méthode retourne un état qui indique aucune modification.</span><span class="sxs-lookup"><span data-stu-id="753a8-373">If the value is unchanged, the method returns a status indicating no change.</span></span> <span data-ttu-id="753a8-374">Il aucune valeur n’est trouvée pour la clé, la paire clé/valeur est insérée.</span><span class="sxs-lookup"><span data-stu-id="753a8-374">It no value is found for the key, the key/value pair is inserted.</span></span> <span data-ttu-id="753a8-375">Si la valeur a changé, il est mis à jour.</span><span class="sxs-lookup"><span data-stu-id="753a8-375">If the value has changed, it is updated.</span></span> <span data-ttu-id="753a8-376">Verrou en mode permet au thread de mettre à niveau le verrou en lecture en fonction des besoins, sans risque d’interblocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-376">Upgradeable mode allows the thread to upgrade the read lock as needed, without risk of deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-377">L’exemple utilise le constructeur par défaut pour créer le verrou, donc la récurrence n’est pas autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-377">The example uses the default constructor to create the lock, so recursion is not allowed.</span></span> <span data-ttu-id="753a8-378">Programmation du <xref:System.Threading.ReaderWriterLockSlim> est plus simple et moins sujet aux erreurs lorsque le verrou n’autorise pas de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-378">Programming the <xref:System.Threading.ReaderWriterLockSlim> is simpler and less prone to error when the lock does not allow recursion.</span></span>  
  
 <span data-ttu-id="753a8-379">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-379">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#6)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#10)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="753a8-380">Le thread actuel n’a pas entré le verrou en mode de mise à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-380">The current thread has not entered the lock in upgradeable mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExitWriteLock">
      <MemberSignature Language="C#" Value="public void ExitWriteLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExitWriteLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExitWriteLock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExitWriteLock();" />
      <MemberSignature Language="F#" Value="member this.ExitWriteLock : unit -&gt; unit" Usage="readerWriterLockSlim.ExitWriteLock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="753a8-381">Réduit le nombre de récurrences pour le mode écriture, et quitte le mode écriture si le nombre résultant est 0 (zéro).</span><span class="sxs-lookup"><span data-stu-id="753a8-381">Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-382">Cette méthode n’est pas sensible à la commande de récursivité.</span><span class="sxs-lookup"><span data-stu-id="753a8-382">This method is not sensitive to recursion order.</span></span> <span data-ttu-id="753a8-383">Par exemple, si un thread entre un verrou en mode de mise à niveau puis entre le verrou en mode écriture, l’ordre dans lequel le thread quitte les deux modes n’a pas d’importance.</span><span class="sxs-lookup"><span data-stu-id="753a8-383">For example, if a thread enters a lock in upgradeable mode and then enters the lock in write mode, the order in which the thread exits the two modes does not matter.</span></span> <span data-ttu-id="753a8-384">Si un verrou autorise la récurrence, un thread peut entrer le verrou en mode écriture, puis entrez-le de manière récursive en mode lecture ; l’ordre dans lequel le thread s’arrête en mode lecture et écriture de mode n’a pas d’importance.</span><span class="sxs-lookup"><span data-stu-id="753a8-384">If a lock allows recursion, a thread can enter the lock in write mode and then enter it recursively in read mode; the order in which the thread exits read mode and write mode does not matter.</span></span>  
  
 <span data-ttu-id="753a8-385">Fermeture du verrou peut signaler les autres threads en attente.</span><span class="sxs-lookup"><span data-stu-id="753a8-385">Exiting the lock might signal other waiting threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-386">L’exemple suivant montre comment utiliser un `finally` exécution du bloc le <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> méthode, en garantissant que l’appelant quitte le mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-386">The following example shows how to use a `finally` block to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits write mode.</span></span> <span data-ttu-id="753a8-387">La méthode illustrée dans l’exemple ajoute une nouvelle paire clé/valeur au cache synchronisé.</span><span class="sxs-lookup"><span data-stu-id="753a8-387">The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="753a8-388">Si la clé est déjà dans le cache, l’exception levée par interne <xref:System.Collections.Generic.Dictionary%602> est autorisé à mettre fin à la méthode.</span><span class="sxs-lookup"><span data-stu-id="753a8-388">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="753a8-389">Le <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> méthode est utilisée pour entrer le verrou en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-389">The <xref:System.Threading.ReaderWriterLockSlim.EnterWriteLock%2A> method is used to enter the lock in write mode.</span></span>  
  
 <span data-ttu-id="753a8-390">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-390">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="753a8-391">Le thread actuel n’a pas entré le verrou en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-391">The current thread has not entered the lock in write mode.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-392">Obtient une valeur qui indique si le thread actuel a entré le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-392">Gets a value that indicates whether the current thread has entered the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="753a8-393"><see langword="true" /> si le thread actuel a entré le verrou en mode lecture ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-393"><see langword="true" /> if the current thread has entered read mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-394">Cette propriété est conçue pour utilisation dans les assertions ou à des fins de débogage.</span><span class="sxs-lookup"><span data-stu-id="753a8-394">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="753a8-395">N’utilisez pas pour contrôler le flux d’exécution du programme.</span><span class="sxs-lookup"><span data-stu-id="753a8-395">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-396">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> propriété pour générer une assertion si le thread actuel a entré le verrou en mode lecture inattendu.</span><span class="sxs-lookup"><span data-stu-id="753a8-396">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsReadLockHeld%2A> property to generate an assert if the current thread has entered read mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#21)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUpgradeableReadLockHeld">
      <MemberSignature Language="C#" Value="public bool IsUpgradeableReadLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUpgradeableReadLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUpgradeableReadLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUpgradeableReadLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUpgradeableReadLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-397">Obtient une valeur qui indique si le thread actuel a entré le verrou en mode pouvant être mis à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-397">Gets a value that indicates whether the current thread has entered the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="753a8-398"><see langword="true" /> si le thread actuel a entré le verrou en mode pouvant être mis à niveau ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-398"><see langword="true" /> if the current thread has entered upgradeable mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-399">Cette propriété est conçue pour utilisation dans les assertions ou à des fins de débogage.</span><span class="sxs-lookup"><span data-stu-id="753a8-399">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="753a8-400">N’utilisez pas pour contrôler le flux d’exécution du programme.</span><span class="sxs-lookup"><span data-stu-id="753a8-400">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-401">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> propriété pour générer une assertion si le thread actuel a entré le verrou en mode inattendu.</span><span class="sxs-lookup"><span data-stu-id="753a8-401">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld%2A> property to generate an assert if the current thread has entered upgradeable mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#22)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriteLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteLockHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteLockHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteLockHeld : bool" Usage="System.Threading.ReaderWriterLockSlim.IsWriteLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-402">Obtient une valeur qui indique si le thread actuel a entré le verrou en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-402">Gets a value that indicates whether the current thread has entered the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="753a8-403"><see langword="true" /> si le thread actuel a entré le verrou en mode écriture ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-403"><see langword="true" /> if the current thread has entered write mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-404">Cette propriété est conçue pour utilisation dans les assertions ou à des fins de débogage.</span><span class="sxs-lookup"><span data-stu-id="753a8-404">This property is intended for use in asserts or for other debugging purposes.</span></span> <span data-ttu-id="753a8-405">N’utilisez pas pour contrôler le flux d’exécution du programme.</span><span class="sxs-lookup"><span data-stu-id="753a8-405">Do not use it to control the flow of program execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-406">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> propriété pour générer une assertion si le thread actuel est entré en mode écriture de façon inattendue.</span><span class="sxs-lookup"><span data-stu-id="753a8-406">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld%2A> property to generate an assert if the current thread has entered write mode unexpectedly.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#23)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursionPolicy">
      <MemberSignature Language="C#" Value="public System.Threading.LockRecursionPolicy RecursionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.LockRecursionPolicy RecursionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursionPolicy As LockRecursionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::LockRecursionPolicy RecursionPolicy { System::Threading::LockRecursionPolicy get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursionPolicy : System.Threading.LockRecursionPolicy" Usage="System.Threading.ReaderWriterLockSlim.RecursionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-407">Obtient une valeur qui indique la stratégie de récurrence pour l'objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> actuel.</span><span class="sxs-lookup"><span data-stu-id="753a8-407">Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</span></span></summary>
        <value><span data-ttu-id="753a8-408">Une des valeurs d'énumération qui spécifie la stratégie de récurrence du verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-408">One of the enumeration values that specifies the lock recursion policy.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-409">Stratégie de récurrence détermine les restrictions sur les threads qui permet d’entrer le verrou plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="753a8-409">Recursion policy determines the restrictions on threads that enter the lock more than once.</span></span> <span data-ttu-id="753a8-410">Par exemple, si un verrou a été créé avec <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> et un thread a entré le verrou en mode lecture, <xref:System.Threading.LockRecursionException> est levée si le thread essaie d’entrer à nouveau le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-410">For example, if a lock was created with <xref:System.Threading.LockRecursionPolicy.NoRecursion?displayProperty=nameWithType> and a thread has entered the lock in read mode, <xref:System.Threading.LockRecursionException> is thrown if the thread tries to reenter the lock in read mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-411">Un thread en mode de mise à niveau peut mettre à niveau en mode écriture ou rétrograder vers le pour mode, quel que soit le paramètre de stratégie de récurrence de verrou de lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-411">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode regardless of the lock recursion policy setting.</span></span>  
  
 <span data-ttu-id="753a8-412">Quelle que soit la stratégie de récurrence, un thread a entré à lire en mode n’est pas autorisé à mettre à niveau vers le verrou en mode ou en mode écriture, car ce modèle crée une forte probabilité de blocages.</span><span class="sxs-lookup"><span data-stu-id="753a8-412">Regardless of recursion policy, a thread that initially entered read mode is not allowed to upgrade to upgradeable mode or write mode, because that pattern creates a strong probability of deadlocks.</span></span>  
  
 <span data-ttu-id="753a8-413">Pour plus d’informations sur la stratégie de récurrence et ses effets, consultez le <xref:System.Threading.LockRecursionPolicy> énumération et la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-413">For more information about recursion policy and its effects, see the <xref:System.Threading.LockRecursionPolicy> enumeration and the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LockRecursionException" />
      </Docs>
    </Member>
    <Member MemberName="RecursiveReadCount">
      <MemberSignature Language="C#" Value="public int RecursiveReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-414">Obtient le nombre de fois où le thread actuel a entré le verrou en mode lecture, comme une indication de récurrence.</span><span class="sxs-lookup"><span data-stu-id="753a8-414">Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="753a8-415">0 (zéro) si le thread actuel n’a pas entré en mode lecture, 1 si le thread a entré en mode lecture mais n’a pas saisi de façon récursive, ou *n* si le thread a entré le verrou de manière récursive *n* - 1 fois.</span><span class="sxs-lookup"><span data-stu-id="753a8-415">0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or *n* if the thread has entered the lock recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-416">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-416">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-417">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-417">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-418">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-418">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveUpgradeCount">
      <MemberSignature Language="C#" Value="public int RecursiveUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-419">Obtient le nombre de fois où le thread actuel a entré le verrou en mode pouvant être mis à niveau, comme une indication de récurrence.</span><span class="sxs-lookup"><span data-stu-id="753a8-419">Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="753a8-420">0 si le thread actuel n’a pas entré en mode de mise à niveau, 1 si le thread est entré en mode de mise à niveau, mais n’a pas entré il de façon récursive, ou *n* si le thread a entré le verrou en mode de manière récursive *n* - 1 heures.</span><span class="sxs-lookup"><span data-stu-id="753a8-420">0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or *n* if the thread has entered upgradeable mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-421">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-421">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-422">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-422">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-423">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-423">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecursiveWriteCount">
      <MemberSignature Language="C#" Value="public int RecursiveWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RecursiveWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecursiveWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RecursiveWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RecursiveWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.RecursiveWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-424">Obtient le nombre de fois où le thread actuel a entré le verrou en mode écriture, comme une indication de récurrence.</span><span class="sxs-lookup"><span data-stu-id="753a8-424">Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</span></span></summary>
        <value><span data-ttu-id="753a8-425">0 si le thread actuel n’a pas entré en mode écriture, 1 si le thread est entré en mode écriture mais n’a pas de façon récursive, ou *n* si le thread a entré écriture mode *n* - 1 fois.</span><span class="sxs-lookup"><span data-stu-id="753a8-425">0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or *n* if the thread has entered write mode recursively *n* - 1 times.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-426">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-426">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-427">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-427">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-428">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-428">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="753a8-429">Essaie d'entrer le verrou en mode lecture, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-429">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="753a8-430">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="753a8-430">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="753a8-431">Essaie d'entrer le verrou en mode lecture, avec un délai d'attente entier facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-431">Tries to enter the lock in read mode, with an optional integer time-out.</span></span></summary>
        <returns><span data-ttu-id="753a8-432"><see langword="true" /> si le thread appelant est entré en mode lecture, sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-432"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-433">Si `millisecondsTimeout` est 0 (zéro), cette méthode vérifie l’état de verrou et retourne `false` immédiatement si l’état souhaité n’est pas disponible.</span><span class="sxs-lookup"><span data-stu-id="753a8-433">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="753a8-434">Plusieurs threads peuvent entrer en mode lecture en même temps.</span><span class="sxs-lookup"><span data-stu-id="753a8-434">Multiple threads can enter read mode at the same time.</span></span>  
  
 <span data-ttu-id="753a8-435">Si un ou plusieurs threads attendent pour entrer en mode écriture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> méthode se bloque jusqu'à ce que ces threads ont soit a expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci, ou jusqu'à l’expiration de l’intervalle de délai d’attente du thread appelant.</span><span class="sxs-lookup"><span data-stu-id="753a8-435">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-436">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode lecture peut entrer en mode lecture de manière récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-436">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="753a8-437">Un seul thread peut être en mode de mise à niveau alors que les autres threads sont en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-437">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="753a8-438">Si des threads supplémentaires sont en attente pour passer en mode de mise à niveau et aucun thread n’attend pour entrer en mode écriture, les threads qui appellent le <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> méthode entrer en mode lecture immédiatement et ne bloquent pas.</span><span class="sxs-lookup"><span data-stu-id="753a8-438">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-439">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-439">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="753a8-440">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-440">-or-</span></span> 
<span data-ttu-id="753a8-441">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-441">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-442">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-442">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="753a8-443">La valeur de <paramref name="millisecondsTimeout" /> est négatif, mais il n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" /> (-1), qui est la seule valeur négative autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-443">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-444">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-444">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="753a8-445">Intervalle d'attente, ou -1 milliseconde pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="753a8-445">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="753a8-446">Essaie d'entrer le verrou en mode lecture, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-446">Tries to enter the lock in read mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="753a8-447"><see langword="true" /> si le thread appelant est entré en mode lecture, sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-447"><see langword="true" /> if the calling thread entered read mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-448">Si `timeout` est 0 (zéro), cette méthode vérifie l’état de verrou et retourne `false` immédiatement si l’état souhaité n’est pas disponible.</span><span class="sxs-lookup"><span data-stu-id="753a8-448">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="753a8-449">Plusieurs threads peuvent entrer le verrou en mode lecture en même temps.</span><span class="sxs-lookup"><span data-stu-id="753a8-449">Multiple threads can enter the lock in read mode at the same time.</span></span>  
  
 <span data-ttu-id="753a8-450">Si un ou plusieurs threads en attente d’entrer en mode écriture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> méthode se bloque jusqu'à ce que ces threads ont soit a expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci, ou jusqu'à l’expiration de l’intervalle de délai d’attente du thread appelant.</span><span class="sxs-lookup"><span data-stu-id="753a8-450">If one or more threads are queued to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-451">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode lecture peut entrer en mode lecture de manière récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-451">If a lock allows recursion, a thread that has entered the lock in read mode can enter read mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 <span data-ttu-id="753a8-452">Un seul thread peut être en mode de mise à niveau alors que les autres threads sont en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-452">One thread can be in upgradeable mode while other threads are in read mode.</span></span> <span data-ttu-id="753a8-453">Si des threads supplémentaires sont en attente pour passer en mode de mise à niveau et aucun thread n’attend pour entrer en mode écriture, les threads qui appellent le <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> méthode entrer en mode lecture immédiatement et ne bloquent pas.</span><span class="sxs-lookup"><span data-stu-id="753a8-453">If additional threads are waiting to enter upgradeable mode, and there are no threads waiting to enter write mode, threads that call the <xref:System.Threading.ReaderWriterLockSlim.TryEnterReadLock%2A> method enter read mode immediately and do not block.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-454">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-454">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="753a8-455">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-455">-or-</span></span> 
<span data-ttu-id="753a8-456">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-456">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-457">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-457">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="753a8-458">La valeur de <paramref name="timeout" /> est négatif, mais il n’est pas égal à-1 milliseconde, qui est la seule valeur négative autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-458">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="753a8-459">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-459">-or-</span></span> 
<span data-ttu-id="753a8-460">La valeur de <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> millisecondes.</span><span class="sxs-lookup"><span data-stu-id="753a8-460">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-461">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-461">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterUpgradeableReadLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="753a8-462">Essaie d'entrer le verrou en mode pouvant être mis à niveau, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-462">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="753a8-463">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="753a8-463">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="753a8-464">Essaie d'entrer le verrou en mode pouvant être mis à niveau, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-464">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="753a8-465"><see langword="true" /> si le thread appelant est entré en mode de mise à niveau, sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-465"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-466">Si `millisecondsTimeout` est 0 (zéro), cette méthode vérifie l’état de verrou et retourne `false` immédiatement si l’état souhaité n’est pas disponible.</span><span class="sxs-lookup"><span data-stu-id="753a8-466">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="753a8-467">Utilisez le mode de mise à niveau quand un thread accède généralement à la ressource qui est protégée par le <xref:System.Threading.ReaderWriterLockSlim> en mode lecture, mais devrez peut-être entrer en mode écriture si certaines conditions sont remplies.</span><span class="sxs-lookup"><span data-stu-id="753a8-467">Use upgradeable mode when a thread usually accesses the resource that is protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="753a8-468">Un thread en mode de mise à niveau peut mettre à niveau en mode écriture ou rétrograder en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-468">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="753a8-469">Qu’un seul thread peut entrer un verrou en mode de mise à niveau à un moment donné.</span><span class="sxs-lookup"><span data-stu-id="753a8-469">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="753a8-470">Si un thread est en mode de mise à niveau et aucun thread n’attend pour entrer en mode écriture, n’importe quel nombre d’autres threads permettre entrer en mode lecture, même s’il existe des threads qui attendent pour entrer le verrou en mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-470">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-471">Si un ou plusieurs threads attendent pour entrer en mode écriture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> méthode se bloque jusqu'à ce que ces threads ont soit a expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci, ou jusqu'à l’expiration de l’intervalle de délai d’attente du thread appelant.</span><span class="sxs-lookup"><span data-stu-id="753a8-471">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-472">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode de mise à niveau peut entrer verrou en mode de manière récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-472">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-473">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-473">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="753a8-474">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-474">-or-</span></span> 
<span data-ttu-id="753a8-475">Le thread actuel a entré le verrou en mode lecture, et par conséquent essayant d’entrer le verrou en mode serait de créer un interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-475">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="753a8-476">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-476">-or-</span></span> 
<span data-ttu-id="753a8-477">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-477">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-478">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-478">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="753a8-479">La valeur de <paramref name="millisecondsTimeout" /> est négatif, mais il n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" /> (-1), qui est la seule valeur négative autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-479">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-480">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-480">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterUpgradeableReadLock">
      <MemberSignature Language="C#" Value="public bool TryEnterUpgradeableReadLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterUpgradeableReadLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterUpgradeableReadLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterUpgradeableReadLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterUpgradeableReadLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterUpgradeableReadLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="753a8-481">Intervalle d'attente, ou -1 milliseconde pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="753a8-481">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="753a8-482">Essaie d'entrer le verrou en mode pouvant être mis à niveau, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-482">Tries to enter the lock in upgradeable mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="753a8-483"><see langword="true" /> si le thread appelant est entré en mode de mise à niveau, sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-483"><see langword="true" /> if the calling thread entered upgradeable mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-484">Si `timeout` est 0 (zéro), cette méthode vérifie l’état de verrou et retourne `false` immédiatement si l’état souhaité n’est pas disponible.</span><span class="sxs-lookup"><span data-stu-id="753a8-484">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="753a8-485">Utiliser le mode de mise à niveau lorsqu’un thread accède généralement à la ressource protégée par le <xref:System.Threading.ReaderWriterLockSlim> en mode lecture, mais devrez peut-être entrer en mode écriture si certaines conditions sont remplies.</span><span class="sxs-lookup"><span data-stu-id="753a8-485">Use upgradeable mode when a thread usually accesses the resource protected by the <xref:System.Threading.ReaderWriterLockSlim> in read mode, but may need to enter write mode if certain conditions are met.</span></span> <span data-ttu-id="753a8-486">Un thread en mode de mise à niveau peut mettre à niveau en mode écriture ou rétrograder en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-486">A thread in upgradeable mode can upgrade to write mode or downgrade to read mode.</span></span>  
  
 <span data-ttu-id="753a8-487">Qu’un seul thread peut entrer un verrou en mode de mise à niveau à un moment donné.</span><span class="sxs-lookup"><span data-stu-id="753a8-487">Only one thread can enter a lock in upgradeable mode at any given time.</span></span> <span data-ttu-id="753a8-488">Si un thread est en mode de mise à niveau et aucun thread n’attend pour entrer en mode écriture, n’importe quel nombre d’autres threads permettre entrer en mode lecture, même s’il existe des threads qui attendent pour entrer le verrou en mode.</span><span class="sxs-lookup"><span data-stu-id="753a8-488">If a thread is in upgradeable mode, and there are no threads waiting to enter write mode, any number of other threads can enter read mode, even if there are threads waiting to enter upgradeable mode.</span></span>  
  
 <span data-ttu-id="753a8-489">Si un ou plusieurs threads attendent pour entrer en mode écriture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> méthode se bloque jusqu'à ce que ces threads ont soit a expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci, ou jusqu'à l’expiration de l’intervalle de délai d’attente du thread appelant.</span><span class="sxs-lookup"><span data-stu-id="753a8-489">If one or more threads are waiting to enter write mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock%2A> method blocks until those threads have either timed out or entered write mode and then exited from it, or until the calling thread's own time-out interval expires.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-490">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode de mise à niveau peut entrer verrou en mode de manière récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-490">If a lock allows recursion, a thread that has entered the lock in upgradeable mode can enter upgradeable mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-491">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-491">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="753a8-492">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-492">-or-</span></span> 
<span data-ttu-id="753a8-493">Le thread actuel a entré le verrou en mode lecture, et par conséquent essayant d’entrer le verrou en mode serait de créer un interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-493">The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="753a8-494">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-494">-or-</span></span> 
<span data-ttu-id="753a8-495">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-495">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-496">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-496">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="753a8-497">La valeur de <paramref name="timeout" /> est négatif, mais il n’est pas égal à-1 milliseconde, qui est la seule valeur négative autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-497">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="753a8-498">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-498">-or-</span></span> 
<span data-ttu-id="753a8-499">La valeur de <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> millisecondes.</span><span class="sxs-lookup"><span data-stu-id="753a8-499">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-500">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-500">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnterWriteLock">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="753a8-501">Essaie d'entrer le verrou en mode écriture, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-501">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : int -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="753a8-502">Nombre de millisecondes à attendre, ou <see cref="F:System.Threading.Timeout.Infinite" /> (-1) pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="753a8-502">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="753a8-503">Essaie d'entrer le verrou en mode écriture, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-503">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="753a8-504"><see langword="true" /> si le thread appelant est entré en mode écriture, sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-504"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-505">Si `millisecondsTimeout` est 0 (zéro), cette méthode vérifie l’état de verrou et retourne `false` immédiatement si l’état souhaité n’est pas disponible.</span><span class="sxs-lookup"><span data-stu-id="753a8-505">If `millisecondsTimeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="753a8-506">Si d’autres threads ont entré le verrou en mode lecture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> méthode se bloque jusqu'à ce que ces threads ont quitté le mode lecture ou jusqu'à ce que l’intervalle de délai d’expiration est écoulé.</span><span class="sxs-lookup"><span data-stu-id="753a8-506">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="753a8-507">Tandis que les threads sont bloqués en attente d’entrer en mode écriture, les autres threads qui essaient d’entrer en mode lecture ou verrou en mode bloquent jusqu'à ce que tous les threads qui attendent pour entrer en mode écrivent ont soit a expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci.</span><span class="sxs-lookup"><span data-stu-id="753a8-507">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-508">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode écriture peut entrer écriture en mode de façon récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-508">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-509">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> méthode pour entrer le verrou en mode écriture, avec un délai d’attente. La méthode illustrée dans l’exemple ajoute une nouvelle paire clé/valeur au cache synchronisé.</span><span class="sxs-lookup"><span data-stu-id="753a8-509">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method to enter the lock in write mode, with a time-out. The method shown in the example adds a new key/value pair to the synchronized cache.</span></span> <span data-ttu-id="753a8-510">Si l’intervalle de délai d’attente spécifié est écoulé avant que le thread n’intègre le verrou, la méthode retourne `false`.</span><span class="sxs-lookup"><span data-stu-id="753a8-510">If the specified time-out interval elapses before the thread enters the lock, the method returns `false`.</span></span> <span data-ttu-id="753a8-511">La méthode retourne `true` si la paire clé/valeur est ajoutée.</span><span class="sxs-lookup"><span data-stu-id="753a8-511">The method returns `true` if the key/value pair is added.</span></span>  
  
 <span data-ttu-id="753a8-512">Si la clé est déjà dans le cache, l’exception levée par interne <xref:System.Collections.Generic.Dictionary%602> est autorisé à mettre fin à la méthode.</span><span class="sxs-lookup"><span data-stu-id="753a8-512">If the key is already in the cache, the exception thrown by the inner <xref:System.Collections.Generic.Dictionary%602> is allowed to terminate the method.</span></span> <span data-ttu-id="753a8-513">Un `finally` bloc est utilisé pour exécuter le <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> méthode, en garantissant que l’appelant quitte le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-513">A `finally` block is used to execute the <xref:System.Threading.ReaderWriterLockSlim.ExitWriteLock%2A> method, ensuring that the caller exits the lock.</span></span>  
  
 <span data-ttu-id="753a8-514">Ce code fait partie d’un exemple plus complet fourni pour la <xref:System.Threading.ReaderWriterLockSlim> classe.</span><span class="sxs-lookup"><span data-stu-id="753a8-514">This code is part of a larger example provided for the <xref:System.Threading.ReaderWriterLockSlim> class.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#2)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/cs/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Shadow#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Shadow/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-515">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-515">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="753a8-516">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-516">-or-</span></span> 
<span data-ttu-id="753a8-517">Le thread actuel a entré le verrou en mode lecture, et par conséquent, essayez d’entrer en mode écriture risquerait créer d’un interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-517">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="753a8-518">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-518">-or-</span></span> 
<span data-ttu-id="753a8-519">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-519">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-520">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-520">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="753a8-521">La valeur de <paramref name="millisecondsTimeout" /> est négatif, mais il n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" /> (-1), qui est la seule valeur négative autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-521">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-522">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-522">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryEnterWriteLock">
      <MemberSignature Language="C#" Value="public bool TryEnterWriteLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEnterWriteLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEnterWriteLock (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEnterWriteLock(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.TryEnterWriteLock : TimeSpan -&gt; bool" Usage="readerWriterLockSlim.TryEnterWriteLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="753a8-523">Intervalle d'attente, ou -1 milliseconde pour un délai d'attente infini.</span><span class="sxs-lookup"><span data-stu-id="753a8-523">The interval to wait, or -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="753a8-524">Essaie d'entrer le verrou en mode écriture, avec un délai d'attente facultatif.</span><span class="sxs-lookup"><span data-stu-id="753a8-524">Tries to enter the lock in write mode, with an optional time-out.</span></span></summary>
        <returns><span data-ttu-id="753a8-525"><see langword="true" /> si le thread appelant est entré en mode écriture, sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="753a8-525"><see langword="true" /> if the calling thread entered write mode, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-526">Si `timeout` est 0 (zéro), cette méthode vérifie l’état de verrou et retourne `false` immédiatement si l’état souhaité n’est pas disponible.</span><span class="sxs-lookup"><span data-stu-id="753a8-526">If `timeout` is 0 (zero), this method checks the lock state and returns `false` immediately if the desired state is unavailable.</span></span>  
  
 <span data-ttu-id="753a8-527">Si d’autres threads ont entré le verrou en mode lecture, un thread qui appelle le <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> méthode se bloque jusqu'à ce que ces threads ont quitté le mode lecture ou jusqu'à ce que l’intervalle de délai d’expiration est écoulé.</span><span class="sxs-lookup"><span data-stu-id="753a8-527">If other threads have entered the lock in read mode, a thread that calls the <xref:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock%2A> method blocks until those threads have exited read mode or until the time-out interval has elapsed.</span></span> <span data-ttu-id="753a8-528">Tandis que les threads sont bloqués en attente d’entrer en mode écriture, les autres threads qui essaient d’entrer en mode lecture ou verrou en mode bloquent jusqu'à ce que tous les threads qui attendent pour entrer en mode écrivent ont soit a expiré ou est entré en mode écriture et puis s’est arrêté à partir de celui-ci.</span><span class="sxs-lookup"><span data-stu-id="753a8-528">While threads are blocked waiting to enter write mode, additional threads that try to enter read mode or upgradeable mode block until all the threads waiting to enter write mode have either timed out or entered write mode and then exited from it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="753a8-529">Si un verrou autorise la récurrence, un thread qui a entré le verrou en mode écriture peut entrer écriture en mode de façon récursive, même si d’autres threads attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-529">If a lock allows recursion, a thread that has entered the lock in write mode can enter write mode recursively, even if other threads are waiting to enter write mode.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="753a8-530">Le <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> propriété est <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> et le thread actuel a déjà entré le verrou.</span><span class="sxs-lookup"><span data-stu-id="753a8-530">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock.</span></span>  
  
<span data-ttu-id="753a8-531">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-531">-or-</span></span> 
<span data-ttu-id="753a8-532">Le thread actuel a entré le verrou en mode lecture, et par conséquent, essayez d’entrer en mode écriture risquerait créer d’un interblocage.</span><span class="sxs-lookup"><span data-stu-id="753a8-532">The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock.</span></span>  
  
<span data-ttu-id="753a8-533">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-533">-or-</span></span> 
<span data-ttu-id="753a8-534">Le nombre de récursivités dépasserait la capacité du compteur.</span><span class="sxs-lookup"><span data-stu-id="753a8-534">The recursion number would exceed the capacity of the counter.</span></span> <span data-ttu-id="753a8-535">La limite est si élevée que les applications ne doivent jamais la rencontrer.</span><span class="sxs-lookup"><span data-stu-id="753a8-535">The limit is so large that applications should never encounter it.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="753a8-536">La valeur de <paramref name="timeout" /> est négatif, mais il n’est pas égal à-1 milliseconde, qui est la seule valeur négative autorisée.</span><span class="sxs-lookup"><span data-stu-id="753a8-536">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.</span></span>  
  
<span data-ttu-id="753a8-537">ou</span><span class="sxs-lookup"><span data-stu-id="753a8-537">-or-</span></span> 
<span data-ttu-id="753a8-538">La valeur de <paramref name="timeout" /> est supérieur à <see cref="F:System.Int32.MaxValue" /> millisecondes.</span><span class="sxs-lookup"><span data-stu-id="753a8-538">The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="753a8-539">L’objet <see cref="T:System.Threading.ReaderWriterLockSlim" /> a été supprimé.</span><span class="sxs-lookup"><span data-stu-id="753a8-539">The <see cref="T:System.Threading.ReaderWriterLockSlim" /> object has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitingReadCount">
      <MemberSignature Language="C#" Value="public int WaitingReadCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingReadCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingReadCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingReadCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingReadCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingReadCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-540">Obtient le nombre total de threads qui attendent pour entrer le verrou en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-540">Gets the total number of threads that are waiting to enter the lock in read mode.</span></span></summary>
        <value><span data-ttu-id="753a8-541">Nombre total de threads qui attendent pour entrer en mode lecture.</span><span class="sxs-lookup"><span data-stu-id="753a8-541">The total number of threads that are waiting to enter read mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-542">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-542">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-543">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-543">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-544">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-544">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-545">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> propriété pour générer une entrée de journal des événements si le nombre de threads qui sont bloqués, qui attendent pour entrer en mode lecture, dépasse un seuil.</span><span class="sxs-lookup"><span data-stu-id="753a8-545">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingReadCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter read mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#31)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingUpgradeCount">
      <MemberSignature Language="C#" Value="public int WaitingUpgradeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingUpgradeCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingUpgradeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingUpgradeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingUpgradeCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-546">Obtient le nombre total de threads qui attendent pour entrer le verrou en mode pouvant être mis à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-546">Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</span></span></summary>
        <value><span data-ttu-id="753a8-547">Nombre total de threads qui attendent pour entrer en mode pouvant être mis à niveau.</span><span class="sxs-lookup"><span data-stu-id="753a8-547">The total number of threads that are waiting to enter upgradeable mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-548">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-548">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-549">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-549">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-550">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-550">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-551">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> propriété pour générer une entrée de journal des événements si le nombre de threads qui sont bloqués, en attente du verrou en mode, dépasse un seuil.</span><span class="sxs-lookup"><span data-stu-id="753a8-551">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter upgradeable mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#33)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitingWriteCount">
      <MemberSignature Language="C#" Value="public int WaitingWriteCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitingWriteCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WaitingWriteCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WaitingWriteCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.WaitingWriteCount : int" Usage="System.Threading.ReaderWriterLockSlim.WaitingWriteCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="753a8-552">Obtient le nombre total de threads qui attendent pour entrer le verrou en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-552">Gets the total number of threads that are waiting to enter the lock in write mode.</span></span></summary>
        <value><span data-ttu-id="753a8-553">Nombre total de threads qui attendent pour entrer en mode écriture.</span><span class="sxs-lookup"><span data-stu-id="753a8-553">The total number of threads that are waiting to enter write mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="753a8-554">Utilisez cette propriété uniquement pour le débogage, profilage et à des fins de journalisation et pas de contrôler le comportement d’un algorithme.</span><span class="sxs-lookup"><span data-stu-id="753a8-554">Use this property only for debugging, profiling, and logging purposes, and not to control the behavior of an algorithm.</span></span> <span data-ttu-id="753a8-555">Les résultats peuvent changer dès qu’elles ont été calculées.</span><span class="sxs-lookup"><span data-stu-id="753a8-555">The results can change as soon as they have been calculated.</span></span> <span data-ttu-id="753a8-556">Par conséquent, il est déconseillé prendre des décisions basées sur cette propriété.</span><span class="sxs-lookup"><span data-stu-id="753a8-556">Therefore, it is not safe to make decisions based on this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="753a8-557">L’exemple suivant montre comment utiliser le <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> propriété pour générer une entrée de journal des événements si le nombre de threads qui sont bloqués, qui attendent pour entrer en mode écriture, dépasse un seuil.</span><span class="sxs-lookup"><span data-stu-id="753a8-557">The following example shows how to use the <xref:System.Threading.ReaderWriterLockSlim.WaitingWriteCount%2A> property to generate an event log entry if the number of threads that are blocked, waiting to enter write mode, exceeds a threshold.</span></span>  
  
 [!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLockSlim_Aux#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#1)]  
[!code-csharp[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/cs/source.cs#32)]
[!code-vb[System.Threading.ReaderWriterLockSlim_Aux#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLockSlim_Aux/vb/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
