<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49a9b90c29fb506f13fbc9ad9b14c101b5c74ccf" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014215" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un mécanisme permettant d'exécuter une méthode sur un thread de pool de threads à intervalles spécifiés. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez un <xref:System.Threading.TimerCallback> délégué pour spécifier la méthode que vous souhaitez le <xref:System.Threading.Timer> à exécuter. La signature de la <xref:System.Threading.TimerCallback> délégué est :  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 Le délégué de la minuterie est spécifié lors de la minuterie est construite et ne peut pas être modifiée. La méthode ne s’exécute pas sur le thread qui a créé la minuterie ; Il s’exécute sur un <xref:System.Threading.ThreadPool> thread fourni par le système.  
  
> [!TIP]
> .NET inclut quatre classes nommées `Timer`, chacun de qui offre des fonctionnalités différentes :  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>, qui déclenche un événement et exécute le code dans un ou des récepteurs d’événements plus à intervalles réguliers. La classe est destinée à servir basée sur un serveur ou un composant de service dans un environnement multithread ; Il ne possède aucune interface utilisateur et n’est pas visible lors de l’exécution.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>, qui exécute une méthode de rappel unique sur un thread de pool de threads à intervalles réguliers. La méthode de rappel est définie lors de la minuterie est instanciée et ne peut pas être modifiée. Comme le <xref:System.Timers.Timer?displayProperty=nameWithType> (classe), cette classe est destinée à être utilisée comme un composant basé sur le serveur ou service dans un environnement multithread ; il ne possède aucune interface utilisateur et n’est pas visible lors de l’exécution.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework uniquement), un composant Windows Forms qui déclenche un événement et exécute le code dans un ou plusieurs récepteurs d’événements à intervalles réguliers. Le composant ne possède aucune interface utilisateur et est conçu pour une utilisation dans un environnement à thread unique ; Il s’exécute sur le thread d’interface utilisateur.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework uniquement), un composant ASP.NET qui effectue des publications de page web asynchrones ou synchrones à intervalles réguliers.
  
 Lorsque vous créez un minuteur, vous pouvez spécifier un intervalle de temps à attendre avant la première exécution de la méthode (délai d’attente) et un intervalle de temps d’attente entre les exécutions suivantes (période). Le <xref:System.Threading.Timer> classe a la même résolution que l’horloge système. Cela signifie que si la période est inférieure à la résolution de l’horloge système, le <xref:System.Threading.TimerCallback> délégué va s’exécuter à des intervalles définis par la résolution de l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8. Vous pouvez modifier le montant dû le temps et de période ou de désactiver la minuterie, en utilisant le <xref:System.Threading.Timer.Change%2A> (méthode).  
  
> [!NOTE]
>  Tant que vous utilisez un <xref:System.Threading.Timer>, vous devez conserver une référence à celui-ci. Comme avec n’importe quel objet géré, un <xref:System.Threading.Timer> est soumise au garbage collection lorsqu’il n’y a aucune référence à celle-ci. Le fait qu’un <xref:System.Threading.Timer> est toujours actif ne l’empêche pas d’être collecté.  
  
 Quand un minuteur n’est plus nécessaire, utilisez le <xref:System.Threading.Timer.Dispose%2A> méthode pour libérer les ressources détenues par la minuterie. Notez que les rappels peuvent se produire après la <xref:System.Threading.Timer.Dispose> surcharge de méthode a été appelée, étant donné que le minuteur de files d’attente des rappels pour l’exécution par les threads du pool. Vous pouvez utiliser le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode pour attendre jusqu'à ce que tous les rappels.  
  
 La méthode de rappel exécutée par la minuterie doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads. Le rappel peut être exécuté simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter le rappel, ou si tous les threads du pool sont en cours d’utilisation et le rappel est en file d’attente plusieurs fois.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> est une minuterie simple et léger qui utilise des méthodes de rappel et est pris en charge par les threads du pool. Il n’est pas recommandé pour une utilisation avec Windows Forms, car ses rappels ne se produisent pas sur le thread d’interface utilisateur. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> est un meilleur choix pour une utilisation avec Windows Forms. Pour les fonctionnalités de minuterie serveur, vous pouvez envisager d’utiliser <xref:System.Timers.Timer?displayProperty=nameWithType>, qui déclenche des événements et dispose de fonctionnalités supplémentaires.  
  
   
  
## Examples  
 L’exemple suivant définit un `StatusChecker` classe inclut un `CheckStatus` méthode dont la signature est le même comme le <xref:System.Threading.TimerCallback> déléguer. Le `state` argument de la `CheckStatus` méthode est un <xref:System.Threading.AutoResetEvent> objet qui est utilisé pour synchroniser le thread d’application et le thread qui exécute le délégué de rappel. Le `StatusChecker` classe inclut également deux variables d’état :  
  
 `invokeCount`  
 Indique le nombre de fois où que la méthode de rappel a été appelée.  
  
 `maxCount`  
 Détermine le nombre maximal de fois où que la méthode de rappel doit être appelée.  
  
 Le thread d’application crée le minuteur, qui attend une seconde, puis exécute la `CheckStatus` méthode de rappel toutes les 250 millisecondes. Le thread d’application se bloque alors jusqu'à ce que le <xref:System.Threading.AutoResetEvent> objet est signalé. Lorsque le `CheckStatus` méthode de rappel `maxCount` fois, il appelle le `AutoResetEvent.Set` méthode pour définir l’état de la <xref:System.Threading.AutoResetEvent> objet signalé. La première fois dans ce cas, le thread d’application appelle le <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> méthode afin que la méthode de rappel s’exécute maintenant chaque seconde moitié. Il bloque de nouveau jusqu'à ce que le <xref:System.Threading.AutoResetEvent> objet est signalé. Dans ce cas, la minuterie est détruite en appelant son <xref:System.Threading.Timer.Dispose%2A> (méthode) et l’application se termine.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est thread-safe.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Pool de threads managés</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see langword="Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Un <see cref="T:System.Threading.TimerCallback" /> délégué représentant une méthode à exécuter.</param>
        <summary>Initialise une nouvelle instance de la <see cref="T:System.Threading.Timer" /> classe avec une période infinie et un infini temps, l’utilisation nouvellement créé <see cref="T:System.Threading.Timer" /> objet en tant que l’objet d’état.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez ce constructeur lorsque vous souhaitez utiliser le <xref:System.Threading.Timer> objet lui-même en tant que l’objet d’état. Après avoir créé la minuterie, utilisez le <xref:System.Threading.Timer.Change%2A> pour définir l’intervalle et l’heure d’échéance.  
  
 Ce constructeur spécifie une attente infini avant le premier rappel et un intervalle infini entre les rappels, pour empêcher le premier rappel avant le <xref:System.Threading.Timer> objet est assigné à l’objet d’état.  
  
 La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads. La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.  
  
   
  
## Examples  
 L’exemple de code suivant crée une minuterie, en utilisant la minuterie comme objet d’état. Le <xref:System.Threading.Timer.Change%2A> méthode est utilisée pour démarrer la minuterie. Lorsque le rappel de minuterie se produit, l’objet d’état est utilisé pour désactiver la minuterie.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">Un <see cref="T:System.Threading.TimerCallback" /> délégué représentant une méthode à exécuter.</param>
        <param name="state">Objet contenant les informations à utiliser par la méthode de rappel ou <see langword="null" />.</param>
        <param name="dueTime">La durée d’attente avant le <paramref name="callback" /> est appelé, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le démarrage de la minuterie. Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de <paramref name="callback" />, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</param>
        <summary>Initialise une nouvelle instance de la <see langword="Timer" /> classe, à l’aide d’un entier signé 32 bits pour spécifier l’intervalle de temps.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` est écoulée et que chaque fois le `period` expiration de l’intervalle de temps.  
  
 Si `dueTime` est zéro (0), `callback` est appelé immédiatement. Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 Étant donné que le <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système. Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads. La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un `TimerCallback` déléguer et initialiser une nouvelle instance de la `Timer` classe.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est négatif et n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="callback" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Un <see cref="T:System.Threading.TimerCallback" /> délégué représentant une méthode à exécuter.</param>
        <param name="state">Objet contenant les informations à utiliser par la méthode de rappel ou <see langword="null" />.</param>
        <param name="dueTime">La durée d’attente avant le <paramref name="callback" /> est appelé, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le démarrage de la minuterie. Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de <paramref name="callback" />, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</param>
        <summary>Initialise une nouvelle instance de la <see langword="Timer" /> classe, à l’aide des entiers signés 64 bits pour mesurer les intervalles de temps.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` est écoulée et que chaque fois le `period` expiration de l’intervalle de temps.  
  
 Si `dueTime` est zéro (0), `callback` est appelé immédiatement. Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 Étant donné que le <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système. Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads. La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est négatif et n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.NotSupportedException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est supérieur à 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">Délégué représentant une méthode à exécuter.</param>
        <param name="state">Objet contenant les informations à utiliser par la méthode de rappel ou <see langword="null" />.</param>
        <param name="dueTime">Délai d’attente avant que le paramètre <paramref name="callback" /> n’appelle ses méthodes. Spécifiez -1 milliseconde pour empêcher le démarrage de la minuterie. Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels des méthodes référencées par <paramref name="callback" />. Spécifiez -1 milliseconde pour désactiver la signalisation périodique.</param>
        <summary>Initialise une nouvelle instance de la <see langword="Timer" /> à l’aide de la classe <see cref="T:System.TimeSpan" /> valeurs pour mesurer les intervalles de temps.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` est écoulée et que chaque fois le `period` expiration de l’intervalle de temps.  
  
 Si `dueTime` est zéro (0), `callback` est appelé immédiatement. Si `dueTime` est négatif (-1) millisecondes, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 Étant donné que le <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système. Si `period` est zéro (0) ou négatif (-1) milliseconde et `dueTime` est un nombre positif, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads. La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment créer un `TimerCallback` déléguer et initialiser une nouvelle instance de la `Timer` classe.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le nombre de millisecondes dans la valeur de <paramref name="dueTime" /> ou <paramref name="period" /> est négative et non égal à <see cref="F:System.Threading.Timeout.Infinite" />, ou est supérieure à <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="callback" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">Délégué représentant une méthode à exécuter.</param>
        <param name="state">Objet contenant les informations à utiliser par la méthode de rappel ou <see langword="null" />.</param>
        <param name="dueTime">La durée d’attente avant le <paramref name="callback" /> est appelé, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le démarrage de la minuterie. Spécifiez zéro (0) pour démarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de <paramref name="callback" />, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</param>
        <summary>Initialise une nouvelle instance de la <see langword="Timer" /> classe, à l’aide des entiers non signés 32 bits pour mesurer les intervalles de temps.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le délégué spécifié par le `callback` paramètre est appelé une seule fois après `dueTime` est écoulée et que chaque fois le `period` expiration de l’intervalle de temps.  
  
 Si `dueTime` est zéro (0), `callback` est appelé immédiatement. Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` n’est pas appelé ; la minuterie est désactivée, mais peut être réactivée en appelant le <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 Étant donné que le <xref:System.Threading.Timer> classe a la même résolution que l’horloge système, qui est d’environ 15 millisecondes sur les systèmes Windows 7 et Windows 8, le `callback` délégué s’exécute à intervalles définis par la résolution de l’horloge système si `period`est inférieure à la résolution de l’horloge système. Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` est appelé une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé à l’aide de la <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 La méthode spécifiée pour `callback` doit être réentrante, parce qu’elle est appelée sur <xref:System.Threading.ThreadPool> threads. La méthode peut être exécutée simultanément sur deux threads du pool si l’intervalle de minuterie est inférieur au temps requis pour exécuter la méthode, ou si tous les threads du pool sont en cours d’utilisation et la méthode est en file d’attente plusieurs fois.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est négatif et n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="callback" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">La quantité de délai avant l’appel de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le redémarrage de la minuterie. Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</param>
        <summary>Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide d'entiers 32 bits signés.</summary>
        <returns><see langword="true" /> Si la minuterie a été correctement mis à jour ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode de rappel est appelée une seule fois après `dueTime` est écoulée, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.  
  
 Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement. Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais elle peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.  
  
 Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais elle peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `period`.  
  
 Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment démarrer un `Timer` et, après un nombre défini d’appels, modifier sa période.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Threading.Timer" /> a déjà été supprimé.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est négatif et n’est pas égal à <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">La quantité de délai avant l’appel de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le redémarrage de la minuterie. Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</param>
        <summary>Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide d'entiers 64 bits signés.</summary>
        <returns><see langword="true" /> Si la minuterie a été correctement mis à jour ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode de rappel est appelée une seule fois après `dueTime` est écoulée, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.  
  
 Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement. Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais elle peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.  
  
 Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais elle peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `period`.  
  
 Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Threading.Timer" /> a déjà été supprimé.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est inférieur à -1.</exception>
        <exception cref="T:System.NotSupportedException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre est supérieur à 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">Un <see cref="T:System.TimeSpan" /> représentant le délai d’attente avant l’appel de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit. Spécifiez -1 milliseconde pour empêcher le démarrage de la minuterie. Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit. Spécifiez -1 milliseconde pour désactiver la signalisation périodique.</param>
        <summary>Modifie l’heure de début et l’intervalle entre les appels de méthode d’un minuteur en utilisant <see cref="T:System.TimeSpan" /> valeurs pour mesurer les intervalles de temps.</summary>
        <returns><see langword="true" /> Si la minuterie a été correctement mis à jour ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode de rappel est appelée une seule fois après `dueTime` est écoulée, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.  
  
 Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement. Si `dueTime` est égal à (-1) milliseconde, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.  
  
 Si `period` est zéro (0) ou négatif (-1) en millisecondes, et `dueTime` est un nombre positif, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais peut être réactivé en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur supérieure à zéro pour `period`.  
  
 Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment démarrer un `Timer` et, après un nombre défini d’appels, modifier sa période.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Threading.Timer" /> a déjà été supprimé.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre, en millisecondes, est inférieur à -1.</exception>
        <exception cref="T:System.NotSupportedException">Le <paramref name="dueTime" /> ou <paramref name="period" /> paramètre, en millisecondes, est supérieur à 4294967294.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">La quantité de délai avant l’appel de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour empêcher le redémarrage de la minuterie. Spécifiez zéro (0) pour redémarrer la minuterie immédiatement.</param>
        <param name="period">L’intervalle de temps entre les appels de la méthode de rappel spécifiée au moment du <see cref="T:System.Threading.Timer" /> a été construit, en millisecondes. Spécifiez <see cref="F:System.Threading.Timeout.Infinite" /> pour désactiver la signalisation périodique.</param>
        <summary>Modifie l'heure de début et l'intervalle entre les appels de méthode d'une minuterie ; les intervalles de temps sont mesurés à l'aide d'entiers 32 bits non signés.</summary>
        <returns><see langword="true" /> Si la minuterie a été correctement mis à jour ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode de rappel est appelée une seule fois après `dueTime` est écoulée, puis chaque fois que l’intervalle de temps spécifié par `period` s’écoule.  
  
 Si `dueTime` est zéro (0), la méthode de rappel est appelée immédiatement. Si `dueTime` est <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel n’est jamais appelée ; la minuterie est désactivée, mais elle peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `dueTime`.  
  
 Si `period` est zéro (0) ou <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, et `dueTime` n’est pas <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, la méthode de rappel est appelée une seule fois ; le comportement périodique de la minuterie est désactivé, mais elle peut être réactivée en appelant <xref:System.Threading.Timer.Change%2A> et en spécifiant une valeur positive pour `period`.  
  
 Le <xref:System.Threading.Timer.Change%2A> méthode peut être appelée à partir de la <xref:System.Threading.TimerCallback> déléguer.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Threading.Timer" /> a déjà été supprimé.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libère toutes les ressources utilisées par l’instance actuelle de <see cref="T:System.Threading.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par l’instance actuelle de <see cref="T:System.Threading.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel `Dispose` autorise les ressources utilisées par le <xref:System.Threading.Timer> d’être réaffectées à d’autres fins. Pour plus d’informations sur `Dispose`, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).  
  
> [!NOTE]
>  Rappels peuvent se produire après la <xref:System.Threading.Timer.Dispose> surcharge de méthode a été appelée, étant donné que le minuteur de files d’attente des rappels pour l’exécution par les threads du pool. Vous pouvez utiliser le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode pour attendre jusqu'à ce que tous les rappels.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment libérer les ressources détenues par un `Timer`.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject">Le <see cref="T:System.Threading.WaitHandle" /> à signaler lorsque la <see langword="Timer" /> a été supprimé.</param>
        <summary>Libère toutes les ressources utilisées par l’instance actuelle de <see cref="T:System.Threading.Timer" /> et signale le moment où la minuterie a été supprimée.</summary>
        <returns><see langword="true" /> Si la fonction aboutit ; Sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel `Dispose` autorise les ressources utilisées par le <xref:System.Threading.Timer> d’être réaffectées à d’autres fins. Pour plus d’informations sur `Dispose`, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).  
  
 Quand cette méthode se termine, il signale le <xref:System.Threading.WaitHandle> spécifié par le `notifyObject` paramètre. Utilisez cette surcharge de la <xref:System.Threading.Timer.Dispose%2A> méthode si vous souhaitez être en mesure de le bloquer jusqu'à ce que vous êtes certain que la minuterie a été supprimée. La minuterie n’est pas supprimée tant que tous les rappels actuellement en file d’attente sont terminées.  
  
> [!NOTE]
>  Si le rappel utilise la <xref:System.Threading.Timer.Change%2A> méthode pour définir le `dueTime` paramètre à zéro, une condition de concurrence peut se produire lorsque le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode est appelée : Si le minuteur de files d’attente un nouveau rappel avant le <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> surcharge de méthode détecte qu’il n’y aucun rappel en file d’attente, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continue à bloquer ; sinon, la minuterie est supprimée, tandis que le nouveau rappel est en file d’attente et qu’un <xref:System.ObjectDisposedException> est levée lorsque les nouveaux appels de rappel le <xref:System.Threading.Timer.Change%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="notifyObject" /> a la valeur <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">Minuteries</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Autorise un objet à tenter de libérer des ressources et à exécuter d'autres opérations de nettoyage avant qu'il ne soit récupéré par une opération garbage collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>