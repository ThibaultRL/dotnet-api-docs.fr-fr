<Type Name="IProvideValueTarget" FullName="System.Windows.Markup.IProvideValueTarget">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3ee33577ac89d42592b4312a85b5bb89b3f04916" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65004485" /></Metadata><TypeSignature Language="C#" Value="public interface IProvideValueTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProvideValueTarget" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IProvideValueTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProvideValueTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProvideValueTarget" />
  <TypeSignature Language="F#" Value="type IProvideValueTarget = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un service qui fait état des relations de propriétés d’objet situationnelles pour l’évaluation de l’extension de balisage.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.IProvideValueTarget> représente un service qui signale les informations concernant la structure objet-propriété qui entoure où un convertisseur de valeurs est appelé.  
  
 Convertisseurs de type et extensions de balisage peuvent interroger pour <xref:System.Windows.Markup.IProvideValueTarget> en tant que service sur le contexte de service qui est fourni par un writer d’objet XAML, lorsque le writer d’objet XAML appelle le comportement de conversion de valeur. Pour plus d’informations, consultez [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) et [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 Extensions de balisage, un scénario où <xref:System.Windows.Markup.IProvideValueTarget> est utile consiste à déterminer la validité de l’utilisation de la connaissance de votre extension de balisage. Par exemple, votre extension de balisage peut implémenter un mécanisme de report de valeur, mais à l’aide de ce mécanisme ne convient que si l’objet cible est capable d’utiliser d’autres composants de votre mécanisme de report en cours d’exécution. Vous pouvez vérifier les caractéristiques du système de type de l’objet retourné en tant que <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> et assurez-vous que cet objet prend en charge votre technique de différé. Dans ce cas, votre extension de balisage retourne une valeur, et dans le cas contraire, votre extension de balisage lève une exception qui est récupérée en tant qu’exception interne par un writer d’objet XAML. Un scénario semblable assure qu’une propriété particulière prend en charge une fonctionnalité, en vérifiant les caractéristiques du système de type de la <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.  
  
 Bien que le nom de l’API <xref:System.Windows.Markup.IProvideValueTarget> peut impliquer une association avec <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>, les informations signalées par <xref:System.Windows.Markup.IProvideValueTarget> peut également être utile pour un <xref:System.ComponentModel.TypeConverter> ou <xref:System.Windows.Markup.ValueSerializer>. Un <xref:System.ComponentModel.TypeConverter> ou <xref:System.Windows.Markup.ValueSerializer> ont généralement plus de contexte qu’une extension de balisage, car ils sont dédiés à un type de cible particulière ou d’une propriété cible, et donc la validité situationnelle est habituellement prévisible dans le système de type. Toutefois, d’autres scénarios existent. Voici une liste de scénarios qui peuvent être implémentés par un convertisseur de type ou une extension de balisage :  
  
-   Obtenir <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> pour lire les valeurs d’instance d’autres propriétés sur cet objet. Notez que votre gestion doit être fiable pour les valeurs non définies, étant donné que l’ordre de traitement de membres XAML sur l’objet cible peut être non déterministe.  
  
-   Obtenir <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> pour lire les métadonnées au niveau du type, ou pour vérifier que les interfaces requises sont implémentées par le type.  
  
-   Obtenir <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> pour lire les métadonnées de propriété.  
  
 Un scénario consiste à utiliser <xref:System.Windows.Markup.IProvideValueTarget> informations pour limiter les objets ou propriétés est autorisé à être définis par votre extension de balisage.  
  
 Avant de tenter d’utiliser le service, assurez-vous que le service lui-même n’est pas `null` lorsque retournée par le paramètre de fournisseur de service appropriée vous utilisez pour le contexte.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez le service, il est particulièrement important de ne pas modifier l’objet référencé par le <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> propriété ou autres objets référencés par cet objet. Pour WPF spécifiquement, ces modifications pourraient provoquer des modifications inattendues qui invalideraient le système de propriétés WPF.  
  
> [!NOTE]
>  N’utilisez pas le type de <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> pour déterminer quel type précis un convertisseur de type ou d’extension de balisage doit retourner. Qui n’est pas recommandé. Votre type de retour doit être cohérent avec l’attribution (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> pour les extensions de balisage) ou les modèles (nom de classe de convertisseur de type).  
  
 Dans les versions précédentes du .NET Framework, cette interface existait dans l’assembly WindowsBase spécifique de WPF. Dans [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> est dans l’assembly System.Xaml. Pour plus d'informations, consultez [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
## <a name="wpf-usage-notes"></a>Remarques sur l’utilisation WPF  
 Ce service prend en charge les fonctionnalités de framework, telles que de liaison sur une propriété de dépendance.  
  
 Dans WPF, le service représenté par <xref:System.Windows.Markup.IProvideValueTarget> peut retourner des objets et propriétés pour les situations où la valeur à retourner à partir d’un convertisseur de type ou d’extension de balisage dépend du contexte.  
  
 <xref:System.Windows.Markup.IProvideValueTarget> est exploité dans l’implémentation interne de <xref:System.Windows.Data.BindingBase>, la classe qui implémente le mécanisme de liaison pour les propriétés de dépendance dans WPF.  
  
 Un fournisseur de service interne par défaut pour WPF implémente <xref:System.Windows.Markup.IProvideValueTarget> pour une utilisation par un convertisseur de type ou d’extension de balisage personnalisée. L’objet et la propriété signalée par <xref:System.Windows.Markup.IProvideValueTarget> peuvent être définies uniquement par le service WPF interne. Au-delà de cette définition de procédure <xref:System.Windows.Markup.IProvideValueTarget> opère nécessitent la définition de votre propre fournisseur de services pour les utilisations de balisage extension et le type de convertisseur qui implémente au moins le <xref:System.Windows.Markup.IProvideValueTarget> et <xref:System.Windows.Markup.IXamlTypeResolver> , qui est une avancée et services scénario qui n’est pas décrite ici.  
  
 Une valeur null pour <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> ou <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> ne signifie pas nécessairement qu’un convertisseur de type ou d’extension de balisage ne peut pas agir, bien que cela dépend de votre implémentation. Un exemple de cas où les valeurs de <xref:System.Windows.Markup.IProvideValueTarget> sont null même si le service est disponible est lorsque votre extension de balisage est imbriquée dans une autre extension de balisage, comme un <xref:System.Windows.Data.Binding>. Une implémentation qui s’appuie sur <xref:System.Windows.Markup.IProvideValueTarget> doit toujours rechercher les valeurs null uniquement à des fins de lever une exception spécifique, si cela est votre conception prévue.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    <altmember cref="T:System.Windows.Markup.MarkupExtension" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public object TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetObject : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l’objet cible qui est signalé.</summary>
        <value>Objet cible signalé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur retournée par <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> est la référence réelle, pas un identificateur de système de type ou tout autre identificateur. La valeur peut également être `null`; consultez <xref:System.Windows.Markup.IProvideValueTarget>.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez le service, il est particulièrement important de ne pas modifier l’objet référencé par le <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> propriété ou autres objets référencés par cet objet, comme les propriétés qui ne sont pas spécifiquement la conversion de valeur cas que vous gérez. Pour WPF spécifiquement, la modification de l’objet cible peut entraîner des modifications inattendues qui invalideraient le système de propriétés WPF.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Convertisseurs de type ou les Extensions de balisage pour XAML</related>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public object TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetProperty As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetProperty { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetProperty : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un identificateur pour la propriété cible qui est signalée.</summary>
        <value>Identificateur de la propriété cible signalée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur peut également être `null`; consultez <xref:System.Windows.Markup.IProvideValueTarget>.  
  
## <a name="wpf-usage-notes"></a>Remarques sur l’utilisation WPF  
 Pour une propriété de dépendance, le service WPF par défaut peut retourner un <xref:System.Windows.DependencyProperty>, telle que le convertisseur de type ou d’extension de balisage peut utiliser des métadonnées. Sinon, l’objet retourné peut être un <xref:System.Reflection.PropertyInfo> pour une propriété CLR.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Convertisseurs de type ou les Extensions de balisage pour XAML</related>
      </Docs>
    </Member>
  </Members>
</Type>