<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="75d64eadc8c8a7ff37614e48328e248ee57a6b9f" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994611" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit une classe de base pour les implémentations d’extension de balisage XAML qui peuvent être prises en charge par les services XAML .NET Framework et d’autres lecteurs et writers XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Extensions de balisage retournent des objets aux appelants, basés sur l’entrée de valeurs d’attribut de chaîne ou des éléments de balisage en XAML. Extensions de balisage retournent des objets de manière plus sophistiquée que les convertisseurs de type seuls peuvent accomplir. Un writer d’objet XAML appelle un convertisseur de type, car un type ou membre a une implémentation de convertisseur de type associée. Dans le cadre de référence CLR, cela signifie qu’un type ou membre est <xref:System.ComponentModel.TypeConverterAttribute> attribuée. Point de vue du système de type XAML, cela signifie qu’une valeur pour un type XAML ou un membre XAML son `TypeConverter` propriété. L’appel d’un convertisseur de type est lié à la définition de type ou de propriété et est toujours appelée par XAML de traitement pour ces cas. En revanche, une extension de balisage est plus sous le contrôle de code utilisateur et le balisage généré par l’utilisateur et peut être appliquée chaque fois qu’un scénario d’application l’exige. Une extension de balisage peut être appelée et peut être utilisée pour définir des valeurs de membre de type différent, tant que type de retour de l’extension de balisage est assignable à cette valeur.  
  
 Pour plus d’informations sur la création d’une extension de balisage personnalisée, consultez <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. Pour plus d’informations sur les extensions de balisage en général, consultez [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). Si vous générez sur WPF et utilisez ou création d’extensions de balisage pour XAML, les autres informations pertinentes sont accessibles dans la rubrique [Extensions de balisage et WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
 Le <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> méthode de chaque implémentation d’extension de balisage peut utiliser un <xref:System.IServiceProvider> en cours d’exécution qui peut fournir un contexte. Cela <xref:System.IServiceProvider> est ensuite interrogée pour des services spécifiques qui transmettent des informations, telles que <xref:System.Windows.Markup.IProvideValueTarget> ou <xref:System.Windows.Markup.IXamlTypeResolver>. Pour plus d’informations sur les contextes de service pour une extension de balisage, consultez [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 Les classes dérivées doivent être attribuées avec <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> pour informer les consommateurs du type de retour plus spécifique disponible à partir de l’extension de balisage <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implémentation.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Convertisseurs de type ou les Extensions de balisage pour XAML</related>
    <related type="Article" href="https://msdn.microsoft.com/library/261b2b11-2dc0-462f-8c66-55b8c9c6e436">Vue d'ensemble des extensions de balisage pour XAML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance d’une classe dérivée de <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Markup.MarkupExtension> classe abstraite ne contient pas de valeurs privées qui requièrent une initialisation.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Une extension de balisage fonctionnelle doit définir son propre constructeur public par défaut. En outre, l’extension de balisage doit implémenter des constructeurs qui sont appropriés pour les fonctions prévues de l’extension et de balisage. Pour plus d’informations, consultez [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para></block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="0" FrameworkAlternate="netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Assistance de fournisseur de service qui peut fournir des services pour l’extension de balisage.</param>
        <summary>En cas d’implémentation dans une classe dérivée, retourne un objet qui est fourni comme valeur de la propriété cible de cette extension de balisage.</summary>
        <returns>Valeur d’objet à définir sur la propriété où l’extension est appliquée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un processeur XAML traite une valeur de nœud ou de membre de type qui est une extension de balisage, il appelle le <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> méthode de cette extension de balisage et écrit le résultat dans le flux de sérialisation ou de graphique d’objet. Le writer d’objet XAML passe le contexte de service à chaque implémentation de ce type via le `serviceProvider` paramètre.  
  
 Consultez la section « Remarques à l’attention des implémenteurs » pour plus d’informations sur la façon d’implémenter <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> dans une extension de balisage personnalisée.  
  
## <a name="wpf-usage-notes"></a>Remarques sur l’utilisation WPF  
  
> [!IMPORTANT]
>  Les classes WPF qui ont des interactions spécifiques avec les opérations ensemblistes de balisage ne doivent pas dépendre <xref:System.Windows.Markup.IReceiveMarkupExtension> pour un [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implémentation. Utilisez <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-rappels avec attribut.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Services communs retournés par le fournisseur de service par défaut est généralement disponible pour un personnalisé ou existant <see cref="T:System.Windows.Markup.MarkupExtension" /> implémentation incluent les services principaux suivants.  
  
-   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> signale la référence d’objet et un identificateur de propriété à partir du contexte dans lequel l’extension de balisage est utilisée 
-   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> expose un service qui correspond au comportement qui peut fournir d’écriture d’objet XAML général un <see cref="T:System.Type" /> basée sur un nom de type XAML. Le nom peut éventuellement inclure un préfixe pour un espace de noms XAML mappé.  
  
-   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> expose directement le contexte de schéma XAML actif. À partir de la signalées <see cref="T:System.Xaml.XamlSchemaContext" />, vous pouvez obtenir le XAML schéma contexte d’informations telles que la manière dont les assemblys sont mappés pour la prise en charge de type, préfixe par défaut des assemblys, répertorie des <see cref="T:System.Xaml.XamlType" /> dans un assembly et ainsi de suite.  
  
-Autres services disponibles pour les scénarios d’extension de balisage plus spécialisées sont les suivantes : 
    -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  
  
Potentiellement, les implémentations de <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> peut ignorer la <paramref name="serviceProvider" /> paramètre. Ceci est viable pour certains scénarios de base, où aucun contexte n’est requis pour retourner une valeur.  
  
En règle générale, Services XAML .NET Framework et l’implémentation XAML de l’objet enregistreurs fournira un fournisseur de services à toutes les méthodes de convertisseur de valeur sont appelés durant le XAML de traitement. Toutefois, pour plus de fiabilité, vous devez fournir les chemins de code pour les valeurs null pour le fournisseur de services et tout service demandé. Valeurs null peuvent se produire si votre extension de balisage est appliquée dans un cas où la prise en charge de service classique fourni par une infrastructure de processeur XAML n’est pas disponible.  
  
Pour plus d’informations sur les services disponibles à partir du contexte de fournisseur de service XAML et comment les utiliser, consultez [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  
  
Implémentations qui requièrent un certain service soit disponible afin de produire un utile <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> résultat sont attendu à lever des exceptions si ce service n’est pas disponible. Exception à lever recommandée est <see cref="T:System.InvalidOperationException" />.  
  
L’implémentation peut également lever des exceptions si l’un des arguments dont l’extension de balisage personnalisée a besoin pour fournir une valeur est null, n’est pas valide pour son type de données, ou ne contient pas de valeur que l’extension de balisage est capable de traiter. Exception à lever recommandée est <see cref="T:System.InvalidOperationException" />.</para></block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">Convertisseurs de type ou les Extensions de balisage pour XAML</related>
        <related type="Article" href="https://msdn.microsoft.com/library/261b2b11-2dc0-462f-8c66-55b8c9c6e436">Vue d'ensemble des extensions de balisage pour XAML</related>
      </Docs>
    </Member>
  </Members>
</Type>