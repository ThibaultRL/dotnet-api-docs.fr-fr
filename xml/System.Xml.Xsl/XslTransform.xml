<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e528edbe87062a2b9dbb17cc8ed4ea0d2f4638a" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996479" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <TypeSignature Language="F#" Value="type XslTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Transforme les données XML à l’aide d’un langage de feuille de style Extensible pour la feuille de style XSLT (Transformations).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le Microsoft .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit utiliser l’espace de noms `http://www.w3.org/1999/XSL/Transform`.  
  
 Arguments supplémentaires peuvent également être ajoutés à la feuille de style à l’aide de la <xref:System.Xml.Xsl.XsltArgumentList> classe. Cette classe contient des paramètres d’entrée pour les objets d’extension et de la feuille de style qui peuvent être appelées à partir de la feuille de style.  
  
 Pour transformer des données XML :  
  
1.  Créer un <xref:System.Xml.Xsl.XslTransform> objet.  
  
2.  Utilisez le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode pour charger la feuille de style pour la transformation. Cette méthode a plusieurs surcharges et peut charger une feuille de style à l’aide un <xref:System.Xml.XmlReader>, <xref:System.Xml.XPath.XPathNavigator>, <xref:System.Xml.XPath.IXPathNavigable>, ou une URL avec l’emplacement du fichier.  
  
3.  Utilisez le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode pour transformer les données XML. Cette méthode a plusieurs surcharges et peut gérer différents types d’entrée et de sortie. Vous pouvez également spécifier un <xref:System.Xml.Xsl.XsltArgumentList> contenant des arguments supplémentaires à utiliser en tant qu’entrée lors de la transformation.  
  
 **Considérations relatives à la sécurité**  
  
 Lors de la création d'une application qui utilise la classe <xref:System.Xml.Xsl.XslTransform>, vous devez connaître les éléments suivants et leurs implications :  
  
-   Les objets d'extension sont activés par défaut. Si un objet <xref:System.Xml.Xsl.XsltArgumentList> contenant des objets d'extension est transmis à la méthode <xref:System.Xml.Xsl.XslTransform.Transform%2A>, ceux-ci sont utilisés.  
  
-   Les feuilles de style XSLT peuvent inclure des références à d'autres fichiers et à des blocs de script intégrés. Un utilisateur malveillant peut exploiter cette fonction en fournissant des données ou feuilles de style qui, lors de l’exécution entraîne votre système jusqu'à ce que l’ordinateur manque de ressources.  
  
-   Les applications XSLT fonctionnant dans un environnement fiable mixte peuvent perturber la feuille de style. Un utilisateur malveillant peut, par exemple, charger un objet avec une feuille de style nuisible et le transmettre à un autre utilisateur qui appelle ensuite la méthode <xref:System.Xml.Xsl.XslTransform.Transform%2A> et exécute la transformation.  
  
 Ces problèmes de sécurité peuvent être atténués en n’acceptant ne pas <xref:System.Xml.Xsl.XslTransform> objets, les feuilles de style XSLT ou les données de source XML à partir de sources non approuvées.  
  
 **Prise en charge de script**  
  
 Cette classe prend en charge les scripts incorporés en utilisant le `msxsl:script` élément.  
  
 Dans la version 1.1 du .NET Framework, la preuve de la feuille de style détermine les autorisations accordées aux scripts incorporés.  
  
-   Si la feuille de style a été chargée à partir d’un identificateur URI (Uniform Resource), l’URI est utilisé pour créer la preuve. Cette preuve comprend l’URI, ainsi que son site et sa zone.  
  
-   Si la feuille de style a été chargée à l’aide d’une autre source, vous pouvez fournir des preuves en passant un <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> de l’objet à le <xref:System.Xml.Xsl.XslTransform.Load%2A> (méthode). Sinon, l’assembly du script a une confiance totale.  
  
 Les appelants de confiance partiel : `UnmanagedCode` autorisation est nécessaire pour compiler le script incorporé. `ControlEvidence` autorisation est requise pour fournir <xref:System.Security.Policy.Evidence> à la <xref:System.Xml.Xsl.XslTransform.Load%2A> (méthode). Un <xref:System.Security.SecurityException> est levée si l’appelant ne dispose pas des autorisations nécessaires. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType> et <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>.  
  
 Le `msxsl:script` élément exige les éléments suivants :  
  
-   Le `msxsl:script` élément appartient à la `urn:schemas-microsoft-com:xslt` espace de noms. La feuille de style doit inclure la déclaration d’espace de noms `xmlns:msxsl=urn:schemas-microsoft-com:xslt`.  
  
-   Le `msxsl:script` élément peut inclure un `language` attribut qui spécifie le langage de script à utiliser. La valeur de la `language` attribut doit être une des opérations suivantes : C#, CSharp, VB, VisualBasic, JScript ou JavaScript. Étant donné que le nom du langage ne respecte pas la casse, JavaScript et javascript sont valides. Si un `language` attribut n’est pas spécifié, la valeur par défaut est JScript.  
  
-   Le `msxsl:script` élément doit inclure un `implements-prefix` attribut qui contient le préfixe représentant l’espace de noms associé au bloc de script. Cet espace de noms doit être définie dans la feuille de style. Une feuille de style peut inclure plusieurs blocs de script qui sont regroupés par espace de noms. Vous ne pouvez avoir des blocs de script avec plusieurs langues dans le même espace de noms. Blocs de script peuvent appeler une fonction définie dans un autre bloc de script, fournie par les blocs de script se trouvent dans le même espace de noms. Le contenu d’un bloc de script est analysé selon les règles et la syntaxe du langage de script (fourni par le `language` attribut). Par exemple, si vous aviez un bloc de script c#, les commentaires sont préfixés par le `//` caractères. Les commentaires doivent être contenu XML valide.  
  
> [!NOTE]
> Il est recommandé d’encapsuler les blocs de script dans une section CDATA.
  
 [!INCLUDE [xsltransform-script](~/includes/xsltransform-script.md)] 
   
 Les fonctions peuvent être déclarées dans l'élément `msxsl:script`. Le tableau suivant montre les espaces de noms qui sont pris en charge par défaut.  
  
|Espaces de noms pris en charge|Description|  
|--------------------------|-----------------|  
|`System`|Classes système.|  
|`System.Collection`|Classes de collection.|  
|`System.Text`|Classes de gestion du texte.|  
|`System.Xml`|Classes XML principales.|  
|`System.Xml.Xsl`|Classes XSLT.|  
|`System.Xml.XPath`|Classes XML Path Language (XPath).|  
  
 Les arguments fournis et les valeurs de retour définies par les fonctions de script doivent être un des types de World Wide Web Consortium (W3C) répertoriées ci-dessous. Le tableau suivant détaille le mappage entre les types W3C, XPath ou XSLT et les classes .NET Framework correspondants.  
  
|Type W3C|Équivalent de classe .NET|  
|--------------|---------------------------|  
|Chaîne (XPath)|`System.String`|  
|Valeur booléenne (XPath)|`System.Boolean`|  
|Nombre (XPath)|`System.Double`|  
|Fragment d’arborescence résultat (XSLT)|`System.Xml.XPath.XPathNavigator`|  
|Collection de nœuds (XPath)|`System.Xml.XPath.XPathNodeIterator`|  
  
 Si la fonction de script utilise l’un des types numériques suivants : Int16, UInt16, Int32, UInt32, Int64, UInt64, Single ou Decimal, ces types sont convertis en Double, lequel correspond au nombre de type XPath du W3C.  
  
 Une exception est levée lorsqu’une fonction appelée ne peut pas convertir le résultat de l’argument à un des types requis.  
  
> [!NOTE]
>  `msxsl:script` et `msxsl:node-list` sont les seules fonctions de la `urn:schemas-microsoft-com:xslt` espace de noms qui sont pris en charge par le <xref:System.Xml.Xsl.XslTransform> classe.  
  
 <xref:System.Xml.Xsl.XslTransform> a la possibilité d’utiliser le code du common language runtime (CLR) comme mécanisme d’extension. Cela s’effectue en passant une instance d’une classe à la <xref:System.Xml.Xsl.XslTransform> classe et appeler ses méthodes publiques dans une feuille de style XSLT. Les méthodes qui sont définies avec la `params` mot clé, ce qui permet un nombre non spécifié de paramètres à passer, ne fonctionnent pas correctement dans ce scénario. Consultez [params](~/docs/csharp/language-reference/keywords/params.md) pour plus d’informations.  
  
 Pour plus d’informations, consultez [Transformations XSLT avec la classe XslTransform](~/docs/standard/data/xml/xslt-transformations-with-the-xsltransform-class.md).  
  
   
  
## Examples  
 L’exemple suivant transforme le document XML spécifié et renvoie le résultat dans la console.  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslTransform" /> les objets sont seulement thread-safe pour les opérations de transformation. Autres opérations ne sont pas garanties pour être thread-safe. Vous devez vous assurer qu’aucun autres méthodes ne sont appelées sur l’objet pendant les opérations de chargement.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Xsl.XslTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Charge la feuille de style XSLT, y compris les feuilles de style référencées dans <see langword="xsl:include" /> et <see langword="xsl:import" /> éléments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslTransform.Load url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">L’URL qui spécifie la feuille de style XSLT à charger.</param>
        <summary>Charge la feuille de style XSLT spécifiée par une URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`.  
  
 Cette méthode charge la feuille de style XSLT, y compris toute feuille de style référencée dans `xsl:include` et `xsl:import` éléments. Les ressources externes sont résolues à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si les feuilles de style sont situés sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’URI de la feuille de style est utilisé pour créer la preuve, qui est appliquée à l’assembly.
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant transforme un document XML en un document HTML. Il affiche l’ISBN, le titre et le prix de chaque book dans une table.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 L'exemple utilise les deux fichiers d'entrée suivants.  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">La ressource chargée n’est pas une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Un <see cref="T:System.Xml.XmlReader" /> objet qui contient la feuille de style XSLT.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Cette méthode charge la feuille de style XSLT, y compris toute feuille de style référencée dans `xsl:include` et `xsl:import` éléments. Les ressources externes sont résolues à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si les feuilles de style sont situés sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Charge de la feuille de style à partir du nœud actuel de le <xref:System.Xml.XmlReader> via tous ses enfants. Cela vous permet d’utiliser une partie d’un document en tant que la feuille de style. Une fois que le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode est retournée, le <xref:System.Xml.XmlReader> est positionné sur le nœud suivant après la fin de la feuille de style. Si la fin du document est atteinte, l'objet <xref:System.Xml.XmlReader> est positionné à la fin du fichier.  
  
 Si la feuille de style contient des entités, vous devez spécifier un <xref:System.Xml.XmlReader> qui peut résoudre les entités (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> retourne `true`). Dans ce cas, un <xref:System.Xml.XmlValidatingReader> peut être utilisé.  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’assembly a une confiance totale. La pratique recommandée consiste à fournir à l’aide de la preuve du <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> (méthode).
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant transforme un fichier XML en triant tous les livres par titre.  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 L’exemple utilise les fichiers de données suivants en tant qu’entrée.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Le nœud actuel n’est pas conforme à une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant la feuille de style XSLT.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Cette méthode charge la feuille de style XSLT, y compris toute feuille de style référencée dans `xsl:include` et `xsl:import` éléments. Les ressources externes sont résolues à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si les feuilles de style sont situés sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’assembly a une confiance totale. La pratique recommandée consiste à fournir à l’aide de la preuve du <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> (méthode).
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">La ressource chargée n’est pas une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> objet qui contient la feuille de style XSLT.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Cette méthode charge la feuille de style XSLT, y compris toute feuille de style référencée dans `xsl:include` et `xsl:import` éléments. Les ressources externes sont résolues à l’aide un <xref:System.Xml.XmlUrlResolver> sans informations d’identification de l’utilisateur. Si les feuilles de style sont situés sur une ressource réseau qui nécessite une authentification, utilisez la surcharge qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments et spécifiez un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 La feuille de style est chargée à partir de la position actuelle de la <xref:System.Xml.XPath.XPathNavigator>. Pour utiliser uniquement une partie du document chargé en tant que la feuille de style, accédez au nœud correspondant au début de la feuille de style. Après le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode est retournée, le <xref:System.Xml.XPath.XPathNavigator> est positionné au début de la feuille de style (sur le `xsl:style sheet` nœud).  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’assembly a une confiance totale. La pratique recommandée consiste à fournir à l’aide de la preuve du <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> (méthode).
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Le nœud actuel n’est pas conforme à une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (url, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">L’URL qui spécifie la feuille de style XSLT à charger.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> à utiliser pour charger la feuille de style et toutes les feuilles de style référencées dans les éléments <c>xsl:import</c> et <c>xsl:include</c>.  
  
S’il s’agit <see langword="null" />, une valeur par défaut <see cref="T:System.Xml.XmlUrlResolver" /> sans utilisateur les informations d’identification est utilisé pour ouvrir la feuille de style. Dans la mesure où le <see cref="T:System.Xml.XmlUrlResolver" /> par défaut n’est pas utilisé pour résoudre des ressources externes dans la feuille de style, les éléments <c>xsl:import</c> et <c>xsl:include</c> ne sont pas résolus.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Charge la feuille de style XSLT spécifiée par une URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’URI de la feuille de style est utilisé pour créer la preuve, qui est appliquée à l’assembly.
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple suivant transforme un document XML en un document HTML. L’exemple charge une feuille de style XSLT qui contient un `xsl:include` élément faisant référence à une autre feuille de style. Un <xref:System.Xml.XmlUrlResolver> est passé à la <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode qui définit les informations d’identification nécessaires pour accéder à la ressource de réseau pour la feuille de style incluses.  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 L’exemple utilise les fichiers de données suivants en tant qu’entrée.  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">La ressource chargée n’est pas une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Un <see cref="T:System.Xml.XmlReader" /> objet qui contient la feuille de style XSLT.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour charger toute feuille de style référencée dans les éléments <c>xsl:import</c> et <c>xsl:include</c>. S’il s’agit <see langword="null" />, ressources externes ne sont pas résolues.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Cette méthode charge la feuille de style XSLT, y compris toute feuille de style référencée dans `xsl:include` et `xsl:import` éléments. Charge de la feuille de style à partir du nœud actuel de le <xref:System.Xml.XmlReader> via tous ses enfants. Cela vous permet d’utiliser une partie d’un document en tant que la feuille de style.  
  
 Une fois que le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode est retournée, le <xref:System.Xml.XmlReader> est positionné sur le nœud suivant après la fin de la feuille de style. Si la fin du document est atteinte, l'objet <xref:System.Xml.XmlReader> est positionné à la fin du fichier.  
  
 Si la feuille de style contient des entités, vous devez spécifier un <xref:System.Xml.XmlReader> qui peut résoudre les entités (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> retourne `true`). Dans ce cas, un <xref:System.Xml.XmlValidatingReader> peut être utilisé.  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’assembly a une confiance totale. La pratique recommandée consiste à fournir à l’aide de la preuve du <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> (méthode).
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Le nœud actuel n’est pas conforme à une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant la feuille de style XSLT.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour charger toute feuille de style référencée dans les éléments <c>xsl:import</c> et <c>xsl:include</c>. S’il s’agit <see langword="null" />, ressources externes ne sont pas résolues.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> méthode se termine.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’assembly a une confiance totale. La pratique recommandée consiste à fournir à l’aide de la preuve du <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> (méthode).
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">La ressource chargée n’est pas une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass evidence to Load() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> objet qui contient la feuille de style XSLT.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour charger toute feuille de style référencée dans les éléments <c>xsl:import</c> et <c>xsl:include</c>. S’il s’agit <see langword="null" />, ressources externes ne sont pas résolues.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> méthode se termine.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XPath.XPathNavigator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 La feuille de style est chargée à partir de la position actuelle de la <xref:System.Xml.XPath.XPathNavigator>. Pour utiliser une partie du document chargé en tant que la feuille de style, accédez au nœud correspondant au début de la feuille de style. Après le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode est retournée, le <xref:System.Xml.XPath.XPathNavigator> est positionné au début de la feuille de style (sur le `xsl:style sheet` nœud).  
  
 Si la feuille de style contient un script incorporé, le script est compilé en un assembly. L’assembly a une confiance totale. La pratique recommandée consiste à fournir à l’aide de la preuve du <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>.
  
> [!NOTE]
>  Si l’appelant n’a pas `UnmanagedCode` autorisation, le script incorporé n’est pas compilée et un <xref:System.Security.SecurityException> est levée. Pour plus d'informations, consultez <xref:System.Security.Permissions.SecurityPermission> et <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Le nœud actuel n’est pas conforme à une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style contient des scripts incorporés et l’appelant n’a pas <see langword="UnmanagedCode" /> autorisation.</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Un <see cref="T:System.Xml.XmlReader" /> objet contenant la feuille de style à charger.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour charger toute feuille de style référencée dans les éléments <c>xsl:import</c> et <c>xsl:include</c>. S’il s’agit <see langword="null" />, ressources externes ne sont pas résolues.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> méthode se termine.</param>
        <param name="evidence">Le <see cref="T:System.Security.Policy.Evidence" /> défini sur l’assembly généré pour le bloc de script dans la feuille de style XSLT.  
  
S’il s’agit de <see langword="null" />, les blocs de script ne sont pas traités, la fonction <c>document()</c> XSLT n’est pas prise en charge et les objets d’extension privilégiés ne sont pas autorisés.  
  
L’appelant doit avoir <see langword="ControlEvidence" /> autorisation afin de fournir une preuve pour l’assembly de script. Les appelants de confiance partiel peuvent définir ce paramètre sur <see langword="null" />.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XmlReader" />. Cette méthode vous permet de limiter les autorisations de la feuille de style en spécifiant une preuve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Cette méthode charge la feuille de style XSLT, y compris toute feuille de style référencée dans `xsl:include` et `xsl:import` éléments. Charge de la feuille de style à partir du nœud actuel de le <xref:System.Xml.XmlReader> via tous ses enfants. Cela vous permet d’utiliser une partie d’un document en tant que la feuille de style.  
  
 Une fois que le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode est retournée, le <xref:System.Xml.XmlReader> est positionné sur le nœud suivant après la fin de la feuille de style. Si la fin du document est atteinte, l'objet <xref:System.Xml.XmlReader> est positionné à la fin du fichier.  
  
 Si la feuille de style contient des entités, vous devez spécifier un <xref:System.Xml.XmlReader> qui peut résoudre les entités (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> retourne `true`). Dans ce cas, un <xref:System.Xml.XmlValidatingReader> peut être utilisé.  
  

  
 Il existe différentes manières de fournir des preuves. Le tableau suivant décrit le type de preuve à fournir pour les scénarios utilisateur courants.  
  
|Scénario|Type de preuve à fournir|  
|--------------|---------------------------------|  
|La feuille de style XSLT est autonome ou provient d’une base de code auxquels vous faites confiance.|Utilisez la preuve à partir de votre assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslReader, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|La feuille de style XSLT provient d'une source externe. L’origine de la source est connue et il existe une URL vérifiable.|Créer la preuve à l’aide de l’URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform();&#13;&#10; Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(stylesheetURL); &#13;&#10;xslt.Load(xslReader,resolver,evidence);</code></pre>|  
|La feuille de style XSLT provient d'une source externe. L'origine de la source n'est pas connue.|Attribuez à la preuve la valeur `null`. Les blocs de script ne sont pas traités, la fonction `document()` XSLT n’est pas prise en charge et les objets d’extension privilégiés ne sont pas autorisés.<br /><br /> En outre, vous pouvez également définir le `resolver` paramètre `null`. Cela garantit que `xsl:import` et `xsl:include` éléments ne sont pas traités.|  
|La feuille de style XSLT provient d'une source externe. L'origine de la source n'est pas connue, mais vous avez besoin de la prise en charge des scripts.|Demandez une preuve à l'appelant. L’API de l’appelant doit fournir un moyen de fournir une preuve, généralement la <xref:System.Security.Policy.Evidence> classe.|  
  
     
## Examples  
 L’exemple suivant effectue une transformation XSLT où `xsltReader` est un <xref:System.Xml.XmlReader> contenant une feuille de style et `secureURL` est une URL de confiance qui peut être utilisée pour créer <xref:System.Security.Policy.Evidence>. Le <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType> méthode est utilisée pour créer <xref:System.Security.Policy.Evidence> qui est appliqué à la feuille de style.  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Le nœud actuel n’est pas conforme à une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style référencée nécessite une fonctionnalité qui n’est pas autorisée par la preuve fournie.  
  
L’appelant tente de fournir une preuve et n’a pas <see langword="ControlEvidence" /> autorisation.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour fournir une preuve. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant la feuille de style XSLT.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour charger toute feuille de style référencée dans les éléments <c>xsl:import</c> et <c>xsl:include</c>. S’il s’agit <see langword="null" />, ressources externes ne sont pas résolues.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> méthode se termine.</param>
        <param name="evidence">Le <see cref="T:System.Security.Policy.Evidence" /> défini sur l’assembly généré pour le bloc de script dans la feuille de style XSLT.  
  
S’il s’agit de <see langword="null" />, les blocs de script ne sont pas traités, la fonction <c>document()</c> XSLT n’est pas prise en charge et les objets d’extension privilégiés ne sont pas autorisés.  
  
L’appelant doit avoir <see langword="ControlEvidence" /> autorisation afin de fournir une preuve pour l’assembly de script. Les appelants de confiance partiel peuvent définir ce paramètre sur <see langword="null" />.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XPath.IXPathNavigable" />. Cette méthode vous permet de limiter les autorisations de la feuille de style en spécifiant une preuve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  

  
 Il existe différentes manières de fournir des preuves. Le tableau suivant décrit le type de preuve à fournir pour les scénarios utilisateur courants.  
  
|Scénario|Type de preuve à fournir|  
|--------------|---------------------------------|  
|La feuille de style XSLT est autonome ou provient d’une base de code auxquels vous faites confiance.|Utilisez la preuve à partir de votre assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(style sheet, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|La feuille de style XSLT provient d'une source externe. L’origine de la source est connue et il existe une URL vérifiable.|Créer la preuve à l’aide de l’URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(style sheet,resolver,evidence);</code></pre>|  
|La feuille de style XSLT provient d'une source externe. L'origine de la source n'est pas connue.|Attribuez à la preuve la valeur `null`. Les blocs de script ne sont pas traités, la fonction `document()` XSLT n’est pas prise en charge et les objets d’extension privilégiés ne sont pas autorisés.<br /><br /> En outre, vous pouvez également définir le `resolver` paramètre `null`. Cela garantit que `xsl:import` et `xsl:include` éléments ne sont pas traités.|  
|La feuille de style XSLT provient d'une source externe. L'origine de la source n'est pas connue, mais vous avez besoin de la prise en charge des scripts.|Demandez une preuve à l'appelant. L’API de l’appelant doit fournir un moyen de fournir une preuve, généralement la <xref:System.Security.Policy.Evidence> classe.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">La ressource chargée n’est pas une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style référencée nécessite une fonctionnalité qui n’est pas autorisée par la preuve fournie.  
  
L’appelant tente de fournir une preuve et n’a pas <see langword="ControlEvidence" /> autorisation.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour fournir une preuve. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> objet contenant la feuille de style à charger.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour charger toute feuille de style référencée dans les éléments <c>xsl:import</c> et <c>xsl:include</c>. S’il s’agit <see langword="null" />, ressources externes ne sont pas résolues.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> méthode se termine.</param>
        <param name="evidence">Le <see cref="T:System.Security.Policy.Evidence" /> défini sur l’assembly généré pour le bloc de script dans la feuille de style XSLT.  
  
S’il s’agit de <see langword="null" />, les blocs de script ne sont pas traités, la fonction <c>document()</c> XSLT n’est pas prise en charge et les objets d’extension privilégiés ne sont pas autorisés.  
  
L’appelant doit avoir <see langword="ControlEvidence" /> autorisation afin de fournir une preuve pour l’assembly de script. Les appelants de confiance partiel peuvent définir ce paramètre sur <see langword="null" />.</param>
        <summary>Charge la feuille de style XSLT figurant dans le <see cref="T:System.Xml.XPath.XPathNavigator" />. Cette méthode vous permet de limiter les autorisations de la feuille de style en spécifiant une preuve.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 La feuille de style est chargée à partir de la position actuelle de la <xref:System.Xml.XPath.XPathNavigator>. Pour utiliser une partie du document chargé en tant que la feuille de style, accédez au nœud correspondant au début de la feuille de style. Après le <xref:System.Xml.Xsl.XslTransform.Load%2A> méthode est retournée, le <xref:System.Xml.XPath.XPathNavigator> est positionné au début de la feuille de style (sur le `xsl:style sheet` nœud).  
  

  
 Il existe différentes manières de fournir des preuves. Le tableau suivant décrit le type de preuve à fournir pour les scénarios utilisateur courants.  
  
|Scénario|Type de preuve à fournir|  
|--------------|---------------------------------|  
|La feuille de style XSLT est autonome ou provient d’une base de code auxquels vous faites confiance.|Utilisez la preuve à partir de votre assembly.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslNav, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|La feuille de style XSLT provient d'une source externe. L’origine de la source est connue et il existe une URL vérifiable.|Créer la preuve à l’aide de l’URL.<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(xslNav,resolver,evidence);</code></pre>|  
|La feuille de style XSLT provient d'une source externe. L'origine de la source n'est pas connue.|Attribuez à la preuve la valeur `null`. Les blocs de script ne sont pas traités, la fonction `document()` XSLT n’est pas prise en charge et les objets d’extension privilégiés ne sont pas autorisés.<br /><br /> En outre, vous pouvez également définir le `resolver` paramètre `null`. Cela garantit que `xsl:import` et `xsl:include` éléments ne sont pas traités.|  
|La feuille de style XSLT provient d'une source externe. L'origine de la source n'est pas connue, mais vous avez besoin de la prise en charge des scripts.|Demandez une preuve à l'appelant. L’API de l’appelant doit fournir un moyen de fournir une preuve, généralement la `Evidence` classe.|  
  
   
  
## Examples  
 L’exemple suivant effectue une transformation XSLT à l’aide d’une feuille de style à partir d’une source externe. Étant donné que la feuille de style provient d’une source non fiable, le `resolver` et `evidence` paramètres sont définis sur `null`.  
 
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">Le nœud actuel n’est pas conforme à une feuille de style valide.</exception>
        <exception cref="T:System.Security.SecurityException">La feuille de style référencée nécessite une fonctionnalité qui n’est pas autorisée par la preuve fournie.  
  
L’appelant tente de fournir une preuve et n’a pas <see langword="ControlEvidence" /> autorisation.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">pour fournir une preuve. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transforme les données XML à l’aide de la feuille de style XSLT chargée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">L’URL du document source à transformer.</param>
        <param name="outputfile">L’URL du fichier de sortie.</param>
        <summary>Transforme les données XML dans le fichier d’entrée et renvoie le résultat dans un fichier de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  Cette méthode est obsolète dans la version 1.1 du .NET Framework. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
   
  
## Examples  
 L’exemple suivant transforme le `books.xml` de fichiers à l’aide de la `output.xsl` feuille de style et renvoie les résultats vers le `books.html` fichier.  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 L’exemple utilise les deux fichiers d’entrée suivants :  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Un <see cref="T:System.Xml.XmlReader" /> contenant les résultats de la transformation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Le `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.Xml.XmlReader> (le `xsl:output` élément est ignoré). Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
 Cette méthode vous permet de vous permettent d’effectuer une transformation asynchrone du document source.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud du fragment et le transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Un <see cref="T:System.Xml.XmlReader" /> contenant les résultats de la transformation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation a été effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 Étant donné que <xref:System.Xml.XmlReader> fournit une sortie en lecture seule, le `xsl:output` élément est ignoré. Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
 Cette méthode vous permet de vous permettent d’effectuer une transformation asynchrone du document source.  
  
> [!NOTE]
>  Cette méthode est obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment la fonction document() XSLT est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">L’URL du document source à transformer.</param>
        <param name="outputfile">L’URL du fichier de sortie.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le fichier d’entrée et renvoie le résultat dans un fichier de sortie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
   
  
## Examples  
 L’exemple suivant effectue une transformation XSLT et envoie le résultat vers un fichier. Un <xref:System.Xml.XmlUrlResolver> avec par défaut les informations d’identification est utilisé résoudre des ressources externes. Pour plus d'informations, consultez <xref:System.Net.CredentialCache.DefaultCredentials%2A>.  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output">Flux dans lequel vous voulez générer le résultat.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud du fragment et le transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style.  
  
 L’attribut de codage sur un `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.IO.TextWriter>. Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour obtenir des détails sur lequel `xsl:output` attributs sont pris en charge.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud de fragment et la transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Un <see cref="T:System.Xml.XmlReader" /> contenant les résultats de la transformation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Le `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.Xml.XmlReader> (le `xsl:output` élément est ignoré). Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
 Cette méthode vous permet de vous permettent d’effectuer une transformation asynchrone du document source.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud de fragment et la transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 L’exemple suivant transforme un document XML et renvoie les résultats vers un `XmlReader`. Un <xref:System.Xml.XmlUrlResolver> avec les informations d’identification nécessaires est utilisé pour traiter les XSLT `document()` fonctions.  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Le `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.Xml.XmlWriter> (`xsl:output` est ignoré). Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud du fragment et le transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output">Flux dans lequel vous voulez générer le résultat.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation a été effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour obtenir des détails sur lequel `xsl:output` attributs sont pris en charge.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation est effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 L’attribut de codage sur un `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.IO.TextWriter>. Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour obtenir des détails sur lequel `xsl:output` attributs sont pris en charge.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Un <see cref="T:System.Xml.XmlReader" /> contenant les résultats de la transformation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation a été effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 Étant donné que <xref:System.Xml.XmlReader> fournit une sortie en lecture seule, le `xsl:output` élément est ignoré. Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
 Cette méthode vous permet de vous permettent d’effectuer une transformation asynchrone du document source.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> en utilisant les arguments spécifiés et renvoie le résultat dans un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation est effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 Le `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.Xml.XmlWriter> (`xsl:output` est ignoré). Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
> [!NOTE]
>  cette méthode est désormais obsolète. Le paramètre de la <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> propriété détermine comment le XSLT `document()` fonction est résolue. La pratique recommandée consiste à utiliser le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode qui prend un <xref:System.Xml.XmlResolver> de l’objet en tant qu’un de ses arguments.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output">Flux dans lequel vous voulez générer le résultat.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud du fragment et le transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 L’exemple suivant effectue une transformation au sein d’une page ASP.NET.  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style.  
  
 L’attribut de codage sur un `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.IO.TextWriter>. Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour obtenir des détails sur lequel `xsl:output` attributs sont pris en charge.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud du fragment et le transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 L’exemple suivant transforme un fichier XML et génère une chaîne au format HTML. Le <xref:System.IO.StringReader> et <xref:System.IO.StringWriter> classes sont utilisées pour lire et écrire les chaînes.  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 L'exemple prend le fichier `books.xml` comme entrée.  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Objet qui implémente le <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. Dans le .NET Framework, il peut s’agir de <see cref="T:System.Xml.XmlNode" /> (généralement <see cref="T:System.Xml.XmlDocument" />) ou de <see cref="T:System.Xml.XPath.XPathDocument" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.IXPathNavigable" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Le `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.Xml.XmlWriter> (`xsl:output` est ignoré). Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
 Les transformations s'appliquent à l'ensemble du document. En d'autres termes, si vous passez dans un autre nœud que le nœud racine du document, cela n'empêche pas le processus de transformation d'accéder à tous les nœuds dans le document chargé. Pour transformer un fragment de nœud, vous devez créer un <xref:System.Xml.XmlDocument> contenant uniquement le nœud du fragment et le transmettre <xref:System.Xml.XmlDocument> à la <xref:System.Xml.Xsl.XslTransform.Transform%2A> (méthode).  
  
 L’exemple suivant effectue une transformation sur un fragment de nœud.  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 L’exemple utilise le `library.xml` et `print_root.xsl` comme entrée et génère le code suivant à la console.  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 L’exemple suivant transforme un document XML en un document HTML. Il affiche l’ISBN, le titre et le prix de chaque book dans une table.  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 L'exemple utilise les deux fichiers d'entrée suivants.  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">Sorties à partir de XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output">Flux dans lequel vous voulez générer le résultat.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation a été effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour obtenir des détails sur lequel `xsl:output` attributs sont pris en charge.  
  
   
  
## Examples  
 L’exemple suivant charge une table de clients dans un <xref:System.Xml.XmlDataDocument> et effectue une transformation XSLT pour extraire les données client dans un tableau HTML. L’exemple utilise la base de données Microsoft SQL Server 2000 Northwind.  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 L'exemple prend le fichier `customers.xsl` comme entrée.  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.IO.TextWriter" /> vers lequel vous souhaitez exporter.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> à l’aide de la <paramref name="args" /> et renvoie le résultat dans un <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation est effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 L’attribut de codage sur un `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.IO.TextWriter>. Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour obtenir des détails sur lequel `xsl:output` attributs sont pris en charge.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Un <see cref="T:System.Xml.XPath.XPathNavigator" /> contenant les données à transformer.</param>
        <param name="args">Un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenant les arguments qualifié d’espace de noms est utilisés comme entrée de la transformation.</param>
        <param name="output"><see cref="T:System.Xml.XmlWriter" /> vers lequel vous souhaitez exporter.</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre la fonction <c>document()</c> XSLT. S’il s’agit de <see langword="null" />, la fonction <c>document()</c> n’est pas résolue.  
  
Le <see cref="T:System.Xml.XmlResolver" /> n’est pas mis en cache après la <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> méthode se termine.</param>
        <summary>Transforme les données XML dans le <see cref="T:System.Xml.XPath.XPathNavigator" /> en utilisant les arguments spécifiés et renvoie le résultat dans un <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 <xref:System.Xml.Xsl.XslTransform> prend en charge la syntaxe XSLT 1.0. La feuille de style XSLT doit inclure la déclaration d’espace de noms `xmlns:xsl= http://www.w3.org/1999/XSL/Transform`.  
  
 Le `args` sont mis en correspondance avec la `xsl:param` éléments définis dans la feuille de style. Les sélections de transformation s’appliquent au document dans son ensemble. En d’autres termes, si le nœud actuel est défini sur une arborescence de nœuds autres que le nœud racine du document, cela n’empêche pas le processus de transformation d’accéder à tous les nœuds dans le document chargé. Une fois que la transformation est effectuée, le <xref:System.Xml.XPath.XPathNavigator> reste dans son état d’origine. Cela signifie que le nœud, qui est en cours avant la transformation, demeure le nœud actuel après le <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode a été appelée.  
  
 Le `xsl:output` élément n’est pas pris en charge lors de la sortie à un <xref:System.Xml.XmlWriter> (`xsl:output` est ignoré). Consultez [sorties à partir de XslTransform](~/docs/standard/data/xml/outputs-from-an-xsltransform.md) pour plus d’informations.  
  
   
  
## Examples  
 L’exemple suivant charge et modifie un document XML avant d’effectuer une transformation XSLT.  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Erreur lors du traitement de la transformation XSLT est survenu.  
  
Remarque : Il s’agit d’un changement de comportement par rapport aux versions précédentes. Une <see cref="T:System.Xml.Xsl.XsltException" /> est levée si vous utilisez Microsoft .NET Framework version 1.1 ou antérieure.</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">Implémentation de comportements discrétionnaires dans la classe XslTransform</related>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("You should pass XmlResolver to Transform() method")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Définit le <see cref="T:System.Xml.XmlResolver" /> utilisé pour résoudre des ressources externes lorsque la <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> méthode est appelée.</summary>
        <value>Le <see cref="T:System.Xml.XmlResolver" /> à utiliser pendant la transformation. Si la valeur <see langword="null" />, le fichier XSLT <c>document()</c> fonction n’est pas résolue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Le <xref:System.Xml.Xsl.XslTransform> classe est obsolète dans le .NET Framework version 2.0. Le <xref:System.Xml.Xsl.XslCompiledTransform> classe est le nouveau processeur XSLT. Pour plus d’informations, consultez [à l’aide de la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) et [migration à partir de la classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
 Dans la version 1.1 du .NET Framework, le niveau de confiance de l’application détermine le comportement par défaut :  
  
 `Fully trusted code:` Une valeur par défaut <xref:System.Xml.XmlUrlResolver> sans utilisateur les informations d’identification est utilisé pour résoudre le `document()` (fonction). Si l’authentification est nécessaire pour accéder à la ressource externe, utilisez cette propriété pour spécifier un <xref:System.Xml.XmlResolver> avec les informations d’identification nécessaires.  
  
 `Semi-trusted code:` La propriété est définie sur `null`, ce qui signifie que le `document()` fonction n’est pas résolue. Étant donné que la confiance totale est requise pour spécifier un <xref:System.Xml.XmlResolver>, cette propriété ne peut pas être définie.  
  
 Ce programme de résolution est utilisé lors de la transformation XSLT `document()` fonction est appelée. Il n’est pas utilisé pour résoudre `xsl:import` et `xsl:include` éléments référencés dans la feuille de style. Pour spécifier un <xref:System.Xml.XmlResolver> à utiliser pour résoudre `xsl:import` et `xsl:include` éléments référencés dans la feuille de style, utilisez le <xref:System.Xml.Xsl.XslTransform.Load%2A> surcharge, qui accepte un <xref:System.Xml.XmlResolver> comme l’un de ses arguments.  
  
> [!NOTE]
>  Cette propriété est obsolète dans la version 1.1 du .NET Framework. En spécifiant un <xref:System.Xml.XmlResolver> à l’aide de la <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode est la pratique recommandée. Dans ce cas, le <xref:System.Xml.XmlResolver> n’est pas mis en cache après la <xref:System.Xml.Xsl.XslTransform.Transform%2A> méthode se termine.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>